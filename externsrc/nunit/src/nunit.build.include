<?xml version="1.0"?>
<project name="NUnit" default="build" basedir=".">

  <!-- Init global settings if not already done. -->
  <call target="init-global-settings"
    unless="${property::exists('project.initialized')}"/>

  <!-- Command-line build configurations -->
  <target name="debug" description="Set config to debug">
    <call target="set-debug-build-config" />
  </target>

  <target name="release" description="Set config to release">
    <call target="set-release-build-config" />
  </target>

  <!-- Command-line runtime configurations -->
  <target name="net" description="Set runtime to .NET 1.1">
    <call target="set-net-1.1-runtime-config"/>
  </target>
    
  <target name="net-1.0" description="Set runtime to .NET 1.0">
    <call target="set-net-1.0-runtime-config"/>
  </target>

  <target name="net-1.1" description="Set runtime to .NET 1.1">
    <call target="set-net-1.1-runtime-config"/>
  </target>
      
  <target name="net-2.0" description="Set runtime to .NET 2.0">
    <call target="set-net-2.0-runtime-config"/>
  </target>
      
  <target name="mono" description="Set runtime to Mono">
    <call target="set-mono-1.0-runtime-config"/>
  </target>

  <target name="mono-1.0" description="Set runtime to Mono">
    <call target="set-mono-1.0-runtime-config"/>
  </target>

  <!-- Init global settings -->
  <target name="init-global-settings">

    <!-- Set Project name -->
    <property name="project.name" value="NUnit"/>

    <!-- If a sub-project build is being run, the
         project.src.dir will be set to a relative path -->
    <property name="project.src.dir"
      value="${path::get-full-path(project.src.dir)}"
      if="${property::exists('project.src.dir')}"/>
    <!-- Otherwise, it's the nant project base dir -->
    <property name="project.src.dir"
      value="${nant.project.basedir}"
      unless="${property::exists('project.src.dir')}"/>
    
    <!-- Project base dir is the src dir's parent -->
    <property name="project.base.dir"
      value="${path::get-directory-name(project.src.dir)}"/>

    <!-- Other directories are derived from src and base -->
    <property name="project.build.dir" 
      value="${path::combine(project.src.dir,'build')}"/>
    <property name="project.package.dir" 
      value="${path::combine(project.src.dir,'package')}"/>
    <property name="project.doc.dir"
      value="${path::combine(project.base.dir,'doc')}"/>
    <property name="project.samples.dir"
      value="${path::combine(project.base.dir,'samples')}"/>

    <!-- Frameworks supported by this build script. The first
         installed framework found is the default for builds. --> 
    <property name="supported.frameworks" 
      value="net-1.1,net-1.0,net-2.0,mono-1.0"/>
  
    <!-- Visual Studio locations -->
    <if test="${platform::is-win32()}">
      <readregistry property="vs.2002.path" 
        key="Software\Microsoft\VisualStudio\7.0\InstallDir" 
        hive="LocalMachine" failonerror="false"/>
      <echo message="VS 2002 targets are unavailable"
        unless="${property::exists( 'vs.2002.path' )}"/>
      <readregistry property="vs.2003.path" 
        key="Software\Microsoft\VisualStudio\7.1\InstallDir" 
        hive="LocalMachine" failonerror="false"/>
      <echo message="VS 2003 targets are unavailable"
        unless="${property::exists( 'vs.2003.path' )}"/>
      <readregistry property="vs.2005.path" 
        key="Software\Microsoft\VisualStudio\8.0\InstallDir" 
        hive="LocalMachine" failonerror="false"/>
      <echo message="VS 2005 targets are unavailable"
        unless="${property::exists( 'vs.2005.path' )}"/>
    </if>

    <!-- NUnit version for packaging -->
    <property name="package.version" value="2.2.8"/>

    <!-- Root of the package file name -->
    <property name="package.name" 
      value="${project.name}-${package.version}"/>

    <!-- Package directories -->
    <property name="package.working.dir" 
      value="${path::combine(project.package.dir,package.name)}"/>
    <property name="package.bin.dir" 
      value="${path::combine(package.working.dir,'bin')}"/>
    <property name="package.doc.dir" 
      value="${path::combine(package.working.dir,'doc')}"/>
    <property name="package.samples.dir" 
      value="${path::combine(package.working.dir,'samples')}"/>
    <property name="package.src.dir" 
      value="${path::combine(package.working.dir,'src')}"/>
    <property name="package.resource.dir"
      value="${path::combine(package.working.dir, 'resources')}"/>

    <!-- Default build configuration -->
    <property name="build.config" value="debug"/>
    <property name="build.clean" value="false"/>
    <property name="build.dir.set" value="false"/>

    <!-- Default runtime configuration -->
    <foreach item="String" delim="," 
        property="framework" in="${supported.frameworks}">
      <if test="${framework::sdk-exists( framework )}">
        <call target="set-${framework}-runtime-config" unless="${property::exists('runtime.config')}"/>
      </if>
    </foreach>

    <!-- Indicate that we initialized global settings -->
    <property name="project.initialized" value="true"/>

  </target>
 
  <!-- Set up build configuration -->
  <target name="set-build-config">
    <call target="set-${build.config}-build-config"/>
    <property name="build.dir.set" value="false"/>
  </target>

  <target name="set-debug-build-config">
    <property name="build.config" value="debug"/>
    <property name="build.debug" value="true"/>
    <property name="build.defines.csc" 
      value="DEBUG,TRACE" readonly="false" />
    <property name="build.defines.jsc" 
      value="DEBUG,TRACE" readonly="false" />
    <property name="build.defines.vbc" 
      value="DEBUG=True,TRACE=True" readonly="false" />
    <property name="build.defines.vjc"
      value="DEBUG,TRACE" readonly="false" />
    <property name="build.defines.cl"
      value="/D _DEBUG" readonly="false" />
    <property name="zip.build.suffix" value="-dbg"/>
    <property name="msi.build.suffix" value="-dbg"/>
  </target>
	
  <target name="set-release-build-config">
    <property name="build.config" value="release"/>
    <property name="build.debug" value="false"/>
    <property name="build.defines.csc"
      value="TRACE,STRONG" readonly="false" />
    <property name="build.defines.jsc"
      value="TRACE,STRONG" readonly="false" />
    <property name="build.defines.vbc"
      value="TRACE=True,STRONG=True" readonly="false" />
    <property name="build.defines.vjc"
      value="TRACE,STRONG" readonly="false" />
    <property name="build.defines.cl"
      value="/D STRONG" readonly="false" />
    <property name="zip.build.suffix" value=""/>
    <property name="msi.build.suffix" value=""/>
  </target>

  <!-- Set up runtime configuration -->
  <target name="set-runtime-config">   
    <call target="set-${runtime.config}-runtime-config"/>
    <property name="build.dir.set" value="false"/>
  </target>

  <target name="set-net-1.0-runtime-config">
    <fail unless="${framework::sdk-exists( 'net-1.0' )}"
      message="The .NET 1.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="1.0"/>
    <property name="runtime.config" value="net-1.0"/>
    <property name="build.mono" value="false"/>
    <property name="build.win32" value="true"/>
    <property name="nant.settings.currentframework" 
      value="net-1.0"/>
    <property name="zip.runtime.suffix" value="-net-1.0"/>
    <property name="msi.runtime.suffix" value="-net-1.0"/>
  </target>
	
  <target name="set-net-1.1-runtime-config">
    <property name="runtime.platform" value="net"/>
    <fail unless="${framework::sdk-exists( 'net-1.1' )}"
      message="The .NET 1.1 SDK is not configured or not installed"/>

    <property name="runtime.version" value="1.1"/>
    <property name="runtime.config" value="net-1.1"/>
    <property name="build.mono" value="false"/>
    <property name="build.win32" value="true"/>
    <property name="nant.settings.currentframework" 
      value="net-1.1"/>
    <property name="zip.runtime.suffix" value="-net-1.1"/>
    <!-- Note: no suffix for the msi -->
    <property name="msi.runtime.suffix" value=""/>
  </target>
	
  <target name="set-net-2.0-runtime-config">
    <fail unless="${framework::sdk-exists( 'net-2.0' )}"
      message="The .NET 2.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="2.0"/>
    <property name="runtime.config" value="net-2.0"/>
    <property name="build.mono" value="false"/>
    <property name="build.win32" value="true"/>
    <property name="nant.settings.currentframework" 
      value="net-2.0"/>
    <property name="zip.runtime.suffix" value="-net-2.0"/>
    <property name="msi.runtime.suffix" value="-net-2.0"/>
  </target>
	
  <target name="set-mono-1.0-runtime-config">
    <fail unless="${framework::sdk-exists( 'mono-1.0' )}"
      message="The Mono 1.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="mono"/>
    <property name="runtime.version" value="1.0"/>
    <property name="runtime.config" value="mono-1.0"/>
    <property name="build.mono" value="true"/>
    <property name="build.win32" value="false"/>
    <property name="nant.settings.currentframework" 
      value="mono-1.0"/>
    <property name="zip.runtime.suffix" value="-mono"/>
    <property name="msi.runtime.suffix" value="-mono"/>
  </target>

  <!-- Set up the build directory -->
  <target name="set-build-dir"
    depends="set-build-config,set-runtime-config">
    <property name="runtime.platform.dir"
      value="${path::combine(project.build.dir,runtime.platform)}"/>
    <property name="runtime.version.dir"
      value="${path::combine(runtime.platform.dir,runtime.version)}"/>
    <property name="current.build.dir" 
      value="${path::combine(runtime.version.dir,build.config)}"/>
    <property name="build.dir.set" value="true"/>
  </target>
  
  <target name="set-build-dir-if-needed">
    <call target="set-build-dir" unless="${build.dir.set}"/>
  </target>

  <target name="make-build-dir" depends="set-build-dir-if-needed">
    <mkdir dir="${current.build.dir}"
      unless="${directory::exists(current.build.dir)}"/>
  </target>

  <!-- Setup the package configuration info -->
  <target name="set-package-config"
    depends="set-build-config,set-runtime-config">
    <property name="zip.file.name" 
      value="${package.name}${zip.runtime.suffix}${zip.build.suffix}.zip"/>
    <property name="msi.file.name"
      value="${package.name}${msi.runtime.suffix}${msi.build.suffix}.msi"/>
    <property name="zipped.src.file.name"
      value="${package.name}-src.zip"/>
    <property name="zipped.resource.file.name"
      value="${package.name}-resources.zip"/>
  </target>

  <!-- Dump configuration settings for debugging -->
  <target name="dump-settings" depends="set-build-dir,set-package-config">
    <echo>Configuration</echo>
    <echo>  Config:       ${build.config}</echo>
    <echo>  Runtime:      ${runtime.config}</echo>
    <echo>  Version:      ${package.version}</echo>
    <echo>  Package name: ${package.name}</echo>
    <echo>  Zip file:     ${zip.file.name}</echo>
    <echo>  Msi file:     ${msi.file.name}</echo>
    <echo>  Source zip:   ${zipped.src.file.name}</echo>
    <echo></echo>
    <echo>Project Directories</echo>
    <echo>  Base:         ${project.base.dir}</echo>
    <echo>  Doc:          ${project.doc.dir}</echo>
    <echo>  Samples:      ${project.samples.dir}</echo>
    <echo>  Source:       ${project.src.dir}</echo>
    <echo>  Build:        ${project.build.dir}</echo>
    <echo>  Package:      ${project.package.dir}</echo>
    <echo></echo>
    <echo>Current Build Directories</echo>
    <echo>  Build:        ${current.build.dir}</echo>
    <echo></echo>
    <echo>Package Directories</echo>
    <echo>  Working:      ${package.working.dir}</echo>
    <echo>  Bin:          ${package.bin.dir}</echo>
    <echo>  Doc:          ${package.doc.dir}</echo>
    <echo>  Samples:      ${package.samples.dir}</echo>
    <echo>  Source:       ${package.src.dir}</echo>
    <echo></echo>
    <echo>System Directories</echo>
    <echo>  Framework:    ${nant.settings.currentframework.frameworkdirectory}</echo>
    <echo>  SDK:          ${nant.settings.currentframework.sdkdirectory}</echo>
    <echo>  VS 2002:      ${vs.2002.path}</echo>
    <echo>  VS 2003:      ${vs.2003.path}</echo>
    <echo>  VS 2005:      ${vs.2005.path}</echo>
  </target>

</project>