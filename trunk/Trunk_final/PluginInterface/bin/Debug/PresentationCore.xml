<?xml version="1.0" encoding="utf-8"?>
<doc>
	<assembly>
		<name>PresentationCore</name>
	</assembly>
	<members>
		<member name="T:System.IO.Packaging.PackWebRequest">
			<summary>Overloads WebRequest, so that pack TLA#tla_uri#plural for package parts can be requested and resolved correctly. </summary>
		</member>
		<member name="M:System.IO.Packaging.PackWebRequest.GetRequestStream">
			<summary>Do not use—calling will raise a NotSupportedException. </summary>
			<returns>The request stream.</returns>
			<exception cref="T:System.NotSupportedException">Occurs on any call to GetRequestStream.  The GTMT#pack URI protocol does not support writing.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackWebRequest.GetResponse">
			<summary> Returns a response object. </summary>
			<returns>The response object. Per the signature of the base class, this return value is typed WebResponse, but it is actually the derived PackWebResponse class, representing a response that is particular to the pack protocol.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackWebRequest.ConnectionGroupName">
			<summary> Gets or sets the name of the connection group for the request. </summary>
			<returns>The connection group name.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackWebRequest.ContentLength">
			<summary> Gets or sets the Content-length TLA#tla_http header. </summary>
			<returns>The content length, in bytes.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackWebRequest.ContentType">
			<summary> Gets or sets the Content-type TLA#tla_http header. </summary>
			<returns>Contents of the header.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackWebRequest.Credentials">
			<summary> Gets or sets the provided authentication information for the request. </summary>
			<returns>The authentication information object.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackWebRequest.Headers">
			<summary> Gets or sets the collection of header name-value pairs associated with the request. </summary>
			<returns>Header collection object.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackWebRequest.Method">
			<summary> Gets or sets the method for the request. </summary>
			<returns>The method name.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackWebRequest.PreAuthenticate">
			<summary> Gets or sets a value indicating whether to send an authenticate header with the request. </summary>
			<returns>true to send a WWW-authenticate TLA#tla_http header with the initial request; otherwise, false. </returns>
		</member>
		<member name="P:System.IO.Packaging.PackWebRequest.Proxy">
			<summary> Gets or sets proxy information for the request. </summary>
			<returns>Proxy information object.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackWebRequest.RequestUri">
			<summary>Gets the original TLA#tla_uri of the request. </summary>
			<returns>The request TLA2#tla_uri.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackWebRequest.Timeout">
			<summary> Gets or sets the time-out value for a request. </summary>
			<returns>The number of milliseconds to wait before the request times out.</returns>
		</member>
		<member name="T:System.IO.Packaging.PackWebRequestFactory">
			<summary>Represents the class invoked when the TLA#tla_netframewk recognizes a GTMT#pack URIWebRequest.    </summary>
		</member>
		<member name="M:System.IO.Packaging.PackWebRequestFactory.#ctor">
			<summary> Initializes a new instance of the PackWebRequestFactory class. </summary>
		</member>
		<member name="M:System.IO.Packaging.PackWebRequestFactory.System.Net.IWebRequestCreate.Create(System.Uri)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.  Use the type-safe PackUriHelper method instead. </summary>
			<returns>The GTMT#pack URI Web request.</returns>
			<param name="uri">The TLA2#tla_uri to create the Web request.</param>
		</member>
		<member name="T:System.IO.Packaging.PackWebResponse">
			<summary> Represents a GTMT#pack URI Web response. </summary>
		</member>
		<member name="M:System.IO.Packaging.PackWebResponse.GetResponseStream">
			<summary> Gets the response stream contained in the PackWebResponse. </summary>
			<returns>The response stream.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackWebResponse.ContentLength">
			<summary> Gets the content length of the response. </summary>
			<returns>Content length, in bytes.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackWebResponse.ContentType">
			<summary> Gets the TLA#tla_mime content type of the response stream's content. </summary>
			<returns>The TLA2#tla_mime type of the stream's content.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackWebResponse.Headers">
			<summary> Gets the collection of Web Headers for this response. </summary>
			<returns>The collection of Web response Headers.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackWebResponse.InnerResponse">
			<summary> Gets the inner WebResponse object for the response. </summary>
			<returns>The response data as a WebResponse.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackWebResponse.IsFromCache">
			<summary> Gets a value indicating whether the response is from the package cache or from a Web request. </summary>
			<returns>true if the response is from the package cache, or false when the response is from a Web request.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackWebResponse.ResponseUri">
			<summary> Gets the TLA#tla_uri of the response. </summary>
			<returns>The TLA2#tla_uri of the response.</returns>
		</member>
		<member name="T:System.Windows.AutoResizedEventArgs">
			<summary>Provides data for the <see cref="E:System.Windows.Interop.HwndSource.AutoResized"></see> event raised by a <see cref="T:System.Windows.Interop.HwndSource"></see>.</summary>
		</member>
		<member name="M:System.Windows.AutoResizedEventArgs.#ctor(System.Windows.Size)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.AutoResizedEventArgs"></see> class. </summary>
			<param name="size">The window size to be communicated as data.</param>
		</member>
		<member name="P:System.Windows.AutoResizedEventArgs.Size">
			<summary>Gets the new size of the window after the auto resize.</summary>
			<returns>Size of the window after resizing.</returns>
		</member>
		<member name="T:System.Windows.AutoResizedEventHandler">
			<summary>Represents the method used to handle the <see cref="E:System.Windows.Interop.HwndSource.AutoResized"></see> event as raised by <see cref="T:System.Windows.Interop.HwndSource"></see>.</summary>
		</member>
		<member name="T:System.Windows.BaselineAlignment">
			<summary>Describes how the baseline for a text-based element is positioned on the vertical axis.</summary>
		</member>
		<member name="F:System.Windows.BaselineAlignment.Baseline">
			<summary>A baseline that is aligned at the actual baseline of the containing box.</summary>
		</member>
		<member name="F:System.Windows.BaselineAlignment.Bottom">
			<summary>A baseline that is aligned at the lower edge of the containing box.</summary>
		</member>
		<member name="F:System.Windows.BaselineAlignment.Center">
			<summary>A baseline that is aligned to the center of the containing box.</summary>
		</member>
		<member name="F:System.Windows.BaselineAlignment.Subscript">
			<summary>A baseline that is aligned at the subscript position of the containing box.</summary>
		</member>
		<member name="F:System.Windows.BaselineAlignment.Superscript">
			<summary>A baseline that is aligned at the superscript position of the containing box.</summary>
		</member>
		<member name="F:System.Windows.BaselineAlignment.TextBottom">
			<summary>A baseline that is aligned at the lower edge of the containing box for text.</summary>
		</member>
		<member name="F:System.Windows.BaselineAlignment.TextTop">
			<summary>A baseline that is aligned at the upper edge of the containing box for text.</summary>
		</member>
		<member name="F:System.Windows.BaselineAlignment.Top">
			<summary>A baseline that is aligned to the upper edge of the containing box.</summary>
		</member>
		<member name="T:System.Windows.Clipboard">
			<summary>Provides static methods that facilitate transferring data to and from the system clipboard.</summary>
		</member>
		<member name="M:System.Windows.Clipboard.Clear">
			<summary>Clears any data from the system clipboard.</summary>
		</member>
		<member name="M:System.Windows.Clipboard.ContainsAudio">
			<summary>Queries the clipboard for the presence of data in the <see cref="F:System.Windows.DataFormats.WaveAudio"></see> data format.</summary>
			<returns>true if the clipboard contains data in the <see cref="F:System.Windows.DataFormats.WaveAudio"></see> data format; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Clipboard.ContainsData(System.String)">
			<summary>Queries the clipboard for the presence of data in a specified data format.</summary>
			<returns>true if data in the specified format is available on the clipboard; otherwise, false.  See Remarks.</returns>
			<param name="format">A member of the <see cref="T:System.Windows.TextDataFormat"></see> enumeration that specifies the text data format to query for.</param>
			<exception cref="T:System.ArgumentNullException">Raised when format is null.</exception>
		</member>
		<member name="M:System.Windows.Clipboard.ContainsFileDropList">
			<summary>Queries the clipboard for the presence of data in the <see cref="F:System.Windows.DataFormats.FileDrop"></see> data format.</summary>
			<returns>true if the clipboard contains data in the <see cref="F:System.Windows.DataFormats.FileDrop"></see> data format; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Clipboard.ContainsImage">
			<summary>Queries the clipboard for the presence of data in the <see cref="F:System.Windows.DataFormats.Bitmap"></see> data format.</summary>
			<returns>true if the clipboard contains data in the <see cref="F:System.Windows.DataFormats.Bitmap"></see> data format; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Clipboard.ContainsText">
			<summary>Queries the clipboard for the presence of data in the <see cref="F:System.Windows.DataFormats.UnicodeText"></see> format.</summary>
			<returns>true if the clipboard contains data in the <see cref="F:System.Windows.DataFormats.UnicodeText"></see> data format; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Clipboard.ContainsText(System.Windows.TextDataFormat)">
			<summary>Queries the clipboard for the presence of data in a text data format.</summary>
			<returns>true if the clipboard contains data in the specified text data format; otherwise, false.</returns>
			<param name="format">A member of the <see cref="T:System.Windows.TextDataFormat"></see> enumeration that specifies the text data format to query for.</param>
			<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Raised when format does not specify a valid member of <see cref="T:System.Windows.TextDataFormat"></see>.</exception>
		</member>
		<member name="M:System.Windows.Clipboard.GetAudioStream">
			<summary>Returns a stream to clipboard data in the <see cref="F:System.Windows.DataFormats.WaveAudio"></see> data format.</summary>
			<returns>A stream containing the data in the <see cref="F:System.Windows.DataFormats.WaveAudio"></see> format, or null if the clipboard does not contain data in this format.</returns>
		</member>
		<member name="M:System.Windows.Clipboard.GetData(System.String)">
			<summary>Retrieves data in a specified format from the clipboard.</summary>
			<returns>An object that contains the data in the specified format, or null if the data is unavailable in the specified format.</returns>
			<param name="format">A string that specifies what format to retrieve the data as. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of predefined data formats.</param>
			<exception cref="T:System.ArgumentNullException">Raised when format is null.</exception>
		</member>
		<member name="M:System.Windows.Clipboard.GetDataObject">
			<summary>Returns a data object that represents the entire contents of the clipboard.</summary>
			<returns>A data object (an object that implements the <see cref="T:System.Windows.IDataObject"></see> interface) that enables access to the entire contents of the system clipboard, or null if there is no data on the clipboard.</returns>
		</member>
		<member name="M:System.Windows.Clipboard.GetFileDropList">
			<summary>Returns a string collection that contains a list of dropped files available on the clipboard.</summary>
			<returns>A collection of strings, where each string specifies the name of a file in the list of dropped files on the clipboard, or null if the data is unavailable in this format.</returns>
		</member>
		<member name="M:System.Windows.Clipboard.GetImage">
			<summary>Returns a <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> object from the clipboard that contains data in the <see cref="F:System.Windows.DataFormats.Bitmap"></see> format.</summary>
			<returns>A <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> object that contains data in the <see cref="F:System.Windows.DataFormats.Bitmap"></see> format, or null if the data is unavailable in this format.</returns>
		</member>
		<member name="M:System.Windows.Clipboard.GetText">
			<summary>Returns a string containing the <see cref="F:System.Windows.DataFormats.UnicodeText"></see> data on the clipboard.</summary>
			<returns>A string containing the <see cref="F:System.Windows.DataFormats.UnicodeText"></see> data , or an empty string if no <see cref="F:System.Windows.DataFormats.UnicodeText"></see> data is available on the clipboard.</returns>
		</member>
		<member name="M:System.Windows.Clipboard.GetText(System.Windows.TextDataFormat)">
			<summary>Returns a string containing text data on the clipboard.  The specific data format of the text data to retrieve is specified with a member of <see cref="T:System.Windows.TextDataFormat"></see>.</summary>
			<returns>A string containing text data in the specified data format, or an empty string if no corresponding text data is available.</returns>
			<param name="format">A member of <see cref="T:System.Windows.TextDataFormat"></see> specifying the specific text data format to retrieve.</param>
		</member>
		<member name="M:System.Windows.Clipboard.IsCurrent(System.Windows.IDataObject)">
			<summary>Compares a specified data object to the contents of the clipboard.</summary>
			<returns>true if the specified data object matches what is on the system clipboard; otherwise, false.</returns>
			<param name="data">A data object to compare to the contents of the system clipboard.</param>
			<exception cref="T:System.Runtime.InteropServices.ExternalException">Raised if an error occurs when accessing the clipboard.  The exception details will include an HRESULT that identifies the specific error.</exception>
			<exception cref="T:System.ArgumentNullException">Raised when data is null.</exception>
		</member>
		<member name="M:System.Windows.Clipboard.SetAudio(System.Byte[])">
			<summary>Stores audio data (<see cref="F:System.Windows.DataFormats.WaveAudio"></see> data format) on the clipboard.  The audio data is specified as a byte array.</summary>
			<param name="audioBytes">A byte array containing audio data to store on the clipboard.</param>
			<exception cref="T:System.ArgumentNullException">Raised when audioBytes is null.</exception>
		</member>
		<member name="M:System.Windows.Clipboard.SetAudio(System.IO.Stream)">
			<summary>Stores audio data (<see cref="F:System.Windows.DataFormats.WaveAudio"></see> data format) on the clipboard.  The audio data is specified as a stream.</summary>
			<param name="audioStream">A stream containing audio data to store on the clipboard.</param>
			<exception cref="T:System.ArgumentNullException">Raised when audioStream is null.</exception>
		</member>
		<member name="M:System.Windows.Clipboard.SetData(System.String,System.Object)">
			<summary>Stores the specified data on the clipboard, along with one or more specified data formats.</summary>
			<param name="data">An object representing the data to store on the clipboard.</param>
			<param name="format">A string that specifies what format to store the data in. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of predefined data formats.</param>
		</member>
		<member name="M:System.Windows.Clipboard.SetDataObject(System.Object)">
			<summary>Places a specified data object on the system clipboard.</summary>
			<param name="data">A data object (an object that implements <see cref="T:System.Windows.IDataObject"></see>) to place on the system clipboard.</param>
			<exception cref="T:System.ArgumentNullException">Raised when audioStream is null.</exception>
			<exception cref="T:System.Runtime.InteropServices.ExternalException">Raised if an error occurs when accessing the clipboard.  The exception details will include an HRESULT that identifies the specific error.</exception>
		</member>
		<member name="M:System.Windows.Clipboard.SetDataObject(System.Object,System.Boolean)">
			<summary>Places a specified data object on the system clipboard, and accepts a Boolean parameter that indicates whether the data object should be left on the clipboard when the application exits.</summary>
			<param name="copy">true to leave the data on the system clipboard when the application exits; false to clear the data from the system clipboard when the application exits.</param>
			<param name="data">A data object (an object that implements <see cref="T:System.Windows.IDataObject"></see>) to place on the system clipboard.</param>
			<exception cref="T:System.ArgumentNullException">Raised when audioStream is null.</exception>
			<exception cref="T:System.Runtime.InteropServices.ExternalException">Raised if an error occurs when accessing the clipboard.  The exception details will include an HRESULT that identifies the specific error.</exception>
		</member>
		<member name="M:System.Windows.Clipboard.SetFileDropList(System.Collections.Specialized.StringCollection)">
			<summary>Stores <see cref="F:System.Windows.DataFormats.FileDrop"></see> data on the clipboard.  The dropped file list is specified as a string collection.</summary>
			<param name="fileDropList">A string collection that contains the dropped file list to store in the data object.</param>
			<exception cref="T:System.ArgumentException">Raised when fileDropList contains zero strings, or when the full path to file specified in the list cannot be resolved.</exception>
			<exception cref="T:System.ArgumentNullException">Raised when fileDropList is null.</exception>
		</member>
		<member name="M:System.Windows.Clipboard.SetImage(System.Windows.Media.Imaging.BitmapSource)">
			<summary>Stores <see cref="F:System.Windows.DataFormats.Bitmap"></see> data on the clipboard.  The image data is specified as a <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>.</summary>
			<param name="image">A <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> object containing the image data to store on the clipboard.</param>
		</member>
		<member name="M:System.Windows.Clipboard.SetText(System.String)">
			<summary>Stores <see cref="F:System.Windows.DataFormats.UnicodeText"></see> data on the clipboard.  The <see cref="F:System.Windows.DataFormats.UnicodeText"></see> data to store is specified as a string.</summary>
			<param name="text">A string containing the <see cref="F:System.Windows.DataFormats.UnicodeText"></see> data to store on the clipboard.</param>
			<exception cref="T:System.ArgumentNullException">Raised when textData is null.</exception>
		</member>
		<member name="M:System.Windows.Clipboard.SetText(System.String,System.Windows.TextDataFormat)">
			<summary>Stores text data on the clipboard in a specified text data format.  The <see cref="F:System.Windows.DataFormats.UnicodeText"></see> data to store is specified as a string.</summary>
			<param name="format">A member of <see cref="T:System.Windows.TextDataFormat"></see> specifying the specific text data format to store.</param>
			<param name="text">A string containing the text data to store on the clipboard.</param>
			<exception cref="T:System.ArgumentNullException">Raised when text is null.</exception>
		</member>
		<member name="T:System.Windows.ContentElement">
			<summary>Provides a core-level base class for content elements. Content elements are designed for flow-style presentation, using an intuitive markup-oriented layout model and a deliberately simple object model. </summary>
		</member>
		<member name="M:System.Windows.ContentElement.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.ContentElement"></see> class. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.DragEnter">
			<summary> Occurs when the input system reports an underlying drag event (from <see cref="T:System.Windows.DragDrop"></see> TLA#tla_api#plural) with this element (or a child element along the event route) as the drag target. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.DragLeave">
			<summary> Occurs when the input system reports an underlying drag event (from <see cref="T:System.Windows.DragDrop"></see> TLA#tla_api#plural) with this element  (or a child element along the event route) as the drag origin. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.DragOver">
			<summary> Occurs when the input system reports an underlying drag event (from <see cref="T:System.Windows.DragDrop"></see> TLA#tla_api#plural) with this element (or a child element along the event route) as drag target. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.Drop">
			<summary> Occurs when the input system reports an underlying drop event (from <see cref="T:System.Windows.DragDrop"></see> TLA#tla_api#plural) with this element (or a child element along the event route) as drop target. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.FocusableChanged">
			<summary>Occurs when the effective value of the <see cref="P:System.Windows.ContentElement.Focusable"></see> property changes.</summary>
		</member>
		<member name="E:System.Windows.ContentElement.GiveFeedback">
			<summary> Occurs when the input system reports an underlying drag-and-drop event (from <see cref="T:System.Windows.DragDrop"></see> TLA#tla_api#plural) involving this element (or a child element along the event route). </summary>
		</member>
		<member name="E:System.Windows.ContentElement.GotFocus">
			<summary>Occurs when this element (or a child element along the event route) gets logical focus. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.GotKeyboardFocus">
			<summary> Occurs when the keyboard is focused on this element (or a child element along the event route). </summary>
		</member>
		<member name="E:System.Windows.ContentElement.GotMouseCapture">
			<summary> Occurs when this element (or a child element along the route) captures the mouse. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.GotStylusCapture">
			<summary> Occurs when this element (or a child element along the route) captures the stylus. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.IsEnabledChanged">
			<summary> Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsEnabled"></see> property on this element changes. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.IsKeyboardFocusedChanged">
			<summary> Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsKeyboardFocused"></see> property changes on this element. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged">
			<summary> Occurs when the value of the <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged"></see> property changes on this element. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.IsMouseCapturedChanged">
			<summary> Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsMouseCaptured"></see> property changes on this element. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged">
			<summary>Occurs when the effective value of the <see cref="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty"></see> changes on this element.</summary>
		</member>
		<member name="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged">
			<summary> Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver"></see> property changes on this element. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.IsStylusCapturedChanged">
			<summary> Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsStylusCaptured"></see> property changes on this element. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged">
			<summary> Occurs when the effective value of the <see cref="F:System.Windows.ContentElement.IsStylusCaptureWithinProperty"></see> changes on this element. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged">
			<summary> Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver"></see> property changes on this element. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.KeyDown">
			<summary> Occurs when a key is pressed while the keyboard is focused on this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.ContentElement.KeyUp">
			<summary> Occurs when a key is released while the keyboard is focused on this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.ContentElement.LostFocus">
			<summary>Occurs when this element (or a child element along the event route) loses logical focus. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.LostKeyboardFocus">
			<summary> Occurs when the keyboard is no longer focused on this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.ContentElement.LostMouseCapture">
			<summary> Occurs when this element (or a child element along the route) loses mouse capture. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.LostStylusCapture">
			<summary> Occurs when this element (or a child element along the route) loses stylus capture. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.MouseDown">
			<summary>Occurs when any mouse button is depressed over this element, or another element along a bubbling route in this element's UI tree.</summary>
		</member>
		<member name="E:System.Windows.ContentElement.MouseEnter">
			<summary> Occurs when the mouse pointer enters the boundaries of this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.ContentElement.MouseLeave">
			<summary> Occurs when the mouse pointer leaves the boundaries of this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.ContentElement.MouseLeftButtonDown">
			<summary> Occurs when the left mouse button is pressed while the mouse pointer is over this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.ContentElement.MouseLeftButtonUp">
			<summary> Occurs when the left mouse button is released while the mouse pointer is over this element. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.MouseMove">
			<summary> Occurs when the mouse pointer moves over this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.ContentElement.MouseRightButtonDown">
			<summary> Occurs when the right mouse button is pressed while the mouse pointer is over this element. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.MouseRightButtonUp">
			<summary> Occurs when the right mouse button is released while the mouse pointer is over this element. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.MouseUp">
			<summary>Occurs when any mouse button is released over this element, or another element along a bubbling route in this element's UI tree.</summary>
		</member>
		<member name="E:System.Windows.ContentElement.MouseWheel">
			<summary> Occurs when the user rotates the mouse wheel while the mouse pointer is over this element (or a child element along the route), or while that element has focus or mouse capture. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewDragEnter">
			<summary> Occurs when the input system reports an underlying drag event (from <see cref="T:System.Windows.DragDrop"></see> TLA#tla_api#plural) with this element (or a child element along the route) as drag target. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewDragLeave">
			<summary> Occurs when the input system reports an underlying drag event (from <see cref="T:System.Windows.DragDrop"></see> TLA#tla_api#plural) with this element (or a child element alogn the route) as drag origin. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewDragOver">
			<summary> Occurs when the input system reports an underlying drag event (from <see cref="T:System.Windows.DragDrop"></see> TLA#tla_api#plural) with this element (or a child element along the route) as drag target. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewDrop">
			<summary> Occurs when the input system reports an underlying drop event (from <see cref="T:System.Windows.DragDrop"></see> TLA#tla_api#plural) with this element (or a child element along the route) as drop target. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewGiveFeedback">
			<summary> Occurs when a drag-and-drop operation is started.  </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
			<summary> Occurs when the keyboard is focused on this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewKeyDown">
			<summary> Occurs when a key is pressed while the keyboard is focused on this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewKeyUp">
			<summary> Occurs when a key is released while the keyboard is focused on this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
			<summary> Occurs when the keyboard is no longer focused on this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewMouseDown">
			<summary>Occurs when any mouse button is depressed over this element, or another element along a tunneling route in this element's UI tree.</summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
			<summary> Occurs when the left mouse button is pressed while the mouse pointer is over this element. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
			<summary> Occurs when the left mouse button is released while the mouse pointer is over this element. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewMouseMove">
			<summary> Occurs when the mouse pointer moves over this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
			<summary> Occurs when the right mouse button is pressed while the mouse pointer is over the element. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
			<summary> Occurs when the right mouse button is released while the mouse pointer is over this element. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewMouseUp">
			<summary>Occurs when any mouse button is released over this element, or another element along a tunneling route in this element's UI tree.</summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewMouseWheel">
			<summary> Occurs when the user rotates the mouse wheel while the mouse pointer is over this element (or a child element along the route), or while an element has focus or mouse capture. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
			<summary> Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewStylusButtonDown">
			<summary>Occurs when the stylus button is depressed over this element, or another element along a tunneling route in this element's UI tree.</summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewStylusButtonUp">
			<summary>Occurs when the stylus button is released over this element, or another element along a tunneling route in this element's UI tree.</summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewStylusDown">
			<summary> Occurs when the stylus touches the GTMT#digitizer over this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewStylusInAirMove">
			<summary> Occurs when the stylus moves over an element without actually touching the GTMT#digitizer. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewStylusInRange">
			<summary> Occurs when the stylus is close enough to the GTMT#digitizer to be detected. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewStylusMove">
			<summary> Occurs when the stylus cursor moves over the element. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
			<summary> Occurs when the stylus is too far from the GTMT#digitizer to be detected. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
			<summary> Occurs when a user performs one of several stylus gestures (see <see cref="T:System.Windows.Input.SystemGesture"></see>).</summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewStylusUp">
			<summary> Occurs when the user raises the stylus off of the GTMT#digitizer over this element. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.PreviewTextInput">
			<summary> Occurs when this element (or a child element in the route) gets text in a device-independent fashion. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.QueryContinueDrag">
			<summary>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.QueryCursor">
			<summary> Occurs when the cursor is requested to display. This event is raised on elements whenever the mouse pointer moves to a new location, which makes it possible that the cursor needs to be changed based on its new position. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.StylusButtonDown">
			<summary>Occurs when the stylus button is depressed over this element, or another element along a bubbling route in this element's UI tree.</summary>
		</member>
		<member name="E:System.Windows.ContentElement.StylusButtonUp">
			<summary>Occurs when the stylus button is released over this element, or another element along a bubbling route in this element's UI tree.</summary>
		</member>
		<member name="E:System.Windows.ContentElement.StylusDown">
			<summary> Occurs when the stylus touches the GTMT#digitizer over this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.ContentElement.StylusEnter">
			<summary> Occurs when the stylus cursor enters the bounds of this element. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.StylusInAirMove">
			<summary> Occurs when the stylus moves over an element without actually touching the GTMT#digitizer. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.StylusInRange">
			<summary> Occurs when the stylus is close enough to the GTMT#digitizer to be detected. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.StylusLeave">
			<summary> Occurs when the stylus cursor leaves the bounds of the element. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.StylusMove">
			<summary> Occurs when the stylus cursor moves over this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.ContentElement.StylusOutOfRange">
			<summary> Occurs when the stylus is too far from the GTMT#digitizer to be detected. </summary>
		</member>
		<member name="E:System.Windows.ContentElement.StylusSystemGesture">
			<summary> Occurs when a user performs one of several stylus gestures (see <see cref="T:System.Windows.Input.SystemGesture"></see>).</summary>
		</member>
		<member name="E:System.Windows.ContentElement.StylusUp">
			<summary> Occurs when the user raises the stylus off of the GTMT#digitizer over this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.ContentElement.TextInput">
			<summary> Occurs when this element (or a child element along the route) gets text in a device-independent fashion. </summary>
		</member>
		<member name="F:System.Windows.ContentElement.AllowDropProperty">
			<summary> Identifies the <see cref="P:System.Windows.ContentElement.AllowDrop"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.ContentElement.AllowDrop"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.DragEnterEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.DragEnter"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.DragEnter"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.DragLeaveEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.DragLeave"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.DragLeave"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.DragOverEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.DragOver"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.DragOver"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.DropEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.DragOver"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.DragOver"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.FocusableProperty">
			<summary> Identifies the <see cref="P:System.Windows.ContentElement.Focusable"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.ContentElement.Focusable"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.GiveFeedbackEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.GiveFeedback"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.GiveFeedback"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.GotFocusEvent">
			<summary>Identifies the <see cref="E:System.Windows.ContentElement.GotFocus"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.GotFocus"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.GotKeyboardFocusEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.GotKeyboardFocus"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.GotKeyboardFocus"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.GotMouseCaptureEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.GotMouseCapture"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.GotMouseCapture"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.GotStylusCaptureEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.GotStylusCapture"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.GotStylusCapture"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.IsEnabledProperty">
			<summary> Identifies the <see cref="P:System.Windows.ContentElement.IsEnabled"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsEnabled"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.IsFocusedProperty">
			<summary> Identifies the <see cref="P:System.Windows.ContentElement.IsFocused"></see> GTMT#dependency property. </summary>
			<returns>The <see cref="P:System.Windows.ContentElement.IsFocused"></see> GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.IsKeyboardFocusedProperty">
			<summary> Identifies the <see cref="P:System.Windows.ContentElement.IsKeyboardFocused"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsKeyboardFocused"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.IsKeyboardFocusWithinProperty">
			<summary> Identifies the <see cref="P:System.Windows.ContentElement.IsKeyboardFocusWithin"></see> GTMT#dependency property. </summary>
			<returns>The <see cref="P:System.Windows.ContentElement.IsKeyboardFocusWithin"></see> GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.IsMouseCapturedProperty">
			<summary> Identifies the <see cref="P:System.Windows.ContentElement.IsMouseCaptured"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsMouseCaptured"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty">
			<summary> Identifies the <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.IsMouseDirectlyOverProperty">
			<summary> Identifies the <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.IsMouseOverProperty">
			<summary> Identifies the <see cref="P:System.Windows.ContentElement.IsMouseOver"></see> GTMT#dependency property. </summary>
			<returns>The <see cref="P:System.Windows.ContentElement.IsMouseOver"></see> GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.IsStylusCapturedProperty">
			<summary> Identifies the <see cref="P:System.Windows.ContentElement.IsStylusCaptured"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsStylusCaptured"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.IsStylusCaptureWithinProperty">
			<summary> Identifies the <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.IsStylusDirectlyOverProperty">
			<summary> Identifies the <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.IsStylusOverProperty">
			<summary> Identifies the <see cref="P:System.Windows.ContentElement.IsStylusOver"></see> GTMT#dependency property. </summary>
			<returns>The <see cref="P:System.Windows.ContentElement.IsStylusOver"></see> GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.KeyDownEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.KeyDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.KeyDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.KeyUpEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.KeyUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.KeyUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.LostFocusEvent">
			<summary>Identifies the <see cref="E:System.Windows.ContentElement.LostFocus"></see> routed event.</summary>
			<returns>The <see cref="E:System.Windows.ContentElement.LostFocus"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.LostKeyboardFocusEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.LostKeyboardFocus"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.LostKeyboardFocus"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.LostMouseCaptureEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.LostMouseCapture"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.LostMouseCapture"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.LostStylusCaptureEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.LostStylusCapture"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.LostStylusCapture"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.MouseDownEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.MouseDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.MouseDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.MouseEnterEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.MouseEnter"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.MouseEnter"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.MouseLeaveEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.MouseLeave"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.MouseLeave"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.MouseLeftButtonDownEvent">
			<summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.MouseLeftButtonUpEvent">
			<summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.MouseMoveEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.MouseMove"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.MouseMove"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.MouseRightButtonDownEvent">
			<summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseRightButtonDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.MouseRightButtonDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.MouseRightButtonUpEvent">
			<summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseRightButtonUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.MouseRightButtonUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.MouseUpEvent">
			<summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.MouseUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.MouseWheelEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.MouseWheel"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.MouseWheel"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewDragEnterEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.PreviewDragEnter"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewDragEnter"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewDragLeaveEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.PreviewDragLeave"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewDragLeave"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewDragOverEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.PreviewDragOver"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewDragOver"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewDropEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.PreviewDrop"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewDrop"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.PreviewGiveFeedback"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewGiveFeedback"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewKeyDownEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.PreviewKeyDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewKeyDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewKeyUpEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.PreviewKeyUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewKeyUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewMouseDownEvent">
			<summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewMouseDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent">
			<summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent">
			<summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewMouseMoveEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseMove"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewMouseMove"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent">
			<summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent">
			<summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewMouseUpEvent">
			<summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewMouseUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewMouseWheelEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseWheel"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewMouseWheel"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusButtonDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewStylusButtonDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusButtonUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewStylusButtonUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewStylusDownEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewStylusDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewStylusInRangeEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusInRange"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewStylusInRange"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewStylusMoveEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusMove"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewStylusMove"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewStylusUpEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewStylusUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.PreviewTextInputEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.PreviewTextInput"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.PreviewTextInput"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.QueryContinueDragEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.QueryContinueDrag"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.QueryContinueDrag"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.QueryCursorEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.QueryCursor"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.QueryCursor"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.StylusButtonDownEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.StylusButtonDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.StylusButtonDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.StylusButtonUpEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.StylusButtonUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.StylusButtonUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.StylusDownEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.StylusDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.StylusDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.StylusEnterEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.StylusEnter"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.StylusEnter"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.StylusInAirMoveEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.StylusInAirMove"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.StylusInAirMove"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.StylusInRangeEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.StylusInRange"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.StylusInRange"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.StylusLeaveEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.StylusLeave"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.StylusLeave"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.StylusMoveEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.StylusMove"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.StylusMove"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.StylusOutOfRangeEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.StylusOutOfRange"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.StylusOutOfRange"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.StylusSystemGestureEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.StylusSystemGesture"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.StylusSystemGesture"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.StylusUpEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.StylusUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.StylusUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.ContentElement.TextInputEvent">
			<summary> Identifies the <see cref="E:System.Windows.ContentElement.TextInput"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.ContentElement.TextInput"></see> event's identifier.</returns>
		</member>
		<member name="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
			<summary> Adds a GTMT#routed event handler for a given GTMT#routed event to this element. </summary>
			<param name="routedEvent">Identifier object for the GTMT#routed event being handled.</param>
			<param name="handler">A reference to the handler implementation.</param>
		</member>
		<member name="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
			<summary> Adds a GTMT#routed event handler for a given GTMT#routed event to this element, with the option of having the provided handler be invoked even in cases of GTMT#routed event that had already been marked as handled by another element along the route. </summary>
			<param name="handledEventsToo">Declares whether the handler should be invoked in cases where the GTMT#routed event has already been marked as handled. true denotes that the handler should be invoked even for cases where the GTMT#routed event is marked handled in its arguments object. false denotes that handler should not be invoked if the GTMT#routed event is already marked handled. The default is false. Asking to handle already-handled routed events is not common.</param>
			<param name="routedEvent">Identifier object for the GTMT#routed event being handled.</param>
			<param name="handler">A reference to the handler implementation.</param>
		</member>
		<member name="M:System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
			<summary> Adds handlers for this instance of the <see cref="T:System.Windows.ContentElement"></see> to the given <see cref="T:System.Windows.EventRoute"></see>. </summary>
			<param name="e">The event arguments used to add the handlers. This method uses the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent"></see> property of the arguments to create the handlers. </param>
			<param name="route">Event route to which handlers are to be added.</param>
		</member>
		<member name="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
			<summary>Applies an animation to a specified GTMT#dependency property on this element, with the behavior that any existing animations will be stopped and replaced with the new animation.</summary>
			<param name="dp">The property to animate.</param>
			<param name="clock">Animation clock that controls and declares the animation.</param>
		</member>
		<member name="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
			<summary>Applies an animation to a specified GTMT#dependency property on this element, with the ability to specify what should happen if that property already had an existing animation.</summary>
			<param name="handoffBehavior">A value of the enumeration. The default is SnapShotAndReplace, which will stop any existing animation and replace with the new one.</param>
			<param name="dp">The property to animate.</param>
			<param name="clock">Animation clock that controls and declares the animation.</param>
		</member>
		<member name="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
			<summary> Starts a given animation for a given animated property on this element. </summary>
			<param name="animation">The timeline of the animation that is to be applied.</param>
			<param name="dp">The property to animate, given as the dependency property identifier.</param>
		</member>
		<member name="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
			<summary> Starts a given animation for a given animated property on this element, with the option of specifying what should happen if the property was already being animated. </summary>
			<param name="handoffBehavior">Specifies how the new animation should interact with any current, running animations already affecting the property value.</param>
			<param name="animation">The timeline of the animation that is to be applied.</param>
			<param name="dp">The property to animate, given as the dependency property identifier.</param>
		</member>
		<member name="M:System.Windows.ContentElement.CaptureMouse">
			<summary> Attempts to force capture of the mouse to this element. </summary>
			<returns>true if the mouse was successfully captured; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.ContentElement.CaptureStylus">
			<summary> Attempts to force capture of the stylus to this element. </summary>
			<returns>true if the stylus was successfully captured; otherwise, false. The default implementation always returns true.</returns>
		</member>
		<member name="M:System.Windows.ContentElement.Focus">
			<summary> Attempts to focus the keyboard on this element. </summary>
			<returns>true if keyboard now focuses this element; false if this method call could not force focus.</returns>
		</member>
		<member name="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
			<summary> A utility method for returning non-animation-related base values for properties that are currently animated on this element. </summary>
			<returns>The value that would be returned if there were no animations attached on this particular GTMT#dependency property. If there aren't any animations attached, then the result will be the same as that returned from  <see cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)"></see>.</returns>
			<param name="dp">The GTMT#dependency property to check.</param>
		</member>
		<member name="M:System.Windows.ContentElement.GetUIParentCore">
			<summary> When implemented in a derived class, should return an alternative TLA#tla_ui parent for this element in cases where there is no visual parent. </summary>
			<returns>Should return an object (not a null reference) if implementation of a derived class has an alternate parent connection it wishes to report.</returns>
		</member>
		<member name="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)">
			<summary>Attempts to move focus from this element to an element specified by a movement within the visual organization supported by this element's visual parent. </summary>
			<returns>true if the requested traversal was affected; otherwise, false. </returns>
			<param name="request">A traversal request; this contains a property that indicates either a mode to traverse within existing tab order, or a direction to move visually.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnCreateAutomationPeer">
			<summary>A protected method that <see cref="T:System.Windows.ContentElement"></see> subclasses should implement in order to provide their own specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"></see> implementations to the TLA#tla_winclient infrastructure.</summary>
			<returns>The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"></see> implementation.</returns>
		</member>
		<member name="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
			<summary>  Invoked whenever an unhandled DragDrop.DragEnter attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
			<summary>  Invoked whenever an unhandled DragDrop.DragLeave attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
			<summary>  Invoked whenever an unhandled DragDrop.DragOver attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
			<summary>  Invoked whenever an unhandled  DragDrop.DragEnter attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
			<summary>  Invoked whenever an unhandled DragDrop.GiveFeedback attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
			<summary>Raises the <see cref="E:System.Windows.ContentElement.GotFocus"></see> event (using the provided arguments). </summary>
			<param name="e">Arguments of the event being raised. These are expected to contain the appropriate <see cref="E:System.Windows.ContentElement.GotFocus"></see> event's identifier.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
			<summary>  Invoked whenever an unhandled Keyboard.GotKeyboardFocus attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
			<summary>  Invoked whenever an unhandled Mouse.GotMouseCapture attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.GotStylusCaptureFocus attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
			<summary>  Invoked whenever an unhandled <see cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged"></see>  event is raised on this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
			<summary>Invoked immediately prior to <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged"></see> event being raised by this element. Implement this method to add effective class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
			<summary>  Invoked whenever an unhandled <see cref="E:System.Windows.ContentElement.IsMouseCapturedChanged"></see> event is raised on this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
			<summary> Invoked whenever an unhandled <see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged"></see> event is raised on this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
			<summary> Invoked whenever an unhandled <see cref="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged"></see> event is raised on this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
			<summary> Invoked whenever an unhandled <see cref="E:System.Windows.ContentElement.IsStylusCapturedChanged"></see> event is raised on this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
			<summary> Invoked whenever an unhandled <see cref="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged"></see> event is raised on this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
			<summary> Invoked whenever an unhandled <see cref="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged"></see> event is raised on this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
			<summary>  Invoked whenever an unhandled Keyboard.KeyDown attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
			<summary>  Invoked whenever an unhandled Keyboard.KeyUp attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)">
			<summary>Raises the <see cref="E:System.Windows.ContentElement.LostFocus"></see> event (using the provided arguments). </summary>
			<param name="e">Arguments of the event being raised. These are expected to contain the appropriate <see cref="E:System.Windows.ContentElement.LostFocus"></see> event's identifier.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
			<summary>  Invoked whenever an unhandled Keyboard.LostKeyboardFocus attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
			<summary>  Invoked whenever an unhandled Mouse.LostMouseCapture attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.LostStylusCapture attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled Mouse.MouseDown attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Arguments of the event. These arguments will include details about which mouse button was depressed, and the handled state.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
			<summary>  Invoked whenever an unhandled Mouse.MouseEnter attached routed event is raised on this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
			<summary>  Invoked whenever an unhandled Mouse.MouseLeave attached routed event is raised on this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown"></see> event is raised on this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event. It is expected that the event data should properly note that the event represents a depress of the left mouse button.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp"></see> event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event. It is expected that the event data should properly note that the event represents a release of the left mouse button.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
			<summary>  Invoked whenever an unhandled Mouse.MouseMove attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled <see cref="E:System.Windows.ContentElement.MouseRightButtonDown"></see> event reaches an element derived from this class in its route. Implement this method to add class handling for this event.  </summary>
			<param name="e">Provides data about the event. It is expected that the event data should properly note that the event represents a depress of the right mouse button.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled <see cref="E:System.Windows.ContentElement.MouseRightButtonUp"></see> event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event. It is expected that the event data should properly note that the event represents a depress of the right mouse button.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled Mouse.MouseUp event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Arguments of the event. These arguments will include details about which mouse button was depressed, and the handled state.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
			<summary>  Invoked whenever an unhandled Mouse.MouseWheel attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
			<summary>  Invoked whenever an unhandled DragDrop.PreviewDragEnter attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
			<summary>  Invoked whenever an unhandled DragDrop.PreviewDragLeave attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
			<summary>  Invoked whenever an unhandled DragDrop.PreviewDragOver attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
			<summary>  Invoked whenever an unhandled DragDrop.PreviewDrop attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
			<summary>  Invoked whenever an unhandled DragDrop.PreviewGiveFeedback attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
			<summary>  Invoked whenever an unhandled Keyboard.PreviewGotKeyboardFocus attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
			<summary>  Invoked whenever an unhandled Keyboard.PreviewKeyDown attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
			<summary>  Invoked whenever an unhandled Keyboard.PreviewKeyUp attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
			<summary>  Invoked whenever an unhandled Keyboard.PreviewKeyDown attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled Mouse.PreviewMouseDown attached  event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Arguments of the event. This will include details on which mouse buttons were depressed.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown"></see> event reaches an element derived from this class in its route. Implement this method to add class handling for this event.</summary>
			<param name="e">Provides data about the event. It is expected that the event data should properly note that the event represents a depress of the left mouse button.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp"></see> event reaches an element derived from this class in its route. Implement this method to add class handling for this event.</summary>
			<param name="e">Provides data about the event. It is expected that the event data should properly note that the event represents a release of the left mouse button.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
			<summary>  Invoked whenever an unhandled Mouse.PreviewMouseMove attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown"></see> event reaches an element derived from this class in its route. Implement this method to add class handling for this event.</summary>
			<param name="e">Provides data about the event. It is expected that the event data should properly note that the event represents a depress of the right mouse button.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp"></see> event reaches an element derived from this class in its route. Implement this method to add class handling for this event.</summary>
			<param name="e">Provides data about the event. It is expected that the event data should properly note that the event represents a release of the right mouse button.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled Mouse.PreviewMouseUp attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event.</summary>
			<param name="e">Arguments of the event. This will include details on which mouse buttons were released.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
			<summary>  Invoked whenever an unhandled Mouse.PreviewMouseWheel attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
			<summary>  Invoked whenever an unhandled DragDrop.PreviewQueryContinueDrag attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.PreviewStylusButtonDown attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.PreviewStylusButtonUp attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
			<summary>Invoked whenever an unhandled Stylus.PreviewStylusDown attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event.</summary>
			<param name="e">Arguments of the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.PreviewStylusInAirMove attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.PreviewStylusInRange attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.PreviewStylusMove attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.PreviewStylusOutOfRange attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.PreviewStylusSystemGesture attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
			<summary>Invoked whenever an unhandled Stylus.PreviewStylusUp attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
			<summary>  Invoked whenever an unhandled TextCompositionManager.PreviewTextInput attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
			<summary>  Invoked whenever an unhandled DragDrop.QueryContinueDrag attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
			<summary>  Invoked whenever an unhandled Mouse.QueryCursor attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.StylusButtonDown attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.StylusButtonUp attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
			<summary> Invoked whenever an unhandled Stylus.StylusDown attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e"> Provides arguments of the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.StylusEnter attached  routed event is raised by this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.StylusInAirMove attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.StylusInRange attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.StylusLeave attached  routed event is raised by this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.StylusMove attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.StylusOutOfRange attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.StylusSystemGesture attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.StylusUp attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
			<summary>  Invoked whenever an unhandled TextCompositionManager.TextInput attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
			<summary>When implemented in a derived class, returns the element that would receive focus relative to this element for a given focus traversal direction, without actually moving focus to that element.</summary>
			<returns>The element that would have received focus if <see cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)"></see> were actually invoked.</returns>
			<param name="direction">The direction of the requested focus traversal.</param>
		</member>
		<member name="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)">
			<summary> Raises a specific routed event. The <see cref="T:System.Windows.RoutedEvent"></see> to be raised is identified within the <see cref="T:System.Windows.RoutedEventArgs"></see> instance provided (as the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent"></see> property of that arguments class). </summary>
			<param name="e">Arguments for the event to be raised, which also contains a reference to the identifier of the event to raise. </param>
		</member>
		<member name="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
			<summary> Removes the specified GTMT#routed event handler from this element. </summary>
			<param name="routedEvent">Identifier of the GTMT#routed event for which the handler is attached.</param>
			<param name="handler">The specific handler implementation to be removed from this element's event handler collection.</param>
		</member>
		<member name="M:System.Windows.ContentElement.ShouldSerializeCommandBindings">
			<summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.ContentElement.CommandBindings"></see> property on instances of this class.</summary>
			<returns>true if the <see cref="P:System.Windows.ContentElement.CommandBindings"></see> property value should be serialized; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.ContentElement.ShouldSerializeInputBindings">
			<summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.ContentElement.InputBindings"></see> property on instances of this class.</summary>
			<returns>true if the <see cref="P:System.Windows.ContentElement.InputBindings"></see> property value should be serialized; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.ContentElement.AllowDrop">
			<summary> Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation. </summary>
			<returns>true if this element can be used as the target of a drag-and-drop operation; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.ContentElement.CommandBindings">
			<summary> Gets a collection of <see cref="T:System.Windows.Input.CommandBinding"></see> objects associated with this element. </summary>
			<returns>The collection of all <see cref="T:System.Windows.Input.CommandBinding"></see> objects.</returns>
		</member>
		<member name="P:System.Windows.ContentElement.Focusable">
			<summary> Gets or sets a value that indicates whether the element can receive focus. </summary>
			<returns>true if the element is focusable; otherwise false. The default is false, but see Remarks below.</returns>
		</member>
		<member name="P:System.Windows.ContentElement.HasAnimatedProperties">
			<summary> Gets a value indicating whether this element has any animated properties. </summary>
			<returns>true if this element has animations; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.ContentElement.InputBindings">
			<summary> Gets the collection of input bindings associated with this element. </summary>
			<returns>The collection of input bindings.</returns>
		</member>
		<member name="P:System.Windows.ContentElement.IsEnabled">
			<summary> Gets or sets a value indicating whether this element is enabled in the TLA#tla_ui. </summary>
			<returns>true if the element is enabled; otherwise, false. The default value is true.</returns>
		</member>
		<member name="P:System.Windows.ContentElement.IsEnabledCore">
			<summary> Gets a value that becomes the return value of <see cref="P:System.Windows.ContentElement.IsEnabled"></see> in derived classes. </summary>
			<returns>true if the element is enabled; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.ContentElement.IsFocused">
			<summary> Gets a value that determines whether this element has logical focus. </summary>
			<returns>true if this element has logical focus; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.ContentElement.IsInputMethodEnabled">
			<summary> Gets a value indicating whether an input method system, such as an TLA#tla_ime, is enabled for processing the input to this element. </summary>
			<returns>true if an input method is active; otherwise, false. The default value of the underlying attached property is true, but this will be influenced by the actual state of input methods at runtime.</returns>
		</member>
		<member name="P:System.Windows.ContentElement.IsKeyboardFocused">
			<summary> Gets a value indicating whether this element has keyboard focus. </summary>
			<returns>true if this element has keyboard focus; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
			<summary>Gets a value indicating whether keyboard focus is anywhere within the element or its visual child elements. </summary>
			<returns>true if keyboard focus is on the element or its child elements; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.ContentElement.IsMouseCaptured">
			<summary> Gets a value indicating whether the mouse is captured to this element. </summary>
			<returns>true if the element has mouse capture; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Windows.ContentElement.IsMouseCaptureWithin">
			<summary>Gets a value that determines whether mouse capture is held by this element, including child elements in its tree of elements.</summary>
			<returns>true if mouse capture is held somewhere within this element; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.ContentElement.IsMouseDirectlyOver">
			<summary> Gets a value indicating whether the mouse pointer position corresponds to hit testing results, which take element compositing into account. </summary>
			<returns>true if the mouse pointer is over the same element result as a hit test; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Windows.ContentElement.IsMouseOver">
			<summary> Gets a value indicating whether the mouse pointer is located over this element (including visual child elements, or its control compositing). </summary>
			<returns>true if mouse pointer is over the element or its child elements; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Windows.ContentElement.IsStylusCaptured">
			<summary> Gets a value indicating whether the stylus is captured to this element. </summary>
			<returns>true if the element has stylus capture; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Windows.ContentElement.IsStylusCaptureWithin">
			<summary>Gets a value that determines whether stylus capture is held by this element, including child elements in its tree of elements.</summary>
			<returns>true if stylus capture is held somewhere within this element; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.ContentElement.IsStylusDirectlyOver">
			<summary> Gets a value indicating whether the stylus pointer position corresponds to hit testing results, which take element compositing into account. </summary>
			<returns>true if the stylus pointer is over the same element result as a hit test; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Windows.ContentElement.IsStylusOver">
			<summary> Gets a value indicating whether the stylus cursor is located over this element (including visual child elements). </summary>
			<returns>true if stylus cursor is over the element or its child elements; otherwise, false. The default is false.</returns>
		</member>
		<member name="T:System.Windows.ContentOperations">
			<summary>Provides static utility methods that set or determine the position of a <see cref="T:System.Windows.ContentElement"></see> in a GTMT#visual tree.</summary>
		</member>
		<member name="M:System.Windows.ContentOperations.GetParent(System.Windows.ContentElement)">
			<summary>Gets the visual parent element of the provided <see cref="T:System.Windows.ContentElement"></see>.</summary>
			<returns>The parent element.</returns>
			<param name="reference">The <see cref="T:System.Windows.ContentElement"></see> to get the parent from.</param>
		</member>
		<member name="M:System.Windows.ContentOperations.SetParent(System.Windows.ContentElement,System.Windows.DependencyObject)">
			<summary>Sets the visual parent of the provided <see cref="T:System.Windows.ContentElement"></see>.</summary>
			<param name="reference">The <see cref="T:System.Windows.ContentElement"></see> to get the parent from.</param>
			<param name="parent">The new parent element.</param>
		</member>
		<member name="T:System.Windows.CultureInfoIetfLanguageTagConverter">
			<summary>Converts instances of <see cref="T:System.Globalization.CultureInfo"></see> to and from other data types.</summary>
		</member>
		<member name="M:System.Windows.CultureInfoIetfLanguageTagConverter.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.CultureInfoIetfLanguageTagConverter"></see> class.</summary>
		</member>
		<member name="M:System.Windows.CultureInfoIetfLanguageTagConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether <see cref="T:System.Windows.CultureInfoIetfLanguageTagConverter"></see> can convert from a given type.</summary>
			<param name="typeDescriptorContext">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> value.</param>
			<param name="sourceType">The <see cref="T:System.Type"></see> being queried for conversion support.</param>
		</member>
		<member name="M:System.Windows.CultureInfoIetfLanguageTagConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether <see cref="T:System.Windows.CultureInfoIetfLanguageTagConverter"></see> can convert to a given type.</summary>
			<param name="typeDescriptorContext">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> value.</param>
			<param name="destinationType">The <see cref="T:System.Type"></see> being queried for conversion support.</param>
		</member>
		<member name="M:System.Windows.CultureInfoIetfLanguageTagConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary>Converts a given object type to a <see cref="T:System.Globalization.CultureInfo"></see> object.</summary>
			<returns>A <see cref="T:System.Globalization.CultureInfo"></see> object.</returns>
			<param name="typeDescriptorContext">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> value.</param>
			<param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo"></see> object whose value is respected during conversion.</param>
			<param name="source">The <see cref="T:System.Type"></see> being converted.</param>
		</member>
		<member name="M:System.Windows.CultureInfoIetfLanguageTagConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary>Converts a <see cref="T:System.Globalization.CultureInfo"></see> object to a given object type.</summary>
			<returns>A <see cref="T:System.Object"></see>.</returns>
			<param name="typeDescriptorContext">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> value.</param>
			<param name="destinationType">The <see cref="T:System.Type"></see> of the returned converted object.</param>
			<param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo"></see> object whose value is respected during conversion.</param>
			<param name="value">The object that represents the <see cref="T:System.Globalization.CultureInfo"></see> to convert.</param>
		</member>
		<member name="T:System.Windows.DataFormat">
			<summary>Represents a data format as a format name and a numeric ID pair.</summary>
		</member>
		<member name="M:System.Windows.DataFormat.#ctor(System.String,System.Int32)">
			<summary>Initializes a new instance of the  <see cref="T:System.Windows.DataFormat"></see> class.</summary>
			<param name="name">A string specifying a name for the data format.</param>
			<param name="id">An integer specifying an ID for the data format.</param>
		</member>
		<member name="P:System.Windows.DataFormat.Id">
			<summary>Gets the numeric ID of this data format.</summary>
			<returns>The numeric ID for this data format.</returns>
		</member>
		<member name="P:System.Windows.DataFormat.Name">
			<summary>Gets the name of this data format.</summary>
			<returns>The name of this data format.</returns>
		</member>
		<member name="T:System.Windows.DataFormats">
			<summary>Provides a set of predefined data format names that can be used to identify data formats available in a data object.</summary>
		</member>
		<member name="F:System.Windows.DataFormats.Bitmap">
			<summary>Specifies a TLA#tla_win bitmap data format.</summary>
			<returns>A string denoting the TLA2#tla_win bitmap data format: "Bitmap".</returns>
		</member>
		<member name="F:System.Windows.DataFormats.CommaSeparatedValue">
			<summary>Specifies a comma-separated value (CSV) data format.</summary>
			<returns>A string denoting the comma-separated value data format: "CSV".</returns>
		</member>
		<member name="F:System.Windows.DataFormats.Dib">
			<summary>Specifies the TLA#tla_dib data format.</summary>
			<returns>A string denoting the TLA2#tla_dib data format: "DeviceIndependentBitmap".</returns>
		</member>
		<member name="F:System.Windows.DataFormats.Dif">
			<summary>Specifies the Windows Data Interchange Format (DIF) data format.</summary>
			<returns>A string denoting the DIF data format: "DataInterchangeFormat".</returns>
		</member>
		<member name="F:System.Windows.DataFormats.EnhancedMetafile">
			<summary>Specifies the TLA#tla_mswin enhanced metafile format.</summary>
			<returns>A string denoting the Windows enhanced metafile format: "EnhancedMetafile".</returns>
		</member>
		<member name="F:System.Windows.DataFormats.FileDrop">
			<summary>Specifies the TLA#tla_mswin file drop format.</summary>
			<returns>A string denoting the Windows file drop format; "FileDrop".</returns>
		</member>
		<member name="F:System.Windows.DataFormats.Html">
			<summary>Specifies the TLA#tla_html data format.</summary>
			<returns>A string denoting the TLA2#tla_html data format: "HTML Format".</returns>
		</member>
		<member name="F:System.Windows.DataFormats.Locale">
			<summary>Specifies the TLA#tla_mswin locale (culture) data format.</summary>
			<returns>A string denoting the TLA#tla_mswin locale format: "Locale".</returns>
		</member>
		<member name="F:System.Windows.DataFormats.MetafilePicture">
			<summary>Specifies the TLA#tla_mswin metafile picture data format.</summary>
			<returns>A string denoting the TLA#tla_mswin metafile picture data format: "MetaFilePict".</returns>
		</member>
		<member name="F:System.Windows.DataFormats.OemText">
			<summary>Specifies the standard TLA#tla_mswin TLA#tla_oem text data format.</summary>
			<returns>A string denoting the TLA#tla_mswin TLA#tla_oem text data format: "OEMText".</returns>
		</member>
		<member name="F:System.Windows.DataFormats.Palette">
			<summary>Specifies the TLA#tla_mswin palette data format.</summary>
			<returns>A string denoting the TLA#tla_mswin palette data format: "Palette".</returns>
		</member>
		<member name="F:System.Windows.DataFormats.PenData">
			<summary>Specifies the TLA#tla_mswin pen data format.</summary>
			<returns>A string denoting the TLA#tla_mswin pen data format: "PenData".</returns>
		</member>
		<member name="F:System.Windows.DataFormats.Riff">
			<summary>Specifies the TLA#tla_riff audio data format.</summary>
			<returns>A string denoting the TLA2#tla_riff audio data format: "RiffAudio".</returns>
		</member>
		<member name="F:System.Windows.DataFormats.Rtf">
			<summary>Specifies the TLA#tla_rtf data format.</summary>
			<returns>A string denoting the TLA2#tla_rtf data format: "Rich Text Format".</returns>
		</member>
		<member name="F:System.Windows.DataFormats.Serializable">
			<summary>Specifies a data format that encapsulates any type of serializable data objects.</summary>
			<returns>A string denoting a serializable data format: "PersistentObject".</returns>
		</member>
		<member name="F:System.Windows.DataFormats.StringFormat">
			<summary>Specifies the TLA#tla_clr string class data format.</summary>
			<returns>A string denoting the TLA2#tla_clr string class data format: "System.String".</returns>
		</member>
		<member name="F:System.Windows.DataFormats.SymbolicLink">
			<summary>Specifies the TLA#tla_mswin symbolic link data format.</summary>
			<returns>A string denoting the TLA#tla_mswin symbolic link data format: "SymbolicLink".</returns>
		</member>
		<member name="F:System.Windows.DataFormats.Text">
			<summary>Specifies the TLA#tla_ansi text data format.</summary>
			<returns>A string denoting the TLA2#tla_ansi text data format: "Text".</returns>
		</member>
		<member name="F:System.Windows.DataFormats.Tiff">
			<summary>Specifies the TLA#tla_tiff data format.</summary>
			<returns>A string denoting the TLA2#tla_tiff data format: "TaggedImageFileFormat".</returns>
		</member>
		<member name="F:System.Windows.DataFormats.UnicodeText">
			<summary>Specifies the TLA#tla_unicode text data format.</summary>
			<returns>A string denoting the TLA2#tla_unicode text data format: "UnicodeText".</returns>
		</member>
		<member name="F:System.Windows.DataFormats.WaveAudio">
			<summary>Specifies the wave audio data format.</summary>
			<returns>A string denoting the wave audio format: "WaveAudio".</returns>
		</member>
		<member name="F:System.Windows.DataFormats.Xaml">
			<summary>Specifies the TLA#tla_xaml data format.</summary>
			<returns>A string denoting the TLA2#tla_xaml data format: "Xaml".</returns>
		</member>
		<member name="F:System.Windows.DataFormats.XamlPackage">
			<summary>Specifies the TLA#tla_xaml package data format.</summary>
			<returns>A string denoting the TLA2#tla_xaml data format: "XamlPackage".</returns>
		</member>
		<member name="M:System.Windows.DataFormats.GetDataFormat(System.Int32)">
			<summary>Returns a <see cref="T:System.Windows.DataFormat"></see> object that defines a name and numeric ID for the specified data format. The desired data format is specified by numeric ID.</summary>
			<returns>A <see cref="T:System.Windows.DataFormat"></see> object that contains the numeric ID and the name of the requested data format.</returns>
			<param name="id">The numeric ID of the data format to request a <see cref="T:System.Windows.DataFormat"></see> object for.</param>
		</member>
		<member name="M:System.Windows.DataFormats.GetDataFormat(System.String)">
			<summary>Returns a <see cref="T:System.Windows.DataFormat"></see> object that defines a name and numeric ID for the specified data format. The desired data format is specified by name (a string).</summary>
			<returns>A <see cref="T:System.Windows.DataFormat"></see> object that contains the numeric ID and the name of the requested data format.</returns>
			<param name="format">The name of the data format to request a <see cref="T:System.Windows.DataFormat"></see> object for.</param>
			<exception cref="T:System.ArgumentNullException">Raised when format is null.</exception>
		</member>
		<member name="T:System.Windows.DataObject">
			<summary>Provides a basic implementation of the <see cref="T:System.Windows.IDataObject"></see> interface, which defines a format-independent mechanism for transferring data.</summary>
		</member>
		<member name="M:System.Windows.DataObject.#ctor">
			<summary>Initializes a new, empty instance of the <see cref="T:System.Windows.DataObject"></see> class, which can store arbitrary data in multiple formats.</summary>
		</member>
		<member name="M:System.Windows.DataObject.#ctor(System.Object)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.DataObject"></see> class, containing the specified data.</summary>
			<param name="data">An object representing the data to store in this data object.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">Raised when data references a <see cref="T:System.Windows.DataObject"></see> object.</exception>
			<exception cref="T:System.ArgumentNullException">Raised when data is null.</exception>
		</member>
		<member name="M:System.Windows.DataObject.#ctor(System.String,System.Object)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.DataObject"></see> class, containing the specified data and its associated format; the data format is specified by a string.</summary>
			<param name="data">An object representing the data to store in this data object.</param>
			<param name="format">A string that specifies what format to store the data in. See the       <see cref="T:System.Windows.DataFormats"></see> class for a set of predefined data formats.</param>
			<exception cref="T:System.ArgumentNullException">Raised when data or format is null.</exception>
		</member>
		<member name="M:System.Windows.DataObject.#ctor(System.Type,System.Object)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.DataObject"></see> class, containing the specified data and its associated format; the data format is specified by a <see cref="T:System.Type"></see> object.</summary>
			<param name="data">The data to store in this data object.</param>
			<param name="format">A <see cref="T:System.Type"></see> that specifies what format to store the data in. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of predefined data formats.</param>
			<exception cref="T:System.ArgumentNullException">Raised when data or format is null.</exception>
		</member>
		<member name="M:System.Windows.DataObject.#ctor(System.String,System.Object,System.Boolean)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.DataObject"></see> class, containing the specified data and its associated format; the data format is specified by a string. This overload includes a Boolean flag to indicate whether the data may be converted to another format on retrieval.</summary>
			<param name="autoConvert">true to allow the data to be converted to another format on retrieval; false to prohibit the data from being converted to another format on retrieval.</param>
			<param name="data">The data to store in this data object.</param>
			<param name="format">A string that specifies what format to store the data in. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of predefined data formats.</param>
			<exception cref="T:System.ArgumentNullException">Raised when data or format is null.</exception>
		</member>
		<member name="E:System.Windows.DataObject.Copying">
			<summary>Occurs when the associated dependency object has prepared appropriate data formats representing the copy selection, added the copy selection formats to a <see cref="T:System.Windows.DataObject"></see>, and is ready to either place the <see cref="T:System.Windows.DataObject"></see> on the <see cref="T:System.Windows.Clipboard"></see> or begin a drag-and-drop operation.</summary>
		</member>
		<member name="E:System.Windows.DataObject.Pasting">
			<summary>Occurs when the associated dependency object is ready to paste data.</summary>
		</member>
		<member name="E:System.Windows.DataObject.SettingData">
			<summary>Occurs when the associated dependency object attempts to add a new data format to a <see cref="T:System.Windows.DataObject"></see>.</summary>
		</member>
		<member name="F:System.Windows.DataObject.CopyingEvent">
			<summary>Identifies the <see cref="E:System.Windows.DataObject.Copying"></see> GTMT#routed event.</summary>
			<returns>The identifier for the <see cref="E:System.Windows.DataObject.Copying"></see>  GTMT#routed event.</returns>
		</member>
		<member name="F:System.Windows.DataObject.PastingEvent">
			<summary>Identifies the <see cref="E:System.Windows.DataObject.Pasting"></see> GTMT#routed event.</summary>
			<returns>The identifier for the <see cref="E:System.Windows.DataObject.Pasting"></see>  GTMT#routed event.</returns>
		</member>
		<member name="F:System.Windows.DataObject.SettingDataEvent">
			<summary>Identifies the <see cref="E:System.Windows.DataObject.SettingData"></see> GTMT#routed event.</summary>
			<returns>The identifier for the <see cref="E:System.Windows.DataObject.SettingData"></see>GTMT#routed event.</returns>
		</member>
		<member name="M:System.Windows.DataObject.AddCopyingHandler(System.Windows.DependencyObject,System.Windows.DataObjectCopyingEventHandler)">
			<summary>Adds a <see cref="E:System.Windows.DataObject.Copying"></see> event handler to a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) to which to add the event handler.</param>
			<param name="handler">A delegate that references the handler method to be added.</param>
		</member>
		<member name="M:System.Windows.DataObject.AddPastingHandler(System.Windows.DependencyObject,System.Windows.DataObjectPastingEventHandler)">
			<summary>Adds a <see cref="E:System.Windows.DataObject.Pasting"></see> event handler to a specified dependency object.</summary>
			<param name="element">The dependency object (a  <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) to which to add the event handler.</param>
			<param name="handler">A delegate that references the handler method to be added.</param>
		</member>
		<member name="M:System.Windows.DataObject.AddSettingDataHandler(System.Windows.DependencyObject,System.Windows.DataObjectSettingDataEventHandler)">
			<summary>Adds a <see cref="E:System.Windows.DataObject.SettingData"></see> event handler to a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) to which to add the event handler.</param>
			<param name="handler">A delegate that references the handler method to be added.</param>
		</member>
		<member name="M:System.Windows.DataObject.ContainsAudio">
			<summary>Queries a data object for the presence of data in the <see cref="F:System.Windows.DataFormats.WaveAudio"></see> data format.</summary>
			<returns>true if the data object contains data in the <see cref="F:System.Windows.DataFormats.WaveAudio"></see> data format; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.DataObject.ContainsFileDropList">
			<summary>Queries a data object for the presence of data in the <see cref="F:System.Windows.DataFormats.FileDrop"></see> data format.</summary>
			<returns>true if the data object contains data in the <see cref="F:System.Windows.DataFormats.FileDrop"></see> data format; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.DataObject.ContainsImage">
			<summary>Queries a data object for the presence of data in the <see cref="F:System.Windows.DataFormats.Bitmap"></see> data format.</summary>
			<returns>true if the data object contains data in the <see cref="F:System.Windows.DataFormats.Bitmap"></see> data format; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.DataObject.ContainsText">
			<summary>Queries a data object for the presence of data in the <see cref="F:System.Windows.DataFormats.UnicodeText"></see> format.</summary>
			<returns>true if the data object contains data in the <see cref="F:System.Windows.DataFormats.UnicodeText"></see> data format; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.DataObject.ContainsText(System.Windows.TextDataFormat)">
			<summary>Queries a data object for the presence of data in a text data format.</summary>
			<returns>true if the data object contains data in a text data format; otherwise, false.</returns>
			<param name="format">A member of the <see cref="T:System.Windows.TextDataFormat"></see> enumeration that specifies the text data format to query for.</param>
			<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Raised when format does not specify a valid member of <see cref="T:System.Windows.TextDataFormat"></see>.</exception>
		</member>
		<member name="M:System.Windows.DataObject.GetAudioStream">
			<summary>Returns a stream containing data in the <see cref="F:System.Windows.DataFormats.WaveAudio"></see> data format.</summary>
			<returns>A stream containing the data in the <see cref="F:System.Windows.DataFormats.WaveAudio"></see> format, or null if the data is unavailable in this format.</returns>
		</member>
		<member name="M:System.Windows.DataObject.GetData(System.String)">
			<summary>Retrieves data in a specified format; the data format is specified by a string.</summary>
			<returns>An object that contains the data in the specified format, or null if the data is unavailable in the specified format.</returns>
			<param name="format">A string that specifies what format to retrieve the data as. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of predefined data formats.</param>
			<exception cref="T:System.ArgumentNullException">Raised when format is null.</exception>
		</member>
		<member name="M:System.Windows.DataObject.GetData(System.Type)">
			<summary>Retrieves a data object in a specified format; the data format is specified by a <see cref="T:System.Type"></see> object.</summary>
			<returns>A data object with the data in the specified format, or null if the data is unavailable in the specified format.</returns>
			<param name="format">A <see cref="T:System.Type"></see> that specifies what format to retrieve the data as. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of predefined data formats.</param>
			<exception cref="T:System.ArgumentNullException">Raised when format is null.</exception>
		</member>
		<member name="M:System.Windows.DataObject.GetData(System.String,System.Boolean)">
			<summary>Retrieves a data object in a specified format, optionally converting the data to the specified format.</summary>
			<returns>A data object with the data in the specified format, or null if the data is unavailable in the specified format.</returns>
			<param name="autoConvert">true to attempt to automatically convert the data to the specified format; false for no data format conversion. If this parameter is true and the data is not available the specified format, the method attempts to convert the data to the specified format, if necessary. If the data cannot be converted to the specified format, or if automatic conversion is disabled (by calling <see cref="M:System.Windows.DataObject.SetData(System.String,System.Object,System.Boolean)"></see>         with the autoConvert parameter set to false), this method returns null. If this parameter is false, the method returns data in the specified format if available, or null if the data is not available in the specified format.</param>
			<param name="format">A string that specifies what format to retrieve the data as. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of predefined data formats.</param>
			<exception cref="T:System.ArgumentNullException">Raised when format is null.</exception>
		</member>
		<member name="M:System.Windows.DataObject.GetDataPresent(System.String)">
			<summary>Checks to see whether the data is available in, or can be converted to, a specified format; the data format is specified by a string.</summary>
			<returns>true if the data is in, or can be converted to, the specified format; otherwise, false.</returns>
			<param name="format">A string that specifies what format to check for. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of predefined data formats.</param>
			<exception cref="T:System.ArgumentNullException">Raised when format is null.</exception>
		</member>
		<member name="M:System.Windows.DataObject.GetDataPresent(System.Type)">
			<summary>Checks to see whether the data is available in, or can be converted to, a specified format; the data format is specified by a <see cref="T:System.Type"></see> object.</summary>
			<returns>true if the data is in, or can be converted to, the specified format; otherwise, false.</returns>
			<param name="format">A <see cref="T:System.Type"></see> that specifies what format to check for. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of predefined data formats.</param>
			<exception cref="T:System.ArgumentNullException">Raised when format is null.</exception>
		</member>
		<member name="M:System.Windows.DataObject.GetDataPresent(System.String,System.Boolean)">
			<summary>Checks to see whether the data is available in, or can be converted to, a specified format. A Boolean flag indicates whether to check if the data can be converted to the specified format if it is not available in that format.</summary>
			<returns>true if the data is in, or can be converted to, the specified format; otherwise, false.</returns>
			<param name="autoConvert">false to only check for the specified format; true to also check whether or not data stored in this data object can be converted to the specified format.</param>
			<param name="format">A string that specifies what format to check for. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of predefined data formats.</param>
			<exception cref="T:System.ArgumentNullException">Raised when format is null.</exception>
		</member>
		<member name="M:System.Windows.DataObject.GetFileDropList">
			<summary>Returns a string collection that contains a list of dropped files.</summary>
			<returns>A collection of strings, where each string specifies the name of a file in the list of dropped files, or null if the data is unavailable in this format.</returns>
		</member>
		<member name="M:System.Windows.DataObject.GetFormats">
			<summary>Returns a list of all formats that the data in this data object is stored in, or can be converted to.</summary>
			<returns>An array of strings, with each string specifying the name of a format supported by this data object.</returns>
		</member>
		<member name="M:System.Windows.DataObject.GetFormats(System.Boolean)">
			<summary>Returns a list of all formats that the data in this data object is stored in. A Boolean flag indicates whether to also include formats that the data can be automatically converted to.</summary>
			<returns>An array of strings, with each string specifying the name of a format supported by this data object.</returns>
			<param name="autoConvert">true to retrieve all formats that data stored in this data object is stored in, or can be converted to; false to retrieve only formats that data stored in this data object is stored in (excluding formats that the data is not stored in, but could be automatically converted to).</param>
		</member>
		<member name="M:System.Windows.DataObject.GetImage">
			<summary>Returns a <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> object that contains data in the <see cref="F:System.Windows.DataFormats.Bitmap"></see> format.</summary>
			<returns>A <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> object that contains data in the <see cref="F:System.Windows.DataFormats.Bitmap"></see> format, or null if the data is unavailable in this format.</returns>
		</member>
		<member name="M:System.Windows.DataObject.GetText">
			<summary>Returns a string containing the <see cref="F:System.Windows.DataFormats.UnicodeText"></see> data in this data object.</summary>
			<returns>A string containing the <see cref="F:System.Windows.DataFormats.UnicodeText"></see> data , or an empty string if no <see cref="F:System.Windows.DataFormats.UnicodeText"></see> data is available..</returns>
		</member>
		<member name="M:System.Windows.DataObject.GetText(System.Windows.TextDataFormat)">
			<summary>Returns a string containing text data in this data object.  The specific data format of the text data to retrieve is specified with a member of <see cref="T:System.Windows.TextDataFormat"></see>. </summary>
			<returns>A string containing text data in the specified data format, or an empty string if no corresponding text data is available.</returns>
			<param name="format">A member of <see cref="T:System.Windows.TextDataFormat"></see> specifying the specific text data format to retrieve.</param>
			<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Raised when format does not specify a valid member of <see cref="T:System.Windows.TextDataFormat"></see>.</exception>
		</member>
		<member name="M:System.Windows.DataObject.RemoveCopyingHandler(System.Windows.DependencyObject,System.Windows.DataObjectCopyingEventHandler)">
			<summary>Removes a <see cref="E:System.Windows.DataObject.Copying"></see> event handler from a specified dependency object.</summary>
			<param name="element">The dependency object (a  <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) from which to remove the event handler.</param>
			<param name="handler">A delegate that references the handler method to be removed.</param>
		</member>
		<member name="M:System.Windows.DataObject.RemovePastingHandler(System.Windows.DependencyObject,System.Windows.DataObjectPastingEventHandler)">
			<summary>Removes a <see cref="E:System.Windows.DataObject.Pasting"></see> event handler from a specified dependency object.</summary>
			<param name="element">The dependency object (a  <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) from which to remove the event handler.</param>
			<param name="handler">A delegate that references the handler method to be removed.</param>
		</member>
		<member name="M:System.Windows.DataObject.RemoveSettingDataHandler(System.Windows.DependencyObject,System.Windows.DataObjectSettingDataEventHandler)">
			<summary>Removes a <see cref="E:System.Windows.DataObject.SettingData"></see> event handler from a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) from which to remove the event handler.</param>
			<param name="handler">A delegate that references the handler method to be removed.</param>
		</member>
		<member name="M:System.Windows.DataObject.SetAudio(System.Byte[])">
			<summary>Stores audio data (<see cref="F:System.Windows.DataFormats.WaveAudio"></see> data format) in this data object.  The audio data is specified as a byte array.</summary>
			<param name="audioBytes">A byte array containing audio data to store in the data object.</param>
			<exception cref="T:System.ArgumentNullException">Raised when audioBytes is null.</exception>
		</member>
		<member name="M:System.Windows.DataObject.SetAudio(System.IO.Stream)">
			<summary>Stores audio data (<see cref="F:System.Windows.DataFormats.WaveAudio"></see> data format) in this data object.  The audio data is specified as a stream.</summary>
			<param name="audioStream">A stream containing audio data to store in the data object.</param>
			<exception cref="T:System.ArgumentNullException">Raised when audioStream is null.</exception>
		</member>
		<member name="M:System.Windows.DataObject.SetData(System.Object)">
			<summary>Stores the specified data in this data object, automatically determining the data format from the source object type.</summary>
			<param name="data">An object representing the data to store in this data object.</param>
			<exception cref="T:System.ArgumentNullException">Raised when data is null.</exception>
		</member>
		<member name="M:System.Windows.DataObject.SetData(System.String,System.Object)">
			<summary>Stores the specified data in this data object, along with one or more specified data formats; the data format is specified by a string.</summary>
			<param name="data">An object representing the data to store in this data object.</param>
			<param name="format">A string that specifies what format to store the data in. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of predefined data formats.</param>
			<exception cref="T:System.ArgumentNullException">Raised when data or format is null.</exception>
		</member>
		<member name="M:System.Windows.DataObject.SetData(System.Type,System.Object)">
			<summary>Stores the specified data in this data object, along with one or more specified data formats; the data format is specified by a <see cref="T:System.Type"></see> object.</summary>
			<param name="data">An object representing the data to store in this data object.</param>
			<param name="format">A <see cref="T:System.Type"></see> object that specifies what format to store the data in. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of predefined data formats.</param>
			<exception cref="T:System.ArgumentNullException">Raised when data or format is null.</exception>
		</member>
		<member name="M:System.Windows.DataObject.SetData(System.String,System.Object,System.Boolean)">
			<summary>Stores the specified data in this data object, along with one or more specified data formats. This overload includes a Boolean flag to indicate whether the data can be converted to another format on retrieval.</summary>
			<param name="autoConvert">true to allow the data to be converted to another format on retrieval; false to prohibit the data from being converted to another format on retrieval.</param>
			<param name="data">An object representing the data to store in this data object.</param>
			<param name="format">A string that specifies what format to store the data in. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of predefined data formats.</param>
			<exception cref="T:System.ArgumentNullException">Raised when data or format is null.</exception>
		</member>
		<member name="M:System.Windows.DataObject.SetFileDropList(System.Collections.Specialized.StringCollection)">
			<summary>Stores <see cref="F:System.Windows.DataFormats.FileDrop"></see> data in this data object.  The dropped file list is specified as a string collection.</summary>
			<param name="fileDropList">A string collection that contains the dropped file list to store in the data object.</param>
			<exception cref="T:System.ArgumentException">Raised when fileDropList contains zero strings, or when the full path to file specified in the list cannot be resolved.</exception>
			<exception cref="T:System.ArgumentNullException">Raised when fileDropList is null.</exception>
		</member>
		<member name="M:System.Windows.DataObject.SetImage(System.Windows.Media.Imaging.BitmapSource)">
			<summary>Stores <see cref="F:System.Windows.DataFormats.Bitmap"></see> data in this data object.  The image data is specified as a <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>.</summary>
			<param name="image">A <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> object containing the image data to store in the data object.</param>
			<exception cref="T:System.ArgumentNullException">Raised when image is null.</exception>
		</member>
		<member name="M:System.Windows.DataObject.SetText(System.String)">
			<summary>Stores <see cref="F:System.Windows.DataFormats.UnicodeText"></see> data in this data object.  The <see cref="F:System.Windows.DataFormats.UnicodeText"></see> data to store is specified as a string.</summary>
			<param name="textData">A string containing the <see cref="F:System.Windows.DataFormats.UnicodeText"></see> data to store in the data object.</param>
			<exception cref="T:System.ArgumentNullException">Raised when textData is null.</exception>
		</member>
		<member name="M:System.Windows.DataObject.SetText(System.String,System.Windows.TextDataFormat)">
			<summary>Stores text data in this data object.  The specific data format of the text data to store is specified with a member of <see cref="T:System.Windows.TextDataFormat"></see>.</summary>
			<param name="textData">A string containing the text data to store in the data object.</param>
			<param name="format">A member of <see cref="T:System.Windows.TextDataFormat"></see> specifying the specific text data format to store.</param>
			<exception cref="T:System.ArgumentNullException">Raised when textData is null.</exception>
		</member>
		<member name="M:System.Windows.DataObject.System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)">
			<summary>This type or member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.DataObject.System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
			<summary>This type or member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.DataObject.System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
			<summary>This type or member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.DataObject.System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
			<summary>This type or member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="T:System.Windows.DataObjectCopyingEventArgs">
			<summary>Arguments for the <see cref="T:System.Windows.DataObject"></see>.<see cref="E:System.Windows.DataObject.Copying"></see> event.</summary>
		</member>
		<member name="M:System.Windows.DataObjectCopyingEventArgs.#ctor(System.Windows.IDataObject,System.Boolean)">
			<summary>Initializes a new instance of <see cref="T:System.Windows.DataObjectCopyingEventArgs"></see>.</summary>
			<param name="dataObject">A <see cref="T:System.Windows.DataObject"></see> containing data ready to be copied.</param>
			<param name="isDragDrop">A Boolean value indicating whether the copy is part of a drag-and-drop operation. true to indicate that the copy is part of a drag-and-drop operation; otherwise, false. If this parameter is set to true, a <see cref="E:System.Windows.DataObject.Copying"></see> event is fired on drop.</param>
			<exception cref="T:System.ArgumentNullException">Raised when dataObject is null.</exception>
		</member>
		<member name="P:System.Windows.DataObjectCopyingEventArgs.DataObject">
			<summary>Gets the data object associated with the <see cref="E:System.Windows.DataObject.Copying"></see> event.</summary>
			<returns>The data object associated with the <see cref="E:System.Windows.DataObject.Copying"></see> event.</returns>
		</member>
		<member name="T:System.Windows.DataObjectCopyingEventHandler">
			<summary>Represents a method that handles <see cref="T:System.Windows.DataObject"></see>.<see cref="E:System.Windows.DataObject.Copying"></see> events.</summary>
		</member>
		<member name="T:System.Windows.DataObjectEventArgs">
			<summary>Provides an abstract base class for events associated with the <see cref="T:System.Windows.DataObject"></see> class.</summary>
		</member>
		<member name="M:System.Windows.DataObjectEventArgs.CancelCommand">
			<summary>Cancels the associated command or operation.</summary>
		</member>
		<member name="P:System.Windows.DataObjectEventArgs.CommandCancelled">
			<summary>Gets a Boolean value indicating whether the associated command or operation is cancelled.</summary>
			<returns>A Boolean value indicating whether the associated command or operation is cancelled. true if the command is cancelled; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.DataObjectEventArgs.IsDragDrop">
			<summary>Gets a Boolean value indicating if the associated event is part of a drag-and-drop operation.</summary>
			<returns>A Boolean value indicating if the associated event is part of a drag-and-drop operation. true if the associated event is part of a drag-and-drop operation; otherwise, false.</returns>
		</member>
		<member name="T:System.Windows.DataObjectPastingEventArgs">
			<summary>Contains arguments for the <see cref="T:System.Windows.DataObject"></see>.<see cref="E:System.Windows.DataObject.Pasting"></see> event.</summary>
		</member>
		<member name="M:System.Windows.DataObjectPastingEventArgs.#ctor(System.Windows.IDataObject,System.Boolean,System.String)">
			<summary>Initializes a new instance of <see cref="T:System.Windows.DataObjectPastingEventArgs"></see>.</summary>
			<param name="dataObject">A <see cref="T:System.Windows.DataObject"></see> containing the data to be pasted.</param>
			<param name="formatToApply">A string specifying the preferred data format to use for the paste operation. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of predefined data formats.</param>
			<param name="isDragDrop">A Boolean value indicating whether the paste is part of a drag-and-drop operation. true to indicate that the paste is part of a drag-and-drop operation; otherwise, false. If this parameter is set to true, a <see cref="E:System.Windows.DataObject.Pasting"></see> event is fired on drop.</param>
			<exception cref="T:System.ArgumentNullException">Raised when dataObject or formatToApply is null.</exception>
			<exception cref="T:System.ArgumentException">Raised when formatToApply specifies a data format that is not present in the data object specified by dataObject.</exception>
		</member>
		<member name="P:System.Windows.DataObjectPastingEventArgs.DataObject">
			<summary>Gets or sets a suggested <see cref="T:System.Windows.DataObject"></see> to use for the paste operation.</summary>
			<returns>The currently suggested <see cref="T:System.Windows.DataObject"></see> to use for the paste operation. Getting this value returns the currently suggested <see cref="T:System.Windows.DataObject"></see> for the paste operation.Setting this value specifies a new suggested <see cref="T:System.Windows.DataObject"></see> to use for the paste operation.</returns>
			<exception cref="T:System.ArgumentNullException">Raised when an attempt is made to set this property to null.</exception>
			<exception cref="T:System.ArgumentException">Raised when an attempt is made to set this property to a data object that contains no data formats.</exception>
		</member>
		<member name="P:System.Windows.DataObjectPastingEventArgs.FormatToApply">
			<summary>Gets or sets a string specifying the suggested data format to use for the paste operation.</summary>
			<returns>A string specifying the suggested data format to use for the paste operation.Getting this value returns the currently suggested data format to use for the paste operation.Setting this value specifies a new suggested data format to use for the paste operation.</returns>
			<exception cref="T:System.ArgumentNullException">Raised when an attempt is made to set this property to null.</exception>
			<exception cref="T:System.ArgumentException">Raised when an attempt is made to set this property to a data format that is not present in the data object referenced by the <see cref="P:System.Windows.DataObjectPastingEventArgs.DataObject"></see> property.</exception>
		</member>
		<member name="P:System.Windows.DataObjectPastingEventArgs.SourceDataObject">
			<summary>Gets a copy of the original data object associated with the paste operation.</summary>
			<returns>A copy of the original data object associated with the paste operation.</returns>
		</member>
		<member name="T:System.Windows.DataObjectPastingEventHandler">
			<summary>Represents a method that handles <see cref="T:System.Windows.DataObject"></see>.<see cref="E:System.Windows.DataObject.Pasting"></see> events.</summary>
		</member>
		<member name="T:System.Windows.DataObjectSettingDataEventArgs">
			<summary>Contains arguments for the <see cref="T:System.Windows.DataObject"></see>.<see cref="E:System.Windows.DataObject.SettingData"></see> event.</summary>
		</member>
		<member name="M:System.Windows.DataObjectSettingDataEventArgs.#ctor(System.Windows.IDataObject,System.String)">
			<summary>Initializes a new instance of <see cref="T:System.Windows.DataObjectSettingDataEventArgs"></see>.</summary>
			<param name="dataObject">The <see cref="T:System.Windows.DataObject"></see> to which a new data format is being added.</param>
			<param name="format">A string specifying the new data format that is being added to the accompanying data object. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of predefined data formats.</param>
			<exception cref="T:System.ArgumentNullException">Raised when dataObject or format is null.</exception>
		</member>
		<member name="P:System.Windows.DataObjectSettingDataEventArgs.DataObject">
			<summary>Gets the <see cref="T:System.Windows.DataObject"></see> associated with the <see cref="E:System.Windows.DataObject.Copying"></see> event.</summary>
			<returns>The <see cref="T:System.Windows.DataObject"></see> associated with the <see cref="E:System.Windows.DataObject.Copying"></see> event.</returns>
		</member>
		<member name="P:System.Windows.DataObjectSettingDataEventArgs.Format">
			<summary>Gets a string specifying the new data format that is being added to the accompanying data object.</summary>
			<returns>A string specifying the new data format that is being added to the accompanying data object.</returns>
		</member>
		<member name="T:System.Windows.DataObjectSettingDataEventHandler">
			<summary>Represents a method that handles <see cref="T:System.Windows.DataObject"></see>.<see cref="E:System.Windows.DataObject.SettingData"></see> events.</summary>
		</member>
		<member name="T:System.Windows.DragAction">
			<summary>Specifies how and if a drag-and-drop operation should continue.</summary>
		</member>
		<member name="F:System.Windows.DragAction.Cancel">
			<summary>The operation is canceled with no drop message.</summary>
		</member>
		<member name="F:System.Windows.DragAction.Continue">
			<summary>The operation will continue.</summary>
		</member>
		<member name="F:System.Windows.DragAction.Drop">
			<summary>The operation will stop with a drop.</summary>
		</member>
		<member name="T:System.Windows.DragDrop">
			<summary>Provides helper methods and fields for initiating drag-and-drop operations, including a method to begin a drag-and-drop operation, and facilities for adding and removing drag-and-drop related event handlers.</summary>
		</member>
		<member name="F:System.Windows.DragDrop.DragEnterEvent">
			<summary>Identifies the <see cref="E:System.Windows.DragDrop.DragEnter"></see>  GTMT#attached event.</summary>
			<returns>The identifier for the <see cref="E:System.Windows.UIElement.DragEnter"></see> attached event.</returns>
		</member>
		<member name="F:System.Windows.DragDrop.DragLeaveEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.DragLeave"></see>  GTMT#attached event</summary>
			<returns>The identifier for the <see cref="E:System.Windows.UIElement.DragLeave"></see> attached event.</returns>
		</member>
		<member name="F:System.Windows.DragDrop.DragOverEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.DragOver"></see>  GTMT#attached event</summary>
			<returns>The identifier for the <see cref="E:System.Windows.UIElement.DragOver"></see> attached event.</returns>
		</member>
		<member name="F:System.Windows.DragDrop.DropEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.Drop"></see>  GTMT#attached event</summary>
			<returns>The identifier for the <see cref="E:System.Windows.UIElement.Drop"></see> attached event.</returns>
		</member>
		<member name="F:System.Windows.DragDrop.GiveFeedbackEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.GiveFeedback"></see>  GTMT#attached event</summary>
			<returns>The identifier for the <see cref="E:System.Windows.UIElement.GiveFeedback"></see> attached event.</returns>
		</member>
		<member name="F:System.Windows.DragDrop.PreviewDragEnterEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDragEnter"></see>  GTMT#attached event</summary>
			<returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewDragEnter"></see> attached event.</returns>
		</member>
		<member name="F:System.Windows.DragDrop.PreviewDragLeaveEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDragLeave"></see>  GTMT#attached event</summary>
			<returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewDragLeave"></see> attached event.</returns>
		</member>
		<member name="F:System.Windows.DragDrop.PreviewDragOverEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDragOver"></see>  GTMT#attached event</summary>
			<returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewDragOver"></see> attached event.</returns>
		</member>
		<member name="F:System.Windows.DragDrop.PreviewDropEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDrop"></see>  GTMT#attached event</summary>
			<returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewDrop"></see> attached event.</returns>
		</member>
		<member name="F:System.Windows.DragDrop.PreviewGiveFeedbackEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewGiveFeedback"></see>  GTMT#attached event</summary>
			<returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewGiveFeedback"></see> attached event.</returns>
		</member>
		<member name="F:System.Windows.DragDrop.PreviewQueryContinueDragEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag"></see>  GTMT#attached event</summary>
			<returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag"></see> attached event.</returns>
		</member>
		<member name="F:System.Windows.DragDrop.QueryContinueDragEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.QueryContinueDrag"></see>  GTMT#attached event</summary>
			<returns>The identifier for the <see cref="E:System.Windows.UIElement.QueryContinueDrag"></see> attached event.</returns>
		</member>
		<member name="M:System.Windows.DragDrop.AddDragEnterHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
			<summary>Adds a <see cref="E:System.Windows.UIElement.DragEnter"></see> event handler to a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) to which to add the event handler.</param>
			<param name="handler">A delegate that references the handler method to be added.</param>
		</member>
		<member name="M:System.Windows.DragDrop.AddDragLeaveHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
			<summary>Adds a <see cref="E:System.Windows.UIElement.DragLeave"></see> event handler to a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) to which to add the event handler.</param>
			<param name="handler">A delegate that references the handler method to be added.</param>
		</member>
		<member name="M:System.Windows.DragDrop.AddDragOverHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
			<summary>Adds a <see cref="E:System.Windows.UIElement.DragOver"></see> event handler to a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) to which to add the event handler.</param>
			<param name="handler">A delegate that references the handler method to be added.</param>
		</member>
		<member name="M:System.Windows.DragDrop.AddDropHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
			<summary>Adds a <see cref="E:System.Windows.UIElement.Drop"></see> event handler to a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) to which to add the event handler.</param>
			<param name="handler">A delegate that references the handler method to be added.</param>
		</member>
		<member name="M:System.Windows.DragDrop.AddGiveFeedbackHandler(System.Windows.DependencyObject,System.Windows.GiveFeedbackEventHandler)">
			<summary>Adds a <see cref="E:System.Windows.UIElement.GiveFeedback"></see> event handler to a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) to which to add the event handler.</param>
			<param name="handler">A delegate that references the handler method to be added.</param>
		</member>
		<member name="M:System.Windows.DragDrop.AddPreviewDragEnterHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
			<summary>Adds a <see cref="E:System.Windows.UIElement.PreviewDragEnter"></see> event handler to a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) to which to add the event handler.</param>
			<param name="handler">A delegate that references the handler method to be added.</param>
		</member>
		<member name="M:System.Windows.DragDrop.AddPreviewDragLeaveHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
			<summary>Adds a <see cref="E:System.Windows.UIElement.PreviewDragLeave"></see> event handler to a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) to which to add the event handler.</param>
			<param name="handler">A delegate that references the handler method to be added.</param>
		</member>
		<member name="M:System.Windows.DragDrop.AddPreviewDragOverHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
			<summary>Adds a <see cref="E:System.Windows.UIElement.PreviewDragOver"></see> event handler to a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) to which to add the event handler.</param>
			<param name="handler">A delegate that references the handler method to be added.</param>
		</member>
		<member name="M:System.Windows.DragDrop.AddPreviewDropHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
			<summary>Adds a <see cref="E:System.Windows.UIElement.PreviewDrop"></see> event handler to a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) to which to add the event handler.</param>
			<param name="handler">A delegate that references the handler method to be added.</param>
		</member>
		<member name="M:System.Windows.DragDrop.AddPreviewGiveFeedbackHandler(System.Windows.DependencyObject,System.Windows.GiveFeedbackEventHandler)">
			<summary>Adds a <see cref="E:System.Windows.UIElement.PreviewGiveFeedback"></see> event handler to a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) to which to add the event handler.</param>
			<param name="handler">A delegate that references the handler method to be added.</param>
		</member>
		<member name="M:System.Windows.DragDrop.AddPreviewQueryContinueDragHandler(System.Windows.DependencyObject,System.Windows.QueryContinueDragEventHandler)">
			<summary>Adds a <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag"></see> event handler to a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) to which to add the event handler.</param>
			<param name="handler">A delegate that references the handler method to be added.</param>
		</member>
		<member name="M:System.Windows.DragDrop.AddQueryContinueDragHandler(System.Windows.DependencyObject,System.Windows.QueryContinueDragEventHandler)">
			<summary>Adds a <see cref="E:System.Windows.UIElement.QueryContinueDrag"></see> event handler to a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) to which to add the event handler.</param>
			<param name="handler">A delegate that references the handler method to be added.</param>
		</member>
		<member name="M:System.Windows.DragDrop.DoDragDrop(System.Windows.DependencyObject,System.Object,System.Windows.DragDropEffects)">
			<summary>Initiates a drag-and-drop operation.</summary>
			<returns>A value from the <see cref="T:System.Windows.DragDropEffects"></see> enumeration that specifies the final effect that was performed during the drag-and-drop operation.</returns>
			<param name="data">A data object that contains the data being dragged.</param>
			<param name="dragSource">A reference to the dependency object that is the source of the data being dragged.</param>
			<param name="allowedEffects">A value from the <see cref="T:System.Windows.DragDropEffects"></see> enumeration specifying permitted effects of the drag-and-drop operation.</param>
			<exception cref="T:System.ArgumentNullException">Raised when dragSource or data is null.</exception>
		</member>
		<member name="M:System.Windows.DragDrop.RemoveDragEnterHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
			<summary>Removes a <see cref="E:System.Windows.UIElement.DragEnter"></see> event handler from a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) from which to remove the event handler.</param>
			<param name="handler">A delegate that references the handler method to be removed</param>
		</member>
		<member name="M:System.Windows.DragDrop.RemoveDragLeaveHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
			<summary>Removes a <see cref="E:System.Windows.UIElement.DragLeave"></see> event handler from a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) from which to remove the event handler.</param>
			<param name="handler">A delegate that references the handler method to be removed</param>
		</member>
		<member name="M:System.Windows.DragDrop.RemoveDragOverHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
			<summary>Removes a <see cref="E:System.Windows.UIElement.DragOver"></see> event handler from a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) from which to remove the event handler.</param>
			<param name="handler">A delegate that references the handler method to be removed</param>
		</member>
		<member name="M:System.Windows.DragDrop.RemoveDropHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
			<summary>Removes a <see cref="E:System.Windows.UIElement.Drop"></see> event handler from a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) from which to remove the event handler.</param>
			<param name="handler">A delegate that references the handler method to be removed</param>
		</member>
		<member name="M:System.Windows.DragDrop.RemoveGiveFeedbackHandler(System.Windows.DependencyObject,System.Windows.GiveFeedbackEventHandler)">
			<summary>Removes a <see cref="E:System.Windows.UIElement.GiveFeedback"></see> event handler from a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) from which to remove the event handler.</param>
			<param name="handler">A delegate that references the handler method to be removed</param>
		</member>
		<member name="M:System.Windows.DragDrop.RemovePreviewDragEnterHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
			<summary>Removes a <see cref="E:System.Windows.UIElement.PreviewDragEnter"></see> event handler from a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) from which to remove the event handler.</param>
			<param name="handler">A delegate that references the handler method to be removed</param>
		</member>
		<member name="M:System.Windows.DragDrop.RemovePreviewDragLeaveHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
			<summary>Removes a <see cref="E:System.Windows.UIElement.PreviewDragLeave"></see> event handler from a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) from which to remove the event handler.</param>
			<param name="handler">A delegate that references the handler method to be removed</param>
		</member>
		<member name="M:System.Windows.DragDrop.RemovePreviewDragOverHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
			<summary>Removes a <see cref="E:System.Windows.UIElement.PreviewDragOver"></see> event handler from a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) from which to remove the event handler.</param>
			<param name="handler">A delegate that references the handler method to be removed</param>
		</member>
		<member name="M:System.Windows.DragDrop.RemovePreviewDropHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
			<summary>Removes a <see cref="E:System.Windows.UIElement.PreviewDrop"></see> event handler from a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) from which to remove the event handler.</param>
			<param name="handler">A delegate that references the handler method to be removed</param>
		</member>
		<member name="M:System.Windows.DragDrop.RemovePreviewGiveFeedbackHandler(System.Windows.DependencyObject,System.Windows.GiveFeedbackEventHandler)">
			<summary>Removes a <see cref="E:System.Windows.UIElement.PreviewGiveFeedback"></see> event handler from a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) from which to remove the event handler.</param>
			<param name="handler">A delegate that references the handler method to be removed</param>
		</member>
		<member name="M:System.Windows.DragDrop.RemovePreviewQueryContinueDragHandler(System.Windows.DependencyObject,System.Windows.QueryContinueDragEventHandler)">
			<summary>Removes a <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag"></see> event handler from a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) from which to remove the event handler.</param>
			<param name="handler">A delegate that references the handler method to be removed</param>
		</member>
		<member name="M:System.Windows.DragDrop.RemoveQueryContinueDragHandler(System.Windows.DependencyObject,System.Windows.QueryContinueDragEventHandler)">
			<summary>Removes a <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag"></see> event handler from a specified dependency object.</summary>
			<param name="element">The dependency object (a <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see>) from which to remove the event handler.</param>
			<param name="handler">A delegate that references the handler method to be removed</param>
		</member>
		<member name="T:System.Windows.DragDropEffects">
			<summary>Specifies the effects of a drag-and-drop operation.</summary>
		</member>
		<member name="F:System.Windows.DragDropEffects.All">
			<summary>The data is copied, removed from the drag source, and scrolled in the drop target.</summary>
		</member>
		<member name="F:System.Windows.DragDropEffects.Copy">
			<summary>The data is copied to the drop target.</summary>
		</member>
		<member name="F:System.Windows.DragDropEffects.Link">
			<summary>The data from the drag source is linked to the drop target.</summary>
		</member>
		<member name="F:System.Windows.DragDropEffects.Move">
			<summary>The data from the drag source is moved to the drop target.</summary>
		</member>
		<member name="F:System.Windows.DragDropEffects.None">
			<summary>The drop target does not accept the data.</summary>
		</member>
		<member name="F:System.Windows.DragDropEffects.Scroll">
			<summary>Scrolling is about to start or is currently occurring in the drop target.</summary>
		</member>
		<member name="T:System.Windows.DragDropKeyStates">
			<summary>Specifies the current state of the modifier keys (SHIFT, CTRL, and ALT), as well as the state of the mouse buttons.</summary>
		</member>
		<member name="F:System.Windows.DragDropKeyStates.AltKey">
			<summary>The ALT key is pressed.</summary>
		</member>
		<member name="F:System.Windows.DragDropKeyStates.ControlKey">
			<summary>The control (CTRL) key is pressed.</summary>
		</member>
		<member name="F:System.Windows.DragDropKeyStates.LeftMouseButton">
			<summary>The left mouse button is pressed.</summary>
		</member>
		<member name="F:System.Windows.DragDropKeyStates.MiddleMouseButton">
			<summary>The middle mouse button is pressed.</summary>
		</member>
		<member name="F:System.Windows.DragDropKeyStates.None">
			<summary>No modifier keys or mouse buttons are pressed.</summary>
		</member>
		<member name="F:System.Windows.DragDropKeyStates.RightMouseButton">
			<summary>The right mouse button is pressed.</summary>
		</member>
		<member name="F:System.Windows.DragDropKeyStates.ShiftKey">
			<summary>The shift (SHIFT) key is pressed.</summary>
		</member>
		<member name="T:System.Windows.DragEventArgs">
			<summary>Contains arguments relevant to all drag-and-drop events (<see cref="E:System.Windows.DragDrop.DragEnter"></see>, <see cref="E:System.Windows.DragDrop.DragLeave"></see>, <see cref="E:System.Windows.DragDrop.DragOver"></see>, and <see cref="E:System.Windows.DragDrop.Drop"></see>).</summary>
		</member>
		<member name="M:System.Windows.DragEventArgs.GetPosition(System.Windows.IInputElement)">
			<summary>Returns a drop point that is relative to a specified <see cref="T:System.Windows.IInputElement"></see>.</summary>
			<returns>A drop point that is relative to the element specified in relativeTo.</returns>
			<param name="relativeTo">An <see cref="T:System.Windows.IInputElement"></see> object for which to get a relative drop point.</param>
			<exception cref="T:System.ArgumentNullException">Raised when relativeTo is null.</exception>
		</member>
		<member name="P:System.Windows.DragEventArgs.AllowedEffects">
			<summary>Gets a member of the <see cref="T:System.Windows.DragDropEffects"></see> enumeration that specifies which operations are allowed by the originator of the drag event.</summary>
			<returns>A member of the <see cref="T:System.Windows.DragDropEffects"></see> enumeration that specifies which operations are allowed by the originator of the drag event.</returns>
		</member>
		<member name="P:System.Windows.DragEventArgs.Data">
			<summary>Gets a data object that contains the data associated with the corresponding drag event.</summary>
			<returns>A data object that contains the data associated with the corresponding drag event..</returns>
		</member>
		<member name="P:System.Windows.DragEventArgs.Effects">
			<summary>Gets or sets the target drop-and-drop operation.</summary>
			<returns>A member of the <see cref="T:System.Windows.DragDropEffects"></see> enumeration specifying the target drag-and-drop operation.</returns>
		</member>
		<member name="P:System.Windows.DragEventArgs.KeyStates">
			<summary>Gets a flag enumeration indicating the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.</summary>
			<returns>One or more members of the <see cref="T:System.Windows.DragDropKeyStates"></see> flag enumeration.</returns>
		</member>
		<member name="T:System.Windows.DragEventHandler">
			<summary>Represents a method that handles drag-and-drop events (<see cref="E:System.Windows.DragDrop.DragEnter"></see>, <see cref="E:System.Windows.DragDrop.DragLeave"></see>, <see cref="E:System.Windows.DragDrop.DragOver"></see>, and <see cref="E:System.Windows.DragDrop.Drop"></see>).</summary>
		</member>
		<member name="T:System.Windows.Duration">
			<summary>Represents the duration of time that a <see cref="T:System.Windows.Media.Animation.Timeline"></see> is active.</summary>
		</member>
		<member name="T:System.Windows.EventManager">
			<summary>Provides event-related utility methods that register routed events for class owners, examine registered handlers for routed events, and add class handlers. This class cannot be inherited. </summary>
		</member>
		<member name="M:System.Windows.EventManager.GetRoutedEvents">
			<summary> Returns identifiers for routed events that have been registered to the event system. </summary>
			<returns>Returns <see cref="T:System.Windows.RoutedEvent"></see> objects that have been registered so far.</returns>
		</member>
		<member name="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)">
			<summary>Finds all routed event identifiers for events that are registered with the provided owner type. </summary>
			<returns>An array of matching routed event identifiers if any match is found; returns null otherwise.</returns>
			<param name="ownerType">The type to start the search with. Base classes are included in the search.</param>
		</member>
		<member name="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
			<summary> Registers a class handler for a particular routed event. </summary>
			<param name="routedEvent">The routed event identifier of the event to handle.</param>
			<param name="classType">The type of the class that is declaring class handling.</param>
			<param name="handler">Reference to the class handler implementation.</param>
		</member>
		<member name="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
			<summary> Registers a class handler for a particular routed event. </summary>
			<param name="handledEventsToo">true to have this class handler be invoked even if arguments of the routed event have been marked as handled. false to retain the default behavior of not invoking the handler on any marked-handled event.</param>
			<param name="routedEvent">The routed event identifier of the event to handle.</param>
			<param name="classType">The type of the class that is declaring class handling.</param>
			<param name="handler">Reference to the class handler implementation.</param>
		</member>
		<member name="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
			<summary> Registers a new <see cref="T:System.Windows.RoutedEvent"></see> into the TLA#tla_winclient event system, using the provided parameters. </summary>
			<returns>The identifier for the newly registered routed event. This identifier object can now be stored as a static field in a class and then used as a parameter for methods that attach handlers to the event.</returns>
			<param name="name">The name of the routed event. The name must be unique within the owner type and cannot be null, or String.Empty.</param>
			<param name="routingStrategy">The routing strategy of the event as a value of the enumeration.</param>
			<param name="handlerType">The type of the event handler. This must be a delegate type and cannot be null.</param>
			<param name="ownerType">The owner class type of the routed event. This cannot be null.</param>
		</member>
		<member name="T:System.Windows.EventPrivateKey">
			<summary> Provides unique identification for events whose handlers are stored into an internal hashtable. </summary>
		</member>
		<member name="M:System.Windows.EventPrivateKey.#ctor">
			<summary> Initializes a new instance of the EventPrivateKey class. </summary>
		</member>
		<member name="T:System.Windows.EventRoute">
			<summary> Represents the container for the route to be followed by a routed event. </summary>
		</member>
		<member name="M:System.Windows.EventRoute.#ctor(System.Windows.RoutedEvent)">
			<summary> Initializes an instance of the <see cref="T:System.Windows.EventRoute"></see> class. </summary>
			<param name="routedEvent">The non-NULL event identifier to be associated with this event route.</param>
		</member>
		<member name="M:System.Windows.EventRoute.Add(System.Object,System.Delegate,System.Boolean)">
			<summary> Adds the specified handler for the specified target to the route. </summary>
			<param name="handledEventsToo">Indicates whether or not the listener detects events that have already been handled.</param>
			<param name="target">Specifies the target object of which the handler is to be added to the route.</param>
			<param name="handler">Specifies the handler to be added to the route.</param>
		</member>
		<member name="T:System.Windows.FlowDirection">
			<summary>Defines constants that specify the content flow direction for text and TLA#tla_ui elements. </summary>
		</member>
		<member name="F:System.Windows.FlowDirection.LeftToRight">
			<summary>Indicates that content should flow from left to right.</summary>
		</member>
		<member name="F:System.Windows.FlowDirection.RightToLeft">
			<summary>Indicates that content should flow from right to left.</summary>
		</member>
		<member name="T:System.Windows.FontCapitals">
			<summary>Describes the capital letter style for a <see cref="T:System.Windows.Documents.Typography"></see> object.</summary>
		</member>
		<member name="F:System.Windows.FontCapitals.AllPetiteCaps">
			<summary>Both capital and lowercase letters are replaced with a glyph form of an uppercase letter with the same approximate height. Petite capitals are smaller than small capitals.</summary>
		</member>
		<member name="F:System.Windows.FontCapitals.AllSmallCaps">
			<summary>Both capital and lowercase letters are replaced with a glyph form of an uppercase letter with the same approximate height.</summary>
		</member>
		<member name="F:System.Windows.FontCapitals.Normal">
			<summary>Capital letters render normally.</summary>
		</member>
		<member name="F:System.Windows.FontCapitals.PetiteCaps">
			<summary>Lowercase letters are replaced with a glyph form of an uppercase letter with the same approximate height. Petite capitals are smaller than small capitals.</summary>
		</member>
		<member name="F:System.Windows.FontCapitals.SmallCaps">
			<summary>Lowercase letters are replaced with a glyph form of an uppercase letter with the same approximate height.</summary>
		</member>
		<member name="F:System.Windows.FontCapitals.Titling">
			<summary>Glyph forms are substituted with a typographic form specifically designed for titles.</summary>
		</member>
		<member name="F:System.Windows.FontCapitals.Unicase">
			<summary>Capital letters display in unicase. Unicase fonts render both upper and lowercase letters in a mixture of upper and lowercase glyphs determined by the type designer.</summary>
		</member>
		<member name="T:System.Windows.FontEastAsianLanguage">
			<summary> Provides a mechanism for the user to select font-specific versions of glyphs for a specified East Asian writing system or language. </summary>
		</member>
		<member name="F:System.Windows.FontEastAsianLanguage.HojoKanji">
			<summary> Replaces default glyphs with the corresponding forms from the Hojo Kanji specification. </summary>
		</member>
		<member name="F:System.Windows.FontEastAsianLanguage.Jis04">
			<summary> Replaces default Japanese glyphs with the corresponding forms from the JIS04 specification. </summary>
		</member>
		<member name="F:System.Windows.FontEastAsianLanguage.Jis78">
			<summary> Replaces default Japanese glyphs with the corresponding forms from the JIS78 specification. </summary>
		</member>
		<member name="F:System.Windows.FontEastAsianLanguage.Jis83">
			<summary> Replaces default Japanese glyphs with the corresponding forms from the JIS83 specification. </summary>
		</member>
		<member name="F:System.Windows.FontEastAsianLanguage.Jis90">
			<summary> Replaces default Japanese glyphs with the corresponding forms from the JIS90 specification. </summary>
		</member>
		<member name="F:System.Windows.FontEastAsianLanguage.NlcKanji">
			<summary> Replaces default glyphs with the corresponding forms from the NLC Kanji specification. </summary>
		</member>
		<member name="F:System.Windows.FontEastAsianLanguage.Normal">
			<summary> No font-specific glyph versions are applied. </summary>
		</member>
		<member name="F:System.Windows.FontEastAsianLanguage.Simplified">
			<summary> Replaces traditional Chinese or Japanese forms with their corresponding simplified forms. </summary>
		</member>
		<member name="F:System.Windows.FontEastAsianLanguage.Traditional">
			<summary> Replaces simplified Chinese or Japanese forms with their corresponding traditional forms. </summary>
		</member>
		<member name="F:System.Windows.FontEastAsianLanguage.TraditionalNames">
			<summary> Replaces simplified Kanji forms with their corresponding traditional forms. This glyph set is explicitly limited to the traditional forms considered proper for use in personal names. </summary>
		</member>
		<member name="T:System.Windows.FontEastAsianWidths">
			<summary> Provides a mechanism for the user to select glyphs of different width styles. </summary>
		</member>
		<member name="F:System.Windows.FontEastAsianWidths.Full">
			<summary> Replaces uniform width glyphs with full width (usually em) glyphs. </summary>
		</member>
		<member name="F:System.Windows.FontEastAsianWidths.Half">
			<summary> Replaces uniform width glyphs with half width (half em) glyphs. </summary>
		</member>
		<member name="F:System.Windows.FontEastAsianWidths.Normal">
			<summary> Default width style. </summary>
		</member>
		<member name="F:System.Windows.FontEastAsianWidths.Proportional">
			<summary> Replaces uniform width glyphs with proportionally spaced glyphs. </summary>
		</member>
		<member name="F:System.Windows.FontEastAsianWidths.Quarter">
			<summary> Replaces uniform width glyphs with one-quarter width (one-quarter em) glyphs. </summary>
		</member>
		<member name="F:System.Windows.FontEastAsianWidths.Third">
			<summary> Replaces uniform width glyphs with one-third width (one-third em) glyphs. </summary>
		</member>
		<member name="T:System.Windows.FontFraction">
			<summary>Describes the fraction style for a <see cref="T:System.Windows.Documents.Typography"></see> object.</summary>
		</member>
		<member name="F:System.Windows.FontFraction.Normal">
			<summary>Default style is used.</summary>
		</member>
		<member name="F:System.Windows.FontFraction.Slashed">
			<summary>Slashed fraction style is used.</summary>
		</member>
		<member name="F:System.Windows.FontFraction.Stacked">
			<summary>Stacked fraction style is used.</summary>
		</member>
		<member name="T:System.Windows.FontNumeralAlignment">
			<summary>Describes the numeral alignment for a <see cref="T:System.Windows.Documents.Typography"></see> object.</summary>
		</member>
		<member name="F:System.Windows.FontNumeralAlignment.Normal">
			<summary>Default numeral alignment is used.</summary>
		</member>
		<member name="F:System.Windows.FontNumeralAlignment.Proportional">
			<summary>Proportional width alignment is used.</summary>
		</member>
		<member name="F:System.Windows.FontNumeralAlignment.Tabular">
			<summary>Tabular alignment is used.</summary>
		</member>
		<member name="T:System.Windows.FontNumeralStyle">
			<summary>Describes the numeral style for a <see cref="T:System.Windows.Documents.Typography"></see> object.</summary>
		</member>
		<member name="F:System.Windows.FontNumeralStyle.Lining">
			<summary>Lining numeral style is used. Replaces default glyphs with numeric forms of even height.</summary>
		</member>
		<member name="F:System.Windows.FontNumeralStyle.Normal">
			<summary>Default numeral style is used.</summary>
		</member>
		<member name="F:System.Windows.FontNumeralStyle.OldStyle">
			<summary>Old style numeral style is used. Replaces default glyphs with a figure style that matches lowercase letters in height and color.</summary>
		</member>
		<member name="T:System.Windows.FontStretch">
			<summary> Describes the degree to which a font has been stretched compared to a font's normal aspect ratio. </summary>
		</member>
		<member name="M:System.Windows.FontStretch.Compare(System.Windows.FontStretch,System.Windows.FontStretch)">
			<summary> Compares two instances of FontStretch. </summary>
			<returns>Indicates the relationship between the two instances of FontStretch. When the value is less than zero, left is less than right. When this value is zero, it indicates that both operands are equal. When the value is greater than zero, it indicates that left is greater than right.</returns>
			<param name="right">The second object to compare.</param>
			<param name="left">The first object to compare.</param>
		</member>
		<member name="M:System.Windows.FontStretch.Equals(System.Windows.FontStretch)">
			<summary> Compares two instances of FontStretch for equality. </summary>
			<returns>true if two instances are equal; otherwise, false.</returns>
			<param name="obj">Instance of FontStretch to compare for equality.</param>
		</member>
		<member name="M:System.Windows.FontStretch.Equals(System.Object)">
			<summary> Compares two instances of FontStretch for equality. </summary>
			<returns>true if two instances are equal; otherwise, false.</returns>
			<param name="obj">Instance of FontStretch to compare for equality.</param>
		</member>
		<member name="M:System.Windows.FontStretch.FromOpenTypeStretch(System.Int32)">
			<summary> Creates a new instance of FontStretch that corresponds to the TLA#tla_opentype usStretchClass value. </summary>
			<returns>A new instance of FontStretch.</returns>
			<param name="stretchValue">An integer value between one and nine that corresponds to the usStretchValue definition in the TLA2#tla_opentype specification. </param>
		</member>
		<member name="M:System.Windows.FontStretch.GetHashCode">
			<summary> Retrieves the hash code for this object. </summary>
			<returns>A 32-bit signed integer hash code.</returns>
		</member>
		<member name="M:System.Windows.FontStretch.op_Equality(System.Windows.FontStretch,System.Windows.FontStretch)">
			<summary> Compares two instances of FontStretch for equality. </summary>
			<returns>true when specified FontStretch objects are equal; otherwise, false.</returns>
			<param name="right">Second instance of FontStretch to compare.</param>
			<param name="left">First instance of FontStretch to compare.</param>
		</member>
		<member name="M:System.Windows.FontStretch.op_GreaterThan(System.Windows.FontStretch,System.Windows.FontStretch)">
			<summary> Evaluates two instances of FontStretch to determine if one instance is greater than the other.  </summary>
			<returns>true if left is greater than right; otherwise, false.</returns>
			<param name="right">Second instance of FontStretch to compare.</param>
			<param name="left">First instance of FontStretch to compare.</param>
		</member>
		<member name="M:System.Windows.FontStretch.op_GreaterThanOrEqual(System.Windows.FontStretch,System.Windows.FontStretch)">
			<summary> Evaluates two instances of FontStretch to determine whether one instance is greater than or equal to the other.  </summary>
			<returns>true if left is greater than or equal to right; otherwise, false.</returns>
			<param name="right">The second instance of FontStretch to compare.</param>
			<param name="left">The first instance of FontStretch to compare.</param>
		</member>
		<member name="M:System.Windows.FontStretch.op_Inequality(System.Windows.FontStretch,System.Windows.FontStretch)">
			<summary> Evaluates two instances of FontStretch to determine inequality. </summary>
			<returns>false if left is equal to right; otherwise, true.</returns>
			<param name="right">The second instance of FontStretch to compare.</param>
			<param name="left">The first instance of FontStretch to compare.</param>
		</member>
		<member name="M:System.Windows.FontStretch.op_LessThan(System.Windows.FontStretch,System.Windows.FontStretch)">
			<summary> Evaluates two instances of FontStretch to determine whether one instance is less than the other. </summary>
			<returns>true if left is less than right; otherwise, false.</returns>
			<param name="right">The second instance of FontStretch to compare.</param>
			<param name="left">The first instance of FontStretch to compare.</param>
		</member>
		<member name="M:System.Windows.FontStretch.op_LessThanOrEqual(System.Windows.FontStretch,System.Windows.FontStretch)">
			<summary> Evaluates two instances of FontStretch to determine whether one instance is less than or equal to the other. </summary>
			<returns>true if left is less than or equal to right; otherwise, false.</returns>
			<param name="right">The second instance of FontStretch to compare.</param>
			<param name="left">The first instance of FontStretch to compare.</param>
		</member>
		<member name="M:System.Windows.FontStretch.ToOpenTypeStretch">
			<summary> Returns a value that represents the TLA#tla_opentype  usStretchClass for this FontStretch object. </summary>
			<returns>An integer value between 1 and 999 that corresponds to the usStretchClass definition in the TLA2#tla_opentype specification.</returns>
		</member>
		<member name="M:System.Windows.FontStretch.ToString">
			<summary> Creates a String representation of the current FontStretch object based on the current culture. </summary>
			<returns>A String representation of the object.</returns>
		</member>
		<member name="T:System.Windows.FontStretchConverter">
			<summary>Converts instances of FontStretch to and from other data types.  </summary>
		</member>
		<member name="M:System.Windows.FontStretchConverter.#ctor">
			<summary>Initializes a new instance of the FontStretchConverter class. </summary>
		</member>
		<member name="M:System.Windows.FontStretchConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Returns a value that indicates whether this converter can convert an object of the given type. </summary>
			<returns>Indicates whether the type can be converted to an instance of FontStretch.ValueMeaningfalseThe converter cannot convert from the provided type.trueThe converter can convert the provided type to an instance of FontStretch.</returns>
			<param name="td">Describes the context information of a type.</param>
			<param name="t">The type of the source that is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.FontStretchConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether an instance of FontStretch can be converted to a different type. </summary>
			<returns>true if the converter can can convert this instance of Fontstretch; otherwise, false.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The desired type that that this instance of FontStretch is being evaluated for conversion to.</param>
		</member>
		<member name="M:System.Windows.FontStretchConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary>Attempts to convert a specified object to an instance of FontStretch. </summary>
			<returns>The instance of FontStretch created from the converted value.</returns>
			<param name="td">Describes the context information of a type.</param>
			<param name="ci">Describes the CultureInfo of the type being converted. </param>
			<param name="value">The object being converted.</param>
			<exception cref="T:System.NotSupportedException">Occurs if value is null or is not a valid type for conversion.</exception>
		</member>
		<member name="M:System.Windows.FontStretchConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary>Attempts to convert an instance of FontStretch to a specified type. </summary>
			<returns>The object created from the converted instance of FontStretch.</returns>
			<param name="culture">Describes the CultureInfo of the type being converted.</param>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The type this instance of FontStretch is converted to. </param>
			<param name="value">The instance of FontStretch to convert.</param>
			<exception cref="T:System.NotSupportedException">Occurs if value is null or is not an instance of FontStretch, or if the destinationType is not a valid destination type.</exception>
		</member>
		<member name="T:System.Windows.FontStretches">
			<summary>Describes the degree to which a font form is stretched from its normal aspect ratio, which is the original width to height ratio specified for the glyphs in the font.</summary>
		</member>
		<member name="P:System.Windows.FontStretches.Condensed">
			<summary>Gets a value that indicates whether a Condensed font form was selected. </summary>
			<returns>Indicates a Condensed font form was selected.</returns>
		</member>
		<member name="P:System.Windows.FontStretches.Expanded">
			<summary>Gets a value that indicates whether an Expanded font form was selected. </summary>
			<returns>Indicates an Expanded font form was selected.</returns>
		</member>
		<member name="P:System.Windows.FontStretches.ExtraCondensed">
			<summary>Gets a value that indicates whether an ExtraCondensed font form was selected. </summary>
			<returns>Indicates an ExtraCondensed font form was selected.</returns>
		</member>
		<member name="P:System.Windows.FontStretches.ExtraExpanded">
			<summary>Gets a value that indicates whether an ExtraExpanded font form was selected. </summary>
			<returns>Indicates an ExtraExpanded font form was selected.</returns>
		</member>
		<member name="P:System.Windows.FontStretches.Medium">
			<summary>Gets a value that indicates whether a Medium font form was selected. </summary>
			<returns>Indicates a Medium font form was selected.</returns>
		</member>
		<member name="P:System.Windows.FontStretches.Normal">
			<summary>Gets a value that indicates whether a Normal font form was selected. </summary>
			<returns>Indicates a Normal font form was selected.</returns>
		</member>
		<member name="P:System.Windows.FontStretches.SemiCondensed">
			<summary>Gets a value that indicates whether a SemiCondensed font form was selected. </summary>
			<returns>Indicates a SemiCondensed font form was selected.</returns>
		</member>
		<member name="P:System.Windows.FontStretches.SemiExpanded">
			<summary>Gets a value that indicates whether a SemiExpanded font form was selected. </summary>
			<returns>Indicates a SemiExpanded font form was selected.</returns>
		</member>
		<member name="P:System.Windows.FontStretches.UltraCondensed">
			<summary>Gets a value that indicates whether an UltraCondensed font form was selected. </summary>
			<returns>Indicates an UltraCondensed font form was selected.</returns>
		</member>
		<member name="P:System.Windows.FontStretches.UltraExpanded">
			<summary>Gets a value that indicates whether an UltraExpanded font form was selected. </summary>
			<returns>Indicates an UltraExpanded font form was selected.</returns>
		</member>
		<member name="T:System.Windows.FontStyle">
			<summary>Defines a structure which represents the style of a font face as normal, italic, or oblique.</summary>
		</member>
		<member name="M:System.Windows.FontStyle.Equals(System.Windows.FontStyle)">
			<summary>Compares a <see cref="T:System.Windows.FontStyle"></see> with the current <see cref="T:System.Windows.FontStyle"></see> instance for equality.</summary>
			<returns>true to show the two instances are equal; otherwise, false.</returns>
			<param name="obj">An instance of <see cref="T:System.Windows.FontStyle"></see> to compare for equality.</param>
		</member>
		<member name="M:System.Windows.FontStyle.Equals(System.Object)">
			<summary>Compares a <see cref="T:System.Object"></see> with the current <see cref="T:System.Windows.FontStyle"></see> instance for equality.</summary>
			<returns>true to show the two instances are equal; otherwise, false.</returns>
			<param name="obj">An <see cref="T:System.Object"></see> value that represents the <see cref="T:System.Windows.FontStyle"></see> to compare for equality.</param>
		</member>
		<member name="M:System.Windows.FontStyle.GetHashCode">
			<summary>Retrieves the GTMT#hash code for this object. </summary>
			<returns>A 32-bit hash code, which is a signed integer.</returns>
		</member>
		<member name="M:System.Windows.FontStyle.op_Equality(System.Windows.FontStyle,System.Windows.FontStyle)">
			<summary>Compares two instances of <see cref="T:System.Windows.FontStyle"></see> for equality.</summary>
			<returns>true to show the specified <see cref="T:System.Windows.FontStyle"></see> objects are equal; otherwise, false.</returns>
			<param name="right">The second instance of <see cref="T:System.Windows.FontStyle"></see> to compare.</param>
			<param name="left">The first instance of <see cref="T:System.Windows.FontStyle"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.FontStyle.op_Inequality(System.Windows.FontStyle,System.Windows.FontStyle)">
			<summary>Evaluates two instances of <see cref="T:System.Windows.FontStyle"></see> to determine inequality.</summary>
			<returns>false to show left is equal to right; otherwise, true.</returns>
			<param name="right">The second instance of <see cref="T:System.Windows.FontStyle"></see> to compare.</param>
			<param name="left">The first instance of <see cref="T:System.Windows.FontStyle"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.FontStyle.ToString">
			<summary>Creates a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Windows.FontStyle"></see> object and is based on the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"></see> property information.</summary>
			<returns>A <see cref="T:System.String"></see> that represents the value of the <see cref="T:System.Windows.FontStyle"></see> object, such as "Normal", "Italic", or "Oblique".</returns>
		</member>
		<member name="T:System.Windows.FontStyleConverter">
			<summary>Converts instances of FontStyle to and from other data types.  </summary>
		</member>
		<member name="M:System.Windows.FontStyleConverter.#ctor">
			<summary>Initializes a new instance of the FontStyleConverter class. </summary>
		</member>
		<member name="M:System.Windows.FontStyleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Returns a value that indicates whether this converter can convert an object of the given type to an instance of FontStyle. </summary>
			<returns>true if the converter can convert the provided type to an instance of FontStyle; otherwise, false.</returns>
			<param name="td">Describes the context information of a type.</param>
			<param name="t">The type of the source that is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.FontStyleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether an instance of FontStyle can be converted to a different type. </summary>
			<returns>true if the converter can convert this instance of FontStyle; otherwise, false.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The desired type that that this instance of FontStyle is being evaluated for conversion to.</param>
		</member>
		<member name="M:System.Windows.FontStyleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary>Attempts to convert a specified object to an instance of FontStyle. </summary>
			<returns>The instance of FontStyle created from the converted value.</returns>
			<param name="td">Describes the context information of a type.</param>
			<param name="ci">Describes the CultureInfo of the type being converted. </param>
			<param name="value">The object being converted.</param>
			<exception cref="T:System.NotSupportedException">Occurs if value is null or is not a valid type for conversion.</exception>
		</member>
		<member name="M:System.Windows.FontStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary>Attempts to convert an instance of FontStyle to a specified type. </summary>
			<returns>The object created from the converted instance of FontStyle.</returns>
			<param name="culture">Describes the CultureInfo of the type being converted.</param>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The type this instance of FontStyle is converted to. </param>
			<param name="value">The instance of FontStyle to convert.</param>
			<exception cref="T:System.NotSupportedException">Occurs if value is null or is not an instance of FontStyle, or if the destinationType is not a valid destination type.</exception>
		</member>
		<member name="T:System.Windows.FontStyles">
			<summary>Defines an enumerator class that describes the style of a font as <see cref="P:System.Windows.FontStyles.Normal"></see>, <see cref="P:System.Windows.FontStyles.Italic"></see>, or <see cref="P:System.Windows.FontStyles.Oblique"></see>.</summary>
		</member>
		<member name="P:System.Windows.FontStyles.Italic">
			<summary>Gets a <see cref="T:System.Windows.FontStyle"></see> that represents an italic font style.</summary>
			<returns>A <see cref="T:System.Windows.FontStyle"></see>.</returns>
		</member>
		<member name="P:System.Windows.FontStyles.Normal">
			<summary>Gets a <see cref="T:System.Windows.FontStyle"></see> that represents a normal font style.</summary>
			<returns>A <see cref="T:System.Windows.FontStyle"></see>.</returns>
		</member>
		<member name="P:System.Windows.FontStyles.Oblique">
			<summary>Gets a <see cref="T:System.Windows.FontStyle"></see> that represents an oblique font style.</summary>
			<returns>A <see cref="T:System.Windows.FontStyle"></see>.</returns>
		</member>
		<member name="T:System.Windows.FontVariants">
			<summary> Renders variant typographic glyph forms. </summary>
		</member>
		<member name="F:System.Windows.FontVariants.Inferior">
			<summary> Replaces a default glyph with an inferior glyph, or it may combine glyph substitution with positioning adjustments for proper placement. Inferior forms are typically used in chemical formulas or mathematical notation. </summary>
		</member>
		<member name="F:System.Windows.FontVariants.Normal">
			<summary> Default font behavior. Font scaling and positioning is normal. </summary>
		</member>
		<member name="F:System.Windows.FontVariants.Ordinal">
			<summary> Replaces a default glyph with an ordinal glyph, or it may combine glyph substitution with positioning adjustments for proper placement. Ordinal forms are normally associated with numeric notation of an ordinal word, such as "1st" for "first." </summary>
		</member>
		<member name="F:System.Windows.FontVariants.Ruby">
			<summary> Replaces a default glyph with a smaller Japanese Kana glyph. This is used to clarify the meaning of Kanji, which may be unfamiliar to the reader. </summary>
		</member>
		<member name="F:System.Windows.FontVariants.Subscript">
			<summary> Replaces a default glyph with a subscript glyph. </summary>
		</member>
		<member name="F:System.Windows.FontVariants.Superscript">
			<summary> Replaces a default glyph with a superscript glyph. Superscript is commonly used for footnotes. </summary>
		</member>
		<member name="T:System.Windows.FontWeight">
			<summary>Refers to the density of a typeface, in terms of the lightness or heaviness of the strokes.</summary>
		</member>
		<member name="M:System.Windows.FontWeight.Compare(System.Windows.FontWeight,System.Windows.FontWeight)">
			<summary>Compares two instances of <see cref="T:System.Windows.FontWeight"></see>.</summary>
			<returns>An <see cref="T:System.Int32"></see> value that indicates the relationship between the two instances of <see cref="T:System.Windows.FontWeight"></see>. When the return value is less than zero, left is less than right. When this value is zero, it indicates that both operands are equal. When the value is greater than zero, it indicates that left is greater than right.</returns>
			<param name="right">The second <see cref="T:System.Windows.FontWeight"></see> object to compare.</param>
			<param name="left">The first <see cref="T:System.Windows.FontWeight"></see> object to compare.</param>
		</member>
		<member name="M:System.Windows.FontWeight.Equals(System.Windows.FontWeight)">
			<summary>Determines whether the current <see cref="T:System.Windows.FontWeight"></see> object is equal to a specified <see cref="T:System.Windows.FontWeight"></see> object.</summary>
			<returns>true if the two instances are equal; otherwise, false.</returns>
			<param name="obj">The instance of <see cref="T:System.Windows.FontWeight"></see> to compare for equality.</param>
		</member>
		<member name="M:System.Windows.FontWeight.Equals(System.Object)">
			<summary>Determines whether the current <see cref="T:System.Windows.FontWeight"></see> object is equal to a specified <see cref="T:System.Object"></see> object.</summary>
			<returns>true if the two instances are equal; otherwise, false.</returns>
			<param name="obj">The <see cref="T:System.Object"></see> to compare for equality.</param>
		</member>
		<member name="M:System.Windows.FontWeight.FromOpenTypeWeight(System.Int32)">
			<summary>Creates a new instance of <see cref="T:System.Windows.FontWeight"></see> that corresponds to the TLA#tla_opentypeusWeightClass value. </summary>
			<returns>A new instance of <see cref="T:System.Windows.FontWeight"></see>.</returns>
			<param name="weightValue">An integer value between one and nine that corresponds to the usWeightClass definition in the TLA2#tla_opentype specification.</param>
		</member>
		<member name="M:System.Windows.FontWeight.GetHashCode">
			<summary>Retrieves the GTMT#hash code for this object.</summary>
			<returns>A 32-bit hash code, which is a signed integer.</returns>
		</member>
		<member name="M:System.Windows.FontWeight.op_Equality(System.Windows.FontWeight,System.Windows.FontWeight)">
			<summary>Compares two instances of <see cref="T:System.Windows.FontWeight"></see> for equality.</summary>
			<returns>true if the instances of <see cref="T:System.Windows.FontWeight"></see> are equal; otherwise, false.</returns>
			<param name="right">The second instance of <see cref="T:System.Windows.FontWeight"></see> to compare.</param>
			<param name="left">The first instance of <see cref="T:System.Windows.FontWeight"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.FontWeight.op_GreaterThan(System.Windows.FontWeight,System.Windows.FontWeight)">
			<summary>Evaluates two instances of <see cref="T:System.Windows.FontWeight"></see> to determine whether one instance is greater than the other.</summary>
			<returns>true if left is greater than right; otherwise, false.</returns>
			<param name="right">The second instance of <see cref="T:System.Windows.FontWeight"></see> to compare.</param>
			<param name="left">The first instance of <see cref="T:System.Windows.FontWeight"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.FontWeight.op_GreaterThanOrEqual(System.Windows.FontWeight,System.Windows.FontWeight)">
			<summary>Evaluates two instances of <see cref="T:System.Windows.FontWeight"></see> to determine whether one instance is greater than or equal to the other.</summary>
			<returns>true if left is greater than or equal to right; otherwise, false.</returns>
			<param name="right">The second instance of <see cref="T:System.Windows.FontWeight"></see> to compare.</param>
			<param name="left">The first instance of <see cref="T:System.Windows.FontWeight"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.FontWeight.op_Inequality(System.Windows.FontWeight,System.Windows.FontWeight)">
			<summary>Evaluates two instances of <see cref="T:System.Windows.FontWeight"></see> to determine inequality.</summary>
			<returns>false if left is equal to right; otherwise, true.</returns>
			<param name="right">The second instance of <see cref="T:System.Windows.FontWeight"></see> to compare.</param>
			<param name="left">The first instance of <see cref="T:System.Windows.FontWeight"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.FontWeight.op_LessThan(System.Windows.FontWeight,System.Windows.FontWeight)">
			<summary>Evaluates two instances of <see cref="T:System.Windows.FontWeight"></see> to determine whether one instance is less than the other.</summary>
			<returns>true if left is less than right; otherwise, false.</returns>
			<param name="right">The second instance of <see cref="T:System.Windows.FontWeight"></see> to compare.</param>
			<param name="left">The first instance of <see cref="T:System.Windows.FontWeight"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.FontWeight.op_LessThanOrEqual(System.Windows.FontWeight,System.Windows.FontWeight)">
			<summary>Evaluates two instances of <see cref="T:System.Windows.FontWeight"></see> to determine whether one instance is less than or equal to the other.</summary>
			<returns>true if left is less than or equal to right; otherwise, false.</returns>
			<param name="right">The second instance of <see cref="T:System.Windows.FontWeight"></see> to compare.</param>
			<param name="left">The first instance of <see cref="T:System.Windows.FontWeight"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.FontWeight.ToOpenTypeWeight">
			<summary>Returns a value that represents the TLA#tla_opentypeusWeightClass for the <see cref="T:System.Windows.FontWeight"></see> object.</summary>
			<returns>An integer value between 1 and 999 that corresponds to the usWeightClass definition in the TLA2#tla_opentype specification.</returns>
		</member>
		<member name="M:System.Windows.FontWeight.ToString">
			<summary>Returns a text string that represents the value of the <see cref="T:System.Windows.FontWeight"></see> object and is based on the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"></see> property information.</summary>
			<returns>A <see cref="T:System.String"></see> that represents the value of the <see cref="T:System.Windows.FontWeight"></see> object, such as "Light", "Normal", or "UltraBold".</returns>
		</member>
		<member name="T:System.Windows.FontWeightConverter">
			<summary> Converts instances of FontWeight to and from other data types.  </summary>
		</member>
		<member name="M:System.Windows.FontWeightConverter.#ctor">
			<summary> Initializes a new instance of the FontWeightConverter class. </summary>
		</member>
		<member name="M:System.Windows.FontWeightConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Returns a value that indicates whether this converter can convert an object of the given type to an instance of FontWeight. </summary>
			<returns>true if the converter can convert the provided type to an instance of FontWeight; otherwise, false.</returns>
			<param name="td">Describes the context information of a type.</param>
			<param name="t">The type of the source that is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.FontWeightConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines whether an instance of FontWeight can be converted to a different type. </summary>
			<returns>true if the converter can convert this instance of FontWeight; otherwise, false.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The desired type that that this instance of FontWeight is being evaluated for conversion to.</param>
		</member>
		<member name="M:System.Windows.FontWeightConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary> Attempts to convert a specified object to an instance of FontWeight. </summary>
			<returns>The instance of FontWeight created from the converted value.</returns>
			<param name="td">Describes the context information of a type.</param>
			<param name="ci">Describes the CultureInfo of the type being converted.
</param>
			<param name="value">The object being converted.</param>
			<exception cref="T:System.NotSupportedException">Occurs if value is null or is not a valid type for conversion.</exception>
		</member>
		<member name="M:System.Windows.FontWeightConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> Attempts to convert an instance of FontWeight to a specified type. </summary>
			<returns>The object created from the converted instance of FontWeight.</returns>
			<param name="culture">Describes the CultureInfo of the type being converted.</param>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The type this instance of FontWeight is converted to.
</param>
			<param name="value">The instance of FontWeight to convert.</param>
			<exception cref="T:System.NotSupportedException">Occurs if value is null or is not an instance of FontWeight, or if the destinationType is not a valid destination type.</exception>
		</member>
		<member name="T:System.Windows.FontWeights">
			<summary>Describes the relative weight of a font, in terms of the lightness or heaviness of the strokes.</summary>
		</member>
		<member name="P:System.Windows.FontWeights.Black">
			<summary>Gets a value that represents a "Black" font weight.</summary>
			<returns>A <see cref="T:System.Windows.FontWeight"></see> that represents a "Black" font weight.</returns>
		</member>
		<member name="P:System.Windows.FontWeights.Bold">
			<summary>Gets a value that represents a "Bold" font weight.</summary>
			<returns>A <see cref="T:System.Windows.FontWeight"></see> that represents a "Bold" font weight.</returns>
		</member>
		<member name="P:System.Windows.FontWeights.DemiBold">
			<summary>Gets a value that represents a "Demi-bold" font weight.</summary>
			<returns>A <see cref="T:System.Windows.FontWeight"></see> that represents a "Demi-bold" font weight.</returns>
		</member>
		<member name="P:System.Windows.FontWeights.ExtraBlack">
			<summary>Gets a value that represents an "Extra-black" font weight.</summary>
			<returns>A <see cref="T:System.Windows.FontWeight"></see> that represents an "Extra-black" font weight.</returns>
		</member>
		<member name="P:System.Windows.FontWeights.ExtraBold">
			<summary>Gets a value that represents an "Extra-bold" font weight.</summary>
			<returns>A <see cref="T:System.Windows.FontWeight"></see> that represents an "Extra-bold" font weight.</returns>
		</member>
		<member name="P:System.Windows.FontWeights.ExtraLight">
			<summary>Gets a value that represents an "Extra-light" font weight.</summary>
			<returns>A <see cref="T:System.Windows.FontWeight"></see> that represents an "Extra-light" font weight.</returns>
		</member>
		<member name="P:System.Windows.FontWeights.Heavy">
			<summary>Gets a value that represents a "Heavy" font weight.</summary>
			<returns>A <see cref="T:System.Windows.FontWeight"></see> that represents a "Heavy" font weight.</returns>
		</member>
		<member name="P:System.Windows.FontWeights.Light">
			<summary>Gets a value that represents a "Light" font weight.</summary>
			<returns>A <see cref="T:System.Windows.FontWeight"></see> that represents a "Light" font weight.</returns>
		</member>
		<member name="P:System.Windows.FontWeights.Medium">
			<summary>Gets a value that represents a "Medium" font weight.</summary>
			<returns>A <see cref="T:System.Windows.FontWeight"></see> that represents a "Medium" font weight.</returns>
		</member>
		<member name="P:System.Windows.FontWeights.Normal">
			<summary>Gets a value that represents a "Normal" font weight.</summary>
			<returns>A <see cref="T:System.Windows.FontWeight"></see> that represents a "Normal" font weight.</returns>
		</member>
		<member name="P:System.Windows.FontWeights.Regular">
			<summary>Gets a value that represents a "Regular" font weight.</summary>
			<returns>A <see cref="T:System.Windows.FontWeight"></see> that represents a "Regular" font weight.</returns>
		</member>
		<member name="P:System.Windows.FontWeights.SemiBold">
			<summary>Gets a value that represents a "Semi-bold" font weight.</summary>
			<returns>A <see cref="T:System.Windows.FontWeight"></see> that represents a "Semi-bold" font weight.</returns>
		</member>
		<member name="P:System.Windows.FontWeights.Thin">
			<summary>Gets a value that represents a "Thin" font weight.</summary>
			<returns>A <see cref="T:System.Windows.FontWeight"></see> that represents a "Thin" font weight.</returns>
		</member>
		<member name="P:System.Windows.FontWeights.UltraBlack">
			<summary>Gets a value that represents an "Ultra-black" font weight.</summary>
			<returns>A <see cref="T:System.Windows.FontWeight"></see> that represents an "Ultra-black" font weight.</returns>
		</member>
		<member name="P:System.Windows.FontWeights.UltraBold">
			<summary>Gets a value that represents an "Ultra-bold" font weight.</summary>
			<returns>A <see cref="T:System.Windows.FontWeight"></see> that represents an "Ultra-bold" font weight.</returns>
		</member>
		<member name="P:System.Windows.FontWeights.UltraLight">
			<summary>Gets a value that represents an "Ultra-light" font weight.</summary>
			<returns>A <see cref="T:System.Windows.FontWeight"></see> that represents an "Ultra-light" font weight.</returns>
		</member>
		<member name="T:System.Windows.GiveFeedbackEventArgs">
			<summary>Contains arguments for the <see cref="E:System.Windows.DragDrop.GiveFeedback"></see> event.</summary>
		</member>
		<member name="P:System.Windows.GiveFeedbackEventArgs.Effects">
			<summary>Gets a value that indicates the effects of drag-and-drop operation.</summary>
			<returns>A member of the <see cref="T:System.Windows.DragDropEffects"></see> enumeration that indicates the effects of the drag-and-drop operation.</returns>
		</member>
		<member name="P:System.Windows.GiveFeedbackEventArgs.UseDefaultCursors">
			<summary>Gets or sets a Boolean value indicating whether default cursor feedback behavior should be used for the associated drag-and-drop operation.</summary>
			<returns>A Boolean value that indicating whether default cursor feedback behavior should be used for the associated drag-and-drop operation. true to use default feedback cursor behavior; otherwise, false.</returns>
		</member>
		<member name="T:System.Windows.GiveFeedbackEventHandler">
			<summary>Represents a method that handles <see cref="E:System.Windows.DragDrop.GiveFeedback"></see> events.</summary>
		</member>
		<member name="T:System.Windows.IContentHost">
			<summary>This interface is implemented by layouts which host <see cref="T:System.Windows.ContentElement"></see>. </summary>
		</member>
		<member name="M:System.Windows.IContentHost.GetRectangles(System.Windows.ContentElement)">
			<summary>Returns a collection of bounding rectangles for a child element. </summary>
			<param name="child">The child element that the bounding rectangles are returned for.</param>
			<exception cref="ArgumentException">If the element is not a direct descendant (i.e. element must be a child of the <see cref="T:System.Windows.IContentHost"></see> or a <see cref="T:System.Windows.ContentElement"></see> which is a direct descendant  of the <see cref="T:System.Windows.IContentHost"></see>).</exception>
			<exception cref="ArgumentNullException">If child is null.</exception>
		</member>
		<member name="M:System.Windows.IContentHost.InputHitTest(System.Windows.Point)">
			<summary>Performs hit-testing for child elements.</summary>
			<returns>A descendant of <see cref="T:System.Windows.IInputElement"></see>, or NULL if no such element exists.</returns>
			<param name="point">Mouse coordinates relative to the ContentHost.</param>
		</member>
		<member name="M:System.Windows.IContentHost.OnChildDesiredSizeChanged(System.Windows.UIElement)">
			<summary> Called when a <see cref="T:System.Windows.UIElement"></see>-derived class which is hosted by a <see cref="T:System.Windows.IContentHost"></see> changes its <see cref="P:System.Windows.UIElement.DesiredSize"></see>.</summary>
			<param name="child">Child element whose <see cref="P:System.Windows.UIElement.DesiredSize"></see> has changed</param>
			<exception cref="ArgumentNullException">If child is null.</exception>
			<exception cref="ArgumentException">If child is not a direct descendant (i.e. child must be a child of the <see cref="T:System.Windows.IContentHost"></see> or a <see cref="T:System.Windows.ContentElement"></see> which is a direct descendant of the <see cref="T:System.Windows.IContentHost"></see>).</exception>
		</member>
		<member name="P:System.Windows.IContentHost.HostedElements">
			<summary>Gets an enumeration containing all descendant <see cref="T:System.Windows.ContentElement"></see>-derived classes, as well as all <see cref="T:System.Windows.UIElement"></see>-derived classes that are a direct descendant of the <see cref="T:System.Windows.IContentHost"></see> or one of its descendant <see cref="T:System.Windows.ContentElement"></see> classes. </summary>
			<returns>Enumeration containing all descendant <see cref="T:System.Windows.ContentElement"></see>-derived classes, as well as all <see cref="T:System.Windows.UIElement"></see>-derived classes that are a direct descendant of the <see cref="T:System.Windows.IContentHost"></see> or one of its descendant <see cref="T:System.Windows.ContentElement"></see> classes. In other words, elements for which the <see cref="T:System.Windows.IContentHost"></see> creates a visual representation (<see cref="T:System.Windows.ContentElement"></see>-derived classes) or whose layout is driven by the <see cref="T:System.Windows.IContentHost"></see> (the first-level descendant <see cref="T:System.Windows.UIElement"></see>-derived classes).</returns>
		</member>
		<member name="T:System.Windows.IDataObject">
			<summary>Provides a format-independent mechanism for transferring data.</summary>
		</member>
		<member name="M:System.Windows.IDataObject.GetData(System.String)">
			<summary>Retrieves a data object in a specified format; the data format is specified by a string.</summary>
			<returns>A data object with the data in the specified format, or null if the data is not available in the specified format.</returns>
			<param name="format">A string that specifies what format to retrieve the data as. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of predefined data formats.</param>
		</member>
		<member name="M:System.Windows.IDataObject.GetData(System.Type)">
			<summary>Retrieves a data object in a specified format; the data format is specified by a <see cref="T:System.Type"></see> object.</summary>
			<returns>A data object with the data in the specified format, or null if the data is not available in the specified format.</returns>
			<param name="format">A <see cref="T:System.Type"></see> object that specifies what format to retrieve the data as. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of predefined data formats.</param>
		</member>
		<member name="M:System.Windows.IDataObject.GetData(System.String,System.Boolean)">
			<summary>Retrieves a data object in a specified format, optionally converting the data to the specified format.</summary>
			<returns>A data object with the data in the specified format, or null if the data is not available in the specified format.</returns>
			<param name="autoConvert">true to attempt to automatically convert the data to the specified format; false for no data format conversion. If this parameter is true and the data is not available the specified format, the method attempts to convert the data to the specified format, if necessary. If the data cannot be converted to the specified format, or if automatic conversion is disabled (by calling <see cref="M:System.Windows.IDataObject.SetData(System.String,System.Object,System.Boolean)"></see>         with the autoConvert parameter set to false), this method returns null.  If this parameter is false, the method returns data in the specified format if available, or null if the data is not available in the specified format.</param>
			<param name="format">A string that specifies what format to retrieve the data as. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of predefined data formats.</param>
		</member>
		<member name="M:System.Windows.IDataObject.GetDataPresent(System.String)">
			<summary>Checks to see whether the data is available in, or can be converted to, a specified format; the data format is specified by a string.</summary>
			<returns>true if the data is in, or can be converted to, the specified format; otherwise, false.</returns>
			<param name="format">A string that specifies what format to check for. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of pre-defined data formats.</param>
		</member>
		<member name="M:System.Windows.IDataObject.GetDataPresent(System.Type)">
			<summary>Checks to see whether the data is available in, or can be converted to, a specified format. The data format is specified by a <see cref="T:System.Type"></see> object.</summary>
			<returns>true if the data is in, or can be converted to, the specified format; otherwise, false.</returns>
			<param name="format">A <see cref="T:System.Type"></see> that specifies what format to check for. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of predefined data formats.</param>
		</member>
		<member name="M:System.Windows.IDataObject.GetDataPresent(System.String,System.Boolean)">
			<summary>Checks to see whether the data is available in, or can be converted to, a specified format. A Boolean flag indicates whether to check if the data can be converted to the specified format, if it is not available in that format.</summary>
			<returns>true if the data is in, or can be converted to, the specified format; otherwise, false.</returns>
			<param name="autoConvert">false to only check for the specified format; true to also check whether or not data stored in this data object can be converted to the specified format.</param>
			<param name="format">A string that specifies what format to check for. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of pre-defined data formats.</param>
		</member>
		<member name="M:System.Windows.IDataObject.GetFormats">
			<summary>Returns a list of all formats that the data in this data object is stored in, or can be converted to.</summary>
			<returns>An array of strings, with each string specifying the name of a format supported by this data object.</returns>
		</member>
		<member name="M:System.Windows.IDataObject.GetFormats(System.Boolean)">
			<summary>Returns a list of all formats that the data in this data object is stored in. A Boolean flag indicates whether or not to also include formats that the data can be automatically converted to.</summary>
			<returns>An array of strings, with each string specifying the name of a format supported by this data object.</returns>
			<param name="autoConvert">true to retrieve all formats that data stored in this data object is stored in, or can be converted to; false to retrieve only formats that data stored in this data object is stored in (excluding formats that the data is not stored in, but can be automatically converted to).</param>
		</member>
		<member name="M:System.Windows.IDataObject.SetData(System.Object)">
			<summary>Stores the specified data in this data object, automatically determining the data format from the source object type.</summary>
			<param name="data">The data to store in this data object.</param>
		</member>
		<member name="M:System.Windows.IDataObject.SetData(System.String,System.Object)">
			<summary>Stores the specified data in this data object, along with one or more specified data formats. The data format is specified by a string.</summary>
			<param name="data">The data to store in this data object.</param>
			<param name="format">A string that specifies what format to store the data in. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of pre-defined data formats.</param>
		</member>
		<member name="M:System.Windows.IDataObject.SetData(System.Type,System.Object)">
			<summary>Stores the specified data in this data object, along with one or more specified data formats. The data format is specified by a <see cref="T:System.Type"></see> class.</summary>
			<param name="data">The data to store in this data object.</param>
			<param name="format">A <see cref="T:System.Type"></see> that specifies what format to store the data in. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of predefined data formats.</param>
		</member>
		<member name="M:System.Windows.IDataObject.SetData(System.String,System.Object,System.Boolean)">
			<summary>Stores the specified data in this data object, along with one or more specified data formats. This overload includes a Boolean flag to indicate whether the data may be converted to another format on retrieval.</summary>
			<param name="autoConvert">true to allow the data to be converted to another format on retrieval; false to prohibit the data from being converted to another format on retrieval.</param>
			<param name="data">The data to store in this data object.</param>
			<param name="format">A string that specifies what format to store the data in. See the <see cref="T:System.Windows.DataFormats"></see> class for a set of pre-defined data formats.</param>
		</member>
		<member name="T:System.Windows.IInputElement">
			<summary>Establishes the common events, along with the event-related properties and methods, for basic input processing by TLA#tla_winclient elements.</summary>
		</member>
		<member name="E:System.Windows.IInputElement.GotKeyboardFocus">
			<summary>Occurs when the keyboard is focused on this element.</summary>
		</member>
		<member name="E:System.Windows.IInputElement.GotMouseCapture">
			<summary> Occurs when the element captures the mouse. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.GotStylusCapture">
			<summary> Occurs when the element captures the stylus. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.KeyDown">
			<summary> Occurs when a key is pressed while the keyboard is focused on this element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.KeyUp">
			<summary> Occurs when a key is released while the keyboard is focused on this element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.LostKeyboardFocus">
			<summary> Occurs when the keyboard is no longer focused on this element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.LostMouseCapture">
			<summary> Occurs when this element loses mouse capture. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.LostStylusCapture">
			<summary> Occurs when this element loses stylus capture. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.MouseEnter">
			<summary> Occurs when the mouse pointer enters the boundaries of this element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.MouseLeave">
			<summary> Occurs when the mouse pointer leaves the boundaries of this element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.MouseLeftButtonDown">
			<summary> Occurs when the left mouse button is pressed while the mouse pointer is over the element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.MouseLeftButtonUp">
			<summary> Occurs when the left mouse button is released while the mouse pointer is over the element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.MouseMove">
			<summary> Occurs when the mouse pointer moves over the element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.MouseRightButtonDown">
			<summary> Occurs when the right mouse button is pressed while the mouse pointer is over the element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.MouseRightButtonUp">
			<summary> Occurs when the right mouse button is released while the mouse pointer is over the element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.MouseWheel">
			<summary> Occurs when the user rotates the mouse wheel while the mouse pointer is over this element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.PreviewGotKeyboardFocus">
			<summary> Occurs when the keyboard is focused on this element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.PreviewKeyDown">
			<summary> Occurs when a key is pressed while the keyboard is focused on this element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.PreviewKeyUp">
			<summary> Occurs when a key is released while the keyboard is focused on this element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.PreviewLostKeyboardFocus">
			<summary> Occurs when the keyboard is no longer focused on this element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.PreviewMouseLeftButtonDown">
			<summary> Occurs when the left mouse button is pressed while the mouse pointer is over the element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.PreviewMouseLeftButtonUp">
			<summary> Occurs when the left mouse button is released while the mouse pointer is over the element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.PreviewMouseMove">
			<summary> Occurs when the mouse pointer moves over the element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.PreviewMouseRightButtonDown">
			<summary> Occurs when the right mouse button is pressed while the mouse pointer is over the element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.PreviewMouseRightButtonUp">
			<summary> Occurs when the right mouse button is released while the mouse pointer is over the element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.PreviewMouseWheel">
			<summary> Occurs when the user rotates the mouse wheel while the mouse pointer is over this element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.PreviewStylusButtonDown">
			<summary> Occurs when the stylus button is pressed down while the stylus is over this element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.PreviewStylusButtonUp">
			<summary> Occurs when the stylus button returns up while the stylus is over this element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.PreviewStylusDown">
			<summary> Occurs when the stylus touches the GTMT#digitizer over this element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.PreviewStylusInAirMove">
			<summary> Occurs when the stylus moves over an element without actually touching the GTMT#digitizer. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.PreviewStylusInRange">
			<summary> Occurs when the stylus is close enough to the GTMT#digitizer to be detected. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.PreviewStylusMove">
			<summary> Occurs when the stylus cursor moves over the element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.PreviewStylusOutOfRange">
			<summary> Occurs when the stylus is too far from the GTMT#digitizer to be detected. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.PreviewStylusSystemGesture">
			<summary> Occurs when a user performs one of several stylus gestures. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.PreviewStylusUp">
			<summary> Occurs when the user raises the stylus off of the GTMT#digitizer over this element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.PreviewTextInput">
			<summary> Occurs when this element gets text in a device-independent fashion. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.StylusButtonDown">
			<summary> Occurs when the stylus button is pressed down while the stylus is over this element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.StylusButtonUp">
			<summary> Occurs when the stylus button returns to up while the stylus is over this element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.StylusDown">
			<summary> Occurs when the stylus touches the GTMT#digitizer over this element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.StylusEnter">
			<summary> Occurs when the stylus cursor enters the bounds of the element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.StylusInAirMove">
			<summary> Occurs when the stylus moves over an element without actually touching the GTMT#digitizer. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.StylusInRange">
			<summary> Occurs when the stylus is close enough to the GTMT#digitizer to be detected. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.StylusLeave">
			<summary> Occurs when the stylus cursor leaves the bounds of the element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.StylusMove">
			<summary> Occurs when the stylus cursor moves over the element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.StylusOutOfRange">
			<summary> Occurs when the stylus is too far from the GTMT#digitizer to be detected. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.StylusSystemGesture">
			<summary> Occurs when a user performs one of several stylus gestures. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.StylusUp">
			<summary> Occurs when the user raises the stylus off of the GTMT#digitizer over this element. </summary>
		</member>
		<member name="E:System.Windows.IInputElement.TextInput">
			<summary> Occurs when this element gets text in a device-independent fashion. </summary>
		</member>
		<member name="M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
			<summary> Adds a GTMT#routed event handler for a given GTMT#routed event to an element. </summary>
			<param name="routedEvent">Identifier for the GTMT#routed event being handled.</param>
			<param name="handler">A reference to the handler implementation.</param>
		</member>
		<member name="M:System.Windows.IInputElement.CaptureMouse">
			<summary> Attempts to force capture of the mouse to this element. </summary>
			<returns>true if the mouse was successfully captured; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.IInputElement.CaptureStylus">
			<summary> Attempts to force capture of the stylus to this element. </summary>
			<returns>true if the stylus was successfully captured; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.IInputElement.Focus">
			<summary> Attempts to focus the keyboard on this element. </summary>
			<returns>true if keyboard now focuses this element; false if this method call could not force focus.</returns>
		</member>
		<member name="M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)">
			<summary> Raises the routed event specified by the RoutedEvent. This RoutedEvent is given in the RoutedEventArgs instance, which also contains specific arguments for this case of the event. </summary>
			<param name="e">An instance of the RoutedEventArgs class that contains the identifier for the event to raise. </param>
		</member>
		<member name="M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
			<summary> Removes all instances of the specified GTMT#routed event handler from this element. </summary>
			<param name="routedEvent">Identifier of the GTMT#routed event for which the handler is attached.</param>
			<param name="handler">The specific handler implementation to be removed from this element's event handler collection.</param>
		</member>
		<member name="P:System.Windows.IInputElement.Focusable">
			<summary>Gets a value indicating whether focus can be set to this element.</summary>
			<returns>true if the element can have focus set to it; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.IInputElement.IsEnabled">
			<summary> Gets a value indicating whether this element is enabled in the TLA#tla_ui. </summary>
			<returns>true if the element is enabled; otherwise, false.     </returns>
		</member>
		<member name="P:System.Windows.IInputElement.IsKeyboardFocused">
			<summary> Gets a value indicating whether this element has keyboard focus. </summary>
			<returns>true if this element has keyboard focus; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.IInputElement.IsKeyboardFocusWithin">
			<summary> Gets a value indicating whether keyboard focus is anywhere within the element or its visual child elements. </summary>
			<returns>true if keyboard focus is on the element or its children; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.IInputElement.IsMouseCaptured">
			<summary> Gets a value indicating whether the mouse is captured to this element. </summary>
			<returns>true if the element has mouse capture; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.IInputElement.IsMouseDirectlyOver">
			<summary> Gets a value indicating whether the mouse pointer is over this element. </summary>
			<returns>true if the mouse pointer is over this element; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.IInputElement.IsMouseOver">
			<summary> Gets a value indicating whether the mouse pointer is located over this element (including visual children within its bounds). </summary>
			<returns>true if mouse pointer is over the element or its children; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.IInputElement.IsStylusCaptured">
			<summary> Gets a value indicating whether the stylus is captured to this element. </summary>
			<returns>true if the element has stylus capture; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.IInputElement.IsStylusDirectlyOver">
			<summary> Gets a value indicating whether the stylus is directly over this element. </summary>
			<returns>true if the stylus is over the element; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.IInputElement.IsStylusOver">
			<summary> Gets a value indicating whether the stylus cursor is located over this element (or is over visual children within its bounds). </summary>
			<returns>true if stylus cursor is over the element or its children; otherwise, false.</returns>
		</member>
		<member name="T:System.Windows.KeySplineConverter">
			<summary> PointConverter - Converter class for converting instances of other types to Point instances </summary>
		</member>
		<member name="M:System.Windows.KeySplineConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> TypeConverter method override. </summary>
			<returns>true if conversion is possible</returns>
			<param name="context">ITypeDescriptorContext</param>
			<param name="destinationType">Type to convert to</param>
		</member>
		<member name="M:System.Windows.KeySplineConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> TypeConverter method implementation. </summary>
			<returns>converted value</returns>
			<param name="context">ITypeDescriptorContext</param>
			<param name="destinationType">Type to convert to</param>
			<param name="cultureInfo">current culture (see CLR specs), null is a valid value</param>
			<param name="value">value to convert from</param>
		</member>
		<member name="T:System.Windows.LineBreakCondition">
			<summary>Describes the breaking condition around an inline object.</summary>
		</member>
		<member name="F:System.Windows.LineBreakCondition.BreakAlways">
			<summary>Break is always allowed.</summary>
		</member>
		<member name="F:System.Windows.LineBreakCondition.BreakDesired">
			<summary>Break if not prohibited by another object.</summary>
		</member>
		<member name="F:System.Windows.LineBreakCondition.BreakPossible">
			<summary>Break if allowed by another object.</summary>
		</member>
		<member name="F:System.Windows.LineBreakCondition.BreakRestrained">
			<summary>Break always prohibited unless the other object is set to <see cref="F:System.Windows.LineBreakCondition.BreakAlways"></see>.</summary>
		</member>
		<member name="T:System.Windows.LocalizabilityAttribute">
			<summary>Specifies the localization attributes for a TLA#tla_baml class or class member.</summary>
		</member>
		<member name="M:System.Windows.LocalizabilityAttribute.#ctor(System.Windows.LocalizationCategory)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.LocalizabilityAttribute"></see> class with a specified localization category.</summary>
			<param name="category">The localization category.</param>
		</member>
		<member name="P:System.Windows.LocalizabilityAttribute.Category">
			<summary>Gets the category setting of the localization attribute's targeted value.</summary>
			<returns>The category setting of the localization attribute.</returns>
		</member>
		<member name="P:System.Windows.LocalizabilityAttribute.Modifiability">
			<summary>Gets or sets the modifiability setting of the localization attribute's targeted value.</summary>
			<returns>The modifiability setting of the localization attribute.</returns>
		</member>
		<member name="P:System.Windows.LocalizabilityAttribute.Readability">
			<summary>Gets or sets the readability setting of the localization attribute's targeted value.</summary>
			<returns>The readability setting of the localization attribute.</returns>
		</member>
		<member name="T:System.Windows.LocalizationCategory">
			<summary>Specifies the category value of a <see cref="T:System.Windows.LocalizabilityAttribute"></see> for a TLA#tla_baml class or class member.</summary>
		</member>
		<member name="F:System.Windows.LocalizationCategory.Button">
			<summary>A Button or related control.</summary>
		</member>
		<member name="F:System.Windows.LocalizationCategory.CheckBox">
			<summary>A CheckBox or related control. </summary>
		</member>
		<member name="F:System.Windows.LocalizationCategory.ComboBox">
			<summary>A ComboBox or related control such as ComboBoxItem. </summary>
		</member>
		<member name="F:System.Windows.LocalizationCategory.Font">
			<summary>Font-related data such as font name, style, or size.</summary>
		</member>
		<member name="F:System.Windows.LocalizationCategory.Hyperlink">
			<summary>A Hyperlink or related control.</summary>
		</member>
		<member name="F:System.Windows.LocalizationCategory.Ignore">
			<summary>Do not localize this resource. This does not apply to any child nodes that might exist.</summary>
		</member>
		<member name="F:System.Windows.LocalizationCategory.Inherit">
			<summary>Inherits its category from a parent node.</summary>
		</member>
		<member name="F:System.Windows.LocalizationCategory.Label">
			<summary>A Label or related control.</summary>
		</member>
		<member name="F:System.Windows.LocalizationCategory.ListBox">
			<summary>A ListBox or related control such as ListBoxItem. </summary>
		</member>
		<member name="F:System.Windows.LocalizationCategory.Menu">
			<summary>A Menu or related control such as MenuItem. </summary>
		</member>
		<member name="F:System.Windows.LocalizationCategory.NeverLocalize">
			<summary>Do not localize this resource, or any child nodes whose category is set to Inherit.</summary>
		</member>
		<member name="F:System.Windows.LocalizationCategory.None">
			<summary>Resource does not belong to a standard category.</summary>
		</member>
		<member name="F:System.Windows.LocalizationCategory.RadioButton">
			<summary>A RadioButton or related control.</summary>
		</member>
		<member name="F:System.Windows.LocalizationCategory.Text">
			<summary>For a lengthy piece of text.</summary>
		</member>
		<member name="F:System.Windows.LocalizationCategory.TextFlow">
			<summary>For panels that can contain text.</summary>
		</member>
		<member name="F:System.Windows.LocalizationCategory.Title">
			<summary>For a single line of text, such as text used for a title.</summary>
		</member>
		<member name="F:System.Windows.LocalizationCategory.ToolTip">
			<summary>A ToolTip or related control.</summary>
		</member>
		<member name="F:System.Windows.LocalizationCategory.XmlData">
			<summary>TLA#tla_xml data. </summary>
		</member>
		<member name="T:System.Windows.Modifiability">
			<summary>Specifies the modifiability value of a <see cref="T:System.Windows.LocalizabilityAttribute"></see> for a TLA#tla_baml class or class member.</summary>
		</member>
		<member name="F:System.Windows.Modifiability.Inherit">
			<summary>Targeted value modifiability is inherited from its parent node.</summary>
		</member>
		<member name="F:System.Windows.Modifiability.Modifiable">
			<summary>Targeted value is modifiable by localizers.</summary>
		</member>
		<member name="F:System.Windows.Modifiability.Unmodifiable">
			<summary>Targeted value is not modifiable by localizers.</summary>
		</member>
		<member name="T:System.Windows.PresentationSource">
			<summary>An abstract base for classes that present content from another technology as part of an interoperation scenario. In addition, this class provides static methods for working with these sources, as well as the basic visual-layer presentation architecture.</summary>
		</member>
		<member name="M:System.Windows.PresentationSource.#ctor">
			<summary>Provides initialization for base class values when called by the constructor of a derived class. </summary>
		</member>
		<member name="E:System.Windows.PresentationSource.ContentRendered">
			<summary>Occurs when content is rendered and ready for user interaction. </summary>
		</member>
		<member name="M:System.Windows.PresentationSource.AddSourceChangedHandler(System.Windows.IInputElement,System.Windows.SourceChangedEventHandler)">
			<summary>Adds a handler for the SourceChanged event to the provided element. This is a static method.</summary>
			<param name="element">The element to add the handler to.</param>
			<param name="handler">The hander implementation to add.</param>
		</member>
		<member name="M:System.Windows.PresentationSource.ClearContentRenderedListeners">
			<summary> Sets the list of listeners for the <see cref="E:System.Windows.PresentationSource.ContentRendered"></see> event to null. </summary>
		</member>
		<member name="M:System.Windows.PresentationSource.FromVisual(System.Windows.Media.Visual)">
			<summary>Given a <see cref="T:System.Windows.Media.Visual"></see> input, returns the source in which the <see cref="T:System.Windows.Media.Visual"></see> is presented. This is a static method.</summary>
			<returns>The <see cref="T:System.Windows.PresentationSource"></see> in which the visual is being presented.</returns>
			<param name="visual">The <see cref="T:System.Windows.Media.Visual"></see> to find the source for.</param>
		</member>
		<member name="M:System.Windows.PresentationSource.GetCompositionTargetCore">
			<summary>When implemented in a derived class, returns a visual target for the given source. </summary>
			<returns>Returns a <see cref="T:System.Windows.Media.CompositionTarget"></see> that is target for rendering the visual.</returns>
		</member>
		<member name="M:System.Windows.PresentationSource.RemoveSource">
			<summary>Removes a <see cref="T:System.Windows.PresentationSource"></see> derived class instance from the list of known presentation sources.</summary>
		</member>
		<member name="M:System.Windows.PresentationSource.RemoveSourceChangedHandler(System.Windows.IInputElement,System.Windows.SourceChangedEventHandler)">
			<summary>Removes a handler for the SourceChanged event from the provided element. This is a static method.</summary>
			<param name="e">The element to remove the handler from.</param>
			<param name="handler">The handler implementation to remove.</param>
		</member>
		<member name="M:System.Windows.PresentationSource.RootChanged(System.Windows.Media.Visual,System.Windows.Media.Visual)">
			<summary>Provides notification that the root <see cref="T:System.Windows.Media.Visual"></see> has changed. </summary>
			<param name="oldRoot">The old root <see cref="T:System.Windows.Media.Visual"></see>.</param>
			<param name="newRoot">The new root <see cref="T:System.Windows.Media.Visual"></see>.</param>
		</member>
		<member name="P:System.Windows.PresentationSource.CompositionTarget">
			<summary>Gets the visual target for the visuals being presented in the source. </summary>
			<returns>A visual target (<see cref="T:System.Windows.Media.CompositionTarget"></see>) implementation.</returns>
		</member>
		<member name="P:System.Windows.PresentationSource.IsDisposed">
			<summary>When implemented in a derived class, gets a value that declares whether the object is disposed. </summary>
			<returns>true if the object is disposed; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.PresentationSource.RootVisual">
			<summary>When implemented in a derived class, gets or sets the root visual being presented in the source. </summary>
			<returns>The root visual.</returns>
		</member>
		<member name="T:System.Windows.QueryContinueDragEventArgs">
			<summary>Contains arguments for the <see cref="E:System.Windows.DragDrop.QueryContinueDrag"></see> event.</summary>
		</member>
		<member name="P:System.Windows.QueryContinueDragEventArgs.Action">
			<summary>Gets or sets the current status of the associated drag-and-drop operation.</summary>
			<returns>A member of the <see cref="T:System.Windows.DragAction"></see> enumeration indicating the current status of the associated drag-and-drop operation.</returns>
		</member>
		<member name="P:System.Windows.QueryContinueDragEventArgs.EscapePressed">
			<summary>Gets a Boolean value indicating whether the ESC key has been pressed.</summary>
			<returns>A Boolean value indicating whether the ESC key has been pressed. true if the ESC was pressed; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.QueryContinueDragEventArgs.KeyStates">
			<summary>Gets a flag enumeration indicating the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.</summary>
			<returns>One or more members of the <see cref="T:System.Windows.DragDropKeyStates"></see> flag enumeration.</returns>
		</member>
		<member name="T:System.Windows.QueryContinueDragEventHandler">
			<summary>Represents a method that handles <see cref="E:System.Windows.DragDrop.QueryContinueDrag"></see> events.</summary>
		</member>
		<member name="T:System.Windows.Readability">
			<summary>Specifies the readability value of a <see cref="T:System.Windows.LocalizabilityAttribute"></see> for a TLA#tla_baml class or class member.</summary>
		</member>
		<member name="F:System.Windows.Readability.Inherit">
			<summary>Targeted value readability is inherited from its parent node.</summary>
		</member>
		<member name="F:System.Windows.Readability.Readable">
			<summary>Targeted value is readable text.</summary>
		</member>
		<member name="F:System.Windows.Readability.Unreadable">
			<summary>Targeted value is not readable.</summary>
		</member>
		<member name="T:System.Windows.RoutedEvent">
			<summary>Represents and identifies a GTMT#routed event and declares its characteristics. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.RoutedEvent.AddOwner(System.Type)">
			<summary>Associates another owner class with this routed event, and enables routing of the event and handling on this class.  </summary>
			<returns>The identifier field for the event. This return value should be used to set a public static read-only field that will store the identifier for this class' representation of the routed event. This field must be accessible because it will be required to attach any instance handlers for the event when using the <see cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)"></see> utility method.</returns>
			<param name="ownerType">The type of the class where the routed event is added.</param>
		</member>
		<member name="M:System.Windows.RoutedEvent.ToString">
			<summary>Returns a string representation of this <see cref="T:System.Windows.RoutedEvent"></see>. Overrides the base Object implementation. </summary>
			<returns>A string representation for this object, which is identical to the value returned by <see cref="P:System.Windows.RoutedEvent.Name"></see>.</returns>
		</member>
		<member name="P:System.Windows.RoutedEvent.HandlerType">
			<summary>Gets the handler type of the routed event. </summary>
			<returns>The handler type of the routed event.</returns>
		</member>
		<member name="P:System.Windows.RoutedEvent.Name">
			<summary>Gets the identifying name of the routed event. </summary>
			<returns>The name of the routed event.</returns>
		</member>
		<member name="P:System.Windows.RoutedEvent.OwnerType">
			<summary>Gets the registered owner type of the routed event. </summary>
			<returns>The owner type of the routed event.</returns>
		</member>
		<member name="P:System.Windows.RoutedEvent.RoutingStrategy">
			<summary>Gets the routing strategy of the routed event. </summary>
			<returns>One of the enumeration values. The default is the enumeration default, <see cref="F:System.Windows.RoutingStrategy.Bubble"></see>.</returns>
		</member>
		<member name="T:System.Windows.RoutedEventArgs">
			<summary>Contains state information and event data associated with a GTMT#routed event. </summary>
		</member>
		<member name="M:System.Windows.RoutedEventArgs.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.RoutedEventArgs"></see> class. </summary>
		</member>
		<member name="M:System.Windows.RoutedEventArgs.#ctor(System.Windows.RoutedEvent)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.RoutedEventArgs"></see> class, using the supplied routed event identifier. </summary>
			<param name="routedEvent">The routed event identifier for this instance of the <see cref="T:System.Windows.RoutedEventArgs"></see> class.</param>
		</member>
		<member name="M:System.Windows.RoutedEventArgs.#ctor(System.Windows.RoutedEvent,System.Object)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.RoutedEventArgs"></see> class, using the supplied routed event identifier, and providing the opportunity to declare a different source for the event. </summary>
			<param name="source">An alternate source that will be reported when the event is handled. This pre-populates the <see cref="P:System.Windows.RoutedEventArgs.Source"></see> property.</param>
			<param name="routedEvent">The routed event identifier for this instance of the <see cref="T:System.Windows.RoutedEventArgs"></see> class.</param>
		</member>
		<member name="M:System.Windows.RoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
			<summary> When implemented in a derived class, provides a way to invoke event handlers in a type-specific way, which can increase efficiency over the base implementation.</summary>
			<param name="genericTarget">The target on which the provided handler should be invoked.</param>
			<param name="genericHandler">The generic handler / delegate implementation to be invoked.</param>
		</member>
		<member name="M:System.Windows.RoutedEventArgs.OnSetSource(System.Object)">
			<summary>When implemented in a derived class, will be invoked whenever the value of the <see cref="P:System.Windows.RoutedEventArgs.Source"></see> property of an instance changes.</summary>
			<param name="source">The new value that <see cref="P:System.Windows.RoutedEventArgs.Source"></see> is being set to.</param>
		</member>
		<member name="P:System.Windows.RoutedEventArgs.Handled">
			<summary>Gets or sets a value that indicates the present state of the event handling for a GTMT#routed event as it travels the route. </summary>
			<returns>If setting, set to true if the event is to be marked handled; otherwise false. If reading this value, true indicates that either a class handler, or some instance handler along the route, has already marked this event handled. false.indicates that no such handler has marked the event handled.The default value is false.</returns>
		</member>
		<member name="P:System.Windows.RoutedEventArgs.OriginalSource">
			<summary>Gets any deeper object in visual tree or logical tree compositing, or within the runtime element tree that raised this routed event.</summary>
			<returns>The original reporting source, before any possible <see cref="P:System.Windows.RoutedEventArgs.Source"></see> adjustment made by class handling, which may have been done to flatten composited element trees.</returns>
		</member>
		<member name="P:System.Windows.RoutedEventArgs.RoutedEvent">
			<summary> Gets or sets the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent"></see> associated with this <see cref="T:System.Windows.RoutedEventArgs"></see> instance. </summary>
			<returns>The identifier for the event that has been invoked.</returns>
			<exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.RoutedEventArgs.RoutedEvent"></see>  cannot be changed while event is being routed.</exception>
		</member>
		<member name="P:System.Windows.RoutedEventArgs.Source">
			<summary> Gets or sets a reference to the object that raised the event. </summary>
			<returns>The object that raised the event.</returns>
		</member>
		<member name="T:System.Windows.RoutedEventHandler">
			<summary>Represents the delegate for handlers that receive routed events. </summary>
		</member>
		<member name="T:System.Windows.RoutedEventHandlerInfo">
			<summary>Do not use. Supports constructing event routes internally.</summary>
		</member>
		<member name="M:System.Windows.RoutedEventHandlerInfo.Equals(System.Object)">
			<summary>Returns whether the provided object is equivalent to the current <see cref="T:System.Windows.RoutedEventHandlerInfo"></see>.</summary>
			<returns>true if the provided object is castable to <see cref="T:System.Windows.RoutedEventHandlerInfo"></see> and is equivalent to the current <see cref="T:System.Windows.RoutedEventHandlerInfo"></see>; otherwise, false.</returns>
			<param name="obj">The object to compare to the current <see cref="T:System.Windows.RoutedEventHandlerInfo"></see>.</param>
		</member>
		<member name="M:System.Windows.RoutedEventHandlerInfo.Equals(System.Windows.RoutedEventHandlerInfo)">
			<summary>Returns whether the provided <see cref="T:System.Windows.RoutedEventHandlerInfo"></see> is equivalent to the current <see cref="T:System.Windows.RoutedEventHandlerInfo"></see>.</summary>
			<returns>true if the provided <see cref="T:System.Windows.RoutedEventHandlerInfo"></see> is equivalent to the current <see cref="T:System.Windows.RoutedEventHandlerInfo"></see>; otherwise, false.</returns>
			<param name="handlerInfo">The <see cref="T:System.Windows.RoutedEventHandlerInfo"></see> to compare to the current <see cref="T:System.Windows.RoutedEventHandlerInfo"></see>.</param>
		</member>
		<member name="M:System.Windows.RoutedEventHandlerInfo.GetHashCode">
			<summary>Serves as a hash function for the <see cref="T:System.Windows.RoutedEventHandlerInfo"></see> type, suitable for use in hashing algorithms and data structures like a hash table </summary>
			<returns>The hash value generated for the <see cref="T:System.Windows.RoutedEventHandlerInfo"></see>.</returns>
		</member>
		<member name="M:System.Windows.RoutedEventHandlerInfo.op_Equality(System.Windows.RoutedEventHandlerInfo,System.Windows.RoutedEventHandlerInfo)">
			<summary>Determines whether two specified <see cref="T:System.Windows.RoutedEventHandlerInfo"></see> objects have the same value.</summary>
			<returns>true if the two <see cref="T:System.Windows.RoutedEventHandlerInfo"></see> instances are equivalent; otherwise, false.</returns>
			<param name="handlerInfo1">The first <see cref="T:System.Windows.RoutedEventHandlerInfo"></see> to compare.</param>
			<param name="handlerInfo2">The second <see cref="T:System.Windows.RoutedEventHandlerInfo"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.RoutedEventHandlerInfo.op_Inequality(System.Windows.RoutedEventHandlerInfo,System.Windows.RoutedEventHandlerInfo)">
			<summary>Determines whether two specified <see cref="T:System.Windows.RoutedEventHandlerInfo"></see> objects are different.</summary>
			<returns>true if the two <see cref="T:System.Windows.RoutedEventHandlerInfo"></see> instances are different; otherwise, false.</returns>
			<param name="handlerInfo1">The first <see cref="T:System.Windows.RoutedEventHandlerInfo"></see> to compare.</param>
			<param name="handlerInfo2">The second <see cref="T:System.Windows.RoutedEventHandlerInfo"></see> to compare.</param>
		</member>
		<member name="P:System.Windows.RoutedEventHandlerInfo.Handler">
			<summary>Gets the specific handler reference for which this <see cref="T:System.Windows.RoutedEventHandlerInfo"></see> provides information. </summary>
			<returns>The handler reference.</returns>
		</member>
		<member name="P:System.Windows.RoutedEventHandlerInfo.InvokeHandledEventsToo">
			<summary>Gets whether the <see cref="P:System.Windows.RoutedEventHandlerInfo.Handler"></see> associated with this <see cref="T:System.Windows.RoutedEventHandlerInfo"></see>  should be invoked for events even if they were noted as being handled by other elements in the event route. </summary>
			<returns>true if the handler should be invoked for handled events; false if the handler should not be invoked in this case. The default is false.</returns>
		</member>
		<member name="T:System.Windows.RoutingStrategy">
			<summary>Indicates the routing strategy of the routed event. </summary>
		</member>
		<member name="F:System.Windows.RoutingStrategy.Bubble">
			<summary>The event uses a GTMT#bubbling strategy, where the event instance moves up the tree. </summary>
		</member>
		<member name="F:System.Windows.RoutingStrategy.Direct">
			<summary>The event does not support routing. </summary>
		</member>
		<member name="F:System.Windows.RoutingStrategy.Tunnel">
			<summary>The event uses a GTMT#tunneling strategy, where the event instance moves down the tree. </summary>
		</member>
		<member name="T:System.Windows.SizeChangedInfo">
			<summary>Report the specifics of a value change involving a <see cref="T:System.Windows.Size"></see>. This is used as a parameter in <see cref="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)"></see> overrides.</summary>
		</member>
		<member name="M:System.Windows.SizeChangedInfo.#ctor(System.Windows.UIElement,System.Windows.Size,System.Boolean,System.Boolean)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.SizeChangedInfo"></see> class. </summary>
			<param name="previousSize">The previous size, before the change.</param>
			<param name="heightChanged">true if the Height component of the size changed.</param>
			<param name="widthChanged">true if the Width component of the size changed.</param>
			<param name="element">The element where the size is being changed.</param>
		</member>
		<member name="P:System.Windows.SizeChangedInfo.HeightChanged">
			<summary>Gets a value indicating whether this <see cref="T:System.Windows.SizeChangedInfo"></see>  reports a size change that includes a significant change to the Height component. </summary>
			<returns>true if there is a significant Height component change; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.SizeChangedInfo.NewSize">
			<summary>Gets the new size being reported. </summary>
			<returns>The new size.</returns>
		</member>
		<member name="P:System.Windows.SizeChangedInfo.PreviousSize">
			<summary> Gets the previous size of the size-related value being reported as changed. </summary>
			<returns>The previous size.</returns>
		</member>
		<member name="T:System.Windows.SizeToContent">
			<summary>Specifies how a window should be sized relative to its content. Used by the SizeToContent property. </summary>
		</member>
		<member name="F:System.Windows.SizeToContent.Height">
			<summary> Specifies that the window automatically sizes to the content's height, but not its width. </summary>
		</member>
		<member name="F:System.Windows.SizeToContent.Manual">
			<summary>Specifies that the window does not automatically size to fit the content. </summary>
		</member>
		<member name="F:System.Windows.SizeToContent.Width">
			<summary> Specifies that the window automatically sizes to the content's width, but not its height. </summary>
		</member>
		<member name="F:System.Windows.SizeToContent.WidthAndHeight">
			<summary> Specifies that the window automatically sizes to the content's height and width. </summary>
		</member>
		<member name="T:System.Windows.SourceChangedEventArgs">
			<summary>Provides data for the SourceChanged event, used for interoperation. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.SourceChangedEventArgs.#ctor(System.Windows.PresentationSource,System.Windows.PresentationSource)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.SourceChangedEventArgs"></see> class, using supplied information for the old and new sources. </summary>
			<param name="newSource">The new <see cref="T:System.Windows.PresentationSource"></see> that this handler is being notified about.</param>
			<param name="oldSource">The old <see cref="T:System.Windows.PresentationSource"></see> that this handler is being notified about.</param>
		</member>
		<member name="M:System.Windows.SourceChangedEventArgs.#ctor(System.Windows.PresentationSource,System.Windows.PresentationSource,System.Windows.IInputElement,System.Windows.IInputElement)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.SourceChangedEventArgs"></see> class, using supplied information for the old and new sources, the element that this change effects, and the previous reported parent of that element. </summary>
			<param name="newSource">The new <see cref="T:System.Windows.PresentationSource"></see> that this handler is being notified about.</param>
			<param name="oldParent">The old parent of the element whose parent changed causing the source to change.</param>
			<param name="element">The element whose parent changed causing the source to change.</param>
			<param name="oldSource">The old <see cref="T:System.Windows.PresentationSource"></see> that this handler is being notified about.</param>
		</member>
		<member name="P:System.Windows.SourceChangedEventArgs.Element">
			<summary> Gets the element whose parent change causing the presentation source information to change. </summary>
			<returns>The element that is reporting the change.</returns>
		</member>
		<member name="P:System.Windows.SourceChangedEventArgs.NewSource">
			<summary> Gets the new source involved in this source change. </summary>
			<returns>The new <see cref="T:System.Windows.PresentationSource"></see>.</returns>
		</member>
		<member name="P:System.Windows.SourceChangedEventArgs.OldParent">
			<summary> Gets the previous parent of the element whose parent change causing the presentation source information to change. </summary>
			<returns>The previous parent element source.</returns>
		</member>
		<member name="P:System.Windows.SourceChangedEventArgs.OldSource">
			<summary> Gets the old source involved in this source change. </summary>
			<returns>The old <see cref="T:System.Windows.PresentationSource"></see>.</returns>
		</member>
		<member name="T:System.Windows.SourceChangedEventHandler">
			<summary> Represents the method that handles the SourceChanged event on PresentationSource implementations. </summary>
		</member>
		<member name="T:System.Windows.StrokeCollectionConverter">
			<summary>Converts a <see cref="T:System.Windows.Ink.StrokeCollection"></see> to a string.</summary>
		</member>
		<member name="M:System.Windows.StrokeCollectionConverter.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.StrokeCollectionConverter"></see> class. </summary>
		</member>
		<member name="M:System.Windows.StrokeCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Returns a value that indicates whether the <see cref="T:System.Windows.StrokeCollectionConverter"></see> can convert an object of a specified type to a <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</summary>
			<returns>true if the <see cref="T:System.Windows.StrokeCollectionConverter"></see> can convert an object of type sourceType to a <see cref="T:System.Windows.Ink.StrokeCollection"></see>; otherwise, false.</returns>
			<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides the format context.</param>
			<param name="sourceType">The <see cref="T:System.Type"></see> to convert from.</param>
		</member>
		<member name="M:System.Windows.StrokeCollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Returns a value that indicates whether the <see cref="T:System.Windows.StrokeCollectionConverter"></see> can convert a <see cref="T:System.Windows.Ink.StrokeCollection"></see> to the specified type.</summary>
			<returns>true if the <see cref="T:System.Windows.StrokeCollectionConverter"></see> can convert a <see cref="T:System.Windows.Ink.StrokeCollection"></see> to the sourceType; otherwise, false.</returns>
			<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides the format context.</param>
			<param name="destinationType">The <see cref="T:System.Type"></see> to convert to.</param>
		</member>
		<member name="M:System.Windows.StrokeCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary>Converts the specified object to a <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</summary>
			<returns>A <see cref="T:System.Windows.Ink.StrokeCollection"></see> converted from value.</returns>
			<param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture.</param>
			<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
			<param name="value">The <see cref="T:System.Object"></see> to convert.</param>
		</member>
		<member name="M:System.Windows.StrokeCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary>Converts a <see cref="T:System.Windows.Ink.StrokeCollection"></see> to a string.</summary>
			<returns>An object that represents the specified <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</returns>
			<param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture.</param>
			<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
			<param name="destinationType">The <see cref="T:System.Type"></see> to convert to.</param>
			<param name="value">The <see cref="T:System.Object"></see> to convert.</param>
			<exception cref="T:System.ArgumentNullException">destinationType is null.</exception>
		</member>
		<member name="M:System.Windows.StrokeCollectionConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
			<summary>Returns whether this object supports a standard set of values that can be picked from a list, using the specified context. </summary>
			<returns>false in all cases.</returns>
			<param name="c ontext">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
		</member>
		<member name="T:System.Windows.TextAlignment">
			<summary>Specifies whether the text in the object is left-aligned, right-aligned, centered, or justified.</summary>
		</member>
		<member name="F:System.Windows.TextAlignment.Center">
			<summary>Text is centered.</summary>
		</member>
		<member name="F:System.Windows.TextAlignment.Justify">
			<summary>Text is justified.</summary>
		</member>
		<member name="F:System.Windows.TextAlignment.Left">
			<summary>Default. Text is aligned to the left.</summary>
		</member>
		<member name="F:System.Windows.TextAlignment.Right">
			<summary>Text is aligned to the right.</summary>
		</member>
		<member name="T:System.Windows.TextDataFormat">
			<summary>Specifies the data format of the text data.</summary>
		</member>
		<member name="F:System.Windows.TextDataFormat.CommaSeparatedValue">
			<summary>Specifies that the text data is in the <see cref="F:System.Windows.DataFormats.CommaSeparatedValue"></see> data format.</summary>
		</member>
		<member name="F:System.Windows.TextDataFormat.Html">
			<summary>Specifies that the text data is in the <see cref="F:System.Windows.DataFormats.Html"></see> data format.</summary>
		</member>
		<member name="F:System.Windows.TextDataFormat.Rtf">
			<summary>Specifies that the text data is in the <see cref="F:System.Windows.DataFormats.Rtf"></see> data format.</summary>
		</member>
		<member name="F:System.Windows.TextDataFormat.Text">
			<summary>Specifies that the text data is in the <see cref="F:System.Windows.DataFormats.Text"></see> data format.</summary>
		</member>
		<member name="F:System.Windows.TextDataFormat.UnicodeText">
			<summary>Specifies that the text data is in the <see cref="F:System.Windows.DataFormats.UnicodeText"></see> data format.</summary>
		</member>
		<member name="F:System.Windows.TextDataFormat.Xaml">
			<summary>Specifies that the text data is in the <see cref="F:System.Windows.DataFormats.Xaml"></see> data format.</summary>
		</member>
		<member name="T:System.Windows.TextDecoration">
			<summary>A <see cref="T:System.Windows.TextDecoration"></see> object is a visual ornamentation you can add to text.</summary>
		</member>
		<member name="M:System.Windows.TextDecoration.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.TextDecoration"></see> class.</summary>
		</member>
		<member name="M:System.Windows.TextDecoration.#ctor(System.Windows.TextDecorationLocation,System.Windows.Media.Pen,System.Double,System.Windows.TextDecorationUnit,System.Windows.TextDecorationUnit)">
			<summary>Initializes a new instance of the TextDecoration class with the specified Location, Pen, PenOffset, PenOffsetUnit, and PenThicknessUnit values.  </summary>
			<param name="penOffset">The vertical displacement from the text decoration's location. A negative value moves the decoration lower, while a positive value moves the decoration higher.</param>
			<param name="penThicknessUnit">The units used to interpret the value of pen's Thickness.</param>
			<param name="location">The location of the text decoration.</param>
			<param name="pen">The Pen used to draw the text decoration. If this value is null, the text decoration color matches the text color to which it is applied, and the text decoration's thickness is set to the font's recommended thickness.</param>
			<param name="penOffsetUnit">The units used to interpret the value of penOffset.</param>
		</member>
		<member name="M:System.Windows.TextDecoration.Clone">
			<summary>Returns a modifiable clone of this instance.</summary>
			<returns>A modifiable clone of this instance. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The copy's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property is false.</returns>
		</member>
		<member name="M:System.Windows.TextDecoration.CloneCurrentValue">
			<summary>Returns a mutable clone of this <see cref="T:System.Windows.Freezable"></see>, with values at existing <see cref="T:System.Windows.Freezable"></see>'s current values rather than reverting to metadata defaults.</summary>
			<returns>The returned clone object.</returns>
		</member>
		<member name="P:System.Windows.TextDecoration.Location">
			<summary>Gets or sets the vertical location at which the text decoration is drawn.</summary>
			<returns>The vertical location at which the text decoration is drawn.</returns>
		</member>
		<member name="P:System.Windows.TextDecoration.Pen">
			<summary>Gets or sets the Pen used to draw the text decoration.</summary>
			<returns>The Pen used to draw the text decoration. If this value is null, the decoration color matches the text to which it is applied and the decoration's thickness is set to the font's recommended thickness.</returns>
		</member>
		<member name="P:System.Windows.TextDecoration.PenOffset">
			<summary>Gets or sets the text decoration's offset from its Location.</summary>
			<returns>The text decoration's offset from its Location.</returns>
		</member>
		<member name="P:System.Windows.TextDecoration.PenOffsetUnit">
			<summary>Gets the units in which the PenOffset value is expressed.</summary>
			<returns>The units in which the PenOffset value is expressed.</returns>
		</member>
		<member name="P:System.Windows.TextDecoration.PenThicknessUnit">
			<summary>Gets the units in which the Thickness of the text decoration's Pen is expressed.</summary>
			<returns>The units in which the Thickness of the text decoration's Pen is expressed.</returns>
		</member>
		<member name="T:System.Windows.TextDecorationCollection">
			<summary>Represents a collection of <see cref="T:System.Windows.TextDecoration"></see> instances.</summary>
		</member>
		<member name="M:System.Windows.TextDecorationCollection.#ctor">
			<summary>Initializes a new <see cref="T:System.Windows.TextDecorationCollection"></see> instance that is empty.</summary>
		</member>
		<member name="M:System.Windows.TextDecorationCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.TextDecoration})">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.TextDecorationCollection"></see> class.</summary>
			<param name="collection">An enumerator of type <see cref="T:System.Collections.Generic.IEnumerable`1"></see>.</param>
		</member>
		<member name="M:System.Windows.TextDecorationCollection.#ctor(System.Int32)">
			<summary>Initializes a new <see cref="T:System.Windows.TextDecorationCollection"></see> instance that is empty and has the specified initial capacity.</summary>
			<param name="capacity">The number of elements that the new list is initially capable of storing.</param>
		</member>
		<member name="M:System.Windows.TextDecorationCollection.Add(System.Collections.Generic.IEnumerable{System.Windows.TextDecoration})">
			<summary>Adds a generic <see cref="T:System.Collections.Generic.IEnumerable`1"></see> to the collection.</summary>
			<param name="textDecorations">A generic <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of type <see cref="T:System.Windows.TextDecoration"></see>.</param>
		</member>
		<member name="M:System.Windows.TextDecorationCollection.Add(System.Windows.TextDecoration)">
			<summary>Adds a <see cref="T:System.Windows.TextDecoration"></see> to the collection.</summary>
			<param name="value">A value of type <see cref="T:System.Windows.TextDecoration"></see>.</param>
		</member>
		<member name="M:System.Windows.TextDecorationCollection.Contains(System.Windows.TextDecoration)">
			<summary>Determines if the contains the specified <see cref="T:System.Windows.TextDecoration"></see>.</summary>
			<returns>true if value is in the collection; otherwise, false.</returns>
			<param name="value">A value of type <see cref="T:System.Windows.TextDecoration"></see>.</param>
		</member>
		<member name="M:System.Windows.TextDecorationCollection.CopyTo(System.Windows.TextDecoration[],System.Int32)">
			<summary> Copies the elements of the collection into "array" starting at "index" </summary>
			<param name="array">Is an array of type <see cref="T:System.Windows.TextDecoration"></see>.</param>
			<param name="index">A value of type <see cref="T:System.Int32"></see>.</param>
		</member>
		<member name="M:System.Windows.TextDecorationCollection.IndexOf(System.Windows.TextDecoration)">
			<summary> Returns the index of "value" in the list  </summary>
			<returns>A value of type <see cref="T:System.Int32"></see>.</returns>
			<param name="value">A value of type <see cref="T:System.Windows.TextDecoration"></see>.</param>
		</member>
		<member name="M:System.Windows.TextDecorationCollection.Insert(System.Int32,System.Windows.TextDecoration)">
			<summary> Inserts "value" into the list at the specified position </summary>
			<param name="value">A value of type <see cref="T:System.Windows.TextDecoration"></see>.</param>
			<param name="index">A value of type <see cref="T:System.Int32"></see>.</param>
		</member>
		<member name="M:System.Windows.TextDecorationCollection.Remove(System.Windows.TextDecoration)">
			<summary> Removes "value" from the list </summary>
			<returns>A value of type <see cref="T:System.Boolean"></see>.</returns>
			<param name="value">A value of type <see cref="T:System.Windows.TextDecoration"></see>.</param>
		</member>
		<member name="M:System.Windows.TextDecorationCollection.RemoveAt(System.Int32)">
			<summary> Removes the element at the specified index </summary>
			<param name="index">A value of type <see cref="T:System.Int32"></see>.</param>
		</member>
		<member name="T:System.Windows.TextDecorationCollection.Enumerator">
			<summary> Enumerates items in a collection. </summary>
		</member>
		<member name="M:System.Windows.TextDecorationCollection.Enumerator.MoveNext">
			<summary> Advances the enumerator to the next element of the collection. </summary>
			<returns>true if the enumerator was successfully advanced to the next element, false if the enumerator has passed the end of the collection.</returns>
		</member>
		<member name="T:System.Windows.TextDecorationCollectionConverter">
			<summary> TypeConverter for TextDecorationCollection </summary>
		</member>
		<member name="M:System.Windows.TextDecorationCollectionConverter.#ctor">
			<summary>Constructor for <see cref="T:System.Windows.TextDecorationCollectionConverter"></see>.</summary>
		</member>
		<member name="M:System.Windows.TextDecorationCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> CanConvertFrom </summary>
			<returns>true if it can convert from sourceType to TextDecorations, false otherwise</returns>
			<param name="context">ITypeDescriptorContext</param>
			<param name="sourceType">Type to convert to</param>
		</member>
		<member name="M:System.Windows.TextDecorationCollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> CanConvertTo method </summary>
			<returns>false will always be returned because TextDecorations cannot be converted to any other type.</returns>
			<param name="context">ITypeDescriptorContext</param>
			<param name="destinationType">Type to convert to</param>
		</member>
		<member name="M:System.Windows.TextDecorationCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary> ConvertFrom </summary>
			<returns>the converted value of the input object</returns>
			<param name="culture">CultureInfo</param>
			<param name="context">ITypeDescriptorContext</param>
			<param name="input">The input object to be converted to TextDecorations</param>
		</member>
		<member name="M:System.Windows.TextDecorationCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> ConvertTo </summary>
			<returns>null will always be returned because TextDecorations cannot be converted to any other type.</returns>
			<param name="culture">CultureInfo</param>
			<param name="context">ITypeDescriptorContext</param>
			<param name="destinationType">The destination type of the conversion</param>
			<param name="value">the object to be converted to another type</param>
		</member>
		<member name="T:System.Windows.TextDecorationLocation">
			<summary>Specifies the TLA#tla_winclient-calculated vertical position of a <see cref="T:System.Windows.TextDecoration"></see> object.</summary>
		</member>
		<member name="F:System.Windows.TextDecorationLocation.Baseline">
			<summary>The vertical position of a baseline.</summary>
		</member>
		<member name="F:System.Windows.TextDecorationLocation.OverLine">
			<summary>The vertical position of an overline.</summary>
		</member>
		<member name="F:System.Windows.TextDecorationLocation.Strikethrough">
			<summary>The vertical position of a strikethrough.</summary>
		</member>
		<member name="F:System.Windows.TextDecorationLocation.Underline">
			<summary>The vertical position of an underline.</summary>
		</member>
		<member name="T:System.Windows.TextDecorations">
			<summary>Represents a collection of <see cref="T:System.Windows.TextDecoration"></see> objects. This class cannot be inherited.</summary>
		</member>
		<member name="P:System.Windows.TextDecorations.Baseline">
			<summary>Gets a <see cref="T:System.Windows.TextDecorationCollection"></see> that contains a baseline <see cref="T:System.Windows.TextDecoration"></see>.</summary>
			<returns>The <see cref="T:System.Windows.TextDecorationCollection"></see> that contains the baseline.</returns>
		</member>
		<member name="P:System.Windows.TextDecorations.OverLine">
			<summary>Gets a <see cref="T:System.Windows.TextDecorationCollection"></see> that contains an overline <see cref="T:System.Windows.TextDecoration"></see>.</summary>
			<returns>The <see cref="T:System.Windows.TextDecorationCollection"></see> that contains the overline.</returns>
		</member>
		<member name="P:System.Windows.TextDecorations.Strikethrough">
			<summary>Gets a <see cref="T:System.Windows.TextDecorationCollection"></see> that contains a strikethrough <see cref="T:System.Windows.TextDecoration"></see>.</summary>
			<returns>The <see cref="T:System.Windows.TextDecorationCollection"></see> that contains the strikethrough.</returns>
		</member>
		<member name="P:System.Windows.TextDecorations.Underline">
			<summary>Gets a <see cref="T:System.Windows.TextDecorationCollection"></see> that contains an underline <see cref="T:System.Windows.TextDecoration"></see>.</summary>
			<returns>The <see cref="T:System.Windows.TextDecorationCollection"></see> that contains the underline.</returns>
		</member>
		<member name="T:System.Windows.TextDecorationUnit">
			<summary>Specifies the unit type of a <see cref="T:System.Windows.TextDecoration"></see> pen offset or pen thickness value.</summary>
		</member>
		<member name="F:System.Windows.TextDecorationUnit.FontRecommended">
			<summary>Default. A unit value that is relative to the font used for the <see cref="T:System.Windows.TextDecoration"></see>. If the decoration spans multiple fonts, an average recommended value is calculated. </summary>
		</member>
		<member name="F:System.Windows.TextDecorationUnit.FontRenderingEmSize">
			<summary>A unit value that is relative to the em size of the font. The value of the offset or thickness is equal to the offset or thickness value multiplied by the font em size.</summary>
		</member>
		<member name="F:System.Windows.TextDecorationUnit.Pixel">
			<summary>A unit value that is expressed in pixels.</summary>
		</member>
		<member name="T:System.Windows.TextMarkerStyle">
			<summary>Describes the appearance of a list item's bullet style.</summary>
		</member>
		<member name="F:System.Windows.TextMarkerStyle.Box">
			<summary>A solid square box is displayed.</summary>
		</member>
		<member name="F:System.Windows.TextMarkerStyle.Circle">
			<summary>A hollow disc circle is displayed.</summary>
		</member>
		<member name="F:System.Windows.TextMarkerStyle.Decimal">
			<summary>A decimal is displayed, starting with the number one, for example, 1, 2, and 3. The <see cref="T:System.Windows.TextMarkerStyle"></see> is automatically incremented for each item added to the list.</summary>
		</member>
		<member name="F:System.Windows.TextMarkerStyle.Disc">
			<summary>A solid disc circle is displayed.</summary>
		</member>
		<member name="F:System.Windows.TextMarkerStyle.LowerLatin">
			<summary>A lowercase TLA#tla_ascii character is displayed, starting with the letter a, for example, a, b, and c. The <see cref="T:System.Windows.TextMarkerStyle"></see> is automatically incremented for each item added to the list.</summary>
		</member>
		<member name="F:System.Windows.TextMarkerStyle.LowerRoman">
			<summary>A lowercase Roman numeral is displayed, starting with the numeral i, for example, i, ii, iii, and iv. The <see cref="T:System.Windows.TextMarkerStyle"></see> is automatically incremented for each item added to the list.</summary>
		</member>
		<member name="F:System.Windows.TextMarkerStyle.None">
			<summary>No marker is displayed.</summary>
		</member>
		<member name="F:System.Windows.TextMarkerStyle.Square">
			<summary>A hollow square shape is displayed.</summary>
		</member>
		<member name="F:System.Windows.TextMarkerStyle.UpperLatin">
			<summary>An uppercase TLA2#tla_ascii character is displayed, starting with the letter A, for example, A, B, and C. The <see cref="T:System.Windows.TextMarkerStyle"></see> is automatically incremented for each item added to the list.</summary>
		</member>
		<member name="F:System.Windows.TextMarkerStyle.UpperRoman">
			<summary>An uppercase Roman numeral is displayed, starting with the numeral I, for example, I, II, III, and IV. The <see cref="T:System.Windows.TextMarkerStyle"></see> is automatically incremented for each item added to the list.</summary>
		</member>
		<member name="T:System.Windows.TextTrimming">
			<summary>Describes how text is trimmed when it overflows the edge of its containing box.</summary>
		</member>
		<member name="F:System.Windows.TextTrimming.CharacterEllipsis">
			<summary>Text is trimmed at a character boundary. An ellipsis (...) is drawn in place of remaining text.</summary>
		</member>
		<member name="F:System.Windows.TextTrimming.None">
			<summary>Text is not trimmed.</summary>
		</member>
		<member name="F:System.Windows.TextTrimming.WordEllipsis">
			<summary>Text is trimmed at a word boundary. An ellipsis (...) is drawn in place of remaining text.</summary>
		</member>
		<member name="T:System.Windows.TextWrapping">
			<summary> Specifies whether text wraps when it reaches the edge of the containing box </summary>
		</member>
		<member name="F:System.Windows.TextWrapping.NoWrap">
			<summary> No line wrapping is performed. </summary>
		</member>
		<member name="F:System.Windows.TextWrapping.Wrap">
			<summary> Line-breaking occurs if the line overflows beyond the available block width, even if the standard line breaking algorithm cannot determine any line break opportunity, as in the case of a very long word constrained in a fixed-width container with no scrolling allowed. </summary>
		</member>
		<member name="F:System.Windows.TextWrapping.WrapWithOverflow">
			<summary> Line-breaking occurs if the line overflows beyond the available block width. However, a line may overflow beyond the block width if the line breaking algorithm cannot determine a line break opportunity, as in the case of a very long word constrained in a fixed-width container with no scrolling allowed. </summary>
		</member>
		<member name="T:System.Windows.UIElement">
			<summary><see cref="T:System.Windows.UIElement"></see> is a base class for frameworks building on TLA#tla_winclient elements and basic presentation characteristics. </summary>
		</member>
		<member name="M:System.Windows.UIElement.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.UIElement"></see> class. </summary>
		</member>
		<member name="E:System.Windows.UIElement.DragEnter">
			<summary> Occurs when the input system reports an underlying drag event (from <see cref="T:System.Windows.DragDrop"></see> TLA#tla_api#plural) with this element (or a child element along the event route) as the drag target. </summary>
		</member>
		<member name="E:System.Windows.UIElement.DragLeave">
			<summary> Occurs when the input system reports an underlying drag event (from <see cref="T:System.Windows.DragDrop"></see> TLA#tla_api#plural) with this element (or a child element along the event route) as the drag origin. </summary>
		</member>
		<member name="E:System.Windows.UIElement.DragOver">
			<summary> Occurs when the input system reports an underlying drag event (from <see cref="T:System.Windows.DragDrop"></see> TLA#tla_api#plural) with this element (or a child element along the event route) as drag target. </summary>
		</member>
		<member name="E:System.Windows.UIElement.Drop">
			<summary> Occurs when the input system reports an underlying drop event (from <see cref="T:System.Windows.DragDrop"></see> TLA#tla_api#plural) with this element (or a child element along the event route) as drop target. </summary>
		</member>
		<member name="E:System.Windows.UIElement.FocusableChanged">
			<summary>Occurs when the effective value of the <see cref="P:System.Windows.UIElement.Focusable"></see> property changes.</summary>
		</member>
		<member name="E:System.Windows.UIElement.GiveFeedback">
			<summary> Occurs when the input system reports an underlying drag-and-drop event (from <see cref="T:System.Windows.DragDrop"></see> TLA#tla_api#plural) involving this element (or a child element along the event route). </summary>
		</member>
		<member name="E:System.Windows.UIElement.GotFocus">
			<summary>Occurs when this element (or a child element along the event route) gets logical focus. </summary>
		</member>
		<member name="E:System.Windows.UIElement.GotKeyboardFocus">
			<summary> Occurs when the keyboard is focused on this element (or a child element along the event route). </summary>
		</member>
		<member name="E:System.Windows.UIElement.GotMouseCapture">
			<summary> Occurs when this element (or a child element along the route) captures the mouse. </summary>
		</member>
		<member name="E:System.Windows.UIElement.GotStylusCapture">
			<summary> Occurs when this element (or a child element along the route) captures the stylus. </summary>
		</member>
		<member name="E:System.Windows.UIElement.IsEnabledChanged">
			<summary> Occurs when the value of the <see cref="P:System.Windows.UIElement.IsEnabled"></see> property on this element changes. </summary>
		</member>
		<member name="E:System.Windows.UIElement.IsHitTestVisibleChanged">
			<summary>Occurs whenever the value of the <see cref="P:System.Windows.UIElement.IsHitTestVisible"></see> dependency property changes.</summary>
		</member>
		<member name="E:System.Windows.UIElement.IsKeyboardFocusedChanged">
			<summary> Occurs when the value of the <see cref="P:System.Windows.UIElement.IsKeyboardFocused"></see> property changes on this element. </summary>
		</member>
		<member name="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged">
			<summary> Occurs when the value of the <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged"></see> property changes on this element. </summary>
		</member>
		<member name="E:System.Windows.UIElement.IsMouseCapturedChanged">
			<summary> Occurs when the value of the <see cref="P:System.Windows.UIElement.IsMouseCaptured"></see> property changes on this element. </summary>
		</member>
		<member name="E:System.Windows.UIElement.IsMouseCaptureWithinChanged">
			<summary>Occurs when the effective value of the <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty"></see> changes on this element.</summary>
		</member>
		<member name="E:System.Windows.UIElement.IsMouseDirectlyOverChanged">
			<summary> Occurs when the value of the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver"></see> property changes on this element. </summary>
		</member>
		<member name="E:System.Windows.UIElement.IsStylusCapturedChanged">
			<summary> Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusCaptured"></see> property changes on this element. </summary>
		</member>
		<member name="E:System.Windows.UIElement.IsStylusCaptureWithinChanged">
			<summary> Occurs when the effective value of the <see cref="F:System.Windows.UIElement.IsStylusCaptureWithinProperty"></see> changes on this element. </summary>
		</member>
		<member name="E:System.Windows.UIElement.IsStylusDirectlyOverChanged">
			<summary> Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver"></see> property changes on this element. </summary>
		</member>
		<member name="E:System.Windows.UIElement.IsVisibleChanged">
			<summary> Occurs when the value of the <see cref="P:System.Windows.UIElement.IsVisible"></see> property changes on this element. </summary>
		</member>
		<member name="E:System.Windows.UIElement.KeyDown">
			<summary> Occurs when a key is pressed while the keyboard is focused on this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.UIElement.KeyUp">
			<summary> Occurs when a key is released while the keyboard is focused on this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.UIElement.LayoutUpdated">
			<summary> Occurs when the layout of the various visual elements associated with the current <see cref="T:System.Windows.Threading.Dispatcher"></see> changes. </summary>
		</member>
		<member name="E:System.Windows.UIElement.LostFocus">
			<summary>Occurs when this element (or a child element along the event route) loses logical focus. </summary>
		</member>
		<member name="E:System.Windows.UIElement.LostKeyboardFocus">
			<summary> Occurs when the keyboard is no longer focused on this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.UIElement.LostMouseCapture">
			<summary> Occurs when this element (or a child element along the route) loses mouse capture. </summary>
		</member>
		<member name="E:System.Windows.UIElement.LostStylusCapture">
			<summary> Occurs when this element (or a child element along the route) loses stylus capture. </summary>
		</member>
		<member name="E:System.Windows.UIElement.MouseDown">
			<summary>Occurs when any mouse button is depressed over this element, or another element along a bubbling route in this element's UI tree.</summary>
		</member>
		<member name="E:System.Windows.UIElement.MouseEnter">
			<summary> Occurs when the mouse pointer enters the boundaries of this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.UIElement.MouseLeave">
			<summary> Occurs when the mouse pointer leaves the boundaries of this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.UIElement.MouseLeftButtonDown">
			<summary> Occurs when the left mouse button is pressed while the mouse pointer is over this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.UIElement.MouseLeftButtonUp">
			<summary> Occurs when the left mouse button is released while the mouse pointer is over this element. </summary>
		</member>
		<member name="E:System.Windows.UIElement.MouseMove">
			<summary> Occurs when the mouse pointer moves over this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.UIElement.MouseRightButtonDown">
			<summary> Occurs when the right mouse button is pressed while the mouse pointer is over this element. </summary>
		</member>
		<member name="E:System.Windows.UIElement.MouseRightButtonUp">
			<summary> Occurs when the right mouse button is released while the mouse pointer is over this element. </summary>
		</member>
		<member name="E:System.Windows.UIElement.MouseUp">
			<summary>Occurs when any mouse button is released over this element, or another element along a bubbling route in this element's UI tree.</summary>
		</member>
		<member name="E:System.Windows.UIElement.MouseWheel">
			<summary> Occurs when the user rotates the mouse wheel while the mouse pointer is over this element (or a child element along the route), or while that element has focus or mouse capture. </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewDragEnter">
			<summary> Occurs when the input system reports an underlying drag event (from <see cref="T:System.Windows.DragDrop"></see> TLA#tla_api#plural) with this element (or a child element along the route) as drag target. </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewDragLeave">
			<summary> Occurs when the input system reports an underlying drag event (from <see cref="T:System.Windows.DragDrop"></see> TLA#tla_api#plural) with this element (or a child element alogn the route) as drag origin. </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewDragOver">
			<summary> Occurs when the input system reports an underlying drag event (from <see cref="T:System.Windows.DragDrop"></see> TLA#tla_api#plural) with this element (or a child element along the route) as drag target. </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewDrop">
			<summary> Occurs when the input system reports an underlying drop event (from <see cref="T:System.Windows.DragDrop"></see> TLA#tla_api#plural) with this element (or a child element along the route) as drop target. </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewGiveFeedback">
			<summary> Occurs when a drag-and-drop operation is started.  </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
			<summary> Occurs when the keyboard is focused on this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewKeyDown">
			<summary> Occurs when a key is pressed while the keyboard is focused on this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewKeyUp">
			<summary> Occurs when a key is released while the keyboard is focused on this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
			<summary> Occurs when the keyboard is no longer focused on this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewMouseDown">
			<summary>Occurs when any mouse button is depressed over this element, or another element along a tunneling route in this element's UI tree.</summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
			<summary> Occurs when the left mouse button is pressed while the mouse pointer is over this element. </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
			<summary> Occurs when the left mouse button is released while the mouse pointer is over this element. </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewMouseMove">
			<summary> Occurs when the mouse pointer moves over this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
			<summary> Occurs when the right mouse button is pressed while the mouse pointer is over the element. </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
			<summary> Occurs when the right mouse button is released while the mouse pointer is over this element. </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewMouseUp">
			<summary>Occurs when any mouse button is released over this element, or another element along a tunneling route in this element's UI tree.</summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewMouseWheel">
			<summary> Occurs when the user rotates the mouse wheel while the mouse pointer is over this element (or a child element along the route), or while an element has focus or mouse capture. </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewQueryContinueDrag">
			<summary> Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation. </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewStylusButtonDown">
			<summary>Occurs when the stylus button is depressed over this element, or another element along a tunneling route in this element's UI tree.</summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewStylusButtonUp">
			<summary>Occurs when the stylus button is released over this element, or another element along a tunneling route in this element's UI tree.</summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewStylusDown">
			<summary> Occurs when the stylus touches the GTMT#digitizer over this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewStylusInAirMove">
			<summary> Occurs when the stylus moves over an element without actually touching the GTMT#digitizer. </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewStylusInRange">
			<summary> Occurs when the stylus is close enough to the GTMT#digitizer to be detected. </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewStylusMove">
			<summary> Occurs when the stylus cursor moves over the element. </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewStylusOutOfRange">
			<summary> Occurs when the stylus is too far from the GTMT#digitizer to be detected. </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewStylusSystemGesture">
			<summary> Occurs when a user performs one of several stylus gestures (see <see cref="T:System.Windows.Input.SystemGesture"></see>).</summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewStylusUp">
			<summary> Occurs when the user raises the stylus off of the GTMT#digitizer over this element. </summary>
		</member>
		<member name="E:System.Windows.UIElement.PreviewTextInput">
			<summary> Occurs when this element (or a child element in the route) gets text in a device-independent fashion. </summary>
		</member>
		<member name="E:System.Windows.UIElement.QueryContinueDrag">
			<summary> Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation. </summary>
		</member>
		<member name="E:System.Windows.UIElement.QueryCursor">
			<summary> Occurs when the cursor is requested to display. This event is raised on elements whenever the mouse pointer moves to a new location, which makes it possible that the cursor needs to be changed based on its new position. </summary>
		</member>
		<member name="E:System.Windows.UIElement.StylusButtonDown">
			<summary>Occurs when the stylus button is depressed over this element, or another element along a bubbling route in this element's UI tree.</summary>
		</member>
		<member name="E:System.Windows.UIElement.StylusButtonUp">
			<summary>Occurs when the stylus button is released over this element, or another element along a bubbling route in this element's UI tree.</summary>
		</member>
		<member name="E:System.Windows.UIElement.StylusDown">
			<summary> Occurs when the stylus touches the GTMT#digitizer over this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.UIElement.StylusEnter">
			<summary> Occurs when the stylus cursor enters the bounds of this element. </summary>
		</member>
		<member name="E:System.Windows.UIElement.StylusInAirMove">
			<summary> Occurs when the stylus moves over an element without actually touching the GTMT#digitizer. </summary>
		</member>
		<member name="E:System.Windows.UIElement.StylusInRange">
			<summary> Occurs when the stylus is close enough to the GTMT#digitizer to be detected. </summary>
		</member>
		<member name="E:System.Windows.UIElement.StylusLeave">
			<summary> Occurs when the stylus cursor leaves the bounds of the element. </summary>
		</member>
		<member name="E:System.Windows.UIElement.StylusMove">
			<summary> Occurs when the stylus cursor moves over this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.UIElement.StylusOutOfRange">
			<summary> Occurs when the stylus is too far from the GTMT#digitizer to be detected. </summary>
		</member>
		<member name="E:System.Windows.UIElement.StylusSystemGesture">
			<summary> Occurs when a user performs one of several stylus gestures (see <see cref="T:System.Windows.Input.SystemGesture"></see>).</summary>
		</member>
		<member name="E:System.Windows.UIElement.StylusUp">
			<summary> Occurs when the user raises the stylus off of the GTMT#digitizer over this element (or a child element along the route). </summary>
		</member>
		<member name="E:System.Windows.UIElement.TextInput">
			<summary> Occurs when this element (or a child element along the route) gets text in a device-independent fashion. </summary>
		</member>
		<member name="F:System.Windows.UIElement.AllowDropProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.AllowDrop"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.UIElement.AllowDrop"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.UIElement.BitmapEffectInputProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.BitmapEffectInput"></see> GTMT#dependency property. </summary>
			<returns>The <see cref="P:System.Windows.UIElement.BitmapEffectInput"></see> GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.BitmapEffectProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.BitmapEffect"></see> GTMT#dependency property. </summary>
			<returns>The <see cref="P:System.Windows.UIElement.BitmapEffect"></see> GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.ClipProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.Clip"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.UIElement.Clip"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.UIElement.ClipToBoundsProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.ClipToBounds"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.UIElement.ClipToBounds"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.UIElement.DragEnterEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.DragEnter"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.DragEnter"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.DragLeaveEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.DragLeave"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.DragLeave"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.DragOverEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.DragOver"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.DragOver"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.DropEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.DragOver"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.DragOver"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.FocusableProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.Focusable"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.UIElement.Focusable"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.UIElement.GiveFeedbackEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.GiveFeedback"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.GiveFeedback"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.GotFocusEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.GotFocus"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.GotFocus"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.GotKeyboardFocusEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.GotKeyboardFocus"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.GotKeyboardFocus"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.GotMouseCaptureEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.GotMouseCapture"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.GotMouseCapture"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.GotStylusCaptureEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.GotStylusCapture"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.GotStylusCapture"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.IsEnabledProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.IsEnabled"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.UIElement.IsEnabled"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.UIElement.IsFocusedProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.IsFocused"></see> GTMT#dependency property. </summary>
			<returns>The <see cref="P:System.Windows.UIElement.IsFocused"></see> GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.IsHitTestVisibleProperty">
			<summary>Identifies the <see cref="P:System.Windows.UIElement.IsHitTestVisible"></see>  GTMT#dependency property.</summary>
			<returns>The <see cref="P:System.Windows.UIElement.IsHitTestVisible"></see> dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.IsKeyboardFocusedProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.IsKeyboardFocused"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.UIElement.IsKeyboardFocused"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.UIElement.IsKeyboardFocusWithinProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin"></see> GTMT#dependency property. </summary>
			<returns>The <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin"></see> GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.IsMouseCapturedProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.IsMouseCaptured"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.UIElement.IsMouseCaptured"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.UIElement.IsMouseCaptureWithinProperty">
			<summary>Identifies the IsMouseCaptureWithin GTMT#dependency property. </summary>
			<returns>The identifier for the IsMouseCaptureWithin GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.UIElement.IsMouseDirectlyOverProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.UIElement.IsMouseOverProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.IsMouseOver"></see> GTMT#dependency property. </summary>
			<returns>The <see cref="P:System.Windows.UIElement.IsMouseOver"></see> GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.IsStylusCapturedProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.IsStylusCaptured"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.UIElement.IsStylusCaptured"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.UIElement.IsStylusCaptureWithinProperty">
			<summary>Identifies the IsStylusCaptureWithin GTMT#dependency property. </summary>
			<returns>The identifier for the IsStylusCaptureWithin GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.UIElement.IsStylusDirectlyOverProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.UIElement.IsStylusOverProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.IsStylusOver"></see> GTMT#dependency property. </summary>
			<returns>The <see cref="P:System.Windows.UIElement.IsStylusOver"></see> GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.IsVisibleProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.IsVisible"></see> GTMT#dependency property. </summary>
			<returns>The <see cref="P:System.Windows.UIElement.IsVisible"></see> GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.KeyDownEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.KeyDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.KeyDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.KeyUpEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.KeyUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.KeyUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.LostFocusEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.LostFocus"></see> routed event.</summary>
			<returns>The <see cref="E:System.Windows.UIElement.LostFocus"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.LostKeyboardFocusEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.LostKeyboardFocus"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.LostKeyboardFocus"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.LostMouseCaptureEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.LostMouseCapture"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.LostMouseCapture"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.LostStylusCaptureEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.LostStylusCapture"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.LostStylusCapture"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.MouseDownEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.MouseDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.MouseDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.MouseEnterEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.MouseEnter"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.MouseEnter"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.MouseLeaveEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.MouseLeave"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.MouseLeave"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.MouseLeftButtonDownEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.MouseLeftButtonDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.MouseLeftButtonUpEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.MouseLeftButtonUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.MouseMoveEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.MouseMove"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.MouseMove"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.MouseRightButtonDownEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.MouseRightButtonDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.MouseRightButtonDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.MouseRightButtonUpEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.MouseRightButtonUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.MouseRightButtonUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.MouseUpEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.MouseUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.MouseUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.MouseWheelEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.MouseWheel"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.MouseWheel"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.OpacityMaskProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.OpacityMask"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.UIElement.OpacityMask"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.UIElement.OpacityProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.Opacity"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.UIElement.Opacity"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewDragEnterEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.PreviewDragEnter"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewDragEnter"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewDragLeaveEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.PreviewDragLeave"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewDragLeave"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewDragOverEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.PreviewDragOver"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewDragOver"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewDropEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.PreviewDrop"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewDrop"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewGiveFeedbackEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.PreviewGiveFeedback"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewGiveFeedback"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewKeyDownEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.PreviewKeyDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewKeyDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewKeyUpEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.PreviewKeyUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewKeyUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewMouseDownEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewMouseDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewMouseMoveEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseMove"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewMouseMove"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewMouseUpEvent">
			<summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewMouseUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewMouseWheelEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseWheel"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewMouseWheel"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewQueryContinueDragEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewStylusButtonDownEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewStylusButtonUpEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewStylusDownEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewStylusDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewStylusInRangeEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusInRange"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewStylusInRange"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewStylusMoveEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusMove"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewStylusMove"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewStylusUpEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewStylusUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.PreviewTextInputEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.PreviewTextInput"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.PreviewTextInput"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.QueryContinueDragEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.QueryContinueDrag"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.QueryContinueDrag"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.QueryCursorEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.QueryCursor"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.QueryCursor"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.RenderTransformOriginProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.RenderTransformOrigin"></see> GTMT#dependency property. </summary>
			<returns>The <see cref="P:System.Windows.UIElement.RenderTransformOrigin"></see> GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.RenderTransformProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.RenderTransform"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.UIElement.RenderTransform"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.UIElement.SnapsToDevicePixelsProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.SnapsToDevicePixels"></see> GTMT#dependency property. </summary>
			<returns>The <see cref="P:System.Windows.UIElement.SnapsToDevicePixels"></see> GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.StylusButtonDownEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.StylusButtonDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.StylusButtonDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.StylusButtonUpEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.StylusButtonUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.StylusButtonUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.StylusDownEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.StylusDown"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.StylusDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.StylusEnterEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.StylusEnter"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.StylusEnter"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.StylusInAirMoveEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.StylusInAirMove"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.StylusInAirMove"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.StylusInRangeEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.StylusInRange"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.StylusInRange"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.StylusLeaveEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.StylusLeave"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.StylusLeave"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.StylusMoveEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.StylusMove"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.StylusMove"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.StylusOutOfRangeEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.StylusOutOfRange"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.StylusOutOfRange"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.StylusSystemGestureEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.StylusSystemGesture"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.StylusSystemGesture"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.StylusUpEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.StylusUp"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.StylusUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.TextInputEvent">
			<summary> Identifies the <see cref="E:System.Windows.UIElement.TextInput"></see> routed event. </summary>
			<returns>The <see cref="E:System.Windows.UIElement.TextInput"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.UIElement.VisibilityProperty">
			<summary> Identifies the <see cref="P:System.Windows.UIElement.Visibility"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.UIElement.Visibility"></see> GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
			<summary> Adds a GTMT#routed event handler for a given GTMT#routed event to this element. </summary>
			<param name="routedEvent">Identifier object for the GTMT#routed event being handled.</param>
			<param name="handler">A reference to the handler implementation.</param>
		</member>
		<member name="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
			<summary> Adds a GTMT#routed event handler for a given GTMT#routed event to this element, with the option of having the provided handler be invoked even in cases of GTMT#routed event that had already been marked as handled by another element along the route. </summary>
			<param name="handledEventsToo">Declares whether the handler should be invoked in cases where the GTMT#routed event has already been marked as handled. true denotes that the handler should be invoked even for cases where the GTMT#routed event is marked handled in its arguments object. false denotes that handler should not be invoked if the GTMT#routed event is already marked handled. The default is false. Asking to handle already-handled routed events is not common.</param>
			<param name="routedEvent">Identifier object for the GTMT#routed event being handled.</param>
			<param name="handler">A reference to the handler implementation.</param>
		</member>
		<member name="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
			<summary> Adds handlers for this instance of the <see cref="T:System.Windows.UIElement"></see> to the given <see cref="T:System.Windows.EventRoute"></see>. </summary>
			<param name="e">The event arguments used to add the handlers. This method uses the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent"></see> property of the arguments to create the handlers. </param>
			<param name="route">Event route to which handlers are to be added.</param>
		</member>
		<member name="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
			<summary>Applies an animation to a specified GTMT#dependency property on this element, with the behavior that any existing animations will be stopped and replaced with the new animation.</summary>
			<param name="dp">The property to animate.</param>
			<param name="clock">Animation clock that controls and declares the animation.</param>
		</member>
		<member name="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
			<summary>Applies an animation to a specified GTMT#dependency property on this element, with the ability to specify what should happen if that property already had an existing animation.</summary>
			<param name="handoffBehavior">A value of the enumeration. The default is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace"></see>, which will stop any existing animation and replace with the new one.</param>
			<param name="dp">The property to animate.</param>
			<param name="clock">Animation clock that controls and declares the animation.</param>
		</member>
		<member name="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
			<summary> Positions child elements and determines a size for a <see cref="T:System.Windows.UIElement"></see>. Parent elements call this function from their <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)"></see> implementation (or a framework-level equivalent) to form a recursive layout update. This function constitutes the second pass of a layout update. </summary>
			<param name="finalRect">The final size that the parent computes for the child element, given as a <see cref="T:System.Windows.Rect"></see> instance.</param>
		</member>
		<member name="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
			<summary> Defines the template for core-framework arrange layout definition. </summary>
			<param name="finalRect">The final area within the parent that element should use to arrange itself and its child elements.</param>
		</member>
		<member name="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
			<summary> Starts a given animation for a given animated property on this element. </summary>
			<param name="animation">The timeline of the animation that is to be applied.</param>
			<param name="dp">The property to animate, given as the dependency property identifier.</param>
		</member>
		<member name="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
			<summary> Starts a given animation for a given animated property on this element, with the option of specifying what should happen if the property was already being animated. </summary>
			<param name="handoffBehavior">Specifies how the new animation should interact with any current, running animations already affecting the property value.</param>
			<param name="animation">The timeline of the animation that is to be applied.</param>
			<param name="dp">The property to animate, given as the dependency property identifier.</param>
		</member>
		<member name="M:System.Windows.UIElement.CaptureMouse">
			<summary> Attempts to force capture of the mouse to this element. </summary>
			<returns>true if the mouse was successfully captured; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.UIElement.CaptureStylus">
			<summary> Attempts to force capture of the stylus to this element. </summary>
			<returns>true if the stylus was successfully captured; otherwise, false. The default implementation always returns true.</returns>
		</member>
		<member name="M:System.Windows.UIElement.Focus">
			<summary> Attempts to focus the keyboard on this element. </summary>
			<returns>true if keyboard now focuses this element; false if this method call could not force focus.</returns>
		</member>
		<member name="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
			<summary>Returns non-animation-related base values for properties that are currently animated on this element. </summary>
			<returns>The value that would be returned if there were no animations attached on this particular GTMT#dependency property. If there aren't any animations attached, then the result will be the same as that returned from  <see cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)"></see>.</returns>
			<param name="dp">The GTMT#dependency property to check.</param>
		</member>
		<member name="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)">
			<summary> Gets an alternate clipping geometry that represents what should be clipped if <see cref="P:System.Windows.UIElement.ClipToBounds"></see> were set to true. </summary>
			<returns>The returned clipping geometry.</returns>
			<param name="layoutSlotSize">The element's available size.</param>
		</member>
		<member name="M:System.Windows.UIElement.GetUIParentCore">
			<summary>When implemented in a derived class, returns an alternative logical parent for this element in cases where there is no visual parent. </summary>
			<returns>Should return other than a null value if implementation of a derived class has an alternate parent connection it wishes to report.</returns>
		</member>
		<member name="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
			<summary> Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)"></see> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.GeometryHitTestResult"></see>). </summary>
			<returns>Results of the test, including the evaluated geometry.</returns>
			<param name="hitTestParameters">Describes the hit test to perform, including the initial hit point.</param>
		</member>
		<member name="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)">
			<summary> Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)"></see> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.HitTestResult"></see>). </summary>
			<returns>Results of the test, including the evaluated point.</returns>
			<param name="hitTestParameters">Describes the hit test to perform, including the initial hit point.</param>
		</member>
		<member name="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)">
			<summary> Returns the input element within this element that is at the specified coordinates relative to the element's origin. </summary>
			<returns>The element child that is located at the given position.</returns>
			<param name="point">The offset coordinates within this element.</param>
		</member>
		<member name="M:System.Windows.UIElement.Measure(System.Windows.Size)">
			<summary> Updates the <see cref="P:System.Windows.UIElement.DesiredSize"></see> of a <see cref="T:System.Windows.UIElement"></see>. Parent elements call this method from their own <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)"></see> implementations to form a recursive layout update. Calling this method constitutes the first pass of a layout update in the layout engine's normal operation. </summary>
			<param name="availableSize">The available space that a parent element can allocate a child. A child can request a larger space than what is available; this given size can be accommodated if scrolling is possible in this element's content model.</param>
		</member>
		<member name="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
			<summary> When implemented in a derived class, provides measurement logic for sizing this element properly vs. its contained content. </summary>
			<returns>Desired size of this element in layout.</returns>
			<param name="availableSize">Available size that the parent element can give to the child.</param>
		</member>
		<member name="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)">
			<summary>Attempts to move focus from this element to another element specified by a traversal movement within the visual organization supported by this element's visual parent. </summary>
			<returns>true if the requested traversal was successfully applied; otherwise, false. </returns>
			<param name="request">A traversal request; this contains a property that indicates either a mode to traverse within existing tab order, or a direction to move visually.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
			<summary> Provides class handling for when an access key that is meaningful for this element is invoked. </summary>
			<param name="e">The arguments to the access key event. These arguments include which key was invoked, and indicate whether the <see cref="T:System.Windows.Input.AccessKeyManager"></see> object that controls the sending of these events also sent this access key invocation to other elements.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
			<summary> Supports layout behavior that should happen when a child element is resized. </summary>
			<param name="child">The child element that is being resized.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnCreateAutomationPeer">
			<summary>A protected method that <see cref="T:System.Windows.UIElement"></see> subclasses should implement in order to provide their own specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"></see> implementations to the TLA#tla_winclient infrastructure.</summary>
			<returns>The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"></see> implementation.</returns>
		</member>
		<member name="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
			<summary>  Invoked whenever an unhandled DragDrop.DragEnter attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
			<summary>  Invoked whenever an unhandled DragDrop.DragLeave attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
			<summary>  Invoked whenever an unhandled DragDrop.DragOver attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
			<summary>  Invoked whenever an unhandled  DragDrop.DragEnter attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
			<summary>  Invoked whenever an unhandled DragDrop.GiveFeedback attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)">
			<summary>Raises the <see cref="E:System.Windows.UIElement.GotFocus"></see> event (using the provided arguments). </summary>
			<param name="e">Arguments of the event being raised. These are expected to contain the appropriate <see cref="E:System.Windows.UIElement.GotFocus"></see> event's identifier.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
			<summary>  Invoked whenever an unhandled Keyboard.GotKeyboardFocus attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
			<summary>  Invoked whenever an unhandled Mouse.GotMouseCapture attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.GotStylusCaptureFocus attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
			<summary>  Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged"></see>  event is raised on this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
			<summary>Invoked immediately prior to <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged"></see> event being raised by this element. Implement this method to add effective class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
			<summary>  Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged"></see> event is raised on this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
			<summary> Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged"></see> event is raised on this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
			<summary> Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged"></see> event is raised on this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
			<summary> Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged"></see> event is raised on this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
			<summary> Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged"></see> event is raised on this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
			<summary> Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged"></see> event is raised on this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
			<summary>  Invoked whenever an unhandled Keyboard.KeyDown attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
			<summary>  Invoked whenever an unhandled Keyboard.KeyUp attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)">
			<summary>Raises the <see cref="E:System.Windows.UIElement.LostFocus"></see> event (using the provided arguments). </summary>
			<param name="e">Arguments of the event being raised. These are expected to contain the appropriate <see cref="E:System.Windows.UIElement.LostFocus"></see> event's identifier.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
			<summary>  Invoked whenever an unhandled Keyboard.LostKeyboardFocus attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
			<summary>  Invoked whenever an unhandled Mouse.LostMouseCapture attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.LostStylusCapture attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled Mouse.MouseDown attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Arguments of the event. These arguments will include details about which mouse button was depressed, and the handled state.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
			<summary>  Invoked whenever an unhandled Mouse.MouseEnter attached routed event is raised on this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
			<summary>  Invoked whenever an unhandled Mouse.MouseLeave attached routed event is raised on this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown"></see> event is raised on this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event. It is expected that the event data should properly note that the event represents a depress of the left mouse button.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonUp"></see> event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event. It is expected that the event data should properly note that the event represents a release of the left mouse button.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
			<summary>  Invoked whenever an unhandled Mouse.MouseMove attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonDown"></see> event reaches an element derived from this class in its route. Implement this method to add class handling for this event.  </summary>
			<param name="e">Provides data about the event. It is expected that the event data should properly note that the event represents a depress of the right mouse button.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonUp"></see> event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event. It is expected that the event data should properly note that the event represents a depress of the right mouse button.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled Mouse.MouseUp event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Arguments of the event. These arguments will include details about which mouse button was depressed, and the handled state.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
			<summary>  Invoked whenever an unhandled Mouse.MouseWheel attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
			<summary>  Invoked whenever an unhandled DragDrop.PreviewDragEnter attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
			<summary>  Invoked whenever an unhandled DragDrop.PreviewDragLeave attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
			<summary>  Invoked whenever an unhandled DragDrop.PreviewDragOver attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
			<summary>  Invoked whenever an unhandled DragDrop.PreviewDrop attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
			<summary>  Invoked whenever an unhandled DragDrop.PreviewGiveFeedback attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
			<summary>  Invoked whenever an unhandled Keyboard.PreviewGotKeyboardFocus attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
			<summary>  Invoked whenever an unhandled Keyboard.PreviewKeyDown attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
			<summary>  Invoked whenever an unhandled Keyboard.PreviewKeyUp attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
			<summary>  Invoked whenever an unhandled Keyboard.PreviewKeyDown attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled Mouse.PreviewMouseDown attached  event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Arguments of the event. This will include details on which mouse buttons were depressed.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown"></see> event reaches an element derived from this class in its route. Implement this method to add class handling for this event.</summary>
			<param name="e">Provides data about the event. It is expected that the event data should properly note that the event represents a depress of the left mouse button.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp"></see> event reaches an element derived from this class in its route. Implement this method to add class handling for this event.</summary>
			<param name="e">Provides data about the event. It is expected that the event data should properly note that the event represents a release of the left mouse button.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
			<summary>  Invoked whenever an unhandled Mouse.PreviewMouseMove attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown"></see> event reaches an element derived from this class in its route. Implement this method to add class handling for this event.</summary>
			<param name="e">Provides data about the event. It is expected that the event data should properly note that the event represents a depress of the right mouse button.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp"></see> event reaches an element derived from this class in its route. Implement this method to add class handling for this event.</summary>
			<param name="e">Provides data about the event. It is expected that the event data should properly note that the event represents a release of the right mouse button.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
			<summary>Invoked whenever an unhandled Mouse.PreviewMouseUp attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event.</summary>
			<param name="e">Arguments of the event. This will include details on which mouse buttons were released.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
			<summary>  Invoked whenever an unhandled Mouse.PreviewMouseWheel attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
			<summary>  Invoked whenever an unhandled DragDrop.PreviewQueryContinueDrag attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.PreviewStylusButtonDown attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.PreviewStylusButtonUp attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
			<summary>Invoked whenever an unhandled Stylus.PreviewStylusDown attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event.</summary>
			<param name="e">Arguments of the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.PreviewStylusInAirMove attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.PreviewStylusInRange attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.PreviewStylusMove attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.PreviewStylusOutOfRange attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.PreviewStylusSystemGesture attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
			<summary>Invoked whenever an unhandled Stylus.PreviewStylusUp attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
			<summary>  Invoked whenever an unhandled TextCompositionManager.PreviewTextInput attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
			<summary>  Invoked whenever an unhandled DragDrop.QueryContinueDrag attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
			<summary>  Invoked whenever an unhandled Mouse.QueryCursor attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)">
			<summary> When implemented in a derived class, is invoked by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing. </summary>
			<param name="drawingContext">Drawing instructions for a specific element that are given to the layout system.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
			<summary> When implemented in a derived class, will be used by the layout system. This method is invoked after layout update, and before rendering, if the element's <see cref="P:System.Windows.UIElement.RenderSize"></see> has changed as a result of layout update. </summary>
			<param name="info">Packaged parameters (<see cref="T:System.Windows.SizeChangedInfo"></see>, which includes old and new sizes and which dimension actually changes.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.StylusButtonDown attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.StylusButtonUp attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
			<summary> Invoked whenever an unhandled Stylus.StylusDown attached routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e"> Provides arguments of the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.StylusEnter attached  routed event is raised by this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.StylusInAirMove attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.StylusInRange attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.StylusLeave attached  routed event is raised by this element. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.StylusMove attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.StylusOutOfRange attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.StylusSystemGesture attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
			<summary>  Invoked whenever an unhandled Stylus.StylusUp attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
			<summary>  Invoked whenever an unhandled TextCompositionManager.TextInput attached  routed event reaches an element derived from this class in its route. Implement this method to add class handling for this event. </summary>
			<param name="e">Provides data about the event.</param>
		</member>
		<member name="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)">
			<summary>A class handler that is called when the parent of the <see cref="T:System.Windows.UIElement"></see> has its underlying visual parent changed.</summary>
			<param name="oldParent">The previous parent. May be given as null if the <see cref="T:System.Windows.DependencyObject"></see> did not have a parent previously.</param>
		</member>
		<member name="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
			<summary>When implemented in a derived class, returns the element that would receive focus relative to this element for a given focus traversal direction, without actually moving focus to that element.</summary>
			<returns>The element that would have received focus if <see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)"></see> were actually invoked.</returns>
			<param name="direction">The direction of the requested focus traversal.</param>
		</member>
		<member name="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)">
			<summary> Raises a specific routed event. The <see cref="T:System.Windows.RoutedEvent"></see> to be raised is identified within the <see cref="T:System.Windows.RoutedEventArgs"></see> instance provided as a method parameter (as the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent"></see> property of the <see cref="T:System.Windows.RoutedEventArgs"></see> instance). </summary>
			<param name="e">Arguments for the event to be raised, which also contains a reference to the identifier of the event to raise. </param>
		</member>
		<member name="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
			<summary> Removes the specified GTMT#routed event handler from this element. </summary>
			<param name="routedEvent">Identifier of the GTMT#routed event for which the handler is attached.</param>
			<param name="handler">The specific handler implementation to be removed from this element's event handler collection.</param>
		</member>
		<member name="M:System.Windows.UIElement.ShouldSerializeCommandBindings">
			<summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement.CommandBindings"></see> property on instances of this class.</summary>
			<returns>true if the <see cref="P:System.Windows.UIElement.CommandBindings"></see> property value should be serialized; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.UIElement.ShouldSerializeInputBindings">
			<summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement.InputBindings"></see> property on instances of this class.</summary>
			<returns>true if the <see cref="P:System.Windows.UIElement.InputBindings"></see> property value should be serialized; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)">
			<summary> Translates a point relative to this element to coordinates that are relative to the specified element. </summary>
			<returns>A point value, now relative to the target element rather than this source element.</returns>
			<param name="point">The point value, as relative to this element.</param>
			<param name="relativeTo">The element to translate the given point into.</param>
		</member>
		<member name="P:System.Windows.UIElement.AllowDrop">
			<summary> Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation. </summary>
			<returns>true if this element can be used as the target of a drag-and-drop operation; otherwise, false. The default value is false.     </returns>
		</member>
		<member name="P:System.Windows.UIElement.BitmapEffect">
			<summary> Gets or sets a bitmap effect that applies directly to the rendered content for this element. </summary>
			<returns>The bitmap effect to apply.</returns>
		</member>
		<member name="P:System.Windows.UIElement.BitmapEffectInput">
			<summary> Gets or sets an input source for the bitmap effect that applies directly to the rendered content for this element. </summary>
			<returns>Source for bitmap effects.</returns>
		</member>
		<member name="P:System.Windows.UIElement.Clip">
			<summary> Gets or sets the geometry used to define the outline of the contents of an element. </summary>
			<returns>The geometry to be used for clipping area sizing. The default is a null <see cref="T:System.Windows.Media.Geometry"></see>.</returns>
		</member>
		<member name="P:System.Windows.UIElement.ClipToBounds">
			<summary> Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element.  </summary>
			<returns>true if the content should be clipped; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.UIElement.CommandBindings">
			<summary> Gets a collection of <see cref="T:System.Windows.Input.CommandBinding"></see> objects associated with this element. </summary>
			<returns>The collection of all <see cref="T:System.Windows.Input.CommandBinding"></see> objects.</returns>
		</member>
		<member name="P:System.Windows.UIElement.DesiredSize">
			<summary> Gets the size the element computed during the measure pass of the layout process. </summary>
			<returns>The computed size, which becomes the desired size for the arrange pass.</returns>
		</member>
		<member name="P:System.Windows.UIElement.Focusable">
			<summary> Gets or sets a value that indicates whether the element can receive focus. </summary>
			<returns>true if the element is focusable; otherwise false. The default is false, but see Remarks below.</returns>
		</member>
		<member name="P:System.Windows.UIElement.HasAnimatedProperties">
			<summary> Gets a value indicating whether this element has any animated properties. </summary>
			<returns>true if this element has animations; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.UIElement.InputBindings">
			<summary> Gets the collection of input bindings associated with this element. </summary>
			<returns>The collection of input bindings.</returns>
		</member>
		<member name="P:System.Windows.UIElement.IsArrangeValid">
			<summary>Gets a value indicating whether the computed size and position of child elements in this element's layout are valid. </summary>
			<returns>true if the size and position of layout are valid; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.UIElement.IsEnabled">
			<summary> Gets or sets a value indicating whether this element is enabled in the TLA#tla_ui. </summary>
			<returns>true if the element is enabled; otherwise, false. The default value is true.</returns>
		</member>
		<member name="P:System.Windows.UIElement.IsEnabledCore">
			<summary> Gets a value that becomes the return value of <see cref="P:System.Windows.UIElement.IsEnabled"></see> in derived classes. </summary>
			<returns>true if the element is enabled; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.UIElement.IsFocused">
			<summary> Gets a value that determines whether this element has logical focus. </summary>
			<returns>true if this element has logical focus; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.UIElement.IsHitTestVisible">
			<summary>Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content.</summary>
			<returns>true if this element could be returned as a hit test result from at least one point; otherwise, false. The default value is true.</returns>
		</member>
		<member name="P:System.Windows.UIElement.IsInputMethodEnabled">
			<summary> Gets a value indicating whether an input method system, such as an TLA#tla_ime,  is enabled for processing the input to this element. </summary>
			<returns>true if an input method is active; otherwise, false. The default value of the underlying attached property is true, but this will be influenced by the actual state of input methods at runtime.</returns>
		</member>
		<member name="P:System.Windows.UIElement.IsKeyboardFocused">
			<summary> Gets a value indicating whether this element has keyboard focus. </summary>
			<returns>true if this element has keyboard focus; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Windows.UIElement.IsKeyboardFocusWithin">
			<summary> Gets a value indicating whether keyboard focus is anywhere within the element or its visual child elements. </summary>
			<returns>true if keyboard focus is on the element or its child elements; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.UIElement.IsMeasureValid">
			<summary> Gets a value indicating whether the current size returned by layout measure is valid. </summary>
			<returns>true if the measure pass of layout returned a valid and current value; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.UIElement.IsMouseCaptured">
			<summary> Gets a value indicating whether the mouse is captured to this element. </summary>
			<returns>true if the element has mouse capture; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Windows.UIElement.IsMouseCaptureWithin">
			<summary>Gets a vale that determines whether mouse capture is held by this element, or an element within this element's bounds.</summary>
			<returns>true if this element or a contained element has mouse capture; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.UIElement.IsMouseDirectlyOver">
			<summary> Gets a value indicating whether the mouse pointer position corresponds to hit testing results, which take element compositing into account. </summary>
			<returns>true if the mouse pointer is over the same element result as a hit test; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Windows.UIElement.IsMouseOver">
			<summary> Gets a value indicating whether the mouse pointer is located over this element (including visual child elements, or its control compositing). </summary>
			<returns>true if mouse pointer is over the element or its child elements; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Windows.UIElement.IsStylusCaptured">
			<summary> Gets a value indicating whether the stylus is captured to this element. </summary>
			<returns>true if the element has stylus capture; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Windows.UIElement.IsStylusCaptureWithin">
			<summary>Gets a vale that determines whether stylus capture is held by this element, or an element within this element's bounds.</summary>
			<returns>true if this element or a contained element has mouse capture; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.UIElement.IsStylusDirectlyOver">
			<summary> Gets a value indicating whether the stylus pointer position corresponds to hit testing results, which take element compositing into account. </summary>
			<returns>true if the stylus pointer is over the same element result as a hit test; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Windows.UIElement.IsStylusOver">
			<summary> Gets a value indicating whether the stylus cursor is located over this element (including visual child elements). </summary>
			<returns>true if stylus cursor is over the element or its child elements; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Windows.UIElement.IsVisible">
			<summary> Gets a value indicating whether this element is visible in the TLA#tla_ui. </summary>
			<returns>true if the element is visible; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.UIElement.Opacity">
			<summary> Gets or sets the opacity factor applied to the entire <see cref="T:System.Windows.UIElement"></see> when rendered in the TLA#tla_ui. </summary>
			<returns>The opacity factor. Default opacity is 1.0. Expected values are between 0.0 and 1.0.</returns>
		</member>
		<member name="P:System.Windows.UIElement.OpacityMask">
			<summary> Gets or sets an opacity mask, as a <see cref="T:System.Windows.Media.Brush"></see> implementation that is applied to any alpha-channel masking for the rendered content of this element. </summary>
			<returns>The brush to use for opacity masking.</returns>
		</member>
		<member name="P:System.Windows.UIElement.PersistId">
			<summary> Gets a value that uniquely identifies this element. </summary>
			<returns>The element's unique identifier.</returns>
		</member>
		<member name="P:System.Windows.UIElement.RenderSize">
			<summary> Gets (or sets, but see Remarks) the final render size of this element. </summary>
			<returns>The element's rendered size.</returns>
		</member>
		<member name="P:System.Windows.UIElement.RenderTransform">
			<summary> Gets or sets transform information that affects the rendering position of this element. </summary>
			<returns>Describes the specifics of the desired render transform. The default is <see cref="P:System.Windows.Media.Transform.Identity"></see>.</returns>
		</member>
		<member name="P:System.Windows.UIElement.RenderTransformOrigin">
			<summary> Gets or sets the center point of any possible render transform declared by <see cref="P:System.Windows.UIElement.RenderTransform"></see>, relative to the bounds of the element. </summary>
			<returns>The value that declares the render transform. The default value is a <see cref="T:System.Windows.Point"></see> with coordinates (0,0). </returns>
		</member>
		<member name="P:System.Windows.UIElement.SnapsToDevicePixels">
			<summary> Gets or sets a value that determines whether rendering for this element should use device-specific pixel settings during rendering. </summary>
			<returns>true if the element should render in accordance to device pixels; otherwise, false. The default as declared on <see cref="T:System.Windows.UIElement"></see> is false.</returns>
		</member>
		<member name="P:System.Windows.UIElement.StylusPlugIns">
			<summary> Gets a collection of all stylus plug-in (customization) objects associated with this element. </summary>
			<returns>The collection of stylus plug-ins, as a specialized collection.</returns>
		</member>
		<member name="P:System.Windows.UIElement.Visibility">
			<summary> Gets or sets the TLA#tla_ui visibility of this element. </summary>
			<returns>A value of the enumeration. The default value is <see cref="F:System.Windows.Visibility.Visible"></see>.</returns>
		</member>
		<member name="T:System.Windows.UIPropertyMetadata">
			<summary> Provides property metadata for non-framework properties that do have rendering/user interface impact at the core level. </summary>
		</member>
		<member name="M:System.Windows.UIPropertyMetadata.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.UIPropertyMetadata"></see> class. </summary>
		</member>
		<member name="M:System.Windows.UIPropertyMetadata.#ctor(System.Object)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.UIPropertyMetadata"></see> class, with the specified default value for the property.</summary>
			<param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
		</member>
		<member name="M:System.Windows.UIPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.UIPropertyMetadata"></see> class, with the specified PropertyChanged callback.</summary>
			<param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
		</member>
		<member name="M:System.Windows.UIPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.UIPropertyMetadata"></see> class, with the specified PropertyChanged callback. </summary>
			<param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
			<param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
		</member>
		<member name="M:System.Windows.UIPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.UIPropertyMetadata"></see> class, with the specified default value and callbacks. </summary>
			<param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
			<param name="coerceValueCallback">Reference to a handler implementation that is to be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)"></see> against this property.</param>
			<param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
		</member>
		<member name="M:System.Windows.UIPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.UIPropertyMetadata"></see> class, with the specified default value and callbacks, and a Boolean used to disable animations on the property. </summary>
			<param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
			<param name="isAnimationProhibited">Set to true to prevent the property system from animating the property that this metadata is applied to. Such properties will raise run time exceptions if animations of them are attempted. The default is false.</param>
			<param name="coerceValueCallback">Reference to a handler implementation that is to be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)"></see> against this property.</param>
			<param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
		</member>
		<member name="P:System.Windows.UIPropertyMetadata.IsAnimationProhibited">
			<summary> Gets or sets a value declaring whether animations should be disabled on the dependency property where the containing metadata instance is applied. </summary>
			<returns>true indicates that animations are disallowed; false indicates that animations are allowed. The default is false (animations allowed).</returns>
		</member>
		<member name="T:System.Windows.Visibility">
			<summary>Specifies the display state of an object. </summary>
		</member>
		<member name="F:System.Windows.Visibility.Collapsed">
			<summary>The element is not displayed and it does not occupy any layout space. </summary>
		</member>
		<member name="F:System.Windows.Visibility.Hidden">
			<summary>The element is not displayed, but it does occupy layout space. </summary>
		</member>
		<member name="F:System.Windows.Visibility.Visible">
			<summary>The element is displayed. </summary>
		</member>
		<member name="T:System.Windows.Automation.AutomationProperties">
			<summary>Provides a means of getting or setting the value of the associated properties of the instance of the <see cref="T:System.Windows.Automation.Peers.AutomationPeer"></see> element. </summary>
		</member>
		<member name="T:System.Windows.Automation.Peers.AutomationControlType">
			<summary>Specifies the <see cref="T:System.Windows.Automation.ControlType"></see> that is exposed to the automation client.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.Button">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.Button"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.Calendar">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.Calendar"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.CheckBox">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.CheckBox"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.ComboBox">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.ComboBox"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.Custom">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.Custom"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.DataGrid">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.DataGrid"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.DataItem">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.DataItem"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.Document">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.Document"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.Edit">
			<summary>An <see cref="F:System.Windows.Automation.ControlType.Edit"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.Group">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.Group"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.Header">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.Header"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.HeaderItem">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.HeaderItem"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.Hyperlink">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.Hyperlink"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.Image">
			<summary>An <see cref="F:System.Windows.Automation.ControlType.Image"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.List">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.List"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.ListItem">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.ListItem"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.Menu">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.Menu"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.MenuBar">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.MenuBar"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.MenuItem">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.MenuItem"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.Pane">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.Pane"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.ProgressBar">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.ProgressBar"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.RadioButton">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.RadioButton"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.ScrollBar">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.ScrollBar"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.Separator">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.Separator"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.Slider">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.Slider"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.Spinner">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.Spinner"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.SplitButton">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.SplitButton"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.StatusBar">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.StatusBar"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.Tab">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.Tab"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.TabItem">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.TabItem"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.Table">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.Table"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.Text">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.Text"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.Thumb">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.Thumb"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.TitleBar">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.TitleBar"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.ToolBar">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.ToolBar"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.ToolTip">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.ToolTip"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.Tree">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.Tree"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.TreeItem">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.TreeItem"></see> control type.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationControlType.Window">
			<summary>A <see cref="F:System.Windows.Automation.ControlType.Window"></see> control type.</summary>
		</member>
		<member name="T:System.Windows.Automation.Peers.AutomationEvents">
			<summary>Specifies the event that is raised by the element through the associated <see cref="T:System.Windows.Automation.Peers.AutomationPeer"></see>.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationEvents.AutomationFocusChanged">
			<summary><see cref="F:System.Windows.Automation.AutomationElementIdentifiers.AutomationFocusChangedEvent"></see></summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationEvents.InvokePatternOnInvoked">
			<summary><see cref="F:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent"></see></summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationEvents.MenuClosed">
			<summary><see cref="F:System.Windows.Automation.AutomationElementIdentifiers.MenuClosedEvent"></see></summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationEvents.MenuOpened">
			<summary><see cref="F:System.Windows.Automation.AutomationElementIdentifiers.MenuOpenedEvent"></see></summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementAddedToSelection">
			<summary><see cref="F:System.Windows.Automation.SelectionItemPatternIdentifiers.ElementAddedToSelectionEvent"></see></summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementRemovedFromSelection">
			<summary><see cref="F:System.Windows.Automation.SelectionItemPatternIdentifiers.ElementRemovedFromSelectionEvent"></see></summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementSelected">
			<summary><see cref="F:System.Windows.Automation.SelectionItemPatternIdentifiers.ElementSelectedEvent"></see></summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionPatternOnInvalidated">
			<summary><see cref="F:System.Windows.Automation.SelectionPatternIdentifiers.InvalidatedEvent"></see></summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationEvents.TextPatternOnTextChanged">
			<summary><see cref="F:System.Windows.Automation.TextPatternIdentifiers.TextChangedEvent"></see></summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationEvents.TextPatternOnTextSelectionChanged">
			<summary><see cref="F:System.Windows.Automation.TextPatternIdentifiers.TextSelectionChangedEvent"></see></summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationEvents.ToolTipClosed">
			<summary><see cref="F:System.Windows.Automation.AutomationElementIdentifiers.ToolTipClosedEvent"></see></summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationEvents.ToolTipOpened">
			<summary><see cref="F:System.Windows.Automation.AutomationElementIdentifiers.ToolTipOpenedEvent"></see></summary>
		</member>
		<member name="T:System.Windows.Automation.Peers.AutomationOrientation">
			<summary>Specifies the direction in which a control can be laid out. </summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationOrientation.Horizontal">
			<summary>The control is laid out horizontally.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationOrientation.None">
			<summary>The control doesn't have an orientation. An example of a control without an orientation is a <see cref="T:System.Windows.Controls.Button"></see>.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.AutomationOrientation.Vertical">
			<summary>The control is laid out horizontally.</summary>
		</member>
		<member name="T:System.Windows.Automation.Peers.AutomationPeer">
			<summary>When overridden in a derived class, exposes a control to TLA#tla_uiautomation.</summary>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.#ctor">
			<summary>When overridden in a derived class, initializes a new instance of the derived class.</summary>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey">
			<summary>Gets a string that contains the GTMT#accelerator key combinations for the element that is associated with the automation peer. </summary>
			<returns>The string that contains the accelerator key.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKeyCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey"></see>.</summary>
			<returns>The string that contains the accelerator key.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey">
			<summary>Gets the GTMT#access key for the element that is associated with the automation peer.</summary>
			<returns>The string that contains the access key.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKeyCore">
			<summary>In a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey"></see>.</summary>
			<returns>The string that contains the access key.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType">
			<summary>Gets the GTMT#control type for the element that is associated with the automation peer.</summary>
			<returns>The control type.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlTypeCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows. Automation.Peers.AutomationPeer.GetAutomationControlType"></see>.</summary>
			<returns>The control type.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId">
			<summary>Gets the <see cref="P:System.Windows.AutomationProperties.AutomationId"></see> of the element that is associated with the automation peer.</summary>
			<returns>The string that contains the identifier.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationIdCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows. Automation.Peers.AutomationPeer.GetAutomationId"></see>.</summary>
			<returns>The string that contains the identifier.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle">
			<summary>Gets the <see cref="T:System.Windows.Rect"></see> that represents the screen coordinates of the element that is associated with the automation peer.</summary>
			<returns>The bounding rectangle.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName">
			<summary>Gets the name of the type that defines the element that is associated with the automation peer. </summary>
			<returns>The string that contains the type name.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint">
			<summary>Gets a <see cref="T:System.Windows.Point"></see> that represents the clickable space that is on the element that is associated with the automation peer. For example, if the element is a <see cref="T:System.Windows.Controls.Button"></see>, the clickable point is any point that is within the visible client area of the <see cref="T:System.Windows.Controls.Button"></see> that would result in issuing the command that the button represents, when the user clicks the <see cref="T:System.Windows.Controls.Button"></see> by using the mouse.</summary>
			<returns>The point that represents the clickable space that is on the element.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText">
			<summary>Gets the string that describes the functionality of the control that is associated with the automation peer. The string that is returned generally is the same text that is provided in the tooltip for the control.</summary>
			<returns>The string that contains the Help text.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType">
			<summary>Gets a human-readable string that contains the type of the item that an object represents. Examples are “Mail Message”, “Contact”, and “Document”.</summary>
			<returns>The string that contains the item type.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy">
			<summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationPeer"></see> for the <see cref="T:System.Windows.Controls.Label"></see> that is targeted to the element. For example, if the element is a <see cref="T:System.Windows.Controls.ComboBox"></see> control, the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy"></see> method could get the <see cref="T:System.Windows.Automation.Peers.AutomationPeer"></see> for the <see cref="T:System.Windows.Controls.Label"></see> that is associated with the <see cref="T:System.Windows.Controls.ComboBox"></see>.</summary>
			<returns>The <see cref="T:System.Windows.Automation.Peers.LabelAutomationPeer"></see> for the element that is targeted by the <see cref="T:System.Windows.Controls.Label"></see>.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlType">
			<summary>Gets a human-readable localized string to identify the type of control that is associated with this automation peer.</summary>
			<returns>The string that contains the type of control.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.GetName">
			<summary>Gets the text label of the element that is associated with this automation peer.</summary>
			<returns>The string that contains the label.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation">
			<summary>Gets a value that indicates whether a control is laid out in a specific direction.</summary>
			<returns>The orientation of the control.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.GetParent">
			<summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationPeer"></see> that is the parent of this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"></see>.</summary>
			<returns>The parent automation peer.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
			<summary>When overridden in a derived class, gets the GTMT#control pattern that is associated with the specified <see cref="T:System.Windows.Automation.Peers.PatternInterface"></see>.</summary>
			<param name="patternInterface">A value from the <see cref="T:System.Windows.Automation.Peers.PatternInterface"></see> enumeration.</param>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus">
			<summary>Gets a value that indicates whether the element that is associated with this automation peer currently has keyboard input focus.</summary>
			<returns>true if the element has keyboard input focus; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.InvalidatePeer">
			<summary>Triggers recalulation of main properties of the <see cref="T:System.Windows.Automation.Peers.AutomationPeer"></see> and raises <see cref="E:System.ComponentModel.INotifyProperty.PropertyChanged"></see> notification to the GTMT#Automation Client if the properties have changed. </summary>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement">
			<summary>Gets a value that indicates whether the element that is associated with this automation peer is an element that contains data that is presented to the user.</summary>
			<returns>true if the element is a content element; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement">
			<summary>Gets or sets a value that indicates whether the element is something that the end user would understand as being interactive or as contributing to the logical structure of the control in the TLA2#tla_gui.</summary>
			<returns>true if the element is a control; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabled">
			<summary>Gets a value that indicates whether this automation peer can receive and send events to the associated element.</summary>
			<returns>true if the automation peer can receive and send events; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable">
			<summary>Gets a value that indicates whether the element can accept keyboard focus.</summary>
			<returns>true if the element can accept keyboard focus; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen">
			<summary>Gets a value that indicates whether an element is off of the screen.</summary>
			<returns>true if the element is not on the screen; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword">
			<summary>Gets a value that indicates whether the element contains protected content.</summary>
			<returns>true if the element contains protected content; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm">
			<summary>Gets a value that indicates whether the element that is associated with this peer is required to be filled out on a form.</summary>
			<returns>true if the element is required; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.PeerFromProvider(System.Windows.Automation.Provider.IRawElementProviderSimple)">
			<summary>Gets the GTMT#ui automation provider that is used by the specified implementer of <see cref="T:System.Windows.Automation.Provider.IRawElementProviderSimple"></see>.</summary>
			<returns>The GTMT#ui automation provider.</returns>
			<param name="provider">The class that implements <see cref="T:System.Windows.Automation.Provider.IRawElementProviderSimple"></see>.</param>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.ProviderFromPeer(System.Windows.Automation.Peers.AutomationPeer)">
			<summary>Gets the GTMT#ui automation provider that is used by the specified automation peer.</summary>
			<returns>The GTMT#ui automation provider.</returns>
			<param name="peer">The automation peer.</param>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.RaiseAutomationEvent(System.Windows.Automation.Peers.AutomationEvents)">
			<summary>Raises an automation event.</summary>
			<param name="eventId">The event identifier.</param>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.RaisePropertyChangedEvent(System.Windows.Automation.AutomationProperty,System.Object,System.Object)">
			<summary>Raises an event to notify the GTMT#automation client of a changed property value.</summary>
			<param name="oldValue">The previous value of the property.</param>
			<param name="newValue">The new value of the property.</param>
			<param name="property">The property that changed.</param>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.ResetChildrenCache">
			<summary>Synchronously resets the tree of child elements by calling <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildrenCore"></see>. </summary>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus">
			<summary>Sets the keyboard input focus on the element that is associated with this automation peer.</summary>
		</member>
		<member name="M:System.Windows.Automation.Peers.AutomationPeer.SetFocusCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus"></see>.</summary>
		</member>
		<member name="P:System.Windows.Automation.Peers.AutomationPeer.EventsSource">
			<summary>An <see cref="T:System.Windows.Automation.Peers.AutomationPeer"></see> that is reported to the GTMT#automation client as a source for all events that come from this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"></see>.</summary>
			<returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer"></see> that is the source of events.</returns>
		</member>
		<member name="T:System.Windows.Automation.Peers.ContentElementAutomationPeer">
			<summary>Exposes <see cref="T:System.Windows.ContentElement"></see> types to TLA#tla_uiautomation.</summary>
		</member>
		<member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.#ctor(System.Windows.ContentElement)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer"></see> class.</summary>
			<param name="owner">The <see cref="T:System.Windows.ContentElement"></see> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer"></see>.</param>
		</member>
		<member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.CreatePeerForElement(System.Windows.ContentElement)">
			<summary>Creates a <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer"></see> for the specified <see cref="T:System.Windows.ContentElement"></see>. </summary>
			<returns>The <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer"></see> for the specified <see cref="T:System.Windows.ContentElement"></see>.</returns>
			<param name="element">The <see cref="T:System.Windows.ContentElement"></see> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer"></see>.</param>
		</member>
		<member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.FromElement(System.Windows.ContentElement)">
			<summary>Gets the <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer"></see> for the specified <see cref="T:System.Windows.ContentElement"></see>.</summary>
			<returns>The <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer"></see> for the specified <see cref="T:System.Windows.ContentElement"></see>, or null if the <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer"></see> has not been created by the <see cref="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.CreatePeerForElement(System.Windows.ContentElement)"></see> method.</returns>
			<param name="element">The <see cref="T:System.Windows.ContentElement"></see> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer"></see>.</param>
		</member>
		<member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
			<summary>When overridden in a derived class, gets the GTMT#control pattern for this instance of <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer"></see>.</summary>
			<param name="patternInterface">One of the enumeration values.</param>
		</member>
		<member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.SetFocusCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus"></see>.</summary>
		</member>
		<member name="P:System.Windows.Automation.Peers.ContentElementAutomationPeer.Owner">
			<summary>Gets the <see cref="T:System.Windows.ContentElement"></see> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer"></see>.</summary>
			<returns>The <see cref="T:System.Windows.ContentElement"></see>.</returns>
		</member>
		<member name="T:System.Windows.Automation.Peers.PatternInterface">
			<summary>Specifies the GTMT#control pattern that <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)"></see> returns.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.PatternInterface.Dock">
			<summary>The Dock GTMT#control pattern.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.PatternInterface.ExpandCollapse">
			<summary>The ExpandCollapse GTMT#control pattern.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.PatternInterface.Grid">
			<summary>The Grid GTMT#control pattern.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.PatternInterface.GridItem">
			<summary>The GridItem GTMT#control pattern.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.PatternInterface.Invoke">
			<summary>The Invoke GTMT#control pattern.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.PatternInterface.MultipleView">
			<summary>The MultipleView GTMT#control pattern.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.PatternInterface.RangeValue">
			<summary>The RangeValue GTMT#control pattern.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.PatternInterface.Scroll">
			<summary>The Scroll GTMT#control pattern.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.PatternInterface.ScrollItem">
			<summary>The ScrollItem GTMT#control pattern.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.PatternInterface.Selection">
			<summary>The Selection GTMT#control pattern.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.PatternInterface.SelectionItem">
			<summary>The SelectionItem GTMT#control pattern.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.PatternInterface.Table">
			<summary>The Table GTMT#control pattern.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.PatternInterface.TableItem">
			<summary>The TableItem GTMT#control pattern.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.PatternInterface.Text">
			<summary>The Text GTMT#control pattern.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.PatternInterface.Toggle">
			<summary>The Toggle GTMT#control pattern.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.PatternInterface.Transform">
			<summary>The Transform GTMT#control pattern.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.PatternInterface.Value">
			<summary>The Value GTMT#control pattern.</summary>
		</member>
		<member name="F:System.Windows.Automation.Peers.PatternInterface.Window">
			<summary>The Window GTMT#control pattern.</summary>
		</member>
		<member name="T:System.Windows.Automation.Peers.UIElementAutomationPeer">
			<summary>Exposes <see cref="T:System.Windows.UIElement"></see> types to TLA#tla_uiautomation.</summary>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.#ctor(System.Windows.UIElement)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer"></see> class.</summary>
			<param name="owner">The <see cref="T:System.Windows.UIElement"></see> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer"></see>.</param>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.CreatePeerForElement(System.Windows.UIElement)">
			<summary>Creates an <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer"></see> for the specified <see cref="T:System.Windows.UIElement"></see>.</summary>
			<returns>An <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer"></see>.</returns>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer"></see>.</param>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.FromElement(System.Windows.UIElement)">
			<summary>Gets the <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer"></see> for the specified <see cref="T:System.Windows.UIElement"></see>.</summary>
			<returns>The <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer"></see>, or null if the <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer"></see> has not been created by the <see cref="M:System.Windows.Automation.Peers.UIElementAutomationPeer.CreatePeerForElement(System.Windows.UIElement)"></see> method.</returns>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer"></see>.</param>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetAcceleratorKeyCore">
			<summary>When overridden in a derived class, called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey"></see>.</summary>
			<returns>The <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey"></see> returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetAcceleratorKey(System.Windows.DependencyObject)"></see>.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetAutomationControlTypeCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType"></see>.</summary>
			<returns><see cref="F:System.Windows.Automation.Peers.AutomationControlType.Custom"></see></returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetAutomationIdCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.AutomationPeer.GetAutomationId"></see>.</summary>
			<returns>The <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId"></see> returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetAutomationId(System.Windows.DependencyObject)"></see>. </returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetBoundingRectangleCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle"></see>.</summary>
			<returns>The <see cref="T:System.Windows.Rect"></see> containing the coordinates of the element, or <see cref="P:System.Windows.Rect.Empty"></see> if the element isn't a <see cref="T:System.Windows.Interop.HwndSource"></see> and a <see cref="T:System.Windows.PresentationSource"></see>.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetChildrenCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren"></see>.</summary>
			<returns>A list of child <see cref="T:System.Windows.Automation.Peers.AutomationPeer"></see> elements.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetClassNameCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName"></see>.</summary>
			<returns><see cref="F:System.String.Empty"></see></returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetClickablePointCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint"></see>.</summary>
			<returns>The <see cref="T:System.Windows.Point"></see> on the element that allows a click. The point values are (<see cref="F:System.Double.NaN"></see>, <see cref="F:System.Double.NaN"></see>) if the element isn't a <see cref="T:System.Windows.Interop.HwndSource"></see> and a <see cref="T:System.Windows.PresentationSource"></see>.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetHelpTextCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText"></see>.</summary>
			<returns>The string containing the <see cref="P:System.Windows.AutomationProperties.HelpText"></see> returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetHelpText(System.Windows.DependencyObject)"></see>.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetItemStatusCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus"></see>.</summary>
			<returns>The string containing the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus"></see> returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetItemStatus(System.Windows.DependencyObject)"></see>.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetItemTypeCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType"></see>.</summary>
			<returns>The string containing the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType"></see> returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetItemType(System.Windows.DependencyObject)"></see>. </returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetNameCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName"></see>.</summary>
			<returns>The string containing the <see cref="P:System.Windows.Automation.AutomationProperties.Name"></see> returned by <see cref="M:System.Windows.AutomationProperties.GetName(System.Windows.DependencyObject)"></see>.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetOrientationCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation"></see>.</summary>
			<returns><see cref="F:System.Windows.Automation.Peers.AutomationOrientation.None"></see></returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
			<summary>When overridden in a derived class, gets the GTMT#control pattern associated with the specified <see cref="T:System.Windows.Automation.Peers.PatternInterface"></see>.</summary>
			<returns>Null.</returns>
			<param name="patternInterface">A value from the <see cref="T:System.Windows.Automation.Peers.PatternInterface"></see> enumeration.</param>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.HasKeyboardFocusCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus"></see>.</summary>
			<returns>A boolean containing the value of <see cref="P:System.Windows.UIElement.IsKeyboardFocused"></see>.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.IsContentElementCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.AutomationPeer.IsContentElement"></see>.</summary>
			<returns>False.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.IsControlElementCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement"></see>.</summary>
			<returns>True.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.IsEnabledCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabled"></see>.</summary>
			<returns>A boolean containing the value of <see cref="P:System.Windows.UIElement.IsEnabled"></see>.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.IsKeyboardFocusableCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable"></see>.</summary>
			<returns>True.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.IsOffscreenCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.AutomationPeer.IsOffscreen"></see>.</summary>
			<returns>A boolean containing the value of <see cref="P:System.Windows.UIElement.IsVisible"></see>.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.IsPasswordCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword"></see>.</summary>
			<returns>False.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.IsRequiredForFormCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm"></see>.</summary>
			<returns>A boolean containing the value returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetIsRequiredForForm(System.Windows.DependencyObject)"></see>.</returns>
		</member>
		<member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.SetFocusCore">
			<summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus"></see>.</summary>
		</member>
		<member name="P:System.Windows.Automation.Peers.UIElementAutomationPeer.Owner">
			<summary>Gets the <see cref="T:System.Windows.UIElement"></see> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer"></see>.</summary>
			<returns>The <see cref="T:System.Windows.UIElement"></see>.</returns>
		</member>
		<member name="T:System.Windows.Documents.ContentPosition">
			<summary>Abstract class that represents the position of content. This position is content specific.  </summary>
		</member>
		<member name="M:System.Windows.Documents.ContentPosition.#ctor">
			<summary>Call this constructor as the initializer of a derived class' constructor, in order to properly initialize a class derived from <see cref="T:System.Windows.Documents.ContentPosition"></see>. </summary>
		</member>
		<member name="T:System.Windows.Documents.DocumentPage">
			<summary>Represents a document page produced by a paginator.  </summary>
		</member>
		<member name="M:System.Windows.Documents.DocumentPage.#ctor(System.Windows.Media.Visual)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.DocumentPage"></see> class by using the specified <see cref="T:System.Windows.Media.Visual"></see>. </summary>
			<param name="visual">The visual representation of the page.</param>
		</member>
		<member name="M:System.Windows.Documents.DocumentPage.#ctor(System.Windows.Media.Visual,System.Windows.Size,System.Windows.Rect,System.Windows.Rect)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.DocumentPage"></see> class by using the specified <see cref="T:System.Windows.Media.Visual"></see> and box sizes. </summary>
			<param name="contentBox">The area of the page within the margins.</param>
			<param name="visual">The visual representation of the page.</param>
			<param name="bleedBox">The area for print production-related bleeds, registration marks, and crop marks that may appear on the physical sheet outside the logical page boundaries.</param>
			<param name="pageSize">The size of the page, including margins, as it will be after any GTMT#cropping.</param>
		</member>
		<member name="E:System.Windows.Documents.DocumentPage.PageDestroyed">
			<summary>Occurs when the <see cref="P:System.Windows.Documents.DocumentPage.Visual"></see> that depicts the <see cref="T:System.Windows.Documents.DocumentPage"></see> is destroyed and can no longer be used for display.</summary>
		</member>
		<member name="F:System.Windows.Documents.DocumentPage.Missing">
			<summary>Represents a missing page. This property is static and read only. </summary>
			<returns>A <see cref="T:System.Windows.Documents.DocumentPage"></see> with all its size properties set to zero.</returns>
		</member>
		<member name="M:System.Windows.Documents.DocumentPage.Dispose">
			<summary>Releases all resources used by the <see cref="T:System.Windows.Documents.DocumentPage"></see>. </summary>
		</member>
		<member name="M:System.Windows.Documents.DocumentPage.OnPageDestroyed(System.EventArgs)">
			<summary>Raises the <see cref="E:System.Windows.Documents.DocumentPage.PageDestroyed"></see> event. </summary>
			<param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
		</member>
		<member name="M:System.Windows.Documents.DocumentPage.SetBleedBox(System.Windows.Rect)">
			<summary>Sets the dimensions and location of the <see cref="P:System.Windows.Documents.DocumentPage.BleedBox"></see>. </summary>
			<param name="bleedBox">An object that specifies the size and location of a rectangle.</param>
		</member>
		<member name="M:System.Windows.Documents.DocumentPage.SetContentBox(System.Windows.Rect)">
			<summary>Sets the dimension and location of the <see cref="P:System.Windows.Documents.DocumentPage.ContentBox"></see>. </summary>
			<param name="contentBox">An object that specifies the size and location of a rectangle.</param>
		</member>
		<member name="M:System.Windows.Documents.DocumentPage.SetSize(System.Windows.Size)">
			<summary>Sets the <see cref="P:System.Windows.Documents.DocumentPage.Size"></see> of the physical page as it will be after any GTMT#cropping. </summary>
			<param name="size">The size of the page.</param>
		</member>
		<member name="M:System.Windows.Documents.DocumentPage.SetVisual(System.Windows.Media.Visual)">
			<summary>Sets the <see cref="P:System.Windows.Documents.DocumentPage.Visual"></see> that depicts the page.</summary>
			<param name="visual">The visual representation of the page.</param>
		</member>
		<member name="P:System.Windows.Documents.DocumentPage.BleedBox">
			<summary>When overridden in a derived class, gets the area for print production-related bleeds, registration marks, and GTMT#crop marks that may appear on the physical sheet outside the logical page boundaries. </summary>
			<returns>A <see cref="T:System.Windows.Rect"></see> representing the size and location of the bleed box area. </returns>
		</member>
		<member name="P:System.Windows.Documents.DocumentPage.ContentBox">
			<summary>When overridden in a derived class, gets the area of the page within the margins.</summary>
			<returns>A <see cref="T:System.Windows.Rect"></see> representing the area of the page, not including the margins. </returns>
		</member>
		<member name="P:System.Windows.Documents.DocumentPage.Size">
			<summary>When overridden in a derived class, gets the actual size of a page as it will be following any GTMT#cropping. </summary>
			<returns>A <see cref="T:System.Windows.Size"></see> representing the height and width of the page.</returns>
		</member>
		<member name="P:System.Windows.Documents.DocumentPage.Visual">
			<summary>When overridden in a derived class, gets the visual representation of the page. </summary>
			<returns>A <see cref="T:System.Windows.Media.Visual"></see> depicting the page. </returns>
		</member>
		<member name="T:System.Windows.Documents.DocumentPaginator">
			<summary>Provides an abstract base class that supports creation of multiple-page elements from a single document.</summary>
		</member>
		<member name="M:System.Windows.Documents.DocumentPaginator.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.DocumentPaginator"></see> class. </summary>
		</member>
		<member name="E:System.Windows.Documents.DocumentPaginator.ComputePageCountCompleted">
			<summary>Occurs when a <see cref="Overload:System.Windows.Documents.DocumentPaginator.ComputePageCountAsync"></see> operation has finished. </summary>
		</member>
		<member name="E:System.Windows.Documents.DocumentPaginator.GetPageCompleted">
			<summary>Occurs when <see cref="Overload:System.Windows.Documents.DocumentPaginator.GetPageAsync"></see> has completed.</summary>
		</member>
		<member name="E:System.Windows.Documents.DocumentPaginator.PagesChanged">
			<summary>Occurs when the document content is changed.</summary>
		</member>
		<member name="M:System.Windows.Documents.DocumentPaginator.CancelAsync(System.Object)">
			<summary>Cancels a previous <see cref="Overload:System.Windows.Documents.DocumentPaginator.GetPageAsync"></see> or <see cref="Overload:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync"></see> operation.</summary>
			<param name="userState">The original userState passed to <see cref="Overload:System.Windows.Documents.DocumentPaginator.GetPageAsync"></see>, <see cref="Overload:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync"></see>, or <see cref="Overload:System.Windows.Documents.DocumentPaginator.ComputePageCountAsync"></see> that identifies the asynchronous task to cancel.</param>
		</member>
		<member name="M:System.Windows.Documents.DocumentPaginator.ComputePageCount">
			<summary>Forces a pagination of the content, updates <see cref="P:System.Windows.Documents.DocumentPaginator.PageCount"></see> with the new total, and sets <see cref="P:System.Windows.Documents.DocumentPaginator.IsPageCountValid"></see> to true.</summary>
		</member>
		<member name="M:System.Windows.Documents.DocumentPaginator.ComputePageCountAsync">
			<summary>Asynchronously, forces a pagination of the content, updates <see cref="P:System.Windows.Documents.DocumentPaginator.PageCount"></see> with the new total, and sets <see cref="P:System.Windows.Documents.DocumentPaginator.IsPageCountValid"></see> to true.</summary>
		</member>
		<member name="M:System.Windows.Documents.DocumentPaginator.ComputePageCountAsync(System.Object)">
			<summary>Asynchronously, forces a pagination of the content, updates <see cref="P:System.Windows.Documents.DocumentPaginator.PageCount"></see> with the new total, sets <see cref="P:System.Windows.Documents.DocumentPaginator.IsPageCountValid"></see> to true. </summary>
			<param name="userState">A unique identifier for the asynchronous task.</param>
		</member>
		<member name="M:System.Windows.Documents.DocumentPaginator.GetPage(System.Int32)">
			<summary>When overridden in a derived class, gets the <see cref="T:System.Windows.Documents.DocumentPage"></see> for the specified page number.</summary>
			<returns>The <see cref="T:System.Windows.Documents.DocumentPage"></see> for the specified pageNumber, or <see cref="F:System.Windows.Documents.DocumentPage.Missing"></see> if the page does not exist.</returns>
			<param name="pageNumber">The zero-based page number of the document page that is needed.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">pageNumber is negative.</exception>
		</member>
		<member name="M:System.Windows.Documents.DocumentPaginator.GetPageAsync(System.Int32)">
			<summary>Asynchronously returns (through the <see cref="E:System.Windows.Documents.DocumentPaginator.GetPageCompleted"></see> event) the <see cref="T:System.Windows.Documents.DocumentPage"></see> for the specified page number.</summary>
			<param name="pageNumber">The zero-based page number of the document page that is needed.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">pageNumber is negative.</exception>
		</member>
		<member name="M:System.Windows.Documents.DocumentPaginator.GetPageAsync(System.Int32,System.Object)">
			<summary>Asynchronously returns (through the <see cref="E:System.Windows.Documents.DocumentPaginator.GetPageCompleted"></see> event) the <see cref="T:System.Windows.Documents.DocumentPage"></see> for the specifed page number and assigns the specified ID to the asynchronous task.</summary>
			<param name="pageNumber">The zero-based page number of the <see cref="T:System.Windows.Documents.DocumentPage"></see> to get.</param>
			<param name="userState">A unique identifier for the asynchronous task.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">pageNumber is negative.</exception>
		</member>
		<member name="M:System.Windows.Documents.DocumentPaginator.OnComputePageCountCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
			<summary>Raises the <see cref="E:System.Windows.Documents.DocumentPaginator.ComputePageCountCompleted"></see> event. </summary>
			<param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"></see> that contains the event data. </param>
		</member>
		<member name="M:System.Windows.Documents.DocumentPaginator.OnGetPageCompleted(System.Windows.Documents.GetPageCompletedEventArgs)">
			<summary>Raises the <see cref="E:System.Windows.Documents.DocumentPaginator.GetPageCompleted"></see> event. </summary>
			<param name="e">A <see cref="T:System.Windows.Documents.GetPageCompletedEventArgs"></see> that contains the event data. </param>
		</member>
		<member name="M:System.Windows.Documents.DocumentPaginator.OnPagesChanged(System.Windows.Documents.PagesChangedEventArgs)">
			<summary>Raises the <see cref="E:System.Windows.Documents.DocumentPaginator.PagesChanged"></see> event. </summary>
			<param name="e">A <see cref="T:System.Windows.Documents.PagesChangedEventArgs"></see> that contains the event data. </param>
		</member>
		<member name="P:System.Windows.Documents.DocumentPaginator.IsPageCountValid">
			<summary>When overridden in a derived class, gets a value indicating whether <see cref="P:System.Windows.Documents.DocumentPaginator.PageCount"></see> is the total number of pages. </summary>
			<returns>true if pagination is complete and <see cref="P:System.Windows.Documents.DocumentPaginator.PageCount"></see> is the total number of pages; otherwise, false, if pagination is in process and <see cref="P:System.Windows.Documents.DocumentPaginator.PageCount"></see> is the number of pages currently formatted (not the total).This value may revert to false, after being true, if <see cref="P:System.Windows.Documents.DocumentPaginator.PageSize"></see> or content changes; because those events would force a repagination.</returns>
		</member>
		<member name="P:System.Windows.Documents.DocumentPaginator.PageCount">
			<summary>When overridden in a derived class, gets a count of the number of pages currently formatted</summary>
			<returns>A count of the number of pages that have been formatted.</returns>
		</member>
		<member name="P:System.Windows.Documents.DocumentPaginator.PageSize">
			<summary>When overridden in a derived class, gets or sets the suggested width and height of each page.</summary>
			<returns>A <see cref="T:System.Windows.Size"></see> representing the width and height of each page.</returns>
		</member>
		<member name="P:System.Windows.Documents.DocumentPaginator.Source">
			<summary>When overridden in a derived class, returns the element being paginated.</summary>
			<returns>An <see cref="T:System.Windows.Documents.IDocumentPaginatorSource"></see> representing the element being paginated.</returns>
		</member>
		<member name="T:System.Windows.Documents.DynamicDocumentPaginator">
			<summary>Provides an abstract base class that supports automatic background pagination and tracking content positions across repaginations in addition to the methods and properties of its own base class.</summary>
		</member>
		<member name="M:System.Windows.Documents.DynamicDocumentPaginator.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.DynamicDocumentPaginator"></see> class. </summary>
		</member>
		<member name="E:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberCompleted">
			<summary>Occurs when <see cref="Overload:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync"></see> has completed.</summary>
		</member>
		<member name="E:System.Windows.Documents.DynamicDocumentPaginator.PaginationCompleted">
			<summary>Occurs when all document content has been paginated.</summary>
		</member>
		<member name="E:System.Windows.Documents.DynamicDocumentPaginator.PaginationProgress">
			<summary>Occurs when one or more content pages have been paginated.</summary>
		</member>
		<member name="M:System.Windows.Documents.DynamicDocumentPaginator.GetObjectPosition(System.Object)">
			<summary>When overridden in a derived class, returns a <see cref="T:System.Windows.Documents.ContentPosition"></see> for the specified <see cref="T:System.Object"></see>.</summary>
			<returns>The <see cref="T:System.Windows.Documents.ContentPosition"></see> of the given object.</returns>
			<param name="o">The object to return the <see cref="T:System.Windows.Documents.ContentPosition"></see> of.</param>
		</member>
		<member name="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumber(System.Windows.Documents.ContentPosition)">
			<summary>When overridden in a derived class, returns the zero-based page number of the specified <see cref="T:System.Windows.Documents.ContentPosition"></see>.</summary>
			<returns>An <see cref="T:System.Int32"></see> representing zero-based page number where the specified contentPosition appears.</returns>
			<param name="contentPosition">The content position whose page number is needed.</param>
		</member>
		<member name="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition)">
			<summary>Asynchronously, returns (through the This method raises the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberCompleted"></see> event) the zero-based page number of the specified <see cref="T:System.Windows.Documents.ContentPosition"></see>.</summary>
			<param name="contentPosition">The content position whose page number is needed.</param>
		</member>
		<member name="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition,System.Object)">
			<summary>Asynchronously, returns (through the This method raises the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberCompleted"></see> event) the zero-based page number of the specified <see cref="T:System.Windows.Documents.ContentPosition"></see>.</summary>
			<param name="contentPosition">The content position element to return the page number of.</param>
			<param name="userState">A unique identifier for the asynchronous task.</param>
		</member>
		<member name="M:System.Windows.Documents.DynamicDocumentPaginator.GetPagePosition(System.Windows.Documents.DocumentPage)">
			<summary>When overridden in a derived class, gets the position of the specified page in the document's content.</summary>
			<returns>A <see cref="T:System.Windows.Documents.ContentPosition"></see> representing the position of page. </returns>
			<param name="page">The page whose position is needed.</param>
		</member>
		<member name="M:System.Windows.Documents.DynamicDocumentPaginator.OnGetPageNumberCompleted(System.Windows.Documents.GetPageNumberCompletedEventArgs)">
			<summary>Raises the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberCompleted"></see> event. </summary>
			<param name="e">A <see cref="T:System.Windows.Documents.GetPageNumberCompletedEventArgs"></see> that contains the event data. </param>
		</member>
		<member name="M:System.Windows.Documents.DynamicDocumentPaginator.OnPaginationCompleted(System.EventArgs)">
			<summary>Raises the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.PaginationCompleted"></see> event. </summary>
			<param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
		</member>
		<member name="M:System.Windows.Documents.DynamicDocumentPaginator.OnPaginationProgress(System.Windows.Documents.PaginationProgressEventArgs)">
			<summary>Raises the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.PaginationProgress"></see> event. </summary>
			<param name="e">A <see cref="T:System.Windows.Documents.PaginationProgressEventArgs"></see> that contains the event data. </param>
		</member>
		<member name="P:System.Windows.Documents.DynamicDocumentPaginator.IsBackgroundPaginationEnabled">
			<summary>Gets or sets a value indicating whether pagination is performed automatically in the background in response to certain events, such as a change in page size.</summary>
			<returns>true if background pagination is enabled; otherwise, false. The default is true.</returns>
		</member>
		<member name="T:System.Windows.Documents.GetPageCompletedEventArgs">
			<summary>Provides data for the GetPageCompleted event. </summary>
		</member>
		<member name="M:System.Windows.Documents.GetPageCompletedEventArgs.#ctor(System.Windows.Documents.DocumentPage,System.Int32,System.Exception,System.Boolean,System.Object)">
			<summary>Initializes a new instance of the GetPageCompletedEventArgs class. </summary>
			<param name="page">The DocumentPage for the requested pageNumber.</param>
			<param name="error">The exception that occurred during the asynchronous operation; or NULL if there were no errors.</param>
			<param name="cancelled">true if the asynchronous operation was canceled; otherwise, false.</param>
			<param name="pageNumber">The pageNumber parameter passed to GetPageAsync.</param>
			<param name="userState">The unique userState parameter passed to GetPageAsync.</param>
		</member>
		<member name="P:System.Windows.Documents.GetPageCompletedEventArgs.DocumentPage">
			<summary>Gets the DocumentPage for the page specified in the call to GetPageAsync. </summary>
			<returns>The document page for the page specified in the call to GetPageAsync.</returns>
		</member>
		<member name="P:System.Windows.Documents.GetPageCompletedEventArgs.PageNumber">
			<summary>Gets the page number passed to GetPageAsync. </summary>
			<returns>The page number passed to GetPageAsync.</returns>
		</member>
		<member name="T:System.Windows.Documents.GetPageCompletedEventHandler">
			<summary> Represents the method that will handle the GetPageCompleted event of a FixedDocument or other class implementing IDocumentPaginator. </summary>
		</member>
		<member name="T:System.Windows.Documents.GetPageNumberCompletedEventArgs">
			<summary>Provides data for the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberCompleted"></see> event.</summary>
		</member>
		<member name="M:System.Windows.Documents.GetPageNumberCompletedEventArgs.#ctor(System.Windows.Documents.ContentPosition,System.Int32,System.Exception,System.Boolean,System.Object)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.GetPageNumberCompletedEventArgs"></see> class.</summary>
			<param name="error">The exception that occurred during the asynchronous operation; or NULL if there were no errors.</param>
			<param name="cancelled">true if the asynchronous operation was canceled; otherwise, false.</param>
			<param name="pageNumber">The page number where the contentPosition appears.</param>
			<param name="contentPosition">The contentPosition parameter passed to <see cref="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition)"></see>.</param>
			<param name="userState">The unique userState parameter passed to <see cref="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition)"></see>.</param>
		</member>
		<member name="P:System.Windows.Documents.GetPageNumberCompletedEventArgs.ContentPosition">
			<summary>Gets the <see cref="T:System.Windows.Documents.ContentPosition"></see> passed to <see cref="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition)"></see>.</summary>
			<returns>The content position passed to <see cref="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition)"></see>.</returns>
		</member>
		<member name="P:System.Windows.Documents.GetPageNumberCompletedEventArgs.PageNumber">
			<summary>Gets the page number for the <see cref="T:System.Windows.Documents.ContentPosition"></see> passed to GetPageForContentPositionAsync.</summary>
			<returns>The page number (zero-based) for the <see cref="T:System.Windows.Documents.ContentPosition"></see> passed to <see cref="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition)"></see>.</returns>
		</member>
		<member name="T:System.Windows.Documents.GetPageNumberCompletedEventHandler">
			<summary>Represents the method that will handle the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberCompleted"></see> event of a <see cref="T:System.Windows.Documents.FixedDocument"></see>, <see cref="T:System.Windows.Documents.FlowDocument"></see>. </summary>
		</member>
		<member name="T:System.Windows.Documents.PagesChangedEventArgs">
			<summary> Provides data for the PagesChanged event. </summary>
		</member>
		<member name="M:System.Windows.Documents.PagesChangedEventArgs.#ctor(System.Int32,System.Int32)">
			<summary> Initializes a new instance of the PagesChangedEventArgs class. </summary>
			<param name="count">The number of continuous pages that changed.</param>
			<param name="start">The page number (zero-based) of first page that changed.</param>
		</member>
		<member name="P:System.Windows.Documents.PagesChangedEventArgs.Count">
			<summary> Gets the number of continuous pages that changed. </summary>
			<returns>The number of continuous pages that changed.</returns>
		</member>
		<member name="P:System.Windows.Documents.PagesChangedEventArgs.Start">
			<summary> Gets the page number of the first page that changed. </summary>
			<returns>The page number (zero-based) of first page that changed.</returns>
		</member>
		<member name="T:System.Windows.Documents.PagesChangedEventHandler">
			<summary> Represents the method that will handle the PagesChanged event of a FixedDocument  or other class implementing IDocumentPaginator. </summary>
		</member>
		<member name="T:System.Windows.Documents.PaginationProgressEventArgs">
			<summary> Provides data for the PaginationProgress event. </summary>
		</member>
		<member name="M:System.Windows.Documents.PaginationProgressEventArgs.#ctor(System.Int32,System.Int32)">
			<summary> Initializes a new instance of the PaginationProgressEventArgs class. </summary>
			<param name="count">The number of continuous pages paginated.</param>
			<param name="start">The page number (zero-based) of first page paginated.</param>
		</member>
		<member name="P:System.Windows.Documents.PaginationProgressEventArgs.Count">
			<summary> Gets the number of continuous pages that were paginated. </summary>
			<returns>The number of continuous pages that were paginated.</returns>
		</member>
		<member name="P:System.Windows.Documents.PaginationProgressEventArgs.Start">
			<summary> Gets the page number of the first page that was paginated. </summary>
			<returns>The page number (zero-based) of first page that was paginated.</returns>
		</member>
		<member name="T:System.Windows.Documents.PaginationProgressEventHandler">
			<summary> Represents the method that will handle the PaginationProgress event of a FixedDocument  or other class implementing IDocumentPaginator. </summary>
		</member>
		<member name="T:System.Windows.Ink.ApplicationGesture">
			<summary>Specifies the available application-specific gesture.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.AllGestures">
			<summary>Recognizes all application-specific gestures.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.ArrowDown">
			<summary>Has no suggested semantic behavior or action. The arrow can be drawn in single stroke or in two strokes where one stroke is the line and the other is the arrow head. Do not use more than two strokes to draw the arrow.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.ArrowLeft">
			<summary>Has no suggested semantic behavior or action. The arrow can be drawn in single stroke or in two strokes where one stroke is the line and the other is the arrow head. Do not use more than two strokes to draw the arrow.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.ArrowRight">
			<summary>Has no suggested semantic behavior or action. The arrow can be drawn in single stroke or in two strokes where one stroke is the line and the other is the arrow head. Do not use more than two strokes to draw the arrow.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.ArrowUp">
			<summary>Has no suggested semantic behavior or action. The arrow can be drawn in single stroke or in two strokes where one stroke is the line and the other is the arrow head. Do not use more than two strokes to draw the arrow.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.Check">
			<summary>Denotes a check-off. The upward stroke must be twice as long as the smaller downward stroke.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.ChevronDown">
			<summary>Has no suggested semantic behavior or action. Both sides of the chevron must be drawn as equal as possible. The angle must be sharp and end in a point.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.ChevronLeft">
			<summary>Has no suggested semantic behavior or action. Both sides of the chevron must be drawn as equal as possible. The angle must be sharp and end in a point.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.ChevronRight">
			<summary>Has no suggested semantic behavior or action. Both sides of the chevron must be drawn as equal as possible. The angle must be sharp and end in a point.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.ChevronUp">
			<summary>Has no suggested semantic behavior or action. Both sides of the chevron must be drawn as equal as possible. The angle must be sharp and end in a point.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.Circle">
			<summary>Has no suggested semantic behavior or action. The circle must be drawn in a single stroke without lifting the pen.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.Curlicue">
			<summary>Cuts a word. Start the curlicue on the word you intend to cut.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.DoubleCircle">
			<summary>Pastes a selection. The two circles must overlap each other and be drawn in a single stroke without lifting the pen.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.DoubleCurlicue">
			<summary>Copies a word. Start the double-curlicue on the word you intend to copy.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.DoubleTap">
			<summary>Signifies a mouse double-click. The two taps must be made quickly to result in the least amount of slippage and the least duration between taps. In addition, the taps must be as close to each other as possible.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.Down">
			<summary>Has no suggested semantic behavior or action. This gesture must be drawn as a single fast flick in the downward direction.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.DownLeft">
			<summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the down stroke. The two sides must be as equal in length as possible and at a right angle.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.DownLeftLong">
			<summary>Signifies pressing an ENTER key. This gesture must be drawn in a single stroke starting with the down stroke. The left stroke is about twice as long as the up stroke, and the two strokes must be at a right angle.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.DownRight">
			<summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the down stroke. The two sides must be as equal in length as possible and at a right angle.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.DownRightLong">
			<summary>Signifies pressing the spacebar. This gesture must be drawn in a single stroke starting with the down stroke. The right stroke must be about twice as long as the up stroke, and the two strokes must be at a right angle.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.DownUp">
			<summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the down stroke. The two strokes must be as close to each other as possible.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.Exclamation">
			<summary>Has no suggested semantic behavior or action. The line must be drawn first and then the dot drawn quickly and as close to the line as possible.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.Left">
			<summary>Specifies a backspace. This gesture must be drawn as a single fast flick to the left.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.LeftDown">
			<summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the left stroke. The two sides are as equal in length as possible and at a right angle.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.LeftRight">
			<summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the left stroke. The two sides are as equal in length as possible and at a right angle.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.LeftUp">
			<summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the left stroke. The two sides must be as equal in length as possible and at a right angle.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.NoGesture">
			<summary>Recognizes no application-specific gestures.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.Right">
			<summary>Signifies a space. This gesture must be drawn as a single fast flick to the right.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.RightDown">
			<summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the right stroke. The two sides must be as equal in length as possible and at a right angle.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.RightLeft">
			<summary>Copies a selection. This gesture must be drawn in a single stroke starting with the right stroke. The two strokes must be as close to each other as possible.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.RightUp">
			<summary>Signifies an Input Method Editor (IME) convert. This gesture must be drawn in a single stroke starting with the right stroke. The two sides must be as equal in length as possible and at a right angle.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.ScratchOut">
			<summary>Erases content. This gesture must be drawn as a single stroke that has at least three back-and-forth motions.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.SemicircleLeft">
			<summary>Undoes an action. The semicircle must be drawn from left to right. The two ends of the semicircle should be as horizontally even as possible.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.SemicircleRight">
			<summary>Redoes an action. The semicircle must be drawn from right to left. The two ends of the semicircle should be as horizontally even as possible.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.Square">
			<summary>Marks an action item. The square can be drawn in one or two strokes. In one stroke, draw the entire square without lifting the pen. In two strokes, draw three sides of the square and use another stroke to draw the remaining side. Do not use more than two strokes to draw the square.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.Star">
			<summary>Marks an action item. The star must have exactly five points and be drawn in a single stroke without lifting the pen.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.Tap">
			<summary>Signifies a mouse click. For the least amount of slippage, the tap must be made quickly.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.Triangle">
			<summary>Inserts input. The triangle must be drawn in a single stroke, without lifting the pen.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.Up">
			<summary>Has no suggested semantic behavior or action. This gesture must be drawn as a single fast flick in the upward direction.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.UpDown">
			<summary>Undoes an action. This gesture must be drawn in a single stroke starting with the up stroke. The two strokes must be as close to each other as possible.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.UpLeft">
			<summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the up stroke. The two sides must be as equal in length as possible and at a right angle.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.UpLeftLong">
			<summary>Decreases the indent. This gesture must be drawn in a single stroke starting with the up stroke. The left stroke must be about twice as long as the up stroke, and the two strokes must be at a right angle.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.UpRight">
			<summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the up stroke. The two sides must be as equal in length as possible and at a right angle.</summary>
		</member>
		<member name="F:System.Windows.Ink.ApplicationGesture.UpRightLong">
			<summary>Signifies pressing a TAB key. This gesture must be drawn in a single stroke starting with the up stroke. The right stroke must be about twice as long as the up stroke, and the two strokes must be at a right angle.</summary>
		</member>
		<member name="T:System.Windows.Ink.DrawingAttributeIds">
			<summary>Contains a set of GUIDs that identify the properties in the <see cref="T:System.Windows.Ink.DrawingAttributes"></see> class.</summary>
		</member>
		<member name="F:System.Windows.Ink.DrawingAttributeIds.Color">
			<summary>Identifies the <see cref="P:System.Windows.Ink.DrawingAttributes.Color"></see> property.</summary>
		</member>
		<member name="F:System.Windows.Ink.DrawingAttributeIds.DrawingFlags">
			<summary>Identifies the DrawingFlags property.</summary>
		</member>
		<member name="F:System.Windows.Ink.DrawingAttributeIds.IsHighlighter">
			<summary>Identifies the <see cref="P:System.Windows.Ink.DrawingAttributes.IsHighlighter"></see> property.</summary>
		</member>
		<member name="F:System.Windows.Ink.DrawingAttributeIds.StylusHeight">
			<summary>Identifies the <see cref="P:System.Windows.Ink.DrawingAttributes.Height"></see> property.</summary>
		</member>
		<member name="F:System.Windows.Ink.DrawingAttributeIds.StylusTip">
			<summary>Identifies the <see cref="P:System.Windows.Ink.DrawingAttributes.StylusTip"></see> property.</summary>
		</member>
		<member name="F:System.Windows.Ink.DrawingAttributeIds.StylusTipTransform">
			<summary>Identifies the <see cref="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform"></see> property.</summary>
		</member>
		<member name="F:System.Windows.Ink.DrawingAttributeIds.StylusWidth">
			<summary>Identifies the <see cref="P:System.Windows.Ink.DrawingAttributes.Width"></see> property.</summary>
		</member>
		<member name="T:System.Windows.Ink.DrawingAttributes">
			<summary>Specifies the appearance of a <see cref="T:System.Windows.Ink.Stroke"></see></summary>
		</member>
		<member name="M:System.Windows.Ink.DrawingAttributes.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.DrawingAttributes"></see> class. </summary>
		</member>
		<member name="E:System.Windows.Ink.DrawingAttributes.AttributeChanged">
			<summary>Occurs when a property in the <see cref="T:System.Windows.Ink.DrawingAttributes"></see> object changes.</summary>
		</member>
		<member name="E:System.Windows.Ink.DrawingAttributes.PropertyDataChanged">
			<summary>Occurs when property data is added or removed from the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</summary>
		</member>
		<member name="E:System.Windows.Ink.DrawingAttributes.System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
			<summary>Occurs when the value of any <see cref="T:System.Windows.Ink.DrawingAttributes"></see> property has changed.</summary>
		</member>
		<member name="F:System.Windows.Ink.DrawingAttributes.MaxHeight">
			<summary>Specifies the largest value allowed for the <see cref="P:System.Windows.Ink.DrawingAttributes.Height"></see> property.</summary>
		</member>
		<member name="F:System.Windows.Ink.DrawingAttributes.MaxWidth">
			<summary>Specifies the largest value allowed for the <see cref="P:System.Windows.Ink.DrawingAttributes.Width"></see> property.</summary>
		</member>
		<member name="F:System.Windows.Ink.DrawingAttributes.MinHeight">
			<summary>Specifies the smallest value allowed for the <see cref="P:System.Windows.Ink.DrawingAttributes.Height"></see> property.</summary>
		</member>
		<member name="F:System.Windows.Ink.DrawingAttributes.MinWidth">
			<summary>Specifies the smallest value allowed for the <see cref="P:System.Windows.Ink.DrawingAttributes.Width"></see> property.</summary>
		</member>
		<member name="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)">
			<summary>Adds a custom property to the <see cref="T:System.Windows.Ink.DrawingAttributes"></see> object.</summary>
			<param name="propertyDataId">The <see cref="T:System.Guid"></see> to associate with the custom property.</param>
			<param name="propertyData">The value of the custom property. propertyData must be of type <see cref="T:System.Char"></see>, <see cref="T:System.Byte"></see>,<see cref="T:System.Int16"></see>,,<see cref="T:System.UInt16"></see>, <see cref="T:System.Int32"></see>, <see cref="T:System.UInt32"></see>, <see cref="T:System.Int64"></see>, <see cref="T:System.UInt64"></see>, <see cref="T:System.Single"></see>, <see cref="T:System.Double"></see>, <see cref="T:System.DateTime"></see>, <see cref="T:System.Boolean"></see>, <see cref="T:System.String"></see>, <see cref="T:System.Decimal"></see>  or an array of these data types, except <see cref="T:System.String"></see>, which is not allowed.</param>
			<exception cref="T:System.ArgumentNullException">propertyData is null.</exception>
			<exception cref="T:System.ArgumentException">propertyDataId is an empty <see cref="T:System.Guid"></see>.-or-propertyData is not one of the allowed data types listed in the Parameters section.</exception>
		</member>
		<member name="M:System.Windows.Ink.DrawingAttributes.Clone">
			<summary>Copies the <see cref="T:System.Windows.Ink.DrawingAttributes"></see> object.</summary>
			<returns>A copy of the <see cref="T:System.Windows.Ink.DrawingAttributes"></see> object.</returns>
		</member>
		<member name="M:System.Windows.Ink.DrawingAttributes.ContainsPropertyData(System.Guid)">
			<summary>Returns a value that indicates whether the specified property data identifier is in the <see cref="T:System.Windows.Ink.DrawingAttributes"></see> object.</summary>
			<returns>true if the specified property data identifier is in the <see cref="T:System.Windows.Ink.DrawingAttributes"></see> object; otherwise, false.</returns>
			<param name="propertyDataId">The <see cref="T:System.Guid"></see> to locate in the <see cref="T:System.Windows.Ink.DrawingAttributes"></see> object .</param>
		</member>
		<member name="M:System.Windows.Ink.DrawingAttributes.Equals(System.Object)">
			<summary>Determines whether the specified <see cref="T:System.Windows.Ink.DrawingAttributes"></see> object is equal to the current <see cref="T:System.Windows.Ink.DrawingAttributes"></see> object. </summary>
			<returns>true if the objects are equal; otherwise, false.</returns>
			<param name="o">The <see cref="T:System.Windows.Ink.DrawingAttributes"></see> object to compare to the current <see cref="T:System.Windows.Ink.DrawingAttributes"></see> object.</param>
		</member>
		<member name="M:System.Windows.Ink.DrawingAttributes.GetPropertyData(System.Guid)">
			<summary>Gets the value of the custom property associated with the specified <see cref="T:System.Guid"></see>.</summary>
			<returns>The value of the custom property associated with the specified <see cref="T:System.Guid"></see>.</returns>
			<param name="propertyDataId">The <see cref="T:System.Guid"></see> associated with the custom property to get.</param>
			<exception cref="T:System.ArgumentException">propertyDataId is not associated with a custom property of the <see cref="T:System.Windows.Ink.DrawingAttributes"></see> object.</exception>
		</member>
		<member name="M:System.Windows.Ink.DrawingAttributes.GetPropertyDataIds">
			<summary>Returns the GUIDs of any custom properties associated with the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</summary>
			<returns>An array of type <see cref="T:System.Guid"></see> that represents the property data identifiers.</returns>
		</member>
		<member name="M:System.Windows.Ink.DrawingAttributes.OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs)">
			<summary>Raises the <see cref="E:System.Windows.Ink.DrawingAttributes.AttributeChanged"></see> event. </summary>
			<param name="e">A <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs"></see> that contains the event data. </param>
			<exception cref="T:System.ArgumentNullException">e is null.</exception>
		</member>
		<member name="M:System.Windows.Ink.DrawingAttributes.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
			<summary>Occurs when any <see cref="T:System.Windows.Ink.DrawingAttributes"></see> property changes.</summary>
		</member>
		<member name="M:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)">
			<summary>Raises the <see cref="E:System.Windows.Ink.DrawingAttributes.PropertyDataChanged"></see> event.</summary>
			<param name="e">A <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs"></see> that contains the event data.</param>
			<exception cref="T:System.ArgumentNullException">e is null.</exception>
		</member>
		<member name="M:System.Windows.Ink.DrawingAttributes.op_Equality(System.Windows.Ink.DrawingAttributes,System.Windows.Ink.DrawingAttributes)">
			<summary>Determines whether the specified <see cref="T:System.Windows.Ink.DrawingAttributes"></see> objects are equal.</summary>
			<returns>true if the objects are equal; otherwise, false.</returns>
			<param name="first">The first <see cref="T:System.Windows.Ink.DrawingAttributes"></see> object to compare.</param>
			<param name="second">The second <see cref="T:System.Windows.Ink.DrawingAttributes"></see> object to compare.</param>
		</member>
		<member name="M:System.Windows.Ink.DrawingAttributes.op_Inequality(System.Windows.Ink.DrawingAttributes,System.Windows.Ink.DrawingAttributes)">
			<summary>Determines whether the specified <see cref="T:System.Windows.Ink.DrawingAttributes"></see> objects are not equal.</summary>
			<returns>true if the objects are not equal; otherwise, false.</returns>
			<param name="first">The first <see cref="T:System.Windows.Ink.DrawingAttributes"></see> object to compare.</param>
			<param name="second">The second <see cref="T:System.Windows.Ink.DrawingAttributes"></see> object to compare.</param>
		</member>
		<member name="M:System.Windows.Ink.DrawingAttributes.RemovePropertyData(System.Guid)">
			<summary>Removes the custom property associated with the specified <see cref="T:System.Guid"></see>.</summary>
			<param name="propertyDataId">The <see cref="T:System.Guid"></see> associated with the custom property to remove.</param>
			<exception cref="T:System.ArgumentException">propertyDataId is not associated with a custom property of the <see cref="T:System.Windows.Ink.DrawingAttributes"></see> object.</exception>
		</member>
		<member name="P:System.Windows.Ink.DrawingAttributes.Color">
			<summary>Gets or sets the color of a <see cref="T:System.Windows.Ink.Stroke"></see>.</summary>
			<returns>The color of a <see cref="T:System.Windows.Ink.Stroke"></see>.</returns>
		</member>
		<member name="P:System.Windows.Ink.DrawingAttributes.FitToCurve">
			<summary>Gets or sets a value that indicates whether Bezier smoothing is used to render the <see cref="T:System.Windows.Ink.Stroke"></see>.</summary>
			<returns>true to use Bezier smoothing to render the <see cref="T:System.Windows.Ink.Stroke"></see>; otherwise false. The default is false.</returns>
		</member>
		<member name="P:System.Windows.Ink.DrawingAttributes.Height">
			<summary>Gets or sets the height of the stylus used to draw the <see cref="T:System.Windows.Ink.Stroke"></see>.</summary>
			<returns>The value that indicates the height of the stylus used to draw the <see cref="T:System.Windows.Ink.Stroke"></see>.</returns>
			<exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Windows.Ink.DrawingAttributes.Height"></see> property is less than <see cref="F:System.Double.Epsilon"></see> or <see cref="F:System.Double.NaN"></see>.</exception>
		</member>
		<member name="P:System.Windows.Ink.DrawingAttributes.IgnorePressure">
			<summary>Gets or sets a value that indicates whether the thickness of a rendered <see cref="T:System.Windows.Ink.Stroke"></see> changes according the amount of pressure applied.</summary>
			<returns>true to indicate that the thickness of the stroke is uniform; false to indicate that the thickness of a rendered <see cref="T:System.Windows.Ink.Stroke"></see> increases when pressure is increased. The default is false.</returns>
		</member>
		<member name="P:System.Windows.Ink.DrawingAttributes.IsHighlighter">
			<summary>Gets or sets a value that indicates whether the <see cref="T:System.Windows.Ink.Stroke"></see> looks like a highlighter.</summary>
			<returns>true to render the <see cref="T:System.Windows.Ink.Stroke"></see> as a highlighter; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Windows.Ink.DrawingAttributes.StylusTip">
			<summary>Gets or sets the shape of the stylus used to draw the <see cref="T:System.Windows.Ink.Stroke"></see>.</summary>
			<returns>One of the <see cref="T:System.Windows.Ink.StylusShape"></see> values.</returns>
		</member>
		<member name="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.Matrix"></see> that specifies the transformation to perform on the stylus' tip.</summary>
			<returns>A <see cref="T:System.Windows.Media.Matrix"></see> that specifies the transformation to perform on the stylus' tip.</returns>
			<exception cref="T:System.ArgumentException">The matrix set to <see cref="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform"></see> is not an invertible matrix.-or-The <see cref="P:System.Windows.Media.Matrix.OffsetX"></see> or <see cref="P:System.Windows.Media.Matrix.OffsetY"></see> property of the matrix is not zero.</exception>
		</member>
		<member name="P:System.Windows.Ink.DrawingAttributes.Width">
			<summary>Gets or sets the width of the stylus used to draw the <see cref="T:System.Windows.Ink.Stroke"></see>.</summary>
			<returns>The width of the stylus used to draw the <see cref="T:System.Windows.Ink.Stroke"></see>.</returns>
			<exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Windows.Ink.DrawingAttributes.Width"></see> property is less than <see cref="F:System.Double.Epsilon"></see> or <see cref="F:System.Double.NaN"></see>.</exception>
		</member>
		<member name="T:System.Windows.Ink.DrawingAttributesReplacedEventArgs">
			<summary>Provides data for the <see cref="E:System.Windows.Controls.InkCanvas.DefaultDrawingAttributesReplaced"></see> event.</summary>
		</member>
		<member name="M:System.Windows.Ink.DrawingAttributesReplacedEventArgs.#ctor(System.Windows.Ink.DrawingAttributes,System.Windows.Ink.DrawingAttributes)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.DrawingAttributesReplacedEventArgs"></see> class. </summary>
			<param name="previousDrawingAttributes">The old <see cref="T:System.Windows.Ink.DrawingAttributes"></see>.</param>
			<param name="newDrawingAttributes">The new <see cref="T:System.Windows.Ink.DrawingAttributes"></see>.</param>
		</member>
		<member name="P:System.Windows.Ink.DrawingAttributesReplacedEventArgs.NewDrawingAttributes">
			<summary>Gets the new <see cref="T:System.Windows.Ink.DrawingAttributes"></see>.</summary>
			<returns>The new <see cref="T:System.Windows.Ink.DrawingAttributes"></see>. </returns>
		</member>
		<member name="P:System.Windows.Ink.DrawingAttributesReplacedEventArgs.PreviousDrawingAttributes">
			<summary>Gets the old <see cref="T:System.Windows.Ink.DrawingAttributes"></see>.</summary>
			<returns>The old <see cref="T:System.Windows.Ink.DrawingAttributes"></see>.</returns>
		</member>
		<member name="T:System.Windows.Ink.DrawingAttributesReplacedEventHandler">
			<summary>Represents the method that handles the <see cref="E:System.Windows.Controls.InkCanvas.DefaultDrawingAttributesReplaced"></see> event of an <see cref="T:System.Windows.Controls.InkCanvas"></see>.  </summary>
		</member>
		<member name="T:System.Windows.Ink.EllipseStylusShape">
			<summary>Represents an elliptical stylus tip.</summary>
		</member>
		<member name="M:System.Windows.Ink.EllipseStylusShape.#ctor(System.Double,System.Double)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.EllipseStylusShape"></see> class with the specified width and height </summary>
			<param name="width">The width of the stylus shape.</param>
			<param name="height">The height of the stylus shape.</param>
		</member>
		<member name="M:System.Windows.Ink.EllipseStylusShape.#ctor(System.Double,System.Double,System.Double)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.EllipseStylusShape"></see> class with the specified width, height, and angle.</summary>
			<param name="rotation">The angle of the stylus shape.</param>
			<param name="width">The width of the stylus shape.</param>
			<param name="height">The height of the stylus shape.</param>
		</member>
		<member name="T:System.Windows.Ink.GestureRecognitionResult">
			<summary>Contains information about an ink gesture.</summary>
		</member>
		<member name="P:System.Windows.Ink.GestureRecognitionResult.ApplicationGesture">
			<summary>Gets the recognized ink gesture.</summary>
			<returns>The recognized ink gesture.</returns>
		</member>
		<member name="P:System.Windows.Ink.GestureRecognitionResult.RecognitionConfidence">
			<summary>Gets the level of confidence that the <see cref="T:System.Windows.Ink.GestureRecognizer"></see> has in the recognition of the gesture.</summary>
			<returns>One of the <see cref="T:System.Windows.Ink.RecognitionConfidence"></see> levels.</returns>
		</member>
		<member name="T:System.Windows.Ink.GestureRecognizer">
			<summary>Recognizes ink gestures.</summary>
		</member>
		<member name="M:System.Windows.Ink.GestureRecognizer.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.GestureRecognizer"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Ink.GestureRecognizer.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Ink.ApplicationGesture})">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.GestureRecognizer"></see> class. </summary>
			<param name="enabledApplicationGestures">An array of type <see cref="T:System.Windows.Ink.ApplicationGesture"></see> that specifies the application gestures the <see cref="T:System.Windows.Ink.GestureRecognizer"></see> will recognize.</param>
		</member>
		<member name="M:System.Windows.Ink.GestureRecognizer.Dispose">
			<summary>Releases all resources used by the <see cref="T:System.Windows.Ink.GestureRecognizer"></see>. </summary>
		</member>
		<member name="M:System.Windows.Ink.GestureRecognizer.GetEnabledGestures">
			<summary>Gets the gestures that the <see cref="T:System.Windows.Ink.GestureRecognizer"></see> recognizes.</summary>
			<returns>An array of type <see cref="T:System.Windows.Ink.ApplicationGesture"></see> that contains gestures the <see cref="T:System.Windows.Ink.GestureRecognizer"></see> is set to recognize.</returns>
		</member>
		<member name="M:System.Windows.Ink.GestureRecognizer.Recognize(System.Windows.Ink.StrokeCollection)">
			<summary>Looks for gestures in the specified <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</summary>
			<returns>An array of type <see cref="T:System.Windows.Ink.GestureRecognitionResult"></see> that contains application gestures that the <see cref="T:System.Windows.Ink.GestureRecognizer"></see> recognized.</returns>
			<param name="strokes">The <see cref="T:System.Windows.Ink.StrokeCollection"></see> to search for gestures.</param>
		</member>
		<member name="M:System.Windows.Ink.GestureRecognizer.SetEnabledGestures(System.Collections.Generic.IEnumerable{System.Windows.Ink.ApplicationGesture})">
			<summary>Sets the application gestures that the <see cref="T:System.Windows.Ink.GestureRecognizer"></see> will recognize.</summary>
			<param name="applicationGestures">An array of type <see cref="T:System.Windows.Ink.ApplicationGesture"></see> that specifies the application gestures the <see cref="T:System.Windows.Ink.GestureRecognizer"></see> should recognize.</param>
		</member>
		<member name="P:System.Windows.Ink.GestureRecognizer.IsRecognizerAvailable">
			<summary>Gets whether the recognition component is available on the user's system.</summary>
			<returns>true if the recognition component is available; otherwise, false.</returns>
		</member>
		<member name="T:System.Windows.Ink.IncrementalHitTester">
			<summary>Dynamically performs hit testing on a <see cref="T:System.Windows.Ink.Stroke"></see>.</summary>
		</member>
		<member name="M:System.Windows.Ink.IncrementalHitTester.AddPoint(System.Windows.Point)">
			<summary>Adds a <see cref="T:System.Windows.Point"></see> to the <see cref="T:System.Windows.Ink.IncrementalHitTester"></see>.</summary>
			<param name="point">The <see cref="T:System.Windows.Point"></see> to add to the <see cref="T:System.Windows.Ink.IncrementalHitTester"></see>.</param>
		</member>
		<member name="M:System.Windows.Ink.IncrementalHitTester.AddPoints(System.Collections.Generic.IEnumerable{System.Windows.Point})">
			<summary>Adds points to the <see cref="T:System.Windows.Ink.IncrementalHitTester"></see>.</summary>
			<param name="points">An array of type <see cref="T:System.Windows.Point"></see> to add to the <see cref="T:System.Windows.Ink.IncrementalHitTester"></see>.</param>
		</member>
		<member name="M:System.Windows.Ink.IncrementalHitTester.AddPoints(System.Windows.Input.StylusPointCollection)">
			<summary>Adds the specified <see cref="T:System.Windows.Input.StylusPoint"></see> objects to the <see cref="T:System.Windows.Ink.IncrementalHitTester"></see>.</summary>
			<param name="stylusPoints">A collection of <see cref="T:System.Windows.Input.StylusPoint"></see> objects to add to the <see cref="T:System.Windows.Ink.IncrementalHitTester"></see>.</param>
		</member>
		<member name="M:System.Windows.Ink.IncrementalHitTester.AddPointsCore(System.Collections.Generic.IEnumerable{System.Windows.Point})">
			<summary>Adds points to the <see cref="T:System.Windows.Ink.IncrementalHitTester"></see>.</summary>
		</member>
		<member name="M:System.Windows.Ink.IncrementalHitTester.EndHitTesting">
			<summary>Releases resources used by the <see cref="T:System.Windows.Ink.IncrementalHitTester"></see>. </summary>
		</member>
		<member name="P:System.Windows.Ink.IncrementalHitTester.IsValid">
			<summary>Gets whether the <see cref="T:System.Windows.Ink.IncrementalHitTester"></see> is hit testing.</summary>
			<returns>true if the <see cref="T:System.Windows.Ink.IncrementalHitTester"></see> is hit testing; otherwise, false. </returns>
		</member>
		<member name="T:System.Windows.Ink.IncrementalLassoHitTester">
			<summary>Dynamically hit tests a <see cref="T:System.Windows.Ink.Stroke"></see> with a lasso.</summary>
		</member>
		<member name="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged">
			<summary>Occurs when the lasso path selects or unselects an ink <see cref="T:System.Windows.Ink.Stroke"></see>. </summary>
		</member>
		<member name="M:System.Windows.Ink.IncrementalLassoHitTester.AddPointsCore(System.Collections.Generic.IEnumerable{System.Windows.Point})">
			<summary>Adds points to the <see cref="T:System.Windows.Ink.IncrementalHitTester"></see>.</summary>
		</member>
		<member name="M:System.Windows.Ink.IncrementalLassoHitTester.OnSelectionChanged(System.Windows.Ink.LassoSelectionChangedEventArgs)">
			<summary>Raises the <see cref="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged"></see> event. </summary>
		</member>
		<member name="T:System.Windows.Ink.IncrementalStrokeHitTester">
			<summary>Dynamically hit tests a stroke with an eraser path.</summary>
		</member>
		<member name="E:System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit">
			<summary>Occurs when the <see cref="T:System.Windows.Ink.IncrementalStrokeHitTester"></see> intersects an ink <see cref="T:System.Windows.Ink.Stroke"></see>.</summary>
		</member>
		<member name="M:System.Windows.Ink.IncrementalStrokeHitTester.OnStrokeHit(System.Windows.Ink.StrokeHitEventArgs)">
			<summary>Raises the <see cref="E:System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit"></see> event.</summary>
		</member>
		<member name="T:System.Windows.Ink.LassoSelectionChangedEventArgs">
			<summary>Provides data for the <see cref="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged"></see> event. </summary>
		</member>
		<member name="P:System.Windows.Ink.LassoSelectionChangedEventArgs.DeselectedStrokes">
			<summary>Gets the strokes that have been removed from lasso path since the last time the <see cref="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged"></see> event was raised. </summary>
			<returns>A <see cref="T:System.Windows.Ink.StrokeCollection"></see> that contains the strokes that have been removed from the lasso path since the last time the <see cref="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged"></see> event was raised. </returns>
		</member>
		<member name="P:System.Windows.Ink.LassoSelectionChangedEventArgs.SelectedStrokes">
			<summary>Gets the strokes that have been surrounded by the lasso path since the last time the <see cref="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged"></see> event was raised.</summary>
			<returns>A <see cref="T:System.Windows.Ink.StrokeCollection"></see> that contains the strokes that have been surrounded by the lasso path since the last time the <see cref="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged"></see> event was raised.</returns>
		</member>
		<member name="T:System.Windows.Ink.LassoSelectionChangedEventHandler">
			<summary>Represents the method that will handle the <see cref="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged"></see> event of a <see cref="T:System.Windows.Ink.IncrementalLassoHitTester"></see>. </summary>
		</member>
		<member name="T:System.Windows.Ink.PropertyDataChangedEventArgs">
			<summary>Provides data for the PropertyDataChanged event.</summary>
		</member>
		<member name="M:System.Windows.Ink.PropertyDataChangedEventArgs.#ctor(System.Guid,System.Object,System.Object)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs"></see> class.</summary>
			<param name="propertyGuid">The <see cref="T:System.Guid"></see> of the custom property which changed.</param>
			<param name="newValue">The new custom property object.</param>
			<param name="previousValue">The previous custom property object.</param>
		</member>
		<member name="T:System.Windows.Ink.PropertyDataChangedEventHandler">
			<summary>Represents the method that handles the PropertyDataChanged event. </summary>
		</member>
		<member name="T:System.Windows.Ink.RecognitionConfidence">
			<summary>Specifies the confidence level a <see cref="T:System.Windows.Ink.GestureRecognizer"></see> has in an ink gesture.</summary>
		</member>
		<member name="F:System.Windows.Ink.RecognitionConfidence.Intermediate">
			<summary>Indicates intermediate confidence in the recognition result.</summary>
		</member>
		<member name="F:System.Windows.Ink.RecognitionConfidence.Poor">
			<summary>Indicates poor confidence in the recognition result.</summary>
		</member>
		<member name="F:System.Windows.Ink.RecognitionConfidence.Strong">
			<summary>Indicates strong confidence in the recognition result.</summary>
		</member>
		<member name="T:System.Windows.Ink.RectangleStylusShape">
			<summary>Represents a rectangular stylus tip.</summary>
		</member>
		<member name="M:System.Windows.Ink.RectangleStylusShape.#ctor(System.Double,System.Double)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.RectangleStylusShape"></see> class with the specified width and height.</summary>
			<param name="width">The width of the stylus shape.</param>
			<param name="height">The height of the stylus shape.</param>
		</member>
		<member name="M:System.Windows.Ink.RectangleStylusShape.#ctor(System.Double,System.Double,System.Double)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.RectangleStylusShape"></see> class with the specified width, height, and angle.</summary>
			<param name="rotation">The angle of the stylus shape.</param>
			<param name="width">The width of the stylus shape.</param>
			<param name="height">The height of the stylus shape.</param>
		</member>
		<member name="T:System.Windows.Ink.Stroke">
			<summary>Represents a single ink stroke.</summary>
		</member>
		<member name="M:System.Windows.Ink.Stroke.#ctor(System.Windows.Input.StylusPointCollection)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.Stroke"></see> class. </summary>
			<param name="stylusPoints">A <see cref="T:System.Windows.Input.StylusPointCollection"></see> that represents the <see cref="T:System.Windows.Ink.Stroke"></see>.</param>
			<exception cref="T:System.ArgumentException">stylusPoints is empty..</exception>
			<exception cref="T:System.ArgumentNullException">stylusPoints is null.</exception>
		</member>
		<member name="M:System.Windows.Ink.Stroke.#ctor(System.Windows.Input.StylusPointCollection,System.Windows.Ink.DrawingAttributes)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.Stroke"></see> class. </summary>
			<param name="stylusPoints">A <see cref="T:System.Windows.Input.StylusPointCollection"></see> that represents the <see cref="T:System.Windows.Ink.Stroke"></see>.</param>
			<param name="drawingAttributes">A <see cref="T:System.Windows.Ink.DrawingAttributes"></see> object that specifies the appearance of the <see cref="T:System.Windows.Ink.Stroke"></see>.</param>
			<exception cref="T:System.ArgumentException">stylusPoints is empty..</exception>
			<exception cref="T:System.ArgumentNullException">stylusPoints is null.-or-drawingAtrributes is null.</exception>
		</member>
		<member name="E:System.Windows.Ink.Stroke.DrawingAttributesChanged">
			<summary>Occurs when the <see cref="P:System.Windows.Ink.Stroke.DrawingAttributes"></see> associated with the <see cref="T:System.Windows.Ink.Stroke"></see> object change. </summary>
		</member>
		<member name="E:System.Windows.Ink.Stroke.DrawingAttributesReplaced">
			<summary>Occurs when the drawing attributes of a <see cref="T:System.Windows.Ink.Stroke"></see> object are replaced.</summary>
		</member>
		<member name="E:System.Windows.Ink.Stroke.Invalidated">
			<summary>Occurs when the appearance of the <see cref="T:System.Windows.Ink.Stroke"></see> changes.</summary>
		</member>
		<member name="E:System.Windows.Ink.Stroke.PropertyDataChanged">
			<summary>Occurs when the custom properties on a <see cref="T:System.Windows.Ink.Stroke"></see> object changes.</summary>
		</member>
		<member name="E:System.Windows.Ink.Stroke.StylusPointsChanged">
			<summary>Occurs when the <see cref="P:System.Windows.Ink.Stroke.StylusPoints"></see> property changes.</summary>
		</member>
		<member name="E:System.Windows.Ink.Stroke.StylusPointsReplaced">
			<summary>Occurs when the <see cref="P:System.Windows.Ink.Stroke.StylusPoints"></see> property is assigned a new <see cref="T:System.Windows.Input.StylusPointCollection"></see>.</summary>
		</member>
		<member name="E:System.Windows.Ink.Stroke.System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
			<summary>Occurs when the value of any <see cref="T:System.Windows.Ink.Stroke"></see> property has changed.</summary>
		</member>
		<member name="M:System.Windows.Ink.Stroke.AddPropertyData(System.Guid,System.Object)">
			<summary>Adds a custom property to the <see cref="T:System.Windows.Ink.Stroke"></see> object.</summary>
			<param name="propertyDataId">The unique identifier for the property.</param>
			<param name="propertyData">The value of the custom property. propertyData must be of type <see cref="T:System.Char"></see>, <see cref="T:System.Byte"></see>,<see cref="T:System.Int16"></see>,,<see cref="T:System.UInt16"></see>, <see cref="T:System.Int32"></see>, <see cref="T:System.UInt32"></see>, <see cref="T:System.Int64"></see>, <see cref="T:System.UInt64"></see>, <see cref="T:System.Single"></see>, <see cref="T:System.Double"></see>, <see cref="T:System.DateTime"></see>, <see cref="T:System.Boolean"></see>, <see cref="T:System.String"></see>, <see cref="T:System.Decimal"></see>  or an array of these data types, except <see cref="T:System.String"></see>, which is not allowed.</param>
			<exception cref="T:System.ArgumentException">The propertyData argument is not one of the allowed data types listed in the Parameters section.</exception>
		</member>
		<member name="M:System.Windows.Ink.Stroke.Clone">
			<summary>Returns a deep copy of the existing <see cref="T:System.Windows.Ink.Stroke"></see> object.</summary>
			<returns>The new <see cref="T:System.Windows.Ink.Stroke"></see> object.</returns>
		</member>
		<member name="M:System.Windows.Ink.Stroke.ContainsPropertyData(System.Guid)">
			<summary>Returns a value that indicates whether the <see cref="T:System.Windows.Ink.Stroke"></see> object contains the specified custom property.</summary>
			<returns>Returns true if the custom property exists; otherwise, returns false.</returns>
			<param name="propertyDataId">The unique identifier for the property.</param>
		</member>
		<member name="M:System.Windows.Ink.Stroke.Draw(System.Windows.Media.DrawingContext)">
			<summary>Renders the <see cref="T:System.Windows.Ink.Stroke"></see> object based upon the specified <see cref="T:System.Windows.Media.DrawingContext"></see>.</summary>
			<param name="Context">The <see cref="T:System.Windows.Media.DrawingContext"></see> object onto which the stroke will be rendered.</param>
		</member>
		<member name="M:System.Windows.Ink.Stroke.Draw(System.Windows.Media.DrawingContext,System.Windows.Ink.DrawingAttributes)">
			<summary>Renders the <see cref="T:System.Windows.Ink.Stroke"></see> object based upon the specified <see cref="T:System.Windows.Media.DrawingContext"></see> and <see cref="T:Microsoft.Ink.DrawingAttributes"></see>.</summary>
			<param name="drawingContext">The <see cref="T:System.Windows.Media.DrawingContext"></see> object onto which the stroke will be rendered.</param>
			<param name="drawingAttributes">The <see cref="T:Microsoft.Ink.DrawingAttributes"></see> object defining the attributes of the stroke that is drawn.</param>
		</member>
		<member name="M:System.Windows.Ink.Stroke.DrawCore(System.Windows.Media.DrawingContext,System.Windows.Ink.DrawingAttributes)">
			<summary>Renders the <see cref="T:System.Windows.Ink.Stroke"></see> on the specified <see cref="T:System.Windows.Media.DrawingContext"></see> using the specified <see cref="T:Microsoft.Ink.DrawingAttributes"></see>.</summary>
			<param name="drawingContext">The <see cref="T:System.Windows.Media.DrawingContext"></see> object onto which the stroke will be rendered.</param>
			<param name="drawingAttributes">The <see cref="T:Microsoft.Ink.DrawingAttributes"></see> object defining the attributes of the stroke that is drawn.</param>
		</member>
		<member name="M:System.Windows.Ink.Stroke.GetBezierStylusPoints">
			<summary>Returns the stylus points the <see cref="T:System.Windows.Ink.Stroke"></see> uses when <see cref="P:System.Windows.Ink.DrawingAttributes.FitToCurve"></see> is true.</summary>
			<returns>A <see cref="T:System.Windows.Input.StylusPointCollection"></see> that contains the stylus points along the spine of a <see cref="T:System.Windows.Ink.Stroke"></see> when <see cref="P:System.Windows.Ink.DrawingAttributes.FitToCurve"></see> is true</returns>
		</member>
		<member name="M:System.Windows.Ink.Stroke.GetBounds">
			<summary>Retrieves the bounding box for the <see cref="T:System.Windows.Ink.Stroke"></see> object.</summary>
			<returns>A <see cref="T:System.Windows.Rect"></see> structure defining the bounding box for the <see cref="T:System.Windows.Ink.Stroke"></see> object.</returns>
		</member>
		<member name="M:System.Windows.Ink.Stroke.GetClipResult(System.Collections.Generic.IEnumerable{System.Windows.Point})">
			<summary>Returns segments of the current <see cref="T:System.Windows.Ink.Stroke"></see> that are within the specified bounds.</summary>
			<returns>A <see cref="T:System.Windows.Ink.StrokeCollection"></see> that contains copies of the segments of the current <see cref="T:System.Windows.Ink.Stroke"></see> that are within the specified bounds.</returns>
			<param name="lassoPoints">An array of type <see cref="T:System.Windows.Point"></see> that specifies the area to clip.</param>
		</member>
		<member name="M:System.Windows.Ink.Stroke.GetClipResult(System.Windows.Rect)">
			<summary>Returns segments of the current <see cref="T:System.Windows.Ink.Stroke"></see> that are within the specified rectangle.</summary>
			<returns>A <see cref="T:System.Windows.Ink.StrokeCollection"></see> that contains the segments of the current <see cref="T:System.Windows.Ink.Stroke"></see> that are within the bounds of bounds.</returns>
			<param name="Bounds">A <see cref="T:System.Windows.Rect"></see> that specifies the area to clip.</param>
		</member>
		<member name="M:System.Windows.Ink.Stroke.GetEraseResult(System.Collections.Generic.IEnumerable{System.Windows.Point})">
			<summary>Returns segments of the current <see cref="T:System.Windows.Ink.Stroke"></see> that are outside the specified bounds.</summary>
			<returns>A <see cref="T:System.Windows.Ink.StrokeCollection"></see> that contains the segments of the current <see cref="T:System.Windows.Ink.Stroke"></see> that are outside the specified bounds.</returns>
			<param name="lassoPoints">An array of type <see cref="T:System.Windows.Point"></see> that specifies the area to erase.</param>
		</member>
		<member name="M:System.Windows.Ink.Stroke.GetEraseResult(System.Windows.Rect)">
			<summary>Returns segments of the current <see cref="T:System.Windows.Ink.Stroke"></see> that are outside the specified rectangle.</summary>
			<returns>A <see cref="T:System.Windows.Ink.StrokeCollection"></see> that contains the segments of the current <see cref="T:System.Windows.Ink.Stroke"></see> that are outside the bounds of the specified <see cref="T:System.Windows.Rect"></see>.</returns>
			<param name="Bounds">A <see cref="T:System.Windows.Rect"></see> that specifies the area to erase.</param>
		</member>
		<member name="M:System.Windows.Ink.Stroke.GetEraseResult(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Windows.Ink.StylusShape)">
			<summary>Returns the segments of the current <see cref="T:System.Windows.Ink.Stroke"></see> after it is dissected by the designated path using the specified <see cref="T:System.Windows.Ink.StylusShape"></see>.</summary>
			<returns>A <see cref="T:System.Windows.Ink.StrokeCollection"></see> that contains copies of the segments of the current <see cref="T:System.Windows.Ink.Stroke"></see> after it is dissected by the specified path.</returns>
			<param name="eraserPath">An array of type <see cref="T:System.Windows.Point"></see> that specifies the path that dissects the <see cref="T:System.Windows.Ink.Stroke"></see>.</param>
			<param name="eraserShape">A <see cref="T:System.Windows.Ink.StylusShape"></see> that specifies the shape of the eraser.</param>
		</member>
		<member name="M:System.Windows.Ink.Stroke.GetGeometry">
			<summary>Gets the <see cref="T:System.Windows.Media.Geometry"></see> of the current <see cref="T:System.Windows.Ink.Stroke"></see>.</summary>
			<returns>A <see cref="T:System.Windows.Media.Geometry"></see> that represents the <see cref="T:System.Windows.Ink.Stroke"></see>.</returns>
		</member>
		<member name="M:System.Windows.Ink.Stroke.GetGeometry(System.Windows.Ink.DrawingAttributes)">
			<summary>Gets the <see cref="T:System.Windows.Media.Geometry"></see> of the current <see cref="T:System.Windows.Ink.Stroke"></see> using the specified <see cref="T:System.Windows.Ink.DrawingAttributes"></see>.</summary>
			<returns>A <see cref="T:System.Windows.Media.Geometry"></see> that represents the <see cref="T:System.Windows.Ink.Stroke"></see>.</returns>
			<param name="drawingAttributes">The <see cref="T:System.Windows.Ink.DrawingAttributes"></see> that determines the <see cref="T:System.Windows.Media.Geometry"></see> of the <see cref="T:System.Windows.Ink.Stroke"></see>.</param>
		</member>
		<member name="M:System.Windows.Ink.Stroke.GetPropertyData(System.Guid)">
			<summary>Retrieves the property data for the specified GUID.</summary>
			<returns>An object containing the property data.</returns>
			<param name="propertyDataId">The unique identifier for the property.</param>
			<exception cref="T:System.ArgumentException">propertyDataId is not associated with a custom property of the <see cref="T:System.Windows.Ink.Stroke"></see>.</exception>
		</member>
		<member name="M:System.Windows.Ink.Stroke.GetPropertyDataIds">
			<summary>Retrieves the GUIDs of any custom properties associated with the <see cref="T:System.Windows.Ink.Stroke"></see> object.</summary>
			<returns>An array of <see cref="T:System.Guid"></see> objects.</returns>
		</member>
		<member name="M:System.Windows.Ink.Stroke.HitTest(System.Windows.Point)">
			<summary>Returns a value that indicates whether current <see cref="T:System.Windows.Ink.Stroke"></see> intersects the specified point.</summary>
			<returns>true if point intersects the current stroke; otherwise, false.</returns>
			<param name="point">The <see cref="T:System.Windows.Point"></see> to hit test.</param>
		</member>
		<member name="M:System.Windows.Ink.Stroke.HitTest(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Int32)">
			<summary>Returns a value that indicates whether the current <see cref="T:System.Windows.Ink.Stroke"></see> is within the specified bounds.</summary>
			<returns>true if the current stroke is within the specified bounds; otherwise false.</returns>
			<param name="lassoPoints">An array of type <see cref="T:System.Windows.Point"></see> that represents the bounds of the area to hit test.</param>
			<param name="percentageWithinLasso">The percentage of the length of the <see cref="T:System.Windows.Ink.Stroke"></see>, that must be in lassoPoints for the <see cref="T:System.Windows.Ink.Stroke"></see> to be considered hit..</param>
		</member>
		<member name="M:System.Windows.Ink.Stroke.HitTest(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Windows.Ink.StylusShape)">
			<summary>Returns whether the specified path intersects the <see cref="T:System.Windows.Ink.Stroke"></see> using the specified <see cref="T:System.Windows.Ink.StylusShape"></see>.</summary>
			<returns>true if eraserPath intersects the current stroke; otherwise, false.</returns>
			<param name="eraserPath">The path that eraserShape follows for hit testing</param>
			<param name="eraserShape">The shape of the eraser with which to hit test.</param>
		</member>
		<member name="M:System.Windows.Ink.Stroke.HitTest(System.Windows.Point,System.Double)">
			<summary>Returns a value that indicates whether current <see cref="T:System.Windows.Ink.Stroke"></see> intersects the specified area.</summary>
			<returns>true if the specified area intersects the current stroke; otherwise, false.</returns>
			<param name="point">The <see cref="T:System.Windows.Point"></see> that defines the center of the area to hit test.</param>
			<param name="diameter">The diameter of the area to hit test.</param>
		</member>
		<member name="M:System.Windows.Ink.Stroke.HitTest(System.Windows.Rect,System.Int32)">
			<summary>Returns a value that indicates whether the <see cref="T:System.Windows.Ink.Stroke"></see> is within the bounds of the specified rectangle.</summary>
			<returns>true if the current stroke is within the bounds of bounds; otherwise false.</returns>
			<param name="percentageWithinBounds">The percentage of the length of the <see cref="T:System.Windows.Ink.Stroke"></see>, that must be in percentageWithinBounds for the <see cref="T:System.Windows.Ink.Stroke"></see> to be considered hit..</param>
			<param name="bounds">A <see cref="T:System.Windows.Rect"></see> that represents the bounds of the area to hit test.</param>
		</member>
		<member name="M:System.Windows.Ink.Stroke.OnDrawingAttributesChanged(System.Windows.Ink.PropertyDataChangedEventArgs)">
			<summary>Allows derived classes to modify the default behavior of the <see cref="E:System.Windows.Ink.Stroke.DrawingAttributesChanged"></see> event.</summary>
			<param name="e">The <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs"></see> object that contains the event data.</param>
		</member>
		<member name="M:System.Windows.Ink.Stroke.OnDrawingAttributesReplaced(System.Windows.Ink.DrawingAttributesReplacedEventArgs)">
			<summary>Allows derived classes to modify the default behavior of the <see cref="E:System.Windows.Ink.Stroke.DrawingAttributesReplaced"></see> event.</summary>
			<param name="e">The <see cref="T:System.Windows.Ink.DrawingAttributesReplacedEventArgs"></see> object that contains the event data.</param>
		</member>
		<member name="M:System.Windows.Ink.Stroke.OnInvalidated(System.EventArgs)">
			<summary>Raises the <see cref="E:System.Windows.Ink.Stroke.Invalidated"></see> event.</summary>
			<param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
		</member>
		<member name="M:System.Windows.Ink.Stroke.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
			<summary>Occurs when any <see cref="T:System.Windows.Ink.Stroke"></see> property changes.</summary>
		</member>
		<member name="M:System.Windows.Ink.Stroke.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)">
			<summary>Allows derived classes to modify the default behavior of the <see cref="E:System.Windows.Ink.Stroke.PropertyDataChanged"></see> event.</summary>
			<param name="e">The <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs"></see> object that contains the event data.</param>
		</member>
		<member name="M:System.Windows.Ink.Stroke.OnStylusPointsChanged(System.EventArgs)">
			<summary>Raises the <see cref="E:System.Windows.Ink.Stroke.StylusPointsChanged"></see> event.</summary>
			<param name="e">A <see cref="T:System.EventArgs"></see> that contains the event data. </param>
		</member>
		<member name="M:System.Windows.Ink.Stroke.OnStylusPointsReplaced(System.Windows.Ink.StylusPointsReplacedEventArgs)">
			<summary>Raises the <see cref="E:System.Windows.Ink.Stroke.StylusPointsReplaced"></see> event.</summary>
			<param name="e">A <see cref="T:System.Windows.Ink.StylusPointsReplacedEventArgs"></see> that contains the event data. </param>
		</member>
		<member name="M:System.Windows.Ink.Stroke.RemovePropertyData(System.Guid)">
			<summary>Deletes a custom property from the <see cref="T:System.Windows.Ink.Stroke"></see> object.</summary>
			<param name="propertyDataId">The unique identifier for the property.</param>
		</member>
		<member name="M:System.Windows.Ink.Stroke.Transform(System.Windows.Media.Matrix,System.Boolean)">
			<summary>Performs a transformation based upon the specified <see cref="T:System.Windows.Media.Matrix"></see> object.</summary>
			<param name="applyToStylusTip">true to apply the transformation to the tip of the stylus; otherwise, false.</param>
			<param name="transformMatrix">The <see cref="T:System.Windows.Media.Matrix"></see> object defining the transformation.</param>
		</member>
		<member name="P:System.Windows.Ink.Stroke.DrawingAttributes">
			<summary>Gets or sets the <see cref="T:System.Windows.Ink.DrawingAttributes"></see> for the <see cref="T:System.Windows.Ink.Stroke"></see> object. </summary>
			<exception cref="T:System.ArgumentNullException">The set value is null.</exception>
		</member>
		<member name="P:System.Windows.Ink.Stroke.StylusPoints">
			<summary>Returns the stylus points of the <see cref="T:System.Windows.Ink.Stroke"></see>.</summary>
			<returns>The <see cref="T:System.Windows.Input.StylusPointCollection"></see> that contains the stylus points that represent the current <see cref="T:System.Windows.Ink.Stroke"></see>.</returns>
		</member>
		<member name="T:System.Windows.Ink.StrokeCollection">
			<summary>Represents a collection of <see cref="T:System.Windows.Ink.Stroke"></see> objects.</summary>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.StrokeCollection"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Ink.Stroke})">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.StrokeCollection"></see> class that contains the specified strokes. </summary>
			<param name="strokes">The strokes to add to the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</param>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.#ctor(System.IO.Stream)">
			<summary>Initializes a <see cref="T:System.Windows.Ink.StrokeCollection"></see> from the specified <see cref="T:System.IO.Stream"></see> of Ink Serialized Format (ISF).</summary>
			<param name="stream">A stream that contains ink data.</param>
		</member>
		<member name="E:System.Windows.Ink.StrokeCollection.PropertyDataChanged">
			<summary>Occurs when custom property is added or removed from the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</summary>
		</member>
		<member name="E:System.Windows.Ink.StrokeCollection.StrokesChanged">
			<summary>Occurs when a <see cref="T:System.Windows.Ink.Stroke"></see> in the collection changes. </summary>
		</member>
		<member name="E:System.Windows.Ink.StrokeCollection.System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
			<summary>Occurs when the <see cref="T:System.Windows.Ink.StrokeCollection"></see> changes.</summary>
		</member>
		<member name="E:System.Windows.Ink.StrokeCollection.System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
			<summary>Occurs when the value of any <see cref="T:System.Windows.Ink.StrokeCollection"></see> property has changed.</summary>
		</member>
		<member name="F:System.Windows.Ink.StrokeCollection.InkSerializedFormat">
			<summary>Represents the native persistence format for ink data.</summary>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.Add(System.Windows.Ink.StrokeCollection)">
			<summary>Adds the specified strokes to the collection.</summary>
			<param name="strokes">The <see cref="T:System.Windows.Ink.StrokeCollection"></see> to add to the collection.</param>
			<exception cref="T:System.ArgumentException">A <see cref="T:System.Windows.Ink.Stroke"></see> in strokes is already a member of the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</exception>
			<exception cref="T:System.ArgumentNullException">strokes is null.</exception>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.AddPropertyData(System.Guid,System.Object)">
			<summary>Adds a custom property to the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</summary>
			<param name="propertyDataId">The <see cref="T:System.Guid"></see> to associate with the custom property.</param>
			<param name="propertyData">The value of the custom property. propertyData must be of type <see cref="T:System.Char"></see>, <see cref="T:System.Byte"></see>,<see cref="T:System.Int16"></see>,,<see cref="T:System.UInt16"></see>, <see cref="T:System.Int32"></see>, <see cref="T:System.UInt32"></see>, <see cref="T:System.Int64"></see>, <see cref="T:System.UInt64"></see>, <see cref="T:System.Single"></see>, <see cref="T:System.Double"></see>, <see cref="T:System.DateTime"></see>, <see cref="T:System.Boolean"></see>, <see cref="T:System.String"></see>, <see cref="T:System.Decimal"></see>  or an array of these data types, except <see cref="T:System.String"></see>, which is not allowed.</param>
			<exception cref="T:System.ArgumentException">propertyDataId is an empty <see cref="T:System.Guid"></see>.-or-propertyData is not one of the allowed data types listed in the Parameters section.</exception>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.ClearItems">
			<summary>Clears all strokes from the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</summary>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.Clip(System.Collections.Generic.IEnumerable{System.Windows.Point})">
			<summary>Removes all strokes in the <see cref="T:System.Windows.Ink.StrokeCollection"></see> that are outside the bounds of the specified <see cref="T:System.Drawing.Point"></see> array.</summary>
			<param name="lassoPoints">An array of type <see cref="T:System.Drawing.Point"></see> that specifies the area to be clipped.</param>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.Clip(System.Windows.Rect)">
			<summary>Replaces all strokes that are clipped by the specified rectangle with new strokes that do not extend beyond the specified rectangle.  </summary>
			<param name="Bounds">A <see cref="T:System.Windows.Rect"></see> that specifies the area to be clipped.</param>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.Clone">
			<summary>Copies the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</summary>
			<returns>A copy of the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</returns>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.ContainsPropertyData(System.Guid)">
			<summary>Returns whether the specified custom property identifier is in the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</summary>
			<returns>true if the specified custom property identifier is in the <see cref="T:System.Windows.Ink.StrokeCollection"></see>; otherwise, false.</returns>
			<param name="propertyDataId">The <see cref="T:System.Guid"></see> to locate in the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</param>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.Draw(System.Windows.Media.DrawingContext)">
			<summary>Draws the strokes in the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</summary>
			<param name="context">The <see cref="T:System.Windows.Media.DrawingContext"></see> on which to draw the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</param>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.Erase(System.Collections.Generic.IEnumerable{System.Windows.Point})">
			<summary>Removes the ink that is within the bounds of the specified area.</summary>
			<param name="lassoPoints">An array of type <see cref="T:System.Drawing.Point"></see> that specifies the area to be erased.</param>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.Erase(System.Windows.Rect)">
			<summary>Replaces all strokes that are clipped by the specified rectangle with new Strokes that do not enter the bounds of the specified rectangle. </summary>
			<param name="Bounds">A <see cref="T:System.Windows.Rect"></see> that specifies the area to be erased.</param>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.Erase(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Windows.Ink.StylusShape)">
			<summary>Replaces all strokes that are clipped by the region created by the specified <see cref="T:System.Windows.Ink.StylusShape"></see> along the specified path with new Strokes that are not clipped by the region.</summary>
			<param name="eraserPath">An array of type <see cref="T:System.Windows.Point"></see> that specifies the path to be erased.</param>
			<param name="eraserShape">A <see cref="T:System.Windows.Ink.StylusShape"></see> that specifies the shape of the eraser.</param>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.GetBounds">
			<summary>Returns the bounds of the strokes in the collection.</summary>
			<returns>A <see cref="T:System.Windows.Rect"></see> that contains the bounds of the strokes in the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</returns>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.GetIncrementalLassoHitTester(System.Int32)">
			<summary>Creates an <see cref="T:System.Windows.Ink.IncrementalLassoHitTester"></see> that hit tests the <see cref="T:System.Windows.Ink.StrokeCollection"></see> with a lasso path.</summary>
			<returns>An <see cref="T:System.Windows.Ink.IncrementalLassoHitTester"></see> that hit tests the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</returns>
			<param name="percentageWithinLasso">The minimum percentage of each <see cref="T:System.Windows.Ink.Stroke"></see> that must be contained within the lasso for it to be considered hit.</param>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.GetIncrementalStrokeHitTester(System.Windows.Ink.StylusShape)">
			<summary>Creates an <see cref="T:System.Windows.Ink.IncrementalStrokeHitTester"></see> that hit tests the <see cref="T:System.Windows.Ink.StrokeCollection"></see> with an erasing path.</summary>
			<returns>An <see cref="T:System.Windows.Ink.IncrementalStrokeHitTester"></see> that hit tests the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</returns>
			<param name="eraserShape">A <see cref="T:System.Windows.Ink.StylusShape"></see> that specifies the tip of the stylus.</param>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.GetPropertyData(System.Guid)">
			<summary>Returns the value of the custom property associated with the specified <see cref="T:System.Guid"></see>.</summary>
			<returns>The value of the custom property associated with the specified <see cref="T:System.Guid"></see>.</returns>
			<param name="propertyDataId">The <see cref="T:System.Guid"></see> associated with the custom property to get.</param>
			<exception cref="T:System.ArgumentException">propertyDataId is not associated with a custom property of the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</exception>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.GetPropertyDataIds">
			<summary>Returns the GUIDs of any custom properties associated with the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</summary>
			<returns>An array of type <see cref="T:System.Guid"></see> that represent the custom property identifiers.</returns>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.HitTest(System.Windows.Point)">
			<summary>Returns a collection of strokes that intersect the specified point.</summary>
			<returns>A collection of <see cref="T:System.Windows.Ink.Stroke"></see> objects that intersect the specified point.</returns>
			<param name="point">The point to hit test.</param>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.HitTest(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Int32)">
			<summary>Returns a collection of strokes that have at least the specified percentage of length within the specified area.</summary>
			<returns>A <see cref="T:System.Windows.Ink.StrokeCollection"></see> that has strokes with at least the specified percentage within the <see cref="T:System.Windows.Point"></see> array.</returns>
			<param name="lassoPoints">An array of type <see cref="T:System.Windows.Point"></see> that represents the bounds of the area to be hit tested.</param>
			<param name="percentageWithinLasso">The acceptable length of the <see cref="T:System.Windows.Ink.Stroke"></see>, as a percentage, for lassoPoints to contain.</param>
			<exception cref="T:System.ArgumentNullException">lassoPoints is null.-or-percentageWithinLasso is null.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">percentageWithinLasso is less than 0 or greater than 100.</exception>
			<exception cref="T:System.ArgumentException">lassoPoints contains an empty array.</exception>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.HitTest(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Windows.Ink.StylusShape)">
			<summary>Returns a collection of strokes that intersect with the specified path.</summary>
			<returns>A <see cref="T:System.Windows.Ink.StrokeCollection"></see> of strokes that intersect with eraserPath.</returns>
			<param name="eraserPath">An array to type <see cref="T:System.Windows.Point"></see> that represents the path to be hit tested.</param>
			<param name="eraserShape">The <see cref="T:System.Windows.Ink.StylusShape"></see> that specifies the shape of eraserPath.</param>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.HitTest(System.Windows.Point,System.Double)">
			<summary>Returns a collection of strokes that intersect the specified area.</summary>
			<returns>A collection of <see cref="T:System.Windows.Ink.Stroke"></see> objects that intersect the specified point.</returns>
			<param name="point">The <see cref="T:System.Windows.Point"></see> to hit test.</param>
			<param name="diameter">The size of the area around the <see cref="T:System.Windows.Point"></see> to hit test.</param>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.HitTest(System.Windows.Rect,System.Int32)">
			<summary>Returns a collection of strokes that have at least the specified percentage of length within the specified rectangle.</summary>
			<returns>A <see cref="T:System.Windows.Ink.StrokeCollection"></see> that has strokes with at least the specified percentage within the <see cref="T:System.Windows.Rect"></see>.</returns>
			<param name="percentageWithinBounds">The minimum required length of a Stroke that must exist within bounds for it to be considered hit.</param>
			<param name="bounds">A <see cref="T:System.Windows.Rect"></see> that specifies the bounds to be hit tested.</param>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.InsertItem(System.Int32,System.Windows.Ink.Stroke)">
			<summary>Inserts a stroke into the <see cref="T:System.Windows.Ink.StrokeCollection"></see> at the specified index.</summary>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
			<summary>Occurs when any <see cref="T:System.Windows.Ink.StrokeCollection"></see> property changes.</summary>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)">
			<summary>Raises the <see cref="E:System.Windows.Ink.StrokeCollection.PropertyDataChanged"></see> event. </summary>
			<param name="e">A <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs"></see> that contains the event data. </param>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.OnStrokesChanged(System.Windows.Ink.StrokeCollectionChangedEventArgs)">
			<summary>Raises the <see cref="E:System.Windows.Ink.StrokeCollection.StrokesChanged"></see> event. </summary>
			<param name="e">A <see cref="T:System.Windows.Ink.StrokeCollectionChangedEventArgs"></see> that contains the event data. </param>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.Remove(System.Windows.Ink.StrokeCollection)">
			<summary>Removes the specified strokes from the collection.</summary>
			<param name="strokes">The <see cref="T:System.Windows.Ink.StrokeCollection"></see> that contains strokes to remove from the collection.</param>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.RemoveItem(System.Int32)">
			<summary>Removes the stroke at the specified index from the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</summary>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.RemovePropertyData(System.Guid)">
			<summary>Removes the custom property associated with the specified <see cref="T:System.Guid"></see>.</summary>
			<param name="propertyDataId">The <see cref="T:System.Guid"></see> associated with the custom property to remove.</param>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.Replace(System.Windows.Ink.Stroke,System.Windows.Ink.StrokeCollection)">
			<summary>Replaces the specified <see cref="T:System.Windows.Ink.Stroke"></see> with the specified strokes.</summary>
			<param name="strokeToReplace">The <see cref="T:System.Windows.Ink.Stroke"></see> to replace.</param>
			<param name="strokesToReplaceWith">The source <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</param>
			<exception cref="T:System.ArgumentException">strokesToReplace is empty.-or-strokesToReplaceWith is empty.-or-A <see cref="T:System.Windows.Ink.Stroke"></see> in strokesToReplaceWith is already in strokesToReplace. </exception>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.Replace(System.Windows.Ink.StrokeCollection,System.Windows.Ink.StrokeCollection)">
			<summary>Replaces the specified strokes with a new collection of strokes.</summary>
			<param name="strokesToReplace">The destination <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</param>
			<param name="strokesToReplaceWith">The source <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</param>
			<exception cref="T:System.ArgumentException">strokesToReplace is empty.-or-strokesToReplaceWith is empty.-or-A <see cref="T:System.Windows.Ink.Stroke"></see> in strokesToReplaceWith is already in strokesToReplace.-or-The strokes in strokesToReplaceWith are not continuous. </exception>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.Save(System.IO.Stream)">
			<summary>Saves the <see cref="T:System.Windows.Ink.StrokeCollection"></see> to the specified <see cref="T:System.IO.Stream"></see>.</summary>
			<param name="stream">The <see cref="T:System.IO.Stream"></see> to which to save the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</param>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.Save(System.IO.Stream,System.Boolean)">
			<summary>Saves the <see cref="T:System.Windows.Ink.StrokeCollection"></see> to the specified <see cref="T:System.IO.Stream"></see> and compresses it, when specified.</summary>
			<param name="compress">true to compress the <see cref="T:System.Windows.Ink.StrokeCollection"></see>; otherwise, false.</param>
			<param name="stream">The <see cref="T:System.IO.Stream"></see> to which to save the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</param>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.SetItem(System.Int32,System.Windows.Ink.Stroke)">
			<summary>Replaces the stroke at the specified index.</summary>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollection.Transform(System.Windows.Media.Matrix,System.Boolean)">
			<summary>Modifies each of the <see cref="P:System.Windows.Ink.Stroke.StylusPoints"></see> and optionally the <see cref="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform"></see> for each stroke in the <see cref="T:System.Windows.Ink.StrokeCollection"></see> according to the specified <see cref="T:System.Windows.Media.Matrix"></see>.</summary>
			<param name="applyToStylusTip">true to apply the transformation to the tip of the stylus; otherwise, false.</param>
			<param name="transformMatrix">A <see cref="T:System.Windows.Media.Matrix"></see> which specifies the transformation to perform on the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</param>
		</member>
		<member name="T:System.Windows.Ink.StrokeCollectionChangedEventArgs">
			<summary>Provides data for the <see cref="E:System.Windows.Ink.StrokeCollection.StrokesChanged"></see> event.</summary>
		</member>
		<member name="M:System.Windows.Ink.StrokeCollectionChangedEventArgs.#ctor(System.Windows.Ink.StrokeCollection,System.Windows.Ink.StrokeCollection)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.StrokeCollectionChangedEventArgs"></see> class. </summary>
			<param name="Removed">A <see cref="T:System.Windows.Ink.StrokeCollection"></see> that contains the removed strokes.</param>
			<param name="Added">A <see cref="T:System.Windows.Ink.StrokeCollection"></see> that contains the added strokes.</param>
		</member>
		<member name="P:System.Windows.Ink.StrokeCollectionChangedEventArgs.Added">
			<summary>Gets the strokes that have been added to the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</summary>
			<returns>A <see cref="T:System.Windows.Ink.StrokeCollection"></see> that contains the added strokes.</returns>
		</member>
		<member name="P:System.Windows.Ink.StrokeCollectionChangedEventArgs.Removed">
			<summary>Gets the strokes that have been removed from the <see cref="T:System.Windows.Ink.StrokeCollection"></see>.</summary>
			<returns>A <see cref="T:System.Windows.Ink.StrokeCollection"></see> that contains the removed strokes. </returns>
		</member>
		<member name="T:System.Windows.Ink.StrokeCollectionChangedEventHandler">
			<summary>Represents the method that handles the <see cref="E:System.Windows.Ink.StrokeCollection.StrokesChanged"></see> event of a <see cref="T:System.Windows.Ink.StrokeCollection"></see>.  </summary>
		</member>
		<member name="T:System.Windows.Ink.StrokeHitEventArgs">
			<summary>Represents the method that will handle the <see cref="E:System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit"></see> event of a <see cref="T:System.Windows.Ink.IncrementalStrokeHitTester"></see>. </summary>
		</member>
		<member name="M:System.Windows.Ink.StrokeHitEventArgs.GetPointEraseResults">
			<summary>Returns the strokes that are a result of the eraser path erasing a stroke.</summary>
			<returns>A <see cref="T:System.Windows.Ink.StrokeCollection"></see> that contains the strokes that are created after the eraser path erases part of <see cref="P:System.Windows.Ink.StrokeHitEventArgs.HitStroke"></see>.</returns>
		</member>
		<member name="P:System.Windows.Ink.StrokeHitEventArgs.HitStroke">
			<summary>Gets the <see cref="T:System.Windows.Ink.Stroke"></see> that is intersected by the eraser path.</summary>
			<returns>The <see cref="T:System.Windows.Ink.Stroke"></see> that is intersected by the eraser path.</returns>
		</member>
		<member name="T:System.Windows.Ink.StrokeHitEventHandler">
			<summary>Represents the method that will handle the <see cref="E:System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit"></see> event of a <see cref="T:System.Windows.Ink.IncrementalStrokeHitTester"></see>. </summary>
		</member>
		<member name="T:System.Windows.Ink.StylusPointsReplacedEventArgs">
			<summary>Provides data for the <see cref="E:System.Windows.Ink.Stroke.StylusPointsReplaced"></see> event.  </summary>
		</member>
		<member name="M:System.Windows.Ink.StylusPointsReplacedEventArgs.#ctor(System.Windows.Input.StylusPointCollection,System.Windows.Input.StylusPointCollection)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.StylusPointsReplacedEventArgs"></see> class. </summary>
			<param name="newStylusPoints">The new <see cref="T:System.Windows.Input.StylusPointCollection"></see> for the <see cref="T:System.Windows.Ink.Stroke"></see>.</param>
			<param name="previousStylusPoints">The replaced <see cref="T:System.Windows.Input.StylusPointCollection"></see>.</param>
		</member>
		<member name="P:System.Windows.Ink.StylusPointsReplacedEventArgs.NewStylusPoints">
			<summary>Gets the new <see cref="T:System.Windows.Input.StylusPointCollection"></see> for the <see cref="T:System.Windows.Ink.Stroke"></see>.</summary>
			<returns>The new <see cref="T:System.Windows.Input.StylusPointCollection"></see> for the <see cref="T:System.Windows.Ink.Stroke"></see>.</returns>
		</member>
		<member name="P:System.Windows.Ink.StylusPointsReplacedEventArgs.PreviousStylusPoints">
			<summary>Gets the replaced <see cref="T:System.Windows.Input.StylusPointCollection"></see>.</summary>
			<returns>The replaced <see cref="T:System.Windows.Input.StylusPointCollection"></see>.</returns>
		</member>
		<member name="T:System.Windows.Ink.StylusPointsReplacedEventHandler">
			<summary>Represents the method that will handle the <see cref="E:System.Windows.Ink.Stroke.StylusPointsReplaced"></see> event of a <see cref="T:System.Windows.Ink.Stroke"></see>.</summary>
		</member>
		<member name="T:System.Windows.Ink.StylusShape">
			<summary>Represents the tip of a stylus.</summary>
		</member>
		<member name="P:System.Windows.Ink.StylusShape.Height">
			<summary>Gets the height of the stylus.</summary>
			<returns>The height of the stylus.</returns>
		</member>
		<member name="P:System.Windows.Ink.StylusShape.Rotation">
			<summary>Gets the angle of the stylus.</summary>
			<returns>The angle of the stylus.</returns>
		</member>
		<member name="P:System.Windows.Ink.StylusShape.Width">
			<summary>Gets the width of the stylus. </summary>
			<returns>The width of the stylus.</returns>
		</member>
		<member name="T:System.Windows.Ink.StylusTip">
			<summary>Specifies the tip to be used to draw a <see cref="T:System.Windows.Ink.Stroke"></see>.</summary>
		</member>
		<member name="F:System.Windows.Ink.StylusTip.Ellipse">
			<summary>Represents an ellipse-shaped tip.</summary>
		</member>
		<member name="F:System.Windows.Ink.StylusTip.Rectangle">
			<summary>Represents a rectangle-shaped tip.</summary>
		</member>
		<member name="T:System.Windows.Input.AccessKeyEventArgs">
			<summary> Provides information for the <see cref="T:System.Windows.Input.AccessKeyPressedEventHandler"></see> event. </summary>
		</member>
		<member name="P:System.Windows.Input.AccessKeyEventArgs.IsMultiple">
			<summary>Gets a value that indicates whether other elements are invoked by the key. </summary>
			<returns>true if other elements are invoked; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Input.AccessKeyEventArgs.Key">
			<summary> Gets the key that was pressed. </summary>
			<returns>The key.</returns>
		</member>
		<member name="T:System.Windows.Input.AccessKeyManager">
			<summary> Controls the assignment and use of GTMT#access keys. </summary>
		</member>
		<member name="E:System.Windows.Input.AccessKeyManager.AccessKeyPressed">
			<summary> Occurs when the user presses the access key.      </summary>
		</member>
		<member name="M:System.Windows.Input.AccessKeyManager.AddAccessKeyPressedHandler(System.Windows.DependencyObject,System.Windows.Input.AccessKeyPressedEventHandler)">
			<summary> Adds a handler for the AccessKeyPressed  GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler to be added.</param>
		</member>
		<member name="M:System.Windows.Input.AccessKeyManager.IsKeyRegistered(System.Object,System.String)">
			<summary> Indicates whether the key is registered with the given PresentationSource.  </summary>
			<returns>true if the key is registered; otherwise, false.</returns>
			<param name="scope">Presentation source to query for key.</param>
			<param name="key">The key to query.</param>
		</member>
		<member name="M:System.Windows.Input.AccessKeyManager.ProcessKey(System.Object,System.String,System.Boolean)">
			<summary> Processes the given key as if the key were pressed at the global scope in this context. </summary>
			<returns>false if there are no more keys that match; otherwise true.</returns>
			<param name="scope">Scope in which to invoke the access key.</param>
			<param name="isMultiple">true if this key has multiple matches.</param>
			<param name="key">The character being pressed.</param>
		</member>
		<member name="M:System.Windows.Input.AccessKeyManager.Register(System.String,System.Windows.IInputElement)">
			<summary> Registers the access key binding to the element that is the access key. </summary>
			<param name="element">The registration element.</param>
			<param name="key">When the key is pressed the element's OnAccessKey method is called.</param>
		</member>
		<member name="M:System.Windows.Input.AccessKeyManager.RemoveAccessKeyPressedHandler(System.Windows.DependencyObject,System.Windows.Input.AccessKeyPressedEventHandler)">
			<summary> Removes a handler for the AccessKeyPressed GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler to be removed.</param>
		</member>
		<member name="M:System.Windows.Input.AccessKeyManager.Unregister(System.String,System.Windows.IInputElement)">
			<summary> Unregisters one key bound to a particular element. </summary>
			<param name="element">The element from which to unregister key.</param>
			<param name="key">The key to unregister.</param>
		</member>
		<member name="T:System.Windows.Input.AccessKeyPressedEventArgs">
			<summary> Provides data for the AccessKeyPressedEventHandler event. </summary>
		</member>
		<member name="M:System.Windows.Input.AccessKeyPressedEventArgs.#ctor">
			<summary> Initializes a new instance of the AccessKeyPressedEventArgs. </summary>
		</member>
		<member name="M:System.Windows.Input.AccessKeyPressedEventArgs.#ctor(System.String)">
			<summary> Initializes a new instance of the AccessKeyPressedEventArgs. </summary>
			<param name="key">The GTMT#access key.</param>
		</member>
		<member name="M:System.Windows.Input.AccessKeyPressedEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
			<param name="genericTarget">The current object along the event's route.</param>
			<param name="genericHandler">The handler to invoke.</param>
		</member>
		<member name="P:System.Windows.Input.AccessKeyPressedEventArgs.Scope">
			<summary> The scope for the element that raised this event. </summary>
			<returns>The element's scope.</returns>
		</member>
		<member name="P:System.Windows.Input.AccessKeyPressedEventArgs.Target">
			<summary> Gets or sets the element that raised this event. </summary>
			<returns>The element that raised this event.</returns>
		</member>
		<member name="T:System.Windows.Input.ApplicationCommands">
			<summary>Provides a standard set of application related commands.</summary>
		</member>
		<member name="P:System.Windows.Input.ApplicationCommands.CancelPrint">
			<summary>Represents the CancelPrint caommand.</summary>
			<returns>The Command.Default ValuesKey GestureNo gesture defined.UI TextCancel PrintWM_APPCOMMANDn/a</returns>
		</member>
		<member name="P:System.Windows.Input.ApplicationCommands.Close">
			<summary>Represents the Close command. </summary>
			<returns>The command.Default ValuesKey GestureCtrl+XShift+DeleteUI TextCloseWM_APPCOMMANDAPPCOMMAND_CLOSE</returns>
		</member>
		<member name="P:System.Windows.Input.ApplicationCommands.ContextMenu">
			<summary>Represents the Context Menu command. </summary>
			<returns>The command.Default ValuesKey GestureShift+F10AppsMouse GestureA Mouse Gesture is not attached to this command, but most applications follow the convention of using the Right Click gesture to invoke the context menu.UI TextContext MenuWM_APPCOMMANDn/a</returns>
		</member>
		<member name="P:System.Windows.Input.ApplicationCommands.Copy">
			<summary>Represents the Copy command. </summary>
			<returns>The command.Default ValuesKey GestureCtrl+CShift+DeleteUI TextCopyWM_APPCOMMANDAPPCOMAND_COPY</returns>
		</member>
		<member name="P:System.Windows.Input.ApplicationCommands.CorrectionList">
			<summary> Represents the Correction List command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextCorrection ListWM_APPCOMMANDAPPCOMAND_CORRECTION_LIST</returns>
		</member>
		<member name="P:System.Windows.Input.ApplicationCommands.Cut">
			<summary> Represents the Cut command. </summary>
			<returns>The command.Default ValuesKey GestureCtrl+XShift+DeleteUI TextCutWM_APPCOMMANDAPPCOMAND_CUT</returns>
		</member>
		<member name="P:System.Windows.Input.ApplicationCommands.Delete">
			<summary> Represents the Delete command. </summary>
			<returns>The command.Default ValuesKey GestureDelUI TextDeleteWM_APPCOMMANDAPPCOMAND_DELETE</returns>
		</member>
		<member name="P:System.Windows.Input.ApplicationCommands.Find">
			<summary> Represents the Find command. </summary>
			<returns>The command.Default ValuesKey GestureCtrl+FUI TextFindWM_APPCOMMANDAPPCOMAND_FIND</returns>
		</member>
		<member name="P:System.Windows.Input.ApplicationCommands.Help">
			<summary> Represents the Help command. </summary>
			<returns>The command.Default ValuesKey GestureF1UI TextHelpWM_APPCOMMANDAPPCOMAND_HELP</returns>
		</member>
		<member name="P:System.Windows.Input.ApplicationCommands.New">
			<summary> Represents the New command. </summary>
			<returns>The command.Default ValuesKey GestureCtrl+NUI TextNewWM_APPCOMMANDAPPCOMAND_NEW</returns>
		</member>
		<member name="P:System.Windows.Input.ApplicationCommands.Open">
			<summary> Represents the Open command. </summary>
			<returns>The command.Default ValuesKey GestureCtrl+OUI TextOpenWM_APPCOMMANDAPPCOMAND_OPEN</returns>
		</member>
		<member name="P:System.Windows.Input.ApplicationCommands.Paste">
			<summary> Represents the Paste command. </summary>
			<returns>The command.Default ValuesKey GestureCtrl+VShift+InsertUI TextPasteWM_APPCOMMANDAPPCOMAND_PASTE</returns>
		</member>
		<member name="P:System.Windows.Input.ApplicationCommands.Print">
			<summary> Represents the Print command. </summary>
			<returns>The command.Default ValuesKey GestureCtrl+PUI TextPrintWM_APPCOMMANDAPPCOMAND_PRINT</returns>
		</member>
		<member name="P:System.Windows.Input.ApplicationCommands.PrintPreview">
			<summary> Represents the Print Preview command. </summary>
			<returns>The command.Default ValuesKey GestureCtrl+F2UI TextPrint PreviewWM_APPCOMMANDn/a</returns>
		</member>
		<member name="P:System.Windows.Input.ApplicationCommands.Properties">
			<summary>Represents the Properties command. </summary>
			<returns>The command.Default ValuesKey GestureF4UI TextPropertiesWM_APPCOMMANDn/a</returns>
		</member>
		<member name="P:System.Windows.Input.ApplicationCommands.Redo">
			<summary> Represents the Redo command. </summary>
			<returns>The Command.Default ValuesKey GestureCtrl+YUI TextRedoWM_APPCOMMANDAPPCOMMAND_REDO</returns>
		</member>
		<member name="P:System.Windows.Input.ApplicationCommands.Replace">
			<summary> Represents the Replace command. </summary>
			<returns>The Command.Default ValuesKey GestureCtrl+HUI TextReplaceWM_APPCOMMANDn/a</returns>
		</member>
		<member name="P:System.Windows.Input.ApplicationCommands.Save">
			<summary> Represents the Save command. </summary>
			<returns>The Command.Default ValuesKey GestureCtrl+SUI TextSaveWM_APPCOMMANDAPPCOMMAND_SAVE</returns>
		</member>
		<member name="P:System.Windows.Input.ApplicationCommands.SaveAs">
			<summary> Represents the Save As command. </summary>
			<returns>The Command.Default ValuesKey GestureCtrl+HUI TextSave AsWM_APPCOMMANDn/a</returns>
		</member>
		<member name="P:System.Windows.Input.ApplicationCommands.SelectAll">
			<summary>Represents the Select All command. </summary>
			<returns>The Command.Default ValuesKey GestureCtrl+AUI TextSelect AllWM_APPCOMMANDn/a</returns>
		</member>
		<member name="P:System.Windows.Input.ApplicationCommands.Stop">
			<summary> Represents the Stop command. </summary>
			<returns>The Command.Default ValuesKey GestureEscUI TextStopWM_APPCOMMANDn/a</returns>
		</member>
		<member name="P:System.Windows.Input.ApplicationCommands.Undo">
			<summary>Represents the Undo command. </summary>
			<returns>The Command.Default ValuesKey GestureCtrl-ZUI TextUndoWM_APPCOMMANDAPPCOMMAND_UNDO</returns>
		</member>
		<member name="T:System.Windows.Input.CanExecuteRoutedEventArgs">
			<summary>Provides data for the <see cref="E:System.Windows.Input.CommandBinding.CanExecute"></see> event.</summary>
		</member>
		<member name="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute">
			<summary>Gets or sets the value which indicates whether the <see cref="T:System.Windows.Input.RoutedCommand"></see> associated with this event can be executed on the command target.</summary>
			<returns>true if the event can be executed on the command target; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command">
			<summary>Gets the command associated with this event.</summary>
			<returns>The command.</returns>
		</member>
		<member name="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter">
			<summary>Gets the generic data parameter of the command.</summary>
			<returns>The command specific data.</returns>
		</member>
		<member name="T:System.Windows.Input.CanExecuteRoutedEventHandler">
			<summary>Represents the method that handles the <see cref="E:System.Windows.Input.CommandBinding.CanExecute"></see> event.</summary>
		</member>
		<member name="T:System.Windows.Input.CaptureMode">
			<summary> An enumeration of the various capture policies. </summary>
		</member>
		<member name="F:System.Windows.Input.CaptureMode.Element">
			<summary> Capture is constrained to a single element. </summary>
		</member>
		<member name="F:System.Windows.Input.CaptureMode.None">
			<summary> No Capture </summary>
		</member>
		<member name="T:System.Windows.Input.CommandBinding">
			<summary>Binds an <see cref="T:System.Windows.Input.ICommand"></see>, such as a <see cref="T:System.Windows.Input.RoutedCommand"></see>, to the event handlers which implement the command. </summary>
		</member>
		<member name="M:System.Windows.Input.CommandBinding.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding"></see> class.</summary>
		</member>
		<member name="E:System.Windows.Input.CommandBinding.CanExecute">
			<summary>Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding"></see> initiates a check to determine whether the command can be executed on the command target.</summary>
		</member>
		<member name="E:System.Windows.Input.CommandBinding.Executed">
			<summary>Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding"></see> executes.</summary>
		</member>
		<member name="E:System.Windows.Input.CommandBinding.PreviewCanExecute">
			<summary>Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding"></see> initiates a check to determine whether the command can be executed on the current command target.</summary>
		</member>
		<member name="E:System.Windows.Input.CommandBinding.PreviewExecuted">
			<summary>Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding"></see> executes.</summary>
		</member>
		<member name="P:System.Windows.Input.CommandBinding.Command">
			<summary>Gets or sets the <see cref="T:System.Windows.Input.ICommand"></see> associated with this <see cref="T:System.Windows.Input.CommandBinding"></see>. </summary>
			<returns>The command associated with this binding.</returns>
		</member>
		<member name="T:System.Windows.Input.CommandBindingCollection">
			<summary>Represents a collection <see cref="T:System.Windows.Input.CommandBinding"></see> objects.</summary>
		</member>
		<member name="M:System.Windows.Input.CommandBindingCollection.#ctor">
			<summary>Creates an instance of a <see cref="T:System.Windows.Input.CommandBindingCollection"></see>. </summary>
		</member>
		<member name="M:System.Windows.Input.CommandBindingCollection.#ctor(System.Collections.IList)">
			<summary>Creates an instance of a <see cref="T:System.Windows.Input.CommandBindingCollection"></see> from the specified array.</summary>
			<param name="commandBindings">The <see cref="T:System.Windows.Input.CommandBinding"></see> array.</param>
		</member>
		<member name="M:System.Windows.Input.CommandBindingCollection.Add(System.Windows.Input.CommandBinding)">
			<summary>Adds the <see cref="T:System.Windows.Input.CommandBinding"></see> object to this collection.</summary>
			<returns>The position into which the <see cref="T:System.Windows.Input.CommandBinding"></see> was inserted.</returns>
			<param name="commandBinding">The <see cref="T:System.Windows.Input.CommandBinding"></see> to add.</param>
		</member>
		<member name="M:System.Windows.Input.CommandBindingCollection.AddRange(System.Collections.ICollection)">
			<summary>Adds the <see cref="T:System.Windows.Input.CommandBinding"></see> items of the given <see cref="T:System.Windows.Input.CommandBindingCollection"></see> to the end of this list. </summary>
			<param name="collection">The ICollection whose elements should be added to the end of the <see cref="T:System.Windows.Input.CommandBindingCollection"></see>.</param>
		</member>
		<member name="M:System.Windows.Input.CommandBindingCollection.Contains(System.Windows.Input.CommandBinding)">
			<summary>Checks whether this <see cref="T:System.Windows.Input.CommandBindingCollection"></see> contains the specified <see cref="T:System.Windows.Input.CommandBinding"></see>. </summary>
			<returns>true if the collection contains the specified item; otherwise, false.</returns>
			<param name="commandBinding">The <see cref="T:System.Windows.Input.CommandBinding"></see> to check.</param>
		</member>
		<member name="M:System.Windows.Input.CommandBindingCollection.CopyTo(System.Windows.Input.CommandBinding[],System.Int32)">
			<summary>Copies the entire <see cref="T:System.Windows.Input.CommandBindingCollection"></see> into an array. </summary>
			<param name="commandBindings">Type-safe <see cref="T:System.Windows.Input.CommandBinding"></see> array.</param>
			<param name="index">Index at which to start copying.</param>
		</member>
		<member name="M:System.Windows.Input.CommandBindingCollection.GetEnumerator">
			<summary>Returns the IEnumerator associated with this collection. </summary>
			<returns>The IEnumerator.</returns>
		</member>
		<member name="M:System.Windows.Input.CommandBindingCollection.IndexOf(System.Windows.Input.CommandBinding)">
			<summary>Returns the index of the first occurrences of the specified <see cref="T:System.Windows.Input.CommandBinding"></see> in this collection. </summary>
			<param name="value">The <see cref="T:System.Windows.Input.CommandBinding"></see> to search fo. </param>
		</member>
		<member name="M:System.Windows.Input.CommandBindingCollection.Insert(System.Int32,System.Windows.Input.CommandBinding)">
			<summary> Insert </summary>
			<param name="commandBinding">The <see cref="T:System.Windows.Input.CommandBinding"></see> to insert.</param>
			<param name="index">The zero-based index at which commandBinding should be inserted. </param>
		</member>
		<member name="M:System.Windows.Input.CommandBindingCollection.Remove(System.Windows.Input.CommandBinding)">
			<summary>Removes the specified <see cref="T:System.Windows.Input.CommandBinding"></see> from this collection.</summary>
			<param name="commandBinding">The <see cref="T:System.Windows.Input.CommandBinding"></see> to remove.</param>
		</member>
		<member name="M:System.Windows.Input.CommandBindingCollection.RemoveAt(System.Int32)">
			<summary>Removes the <see cref="T:System.Windows.Input.CommandBinding"></see> item at the specified index.</summary>
			<param name="index">The zero-based index of the <see cref="T:System.Windows.Input.CommandBinding"></see> to remove.</param>
		</member>
		<member name="P:System.Windows.Input.CommandBindingCollection.Count">
			<summary>Gets the number of elements contained in the <see cref="T:System.Windows.Input.CommandBindingCollection"></see>.</summary>
			<returns>The number of <see cref="T:System.Windows.Input.CommandBinding"></see> objects contained in the <see cref="T:System.Windows.Input.CommandBindingCollection"></see>.</returns>
		</member>
		<member name="P:System.Windows.Input.CommandBindingCollection.IsFixedSize">
			<summary>Gets a value indicating whether the <see cref="T:System.Windows.Input.CommandBindingCollection"></see> has a fixed size. </summary>
			<returns>true if the <see cref="T:System.Windows.Input.CommandBindingCollection"></see> has a fixed size; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Input.CommandBindingCollection.IsReadOnly">
			<summary>Gets a value indicating whether the <see cref="T:System.Windows.Input.CommandBindingCollection"></see> is read-only. </summary>
			<returns>true if the collection is read-only; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Input.CommandBindingCollection.IsSynchronized">
			<summary>Gets a value indicating whether access to the <see cref="T:System.Windows.Input.CommandBindingCollection"></see> is synchronized (thread-safe). </summary>
			<returns>true if the collection is thread-safe; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Input.CommandBindingCollection.Item(System.Int32)">
			<summary>Gets the <see cref="T:System.Windows.Input.CommandBinding"></see> object at the specified index. </summary>
			<returns>The <see cref="T:System.Windows.Input.CommandBinding"></see> object at the specified index.</returns>
			<param name="index">The location with in the <see cref="T:System.Windows.Input.CommandBindingCollection"></see> of the desired <see cref="T:System.Windows.Input.CommandBinding"></see>  object.</param>
		</member>
		<member name="P:System.Windows.Input.CommandBindingCollection.SyncRoot">
			<summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Windows.Input.CommandBindingCollection"></see>.</summary>
			<returns>An object that can be used to synchronize access to the <see cref="T:System.Windows.Input.CommandBindingCollection"></see>.</returns>
		</member>
		<member name="P:System.Windows.Input.CommandBindingCollection.System.Collections.IList.Item(System.Int32)">
			<summary>Gets the <see cref="T:System.Windows.Input.CommandBinding"></see> object at the specified index.</summary>
			<returns>The <see cref="T:System.Windows.Input.CommandBinding"></see> object at the specified index.</returns>
			<param name="index">The location in the index of the desired <see cref="T:System.Windows.Input.CommandBinding"></see> object.</param>
		</member>
		<member name="T:System.Windows.Input.CommandManager">
			<summary>Provides command related utility methods that register <see cref="T:System.Windows.Input.CommandBinding"></see> and <see cref="T:System.Windows.Input.InputBinding"></see> objects for class owners and commands, add and remove command event handlers, and provides services for the handling of querying the status of  command.</summary>
		</member>
		<member name="E:System.Windows.Input.CommandManager.RequerySuggested">
			<summary>Occurs when the <see cref="T:System.Windows.Input.CommandManager"></see> detects conditions that would change the ability of a command to execute.</summary>
		</member>
		<member name="E:System.Windows.Input.CommandManager.CanExecute">
			<summary>Occurs when the <see cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)"></see> method on the <see cref="T:System.Windows.Input.RoutedCommand"></see> is called and the <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute"></see> event was not handled.</summary>
		</member>
		<member name="E:System.Windows.Input.CommandManager.Executed">
			<summary>Occurs when the <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)"></see> method on the <see cref="T:System.Windows.Input.RoutedCommand"></see> is called and the <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted"></see> event was not handled.</summary>
		</member>
		<member name="E:System.Windows.Input.CommandManager.PreviewCanExecute">
			<summary>Occurs when the <see cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)"></see> method on the <see cref="T:System.Windows.Input.RoutedCommand"></see> is called.</summary>
		</member>
		<member name="E:System.Windows.Input.CommandManager.PreviewExecuted">
			<summary>Occurs when the <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)"></see> method on the <see cref="T:System.Windows.Input.RoutedCommand"></see> is called.</summary>
		</member>
		<member name="F:System.Windows.Input.CommandManager.CanExecuteEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.CommandManager.CanExecute"></see> GTMT#attached event.</summary>
		</member>
		<member name="F:System.Windows.Input.CommandManager.ExecutedEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.CommandManager.Executed"></see> GTMT#attached event.</summary>
		</member>
		<member name="F:System.Windows.Input.CommandManager.PreviewCanExecuteEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute"></see> GTMT#attached event.</summary>
		</member>
		<member name="F:System.Windows.Input.CommandManager.PreviewExecutedEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted"></see> GTMT#attached event.</summary>
		</member>
		<member name="M:System.Windows.Input.CommandManager.InvalidateRequerySuggested">
			<summary>Forces the <see cref="T:System.Windows.Input.CommandManager"></see> to raise the <see cref="E:System.Windows.Input.CommandManager.RequerySuggested"></see> event.</summary>
		</member>
		<member name="M:System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)">
			<summary>Registers a <see cref="T:System.Windows.Input.CommandBinding"></see> with the specified Type. </summary>
			<param name="type">The class with which to register commandBinding.</param>
			<param name="commandBinding">The command binding to register.</param>
		</member>
		<member name="M:System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)">
			<summary>Registers an <see cref="T:System.Windows.Input.InputBinding"></see> with the specified Type. </summary>
			<param name="type">The Type with which to register inputBinding.</param>
			<param name="inputBinding">The input binding to register.</param>
		</member>
		<member name="T:System.Windows.Input.ComponentCommands">
			<summary>Provides a standard set of component related commands.</summary>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.ExtendSelectionDown">
			<summary>Represents the Extended Selection Down command. </summary>
			<returns>The command.Default ValuesKey GestureShift+DownUI TextExtend Selection DownWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.ExtendSelectionLeft">
			<summary> Represents the Extend Selection Left command. </summary>
			<returns>The command.Default ValuesKey GestureShift+LeftUI TextExtend Selection LeftWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.ExtendSelectionRight">
			<summary> Represents the Extend Selection Right command. </summary>
			<returns>The command.Default ValuesKey GestureShift+RightUI TextExtend Selection RightWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.ExtendSelectionUp">
			<summary> Represents the Extend Selection Up command. </summary>
			<returns>The command.Default ValuesKey GestureShift+UpUI TextExtend Selection UpWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.MoveDown">
			<summary> Represents the Move Down command. </summary>
			<returns>The command.Default ValuesKey GestureDownUI TextMove DownWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.MoveFocusBack">
			<summary> Represents the Move Focus Back command. </summary>
			<returns>The command.Default ValuesKey GestureCtrl+LeftUI TextMove Focus BackWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.MoveFocusDown">
			<summary> Represents the Move Focus Down command. </summary>
			<returns>The command.Default ValuesKey GestureCtrl+DownUI TextMove Focus DownWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.MoveFocusForward">
			<summary> Represents the Move Focus Forward command. </summary>
			<returns>The command.Default ValuesKey GestureCtrl+RightUI TextMove Focus ForwardWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.MoveFocusPageDown">
			<summary> Represents the Move Focus Page Down command. </summary>
			<returns>The command.Default ValuesKey GestureCtrl+PageDownUI TextMove Focus Page DownWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.MoveFocusPageUp">
			<summary> Represents the Move Focus Page Up command. </summary>
			<returns>The command.Default ValuesKey GestureCtrl+PageUpUI TextMove Focus Page UpWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.MoveFocusUp">
			<summary> Represents the Move Focus Up command. </summary>
			<returns>The command.Default ValuesKey GestureCtrl+UpUI TextMove Focus UpWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.MoveLeft">
			<summary> Represents the Move Left command. </summary>
			<returns>The command.Default ValuesKey GestureLeftUI TextMove LeftWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.MoveRight">
			<summary> Represents the Move Right command. </summary>
			<returns>The command.Default ValuesKey GestureRightUI TextMove RightWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.MoveToEnd">
			<summary> Represents the Move To End command. </summary>
			<returns>The command.Default ValuesKey GestureEndUI TextMove To EndWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.MoveToHome">
			<summary> Represents the Move To Home command. </summary>
			<returns>The command.Default ValuesKey GestureHomeUI TextMove To HomeWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.MoveToPageDown">
			<summary> Represents the Move To Page Down command. </summary>
			<returns>The command.Default ValuesKey GesturePageDownUI TextMove To Page DownWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.MoveToPageUp">
			<summary> Represents the Move To Page Up command. </summary>
			<returns>The command.Default ValuesKey GesturePageUpUI TextMove To Page UpWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.MoveUp">
			<summary> Represents the Move Up command. </summary>
			<returns>The command.Default ValuesKey GestureUpUI TextMove UpWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.ScrollByLine">
			<summary> Represents the Scroll By Line command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture definedMouse GestureUI TextScroll By LineWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.ScrollPageDown">
			<summary> Represents the Scroll Page Down command. </summary>
			<returns>The command.Default ValuesKey GesturePageDownUI TextScroll Page DownWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.ScrollPageLeft">
			<summary>Represents the Scroll Page Left command.</summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextScroll Page LeftWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.ScrollPageRight">
			<summary>Represents the Scroll Page Right command.</summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextScroll Page RightWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.ScrollPageUp">
			<summary> Represents the Scroll Page Up command. </summary>
			<returns>The command.Default ValuesKey GesturePageUpUI TextScroll Page UpWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.SelectToEnd">
			<summary> Represents the Select To End command. </summary>
			<returns>The command.Default ValuesKey GestureShift+EndUI TextSelect To EndWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.SelectToHome">
			<summary> Represents the Select To Home command. </summary>
			<returns>The command.Default ValuesKey GestureShift+HomeUI TextSelect To HomeWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.SelectToPageDown">
			<summary> Represents the Select To Page Down command. </summary>
			<returns>The command.Default ValuesKey GestureShift+PageDownUI TextSelect To PageDownWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.ComponentCommands.SelectToPageUp">
			<summary>Represents the Select To Page Up command. </summary>
			<returns>The command.Default ValuesKey GestureShift+PageUpUI TextSelect To PageUpWM_APPCOMMAND</returns>
		</member>
		<member name="T:System.Windows.Input.Cursor">
			<summary>Represents a cursor type.</summary>
		</member>
		<member name="M:System.Windows.Input.Cursor.#ctor(System.IO.Stream)">
			<summary> nitializes a new instance of the <see cref="T:System.Windows.Input.Cursor"></see> class from a Stream. </summary>
			<param name="cursorStream">The Stream that contains the cursor.</param>
		</member>
		<member name="M:System.Windows.Input.Cursor.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.Cursor"></see> class from an .ani or a .cur file. </summary>
			<param name="cursorFile">The file that contains the cursor.</param>
		</member>
		<member name="M:System.Windows.Input.Cursor.Dispose">
			<summary>Releases the resources used by the <see cref="T:System.Windows.Input.Cursor"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Input.Cursor.ToString">
			<summary>Returns the string representation of the <see cref="T:System.Windows.Input.Cursor"></see>. </summary>
			<returns>The name of the cursor.</returns>
		</member>
		<member name="T:System.Windows.Input.CursorConverter">
			<summary> Provides a type converter to convert a Cursor to and from a string. </summary>
		</member>
		<member name="M:System.Windows.Input.CursorConverter.#ctor">
			<summary> Initializes a new instance of the CursorConverter class. </summary>
		</member>
		<member name="M:System.Windows.Input.CursorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines whether this converter can convert an object in the given source type to the native type of the converter. </summary>
			<returns>true if this object can perform the conversion; otherwise, false.</returns>
			<param name="context">An ITypeDescriptorContext object that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.</param>
			<param name="sourceType">The type from which you want to convert.</param>
		</member>
		<member name="M:System.Windows.Input.CursorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Returns a value indicating whether this converter can convert an object to the given destination type using the context. </summary>
			<returns>true if this converter can perform the operation; otherwise, false.</returns>
			<param name="context">An ITypeDescriptorContext object that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.</param>
			<param name="destinationType">A Type object that represents the type to which you want to convert.</param>
		</member>
		<member name="M:System.Windows.Input.CursorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary> Converts the given object to the converter's native type. </summary>
			<returns>The converted object.</returns>
			<param name="culture">A CultureInfo object that specifies the culture to represent the object.</param>
			<param name="context">An ITypeDescriptorContext object that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.</param>
			<param name="value">value to convert from</param>
		</member>
		<member name="M:System.Windows.Input.CursorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> Converts the specified object to another type. The most common types to convert are to and from a string object. </summary>
			<returns>The converted object.</returns>
			<param name="culture">A CultureInfo object that specifies the culture to represent the object.</param>
			<param name="context">An ITypeDescriptorContext object that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.</param>
			<param name="destinationType">The type to convert the object to.</param>
			<param name="value">The object to convert.</param>
		</member>
		<member name="T:System.Windows.Input.Cursors">
			<summary>Defines a set of default cursors. </summary>
		</member>
		<member name="P:System.Windows.Input.Cursors.AppStarting">
			<summary>Gets the <see cref="T:System.Windows.Input.Cursor"></see> that appears when an application is starting. </summary>
			<returns>The AppStarting cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.Arrow">
			<summary>Gets the Arrow <see cref="T:System.Windows.Input.Cursor"></see>. </summary>
			<returns>The arrow cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.ArrowCD">
			<summary>Gets the arrow with a compact disk <see cref="T:System.Windows.Input.Cursor"></see>. </summary>
			<returns>The arrowCd cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.Cross">
			<summary>Gets the crosshair <see cref="T:System.Windows.Input.Cursor"></see>. </summary>
			<returns>The Crosshair cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.Hand">
			<summary>Gets a hand <see cref="T:System.Windows.Input.Cursor"></see>. </summary>
			<returns>The hand cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.Help">
			<summary>Gets a help <see cref="T:System.Windows.Input.Cursor"></see> which is a combination of an arrow and a question mark. </summary>
			<returns>The help cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.IBeam">
			<summary>Gets an I-beam <see cref="T:System.Windows.Input.Cursor"></see>, which is used to show where the text cursor appears when the mouse is clicked. </summary>
			<returns>The IBeam cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.No">
			<summary>Gets a <see cref="T:System.Windows.Input.Cursor"></see> with which indicates that a particular region is invalid for a given operation.</summary>
			<returns>The No cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.None">
			<summary>Gets a special cursor that is invisible. </summary>
			<returns>The none cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.Pen">
			<summary>Gets a pen <see cref="T:System.Windows.Input.Cursor"></see>.</summary>
			<returns>The pen cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.ScrollAll">
			<summary>Gets the scroll all <see cref="T:System.Windows.Input.Cursor"></see>.</summary>
			<returns>The scroll all cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.ScrollE">
			<summary>Gets the scroll east <see cref="T:System.Windows.Input.Cursor"></see>.</summary>
			<returns>A scroll east cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.ScrollN">
			<summary>Gets the scroll north <see cref="T:System.Windows.Input.Cursor"></see>.</summary>
			<returns>A scroll north cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.ScrollNE">
			<summary>Gets the scroll northeast cursor.</summary>
			<returns>A scroll northeast <see cref="T:System.Windows.Input.Cursor"></see>.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.ScrollNS">
			<summary>Gets the scroll north/south cursor.</summary>
			<returns>A scroll north/south <see cref="T:System.Windows.Input.Cursor"></see>.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.ScrollNW">
			<summary>Gets a scroll northwest cursor.</summary>
			<returns>The scroll northwest <see cref="T:System.Windows.Input.Cursor"></see>.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.ScrollS">
			<summary>Gets the scroll south <see cref="T:System.Windows.Input.Cursor"></see>.</summary>
			<returns>The scroll south cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.ScrollSE">
			<summary>Gets a south/east scrolling <see cref="T:System.Windows.Input.Cursor"></see>. </summary>
			<returns>The south/east scrolling cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.ScrollSW">
			<summary>Gets the scroll southwest <see cref="T:System.Windows.Input.Cursor"></see>.</summary>
			<returns>The scroll southwest cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.ScrollW">
			<summary>Gets the scroll west <see cref="T:System.Windows.Input.Cursor"></see>.</summary>
			<returns>The scroll west cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.ScrollWE">
			<summary>Gets a west/east scrolling <see cref="T:System.Windows.Input.Cursor"></see>.</summary>
			<returns>A west/east scrolling cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.SizeAll">
			<summary>Gets a four-headed sizing <see cref="T:System.Windows.Input.Cursor"></see>, which consists of four joined arrows that point north, south, east, and west.  </summary>
			<returns>A four-headed sizing cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.SizeNESW">
			<summary>Gets a two-headed northeast/southwest sizing <see cref="T:System.Windows.Input.Cursor"></see>. </summary>
			<returns>A two-headed northeast/southwest sizing cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.SizeNS">
			<summary>Gets a two-headed north/south sizing <see cref="T:System.Windows.Input.Cursor"></see>. </summary>
			<returns>A two-headed north/south sizing cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.SizeNWSE">
			<summary>Gets a two-headed northwest/southeast sizing <see cref="T:System.Windows.Input.Cursor"></see>. </summary>
			<returns>A two-headed northwest/southwest sizing cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.SizeWE">
			<summary>Gets a two-headed west/east sizing <see cref="T:System.Windows.Input.Cursor"></see>.</summary>
			<returns>A two-headed west/east sizing cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.UpArrow">
			<summary>Gets an up arrow <see cref="T:System.Windows.Input.Cursor"></see>, which is typically used to identify an insertion point.  </summary>
			<returns>An up arrow cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.Cursors.Wait">
			<summary>Specifies a wait (or hourglass) <see cref="T:System.Windows.Input.Cursor"></see>. </summary>
			<returns>A wait cursor.</returns>
		</member>
		<member name="T:System.Windows.Input.CursorType">
			<summary>Specifies the supported cursor types. </summary>
		</member>
		<member name="T:System.Windows.Input.ExecutedRoutedEventArgs">
			<summary>Provides data for the <see cref="E:System.Windows.Input.CommandBinding.Executed"></see> event.</summary>
		</member>
		<member name="P:System.Windows.Input.ExecutedRoutedEventArgs.Command">
			<summary>Gets the command that was invoked and is being routed.</summary>
			<returns>The command associated with this event.  </returns>
		</member>
		<member name="P:System.Windows.Input.ExecutedRoutedEventArgs.Parameter">
			<summary>Gets the generic data parameter of the command.</summary>
			<returns>The command specific data.</returns>
		</member>
		<member name="T:System.Windows.Input.ExecutedRoutedEventHandler">
			<summary>Represents the method that will handle the Executed event of a <see cref="T:System.Windows.Input.CommandBinding"></see>.</summary>
		</member>
		<member name="T:System.Windows.Input.FocusManager">
			<summary>Provides a set of static methods and properties for working with and determining the FocusedElement and FocusScope. </summary>
		</member>
		<member name="F:System.Windows.Input.FocusManager.IsFocusScopeProperty">
			<summary> The DependencyProperty for the IsFocusScope property. This property is used to mark the special containers (like Window, Menu) so they can keep track of the FocusedElement element inside the container. Once focus is set on the container - it is delegated to the FocusedElement element </summary>
			<returns>Default Value: false</returns>
		</member>
		<member name="M:System.Windows.Input.FocusManager.GetFocusedElement(System.Windows.DependencyObject)">
			<summary>Gets the FocusedElement. </summary>
			<returns>The element with focus.</returns>
		</member>
		<member name="M:System.Windows.Input.FocusManager.GetIsFocusScope(System.Windows.DependencyObject)">
			<summary>Determines whether or not the the specified <see cref="T:System.Windows.DependencyObject"></see> is a FocusScope.</summary>
			<returns>true if the if IsFocusScope is set.</returns>
			<param name="element">The element from which to read the attached property.</param>
		</member>
		<member name="M:System.Windows.Input.FocusManager.SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)">
			<summary>Sets the specified <see cref="T:System.Windows.DependencyObject"></see> as a FocusScope. </summary>
			<param name="element">The element to set as a FocusScope.</param>
			<param name="value">The property value to set</param>
		</member>
		<member name="T:System.Windows.Input.ICommand">
			<summary>Interface for defining a command.</summary>
		</member>
		<member name="E:System.Windows.Input.ICommand.CanExecuteChanged">
			<summary>Occurs when the ability of the command to execute changes.</summary>
		</member>
		<member name="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
			<summary>Defines the method to be called to determine whether the command can be execute on the current command target.</summary>
			<returns>Returns true if command can be executed; otherwise, false.</returns>
			<param name="parameter">User defined data.  If the command does not require data to be passed, then this object can be set to null.</param>
		</member>
		<member name="M:System.Windows.Input.ICommand.Execute(System.Object)">
			<summary>Defines the method to be called when the command is invoked.</summary>
			<param name="parameter">User defined data.  If the command does not require data to be passed, then this object can be set to null.</param>
		</member>
		<member name="T:System.Windows.Input.ICommandSource">
			<summary>An interface for creating a class that knows how to invoke a command.</summary>
		</member>
		<member name="P:System.Windows.Input.ICommandSource.Command">
			<summary>The Command associated with this command source.</summary>
		</member>
		<member name="P:System.Windows.Input.ICommandSource.CommandParameter">
			<summary>Represents a user defined data value that can be passed when the command is executed.</summary>
		</member>
		<member name="P:System.Windows.Input.ICommandSource.CommandTarget">
			<summary>The object that the command is being executed on.</summary>
		</member>
		<member name="T:System.Windows.Input.IInputLanguageSource">
			<summary>Defines necessary facilities for an object that intends to behave as an input language source.</summary>
		</member>
		<member name="M:System.Windows.Input.IInputLanguageSource.Initialize">
			<summary>Initializes an input language source object.</summary>
		</member>
		<member name="M:System.Windows.Input.IInputLanguageSource.Uninitialize">
			<summary>Un-initializes an input language source object.</summary>
		</member>
		<member name="P:System.Windows.Input.IInputLanguageSource.CurrentInputLanguage">
			<summary>Gets or sets the current input language for this input language source object.</summary>
			<returns>A <see cref="T:System.Globalization.CultureInfo"></see> object representing the current input language for this input language source object.</returns>
		</member>
		<member name="P:System.Windows.Input.IInputLanguageSource.InputLanguageList">
			<summary>Gets a list of input languages supported by this input language source object.</summary>
			<returns>An enumerable object that represents the list of input languages supported by this input language source object.</returns>
		</member>
		<member name="T:System.Windows.Input.ImeConversionModeValues">
			<summary>Describes a mode of input conversion to be performed by an input method.</summary>
		</member>
		<member name="F:System.Windows.Input.ImeConversionModeValues.Alphanumeric">
			<summary>The input method uses alphanumeric conversion mode.</summary>
		</member>
		<member name="F:System.Windows.Input.ImeConversionModeValues.CharCode">
			<summary>The input method uses character code conversion mode.</summary>
		</member>
		<member name="F:System.Windows.Input.ImeConversionModeValues.DoNotCare">
			<summary>The input method does not care what input conversion method is used; the actual conversion method is indeterminate.</summary>
		</member>
		<member name="F:System.Windows.Input.ImeConversionModeValues.Eudc">
			<summary>The input method uses EUDC (end user defined character) conversion mode.</summary>
		</member>
		<member name="F:System.Windows.Input.ImeConversionModeValues.Fixed">
			<summary>The input method uses fixed conversion mode.</summary>
		</member>
		<member name="F:System.Windows.Input.ImeConversionModeValues.FullShape">
			<summary>The input method uses full-shape conversion mode.</summary>
		</member>
		<member name="F:System.Windows.Input.ImeConversionModeValues.Katakana">
			<summary>The input method uses Katakana conversion mode.</summary>
		</member>
		<member name="F:System.Windows.Input.ImeConversionModeValues.Native">
			<summary>The input method uses a native character (Hiragana, Hangul, Chinese) conversion mode.</summary>
		</member>
		<member name="F:System.Windows.Input.ImeConversionModeValues.NoConversion">
			<summary>The input method will not perform any input conversion.</summary>
		</member>
		<member name="F:System.Windows.Input.ImeConversionModeValues.Roman">
			<summary>The input method uses Roman character conversion mode.</summary>
		</member>
		<member name="F:System.Windows.Input.ImeConversionModeValues.Symbol">
			<summary>The input method uses symbol conversion mode.</summary>
		</member>
		<member name="T:System.Windows.Input.ImeSentenceModeValues">
			<summary>Specifies the mode of sentence conversion performed by an input method.</summary>
		</member>
		<member name="F:System.Windows.Input.ImeSentenceModeValues.Automatic">
			<summary>The input method uses the sentence conversion method automatically.</summary>
		</member>
		<member name="F:System.Windows.Input.ImeSentenceModeValues.Conversation">
			<summary>The input method uses conversation-style sentence conversion.</summary>
		</member>
		<member name="F:System.Windows.Input.ImeSentenceModeValues.DoNotCare">
			<summary>The input method does not care what sentence conversion method is used; the actual sentence conversion mode is indeterminate.</summary>
		</member>
		<member name="F:System.Windows.Input.ImeSentenceModeValues.None">
			<summary>The input method does not perform any sentence conversion.</summary>
		</member>
		<member name="F:System.Windows.Input.ImeSentenceModeValues.PhrasePrediction">
			<summary>The input method uses phrase prediction sentence conversion.</summary>
		</member>
		<member name="F:System.Windows.Input.ImeSentenceModeValues.PluralClause">
			<summary>The input method uses plural clause sentence conversion.</summary>
		</member>
		<member name="F:System.Windows.Input.ImeSentenceModeValues.SingleConversion">
			<summary>The input method uses single Kanji/Hanja sentence conversion.</summary>
		</member>
		<member name="T:System.Windows.Input.InputBinding">
			<summary>Represents a command source that binds an <see cref="T:System.Windows.Input.InputGesture"></see> to an <see cref="T:System.Windows.Input.ICommand"></see>, such as a <see cref="T:System.Windows.Input.RoutedCommand"></see>. </summary>
		</member>
		<member name="M:System.Windows.Input.InputBinding.#ctor">
			<summary>Inititializes a new instance of the <see cref="T:System.Windows.Input.InputBinding"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputBinding"></see> class with the specified <see cref="T:System.Windows.Input.ICommand"></see> and <see cref="T:System.Windows.Input.InputGesture"></see>.</summary>
			<param name="command">The command to associate with gesture.</param>
			<param name="gesture">The input gesture to associate with command.</param>
		</member>
		<member name="P:System.Windows.Input.InputBinding.Command">
			<summary>Gets or sets the <see cref="T:System.Windows.Input.ICommand"></see> associated with this binding. </summary>
			<returns>The command.</returns>
		</member>
		<member name="P:System.Windows.Input.InputBinding.CommandParameter">
			<summary>Gets or sets the generic data object which is passed to the handler when the command is invoked.</summary>
			<returns>The parameter.</returns>
		</member>
		<member name="P:System.Windows.Input.InputBinding.CommandTarget">
			<summary>Gets or sets the target of the command; if not set, the <see cref="P:System.Windows.Input.InputBinding.CommandTarget"></see> is the element with keyboard focus.</summary>
			<returns>The target of the command.</returns>
		</member>
		<member name="P:System.Windows.Input.InputBinding.Gesture">
			<summary>Gets or sets the <see cref="T:System.Windows.Input.InputGesture"></see> associated with this binding. </summary>
			<returns>The gesture.</returns>
		</member>
		<member name="T:System.Windows.Input.InputBindingCollection">
			<summary>Represents a collection of <see cref="T:System.Windows.Input.InputBinding"></see> objects. </summary>
		</member>
		<member name="M:System.Windows.Input.InputBindingCollection.#ctor">
			<summary>Creates a new instance of the <see cref="T:System.Windows.Input.InputBindingCollection"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Input.InputBindingCollection.#ctor(System.Collections.IList)">
			<summary>Creates a new instance of the <see cref="T:System.Windows.Input.InputBindingCollection"></see> class using an <see cref="T:System.Windows.Input.InputBinding"></see> array. </summary>
			<param name="inputBindings">The <see cref="T:System.Windows.Input.InputBinding"></see> array.</param>
		</member>
		<member name="M:System.Windows.Input.InputBindingCollection.Add(System.Windows.Input.InputBinding)">
			<summary>Adds an <see cref="T:System.Windows.Input.InputBinding"></see> to this collection. </summary>
			<returns>The position into which the <see cref="T:System.Windows.Input.InputBinding"></see> was added.</returns>
			<param name="inputBinding">The <see cref="T:System.Windows.Input.InputBinding"></see> to add.</param>
		</member>
		<member name="M:System.Windows.Input.InputBindingCollection.AddRange(System.Collections.ICollection)">
			<summary>Adds the <see cref="T:System.Windows.Input.InputBinding"></see> objects of the given <see cref="T:System.Windows.Input.InputBindingCollection"></see> to the end of this collection. </summary>
			<param name="c">The ICollection whose elements should be added to the end of the <see cref="T:System.Windows.Input.InputBindingCollection"></see>.</param>
		</member>
		<member name="M:System.Windows.Input.InputBindingCollection.Contains(System.Windows.Input.InputBinding)">
			<summary>Checks whether this <see cref="T:System.Windows.Input.InputBindingCollection"></see> contains the specified <see cref="T:System.Windows.Input.InputBinding"></see>.</summary>
			<returns>true if key was found; otherwise, false.</returns>
			<param name="key">The <see cref="T:System.Windows.Input.InputBinding"></see> to check.</param>
		</member>
		<member name="M:System.Windows.Input.InputBindingCollection.CopyTo(System.Windows.Input.InputBinding[],System.Int32)">
			<summary>Copies this <see cref="T:System.Windows.Input.InputBindingCollection"></see> starting at index into an array. </summary>
			<param name="inputBindings">Type-safe <see cref="T:System.Windows.Input.InputBinding"></see> array.</param>
			<param name="index">Index at which to start copying.</param>
		</member>
		<member name="M:System.Windows.Input.InputBindingCollection.GetEnumerator">
			<summary>Returns an enumerator for this collection. </summary>
			<returns>An enumerator of type IEnumerator.</returns>
		</member>
		<member name="M:System.Windows.Input.InputBindingCollection.IndexOf(System.Windows.Input.InputBinding)">
			<summary>Searches for the specified <see cref="T:System.Windows.Input.InputBinding"></see> in the <see cref="T:System.Windows.Input.InputBindingCollection"></see>.</summary>
			<returns>The index of the first occurrence of value within the entire <see cref="T:System.Windows.Input.InputBindingCollection"></see> if found; otherwise, -1.</returns>
			<param name="value">The object to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Input.InputBindingCollection.Insert(System.Int32,System.Windows.Input.InputBinding)">
			<summary>Inserts an <see cref="T:System.Windows.Input.InputBinding"></see> into the <see cref="T:System.Windows.Input.InputBindingCollection"></see> at the specified index. </summary>
			<param name="inputBinding">The <see cref="T:System.Windows.Input.InputBinding"></see> to insert.</param>
			<param name="index">Index at which to insert inputBinding.</param>
		</member>
		<member name="M:System.Windows.Input.InputBindingCollection.Remove(System.Windows.Input.InputBinding)">
			<summary>Removes the specified <see cref="T:System.Windows.Input.InputBinding"></see> from the <see cref="T:System.Windows.Input.InputBindingCollection"></see>. </summary>
			<param name="inputBinding">The <see cref="T:System.Windows.Input.InputBinding"></see> to remove.</param>
		</member>
		<member name="M:System.Windows.Input.InputBindingCollection.RemoveAt(System.Int32)">
			<summary>Removes the <see cref="T:System.Windows.Input.InputBinding"></see> from the <see cref="T:System.Windows.Input.InputBindingCollection"></see> at the specified index. </summary>
			<param name="index">Index at which the <see cref="T:System.Windows.Input.InputBinding"></see> will be removed.</param>
		</member>
		<member name="P:System.Windows.Input.InputBindingCollection.Count">
			<summary>Gets the number of <see cref="T:System.Windows.Input.InputBinding"></see> items in this collection. </summary>
			<returns>The number of items in the collection.</returns>
		</member>
		<member name="P:System.Windows.Input.InputBindingCollection.IsFixedSize">
			<summary>Gets a value that indicates whether the <see cref="T:System.Windows.Input.InputBindingCollection"></see> has a fixed size. </summary>
			<returns>true if the collection has a fixed size; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Input.InputBindingCollection.IsReadOnly">
			<summary>Gets a value that indicates whether the <see cref="T:System.Windows.Input.InputBindingCollection"></see> is read-only. </summary>
			<returns>true if read-only; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Input.InputBindingCollection.IsSynchronized">
			<summary>Gets a value that indicates whether the collection is guaranteed to be thread-safe. </summary>
			<returns>true if the collection is thread-safe; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Input.InputBindingCollection.Item(System.Int32)">
			<summary>Gets or sets the specified <see cref="T:System.Windows.Input.InputBinding"></see> at the specified index. </summary>
			<returns>The <see cref="T:System.Windows.Input.InputBinding"></see> at the specified index.</returns>
			<param name="index">The zero-based index of the <see cref="T:System.Windows.Input.InputBinding"></see> to get or set.</param>
		</member>
		<member name="P:System.Windows.Input.InputBindingCollection.SyncRoot">
			<summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Windows.Input.InputBindingCollection"></see>. </summary>
			<returns>The object that can be used to synchronize access to the collection.</returns>
		</member>
		<member name="T:System.Windows.Input.InputDevice">
			<summary> Represents the base class for all input devices. </summary>
		</member>
		<member name="M:System.Windows.Input.InputDevice.#ctor">
			<summary> Initializes a new instance of the InputDevice class. </summary>
		</member>
		<member name="P:System.Windows.Input.InputDevice.Target">
			<summary> Gets the element that receives input from this device. </summary>
			<returns>The element that receives input.</returns>
		</member>
		<member name="T:System.Windows.Input.InputEventArgs">
			<summary>Provides data for input related events. </summary>
		</member>
		<member name="M:System.Windows.Input.InputEventArgs.#ctor(System.Windows.Input.InputDevice,System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputEventArgs"></see> class. </summary>
			<param name="timestamp">The time when the input occurred.</param>
			<param name="inputDevice">The input device to associate with this event.</param>
		</member>
		<member name="M:System.Windows.Input.InputEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
			<summary> Calls the type-specific event handler on the target. </summary>
			<param name="genericTarget">The target on which the handler is invoked.</param>
			<param name="genericHandler">The generic handler to invoke.</param>
		</member>
		<member name="P:System.Windows.Input.InputEventArgs.Device">
			<summary>Gets or sets the input device that initiated this event. </summary>
			<returns>The input device associated with this event.</returns>
		</member>
		<member name="P:System.Windows.Input.InputEventArgs.Timestamp">
			<summary>Gets the timestamp that indicates when this event occurred. </summary>
			<returns>The timestamp.</returns>
		</member>
		<member name="T:System.Windows.Input.InputGesture">
			<summary>Abstract class that provides generic means for input device gestures.</summary>
		</member>
		<member name="M:System.Windows.Input.InputGesture.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputGesture"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Input.InputGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)">
			<summary>Determines whether <see cref="T:System.Windows.Input.InputGesture"></see> matches the input associated with the specified <see cref="T:System.Windows.Input.InputEventArgs"></see> object.</summary>
			<param name="inputEventArgs">The input event data to compare this gesture to.</param>
		</member>
		<member name="T:System.Windows.Input.InputGestureCollection">
			<summary> Represents a collection of InputGesture objects. </summary>
		</member>
		<member name="M:System.Windows.Input.InputGestureCollection.#ctor">
			<summary> Initializes a new instance of the InputGestureCollection. </summary>
		</member>
		<member name="M:System.Windows.Input.InputGestureCollection.#ctor(System.Collections.IList)">
			<summary> Initializes a new instance of the InputGestureCollection that contains elements copied from the specified IList collection. </summary>
			<param name="inputGestures">The IList collection whose elements are copied to the new InputGestureCollection.</param>
		</member>
		<member name="M:System.Windows.Input.InputGestureCollection.Add(System.Windows.Input.InputGesture)">
			<summary>Adds the specified InputGesture to the end of the collection. </summary>
			<returns>The InputGestureCollection index at which inputGesture was inserted.</returns>
			<param name="inputGesture">The InputGesture to add to the collection.</param>
		</member>
		<member name="M:System.Windows.Input.InputGestureCollection.AddRange(System.Collections.ICollection)">
			<summary> Adds the elements of the given ICollection to the end of this InputGestureCollection. </summary>
			<param name="collection">The ICollection whose elements should be added to the end of the InputGestureCollection.</param>
		</member>
		<member name="M:System.Windows.Input.InputGestureCollection.Contains(System.Windows.Input.InputGesture)">
			<summary> Determines whether the specified InputGesture is in the collection. </summary>
			<returns>true if found; otherwise, false.</returns>
			<param name="key">The InputGesture to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Input.InputGestureCollection.CopyTo(System.Windows.Input.InputGesture[],System.Int32)">
			<summary> Copies the InputGestureCollection to a one-dimensional array. </summary>
			<param name="index">The zero-based index in inputGestures at which copying begins.</param>
			<param name="inputGestures">The one-dimensional array that is the destination of the objects copied from the InputGestureCollection.</param>
		</member>
		<member name="M:System.Windows.Input.InputGestureCollection.GetEnumerator">
			<summary> Returns an enumerator for this collection. </summary>
			<returns>An enumerator of type IEnumerator.</returns>
		</member>
		<member name="M:System.Windows.Input.InputGestureCollection.IndexOf(System.Windows.Input.InputGesture)">
			<summary>Searches for the specified InputGesture in the InputGestureCollection.</summary>
			<returns>The index of the first occurrence of value within the entire collection, if found; otherwise,  -1. </returns>
			<param name="value">The object to locate in the collection.     </param>
		</member>
		<member name="M:System.Windows.Input.InputGestureCollection.Insert(System.Int32,System.Windows.Input.InputGesture)">
			<summary> Inserts an InputGesture into the InputGestureCollection at the specified index. </summary>
			<param name="inputGesture">InputGesture value to insert.</param>
			<param name="index">Index at which to insert inputGesture.</param>
		</member>
		<member name="M:System.Windows.Input.InputGestureCollection.Remove(System.Windows.Input.InputGesture)">
			<summary> Removes the specified InputGesture from the InputGestureCollection. </summary>
			<param name="inputGesture">The InputGesture to remove.</param>
		</member>
		<member name="M:System.Windows.Input.InputGestureCollection.RemoveAt(System.Int32)">
			<summary> Removes the specified InputGesture from the InputGestureCollection at the specified index. </summary>
			<param name="index">Index at which the InputGesture will be removed.</param>
		</member>
		<member name="P:System.Windows.Input.InputGestureCollection.Count">
			<summary> Gets the number of InputGesture items in the InputGestureCollection. </summary>
			<returns>The number of items in the collection.</returns>
		</member>
		<member name="P:System.Windows.Input.InputGestureCollection.IsFixedSize">
			<summary> Gets a value that indicates whether the InputGestureCollection has fixed size. </summary>
			<returns>true if the collection has fixed size; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Input.InputGestureCollection.IsReadOnly">
			<summary> Gets a value that indicates whether the InputGestureCollection is read-only. </summary>
			<returns>true if read-only; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Input.InputGestureCollection.IsSynchronized">
			<summary> Gets a value that indicates whether the collection is guaranteed to be thread-safe. </summary>
			<returns>true if the collection is thread-safe; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Input.InputGestureCollection.SyncRoot">
			<summary> Gets an object that can be used to synchronize access to the InputGestureCollection. </summary>
			<returns>The object that can be used to synchronize access to the collection.</returns>
		</member>
		<member name="T:System.Windows.Input.InputLanguageChangedEventArgs">
			<summary>Contains arguments associated with the <see cref="E:System.Windows.Input.InputLanguageManager.InputLanguageChanged"></see> event.</summary>
		</member>
		<member name="M:System.Windows.Input.InputLanguageChangedEventArgs.#ctor(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputLanguageChangedEventArgs"></see> class.</summary>
			<param name="newLanguageId">A <see cref="T:System.Globalization.CultureInfo"></see> object representing a new current input language.</param>
			<param name="previousLanguageId">A <see cref="T:System.Globalization.CultureInfo"></see> object representing the previous current input language.</param>
		</member>
		<member name="T:System.Windows.Input.InputLanguageChangingEventArgs">
			<summary>Contains arguments associated with the <see cref="E:System.Windows.Input.InputLanguageManager.InputLanguageChanging"></see> event.</summary>
		</member>
		<member name="M:System.Windows.Input.InputLanguageChangingEventArgs.#ctor(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputLanguageChangingEventArgs"></see> class.</summary>
			<param name="newLanguageId">A <see cref="T:System.Globalization.CultureInfo"></see> object representing a new current input language.</param>
			<param name="previousLanguageId">A <see cref="T:System.Globalization.CultureInfo"></see> object representing the previous current input language.</param>
		</member>
		<member name="P:System.Windows.Input.InputLanguageChangingEventArgs.Rejected">
			<summary>Gets or sets a value that indicates whether the initiated change of input language should be accepted or rejected.</summary>
			<returns>true to reject the initiated change of input language; otherwise, false.</returns>
		</member>
		<member name="T:System.Windows.Input.InputLanguageEventArgs">
			<summary>Provides a base class for arguments for events dealing with a change in input language.  This is an abstract class.</summary>
		</member>
		<member name="M:System.Windows.Input.InputLanguageEventArgs.#ctor(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
			<summary>Initializes base class values for a new instance of a deriving class.</summary>
			<param name="newLanguageId">A <see cref="T:System.Globalization.CultureInfo"></see> object representing a new current input language.</param>
			<param name="previousLanguageId">A <see cref="T:System.Globalization.CultureInfo"></see> object representing the previous current input language.</param>
		</member>
		<member name="P:System.Windows.Input.InputLanguageEventArgs.NewLanguage">
			<summary>Gets a <see cref="T:System.Globalization.CultureInfo"></see> object representing the new current input language.</summary>
			<returns>A <see cref="T:System.Globalization.CultureInfo"></see> object representing the new current input language.</returns>
		</member>
		<member name="P:System.Windows.Input.InputLanguageEventArgs.PreviousLanguage">
			<summary>Gets a <see cref="T:System.Globalization.CultureInfo"></see> object representing the previous current input language.</summary>
			<returns>A <see cref="T:System.Globalization.CultureInfo"></see> object representing the previous current input language.</returns>
		</member>
		<member name="T:System.Windows.Input.InputLanguageEventHandler">
			<summary>Delegate for events associated with changes to input language, including the <see cref="E:System.Windows.Input.InputLanguageManager.InputLanguageChanged"></see> and <see cref="E:System.Windows.Input.InputLanguageManager.InputLanguageChanging"></see> events.</summary>
		</member>
		<member name="T:System.Windows.Input.InputLanguageManager">
			<summary>Provides facilities for managing input languages in TLA#tla_winclient.</summary>
		</member>
		<member name="E:System.Windows.Input.InputLanguageManager.InputLanguageChanged">
			<summary>Occurs when a change of input language is completed.</summary>
		</member>
		<member name="E:System.Windows.Input.InputLanguageManager.InputLanguageChanging">
			<summary>Occurs when a change of input language is initiated.</summary>
		</member>
		<member name="F:System.Windows.Input.InputLanguageManager.InputLanguageProperty">
			<summary>Identifies the <see cref="P:System.Windows.Input.InputLanguageManager.InputLanguage"></see>  GTMT#attached property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Input.InputLanguageManager.InputLanguage"></see> attached property.</returns>
		</member>
		<member name="F:System.Windows.Input.InputLanguageManager.RestoreInputLanguageProperty">
			<summary>Identifies the <see cref="P:System.Windows.Input.InputLanguageManager.RestoreInputLanguage"></see>  GTMT#attached property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Input.InputLanguageManager.RestoreInputLanguage"></see> attached property.</returns>
		</member>
		<member name="M:System.Windows.Input.InputLanguageManager.GetInputLanguage(System.Windows.DependencyObject)">
			<summary>Returns the value of the <see cref="P:System.Windows.Input.InputLanguageManager.InputLanguage"></see>  GTMT#attached property for a specified dependency object.</summary>
			<returns>A <see cref="T:System.Globalization.CultureInfo"></see> object representing the input language for the specified dependency object.</returns>
			<param name="target">The dependency object for which to retrieve the input language.</param>
			<exception cref="T:System.ArgumentNullException">Raised when target is null.</exception>
		</member>
		<member name="M:System.Windows.Input.InputLanguageManager.GetRestoreInputLanguage(System.Windows.DependencyObject)">
			<summary>Returns the value of <see cref="P:System.Windows.Input.InputLanguageManager.RestoreInputLanguage"></see>  GTMT#attached property for a specified dependency object.</summary>
			<returns>The current value of <see cref="P:System.Windows.Input.InputLanguageManager.RestoreInputLanguage"></see> for the specified dependency object.</returns>
			<param name="target">The dependency object for which to retrieve the value of <see cref="P:System.Windows.Input.InputLanguageManager.RestoreInputLanguage"></see>.</param>
			<exception cref="T:System.ArgumentNullException">Raised when target is null.</exception>
		</member>
		<member name="M:System.Windows.Input.InputLanguageManager.RegisterInputLanguageSource(System.Windows.Input.IInputLanguageSource)">
			<summary>Registers an input language source with the <see cref="T:System.Windows.Input.InputLanguageManager"></see>.</summary>
			<param name="inputLanguageSource">An object that specifies the input language to register.  This object must implement the <see cref="T:System.Windows.Input.IInputLanguageSource"></see> interface.</param>
			<exception cref="T:System.ArgumentNullException">Raised when inputLanguageSource is null.</exception>
		</member>
		<member name="M:System.Windows.Input.InputLanguageManager.ReportInputLanguageChanged(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
			<summary>Report the completion of a change of input language to the <see cref="T:System.Windows.Input.InputLanguageManager"></see>.</summary>
			<param name="newLanguageId">A <see cref="T:System.Globalization.CultureInfo"></see> object representing the new input language.</param>
			<param name="previousLanguageId">A <see cref="T:System.Globalization.CultureInfo"></see> object representing the previous input language.</param>
			<exception cref="T:System.ArgumentNullException">Raised when newLanguageId or previousLanguageId is null.</exception>
		</member>
		<member name="M:System.Windows.Input.InputLanguageManager.ReportInputLanguageChanging(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
			<summary>Report the initiation of a change of input language to the <see cref="T:System.Windows.Input.InputLanguageManager"></see>.</summary>
			<returns>true to indicate that the reported change of input language was accepted; otherwise, false.</returns>
			<param name="newLanguageId">A <see cref="T:System.Globalization.CultureInfo"></see> object representing the new input language.</param>
			<param name="previousLanguageId">A <see cref="T:System.Globalization.CultureInfo"></see> object representing the previous input language.</param>
			<exception cref="T:System.ArgumentNullException">Raised when newLanguageId or previousLanguageId is null.</exception>
		</member>
		<member name="M:System.Windows.Input.InputLanguageManager.SetInputLanguage(System.Windows.DependencyObject,System.Globalization.CultureInfo)">
			<summary>Sets the value of the <see cref="P:System.Windows.Input.InputLanguageManager.InputLanguage"></see>GTMT#attached property on the specified dependency object.</summary>
			<param name="target">The dependency object on which to set the <see cref="P:System.Windows.Input.InputLanguageManager.InputLanguage"></see> attached property.</param>
			<param name="inputLanguage">A <see cref="T:System.Globalization.CultureInfo"></see> object representing the new value for the <see cref="P:System.Windows.Input.InputLanguageManager.InputLanguage"></see> attached property.</param>
			<exception cref="T:System.ArgumentNullException">Raised when target is null.</exception>
		</member>
		<member name="M:System.Windows.Input.InputLanguageManager.SetRestoreInputLanguage(System.Windows.DependencyObject,System.Boolean)">
			<summary>Sets the value of the <see cref="P:System.Windows.Input.InputLanguageManager.RestoreInputLanguage"></see>GTMT#dependency property on the specified dependency object.</summary>
			<param name="target">The dependency object for which to set the value of <see cref="P:System.Windows.Input.InputLanguageManager.RestoreInputLanguage"></see>.</param>
			<param name="restore">A Boolean value to set the <see cref="P:System.Windows.Input.InputLanguageManager.RestoreInputLanguage"></see> attached property to.</param>
			<exception cref="T:System.ArgumentNullException">Raised when target is null.</exception>
		</member>
		<member name="P:System.Windows.Input.InputLanguageManager.AvailableInputLanguages">
			<summary>Gets an enumerator for currently available input languages.</summary>
			<returns>An enumerator for currently available input languages, or null if no input languages are available.This property has no default value.</returns>
		</member>
		<member name="P:System.Windows.Input.InputLanguageManager.Current">
			<summary>Gets the input language manager associated with the current context.</summary>
			<returns>An <see cref="T:System.Windows.Input.InputLanguageManager"></see> object associated with the current context.This property has no default value.</returns>
		</member>
		<member name="P:System.Windows.Input.InputLanguageManager.CurrentInputLanguage">
			<summary>Gets or sets the current input language.</summary>
			<returns>A <see cref="T:System.Globalization.CultureInfo"></see> object representing the currently selected input language.  This property may not be set to null.The default value is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"></see>.</returns>
			<exception cref="T:System.ArgumentNullException">Raised when an attempt is made to set this property to null.</exception>
		</member>
		<member name="T:System.Windows.Input.InputManager">
			<summary> Represents the input manager. </summary>
		</member>
		<member name="E:System.Windows.Input.InputManager.HitTestInvalidatedAsync">
			<summary> An event that is raised whenever the result of a hit-test may have changed. </summary>
		</member>
		<member name="M:System.Windows.Input.InputManager.ProcessInput(System.Windows.Input.InputEventArgs)">
			<summary>Synchronously processes the specified input. </summary>
			<returns>true if all input events were handled; otherwise, false.</returns>
			<param name="input">The input to process.</param>
		</member>
		<member name="P:System.Windows.Input.InputManager.MostRecentInputDevice">
			<summary> Gets a value that represents the input device associated with the most recent input event. </summary>
			<returns>The input device.</returns>
		</member>
		<member name="T:System.Windows.Input.InputMethod">
			<summary>Provides facilities for managing and interacting with the Text Services Framework, which provides support for alternate text input methods such as speech and handwriting.</summary>
		</member>
		<member name="E:System.Windows.Input.InputMethod.StateChanged">
			<summary>Occurs when the input method state (represented by the <see cref="P:System.Windows.Input.InputMethod.ImeState"></see> property) changes.</summary>
		</member>
		<member name="F:System.Windows.Input.InputMethod.InputScopeProperty">
			<summary>Identifies the <see cref="P:System.Windows.Input.InputMethod.InputScope"></see> GTMT#attached property.</summary>
			<returns>The identifier for the InputScope attached property.</returns>
		</member>
		<member name="F:System.Windows.Input.InputMethod.IsInputMethodEnabledProperty">
			<summary>Identifies the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled"></see> GTMT#attached property.</summary>
			<returns>The identifier for the IsInputMethodEnabled attached property.</returns>
		</member>
		<member name="F:System.Windows.Input.InputMethod.IsInputMethodSuspendedProperty">
			<summary>Identifies the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodSuspended"></see> GTMT#attached property.</summary>
			<returns>The identifier for the IsInputMethodSuspended attached property.</returns>
		</member>
		<member name="F:System.Windows.Input.InputMethod.PreferredImeConversionModeProperty">
			<summary>Identifies the <see cref="P:System.Windows.Input.InputMethod.PreferredImeConversionMode"></see> GTMT#attached property.</summary>
			<returns>The identifier for the PreferredImeConversionMode attached property.</returns>
		</member>
		<member name="F:System.Windows.Input.InputMethod.PreferredImeSentenceModeProperty">
			<summary>Identifies the <see cref="P:System.Windows.Input.InputMethod.PreferredImeSentenceMode"></see> GTMT#attached property.</summary>
			<returns>The identifier for the PreferredImeSentenceMode attached property.</returns>
		</member>
		<member name="F:System.Windows.Input.InputMethod.PreferredImeStateProperty">
			<summary>Identifies the <see cref="P:System.Windows.Input.InputMethod.PreferredImeState"></see> GTMT#attached property.</summary>
			<returns>The identifier for the PreferredImeState attached property.</returns>
		</member>
		<member name="M:System.Windows.Input.InputMethod.GetInputScope(System.Windows.DependencyObject)">
			<summary>Returns the value of the <see cref="P:System.Windows.Input.InputMethod.InputScope"></see>  GTMT#attached property for a specified dependency object.</summary>
			<returns>An <see cref="T:System.Windows.Input.InputScope"></see> object representing the current input scope for the specified dependency object.</returns>
			<param name="target">The dependency object for which to retrieve the input scope.</param>
			<exception cref="T:System.ArgumentNullException">Raised when target is null.</exception>
		</member>
		<member name="M:System.Windows.Input.InputMethod.GetIsInputMethodEnabled(System.Windows.DependencyObject)">
			<summary>Returns the value of the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled"></see>  GTMT#attached property for a specified dependency object.</summary>
			<returns>The current value of <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled"></see> for the specified dependency object.</returns>
			<param name="target">The dependency object for which to retrieve the value of <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled"></see>.</param>
			<exception cref="T:System.ArgumentNullException">Raised when target is null.</exception>
		</member>
		<member name="M:System.Windows.Input.InputMethod.GetIsInputMethodSuspended(System.Windows.DependencyObject)">
			<summary>Returns the value of the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodSuspended"></see>  GTMT#attached property for a specified dependency object.</summary>
			<returns>The current value of <see cref="P:System.Windows.Input.InputMethod.IsInputMethodSuspended"></see> for the specified dependency object.</returns>
			<param name="target">The dependency object for which to retrieve the value of <see cref="P:System.Windows.Input.InputMethod.IsInputMethodSuspended"></see>.</param>
			<exception cref="T:System.ArgumentNullException">Raised when target is null.</exception>
		</member>
		<member name="M:System.Windows.Input.InputMethod.GetPreferredImeConversionMode(System.Windows.DependencyObject)">
			<summary>Returns the value of the <see cref="P:System.Windows.Input.InputMethod.PreferredImeConversionMode"></see>  GTMT#attached property for a specified dependency object.</summary>
			<returns>A member of the <see cref="T:System.Windows.Input.ImeConversionModeValues"></see> enumeration specifying the current <see cref="P:System.Windows.Input.InputMethod.PreferredImeConversionMode"></see> for the specified dependency object.</returns>
			<param name="target">The dependency object for which to retrieve the value of <see cref="P:System.Windows.Input.InputMethod.PreferredImeConversionMode"></see>.</param>
			<exception cref="T:System.ArgumentNullException">Raised when target is null.</exception>
		</member>
		<member name="M:System.Windows.Input.InputMethod.GetPreferredImeSentenceMode(System.Windows.DependencyObject)">
			<summary>Returns the value of the <see cref="P:System.Windows.Input.InputMethod.PreferredImeSentenceMode"></see>  GTMT#attached property for a specified dependency object.</summary>
			<returns>A member of the <see cref="T:System.Windows.Input.ImeSentenceModeValues"></see> enumeration specifying the current <see cref="P:System.Windows.Input.InputMethod.PreferredImeSentenceMode"></see> for the specified dependency object.</returns>
			<param name="target">The dependency object for which to retrieve the value of <see cref="P:System.Windows.Input.InputMethod.PreferredImeSentenceMode"></see>.</param>
			<exception cref="T:System.ArgumentNullException">Raised when target is null.</exception>
		</member>
		<member name="M:System.Windows.Input.InputMethod.GetPreferredImeState(System.Windows.DependencyObject)">
			<summary>Returns the value of the <see cref="P:System.Windows.Input.InputMethod.PreferredImeState"></see>  GTMT#attached property for a specified dependency object.</summary>
			<returns>A member of the <see cref="T:System.Windows.Input.InputMethodState"></see> enumeration specifying the current <see cref="P:System.Windows.Input.InputMethod.PreferredImeState"></see> for the specified dependency object.</returns>
			<param name="target">The dependency object for which to retrieve the value of <see cref="P:System.Windows.Input.InputMethod.PreferredImeState"></see>.</param>
			<exception cref="T:System.ArgumentNullException">Raised when target is null.</exception>
		</member>
		<member name="M:System.Windows.Input.InputMethod.SetInputScope(System.Windows.DependencyObject,System.Windows.Input.InputScope)">
			<summary>Sets the value of the <see cref="P:System.Windows.Input.InputMethod.InputScope"></see>GTMT#attached property on the specified dependency object.</summary>
			<param name="target">The dependency object on which to set the <see cref="P:System.Windows.Input.InputMethod.InputScope"></see> attached property.</param>
			<param name="value">An <see cref="T:System.Windows.Input.InputScope"></see> object representing the new value for the <see cref="P:System.Windows.Input.InputMethod.InputScope"></see> attached property.</param>
			<exception cref="T:System.ArgumentNullException">Raised when target is null.</exception>
		</member>
		<member name="M:System.Windows.Input.InputMethod.SetIsInputMethodEnabled(System.Windows.DependencyObject,System.Boolean)">
			<summary>Sets the value of the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled"></see>GTMT#attached property on the specified dependency object.</summary>
			<param name="target">The dependency object on which to set the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled"></see> attached property.</param>
			<param name="value">The new value for the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled"></see> attached property.</param>
			<exception cref="T:System.ArgumentNullException">Raised when target is null.</exception>
		</member>
		<member name="M:System.Windows.Input.InputMethod.SetIsInputMethodSuspended(System.Windows.DependencyObject,System.Boolean)">
			<summary>Sets the value of the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodSuspended"></see>GTMT#attached property on the specified dependency object.</summary>
			<param name="target">The dependency object on which to set the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodSuspended"></see> attached property.</param>
			<param name="value">The new value for the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodSuspended"></see> attached property.</param>
			<exception cref="T:System.ArgumentNullException">Raised when target is null.</exception>
		</member>
		<member name="M:System.Windows.Input.InputMethod.SetPreferredImeConversionMode(System.Windows.DependencyObject,System.Windows.Input.ImeConversionModeValues)">
			<summary>Sets the value of the <see cref="P:System.Windows.Input.InputMethod.PreferredImeConversionMode"></see>GTMT#attached property on the specified dependency object.</summary>
			<param name="target">The dependency object on which to set the <see cref="P:System.Windows.Input.InputMethod.PreferredImeConversionMode"></see> attached property.</param>
			<param name="value">A member of the <see cref="T:System.Windows.Input.ImeConversionModeValues"></see> enumeration representing the new value for the <see cref="P:System.Windows.Input.InputMethod.PreferredImeConversionMode"></see> attached property.</param>
			<exception cref="T:System.ArgumentNullException">Raised when target is null.</exception>
		</member>
		<member name="M:System.Windows.Input.InputMethod.SetPreferredImeSentenceMode(System.Windows.DependencyObject,System.Windows.Input.ImeSentenceModeValues)">
			<summary>Sets the value of the <see cref="P:System.Windows.Input.InputMethod.PreferredImeSentenceMode"></see>GTMT#attached property on the specified dependency object.</summary>
			<param name="target">The dependency object on which to set the <see cref="P:System.Windows.Input.InputMethod.PreferredImeSentenceMode"></see> attached property.</param>
			<param name="value">A member of the <see cref="T:System.Windows.Input.ImeConversionModeValues"></see> enumeration representing the new value for the <see cref="P:System.Windows.Input.InputMethod.PreferredImeSentenceMode"></see> attached property.</param>
			<exception cref="T:System.ArgumentNullException">Raised when target is null.</exception>
		</member>
		<member name="M:System.Windows.Input.InputMethod.SetPreferredImeState(System.Windows.DependencyObject,System.Windows.Input.InputMethodState)">
			<summary>Sets the value of the <see cref="P:System.Windows.Input.InputMethod.PreferredImeState"></see>GTMT#attached property on the specified dependency object.</summary>
			<param name="target">The dependency object on which to set the <see cref="P:System.Windows.Input.InputMethod.PreferredImeState"></see> attached property.</param>
			<param name="value">A member of the <see cref="T:System.Windows.Input.ImeConversionModeValues"></see> enumeration representing the new value for the <see cref="P:System.Windows.Input.InputMethod.PreferredImeState"></see> attached property.</param>
			<exception cref="T:System.ArgumentNullException">Raised when target is null.</exception>
		</member>
		<member name="M:System.Windows.Input.InputMethod.ShowConfigureUI">
			<summary>Displays configuration TLA#tla_ui associated with the currently active keyboard text service.</summary>
		</member>
		<member name="M:System.Windows.Input.InputMethod.ShowConfigureUI(System.Windows.UIElement)">
			<summary>Displays configuration TLA#tla_ui associated with the currently active keyboard text service, using a specified <see cref="T:System.Windows.UIElement"></see> as the parent element for the configuration TLA2#tla_ui.</summary>
			<param name="element">A <see cref="T:System.Windows.UIElement"></see> that will be used as the parent element for the configuration TLA2#tla_ui.  This parameter can be null.</param>
		</member>
		<member name="M:System.Windows.Input.InputMethod.ShowRegisterWordUI">
			<summary>Displays word registration TLA#tla_ui associated with the currently active keyboard text service.</summary>
		</member>
		<member name="M:System.Windows.Input.InputMethod.ShowRegisterWordUI(System.String)">
			<summary>Displays word registration TLA#tla_ui associated with the currently active keyboard text service.  Accepts a specified string as the default value to register.</summary>
			<param name="registeredText">A string that specifies a value to register.</param>
		</member>
		<member name="M:System.Windows.Input.InputMethod.ShowRegisterWordUI(System.Windows.UIElement,System.String)">
			<summary>Displays word registration TLA#tla_ui associated with the currently active keyboard text service.  Accepts a specified string as the default value to register, and a specified <see cref="T:System.Windows.UIElement"></see> as the parent element for the configuration TLA2#tla_ui.</summary>
			<param name="element">A <see cref="T:System.Windows.UIElement"></see> that will be used as the parent element for the word registration TLA2#tla_ui.  This parameter can be null.</param>
			<param name="registeredText">A string that specifies a value to register.</param>
		</member>
		<member name="P:System.Windows.Input.InputMethod.CanShowConfigurationUI">
			<summary>Gets a value that indicates whether or not this input method can display configuration TLA#tla_ui.</summary>
			<returns>true if configuration TLA2#tla_ui can be displayed; otherwise, false.This property has no default value.</returns>
		</member>
		<member name="P:System.Windows.Input.InputMethod.CanShowRegisterWordUI">
			<summary>Gets a value that indicates whether this input method can display word registration TLA#tla_ui. </summary>
			<returns>true if word registration TLA2#tla_ui can be displayed; otherwise, false.This property has no default value.</returns>
		</member>
		<member name="P:System.Windows.Input.InputMethod.Current">
			<summary>Gets a reference to any currently active input method associated with the current context.</summary>
			<returns>A reference to an <see cref="T:System.Windows.Input.InputMethod"></see> object associated with the current context, or null if there is no active input method.This property has no default value.</returns>
		</member>
		<member name="P:System.Windows.Input.InputMethod.HandwritingState">
			<summary>Gets or sets the current state of handwriting input for this input method.</summary>
			<returns>A member of the <see cref="T:System.Windows.Input.InputMethodState"></see> enumeration specifying the current input method state for handwriting input.The default value is <see cref="F:System.Windows.Input.InputMethodState.Off"></see>.</returns>
		</member>
		<member name="P:System.Windows.Input.InputMethod.ImeConversionMode">
			<summary>Gets or sets the current conversion mode for the input method editor associated with this input method.</summary>
			<returns>A member of the <see cref="T:System.Windows.Input.ImeConversionModeValues"></see> enumeration specifying the conversion mode.The default value is <see cref="F:System.Windows.Input.ImeConversionModeValues.Alphanumeric"></see>.</returns>
		</member>
		<member name="P:System.Windows.Input.InputMethod.ImeSentenceMode">
			<summary>Gets or sets the current sentence mode for the input method editor associated with this input method.</summary>
			<returns>A member of the <see cref="T:System.Windows.Input.ImeSentenceModeValues"></see> enumerations specifying the sentence mode.The default value is <see cref="F:System.Windows.Input.ImeSentenceModeValues.None"></see>.</returns>
		</member>
		<member name="P:System.Windows.Input.InputMethod.ImeState">
			<summary>Gets or sets the current state of the input method editor associated with this input method.</summary>
			<returns>A member of the <see cref="T:System.Windows.Input.InputMethodState"></see> enumeration specifying the state of the input method editor associated with this input method.The default value is <see cref="F:System.Windows.Input.InputMethodState.Off"></see>.</returns>
		</member>
		<member name="P:System.Windows.Input.InputMethod.MicrophoneState">
			<summary>Gets or sets the current state of microphone input for this input method.</summary>
			<returns>A member of the <see cref="T:System.Windows.Input.InputMethodState"></see> enumeration specifying the current input method state for microphone input.The default value is <see cref="F:System.Windows.Input.InputMethodState.Off"></see>.</returns>
		</member>
		<member name="P:System.Windows.Input.InputMethod.SpeechMode">
			<summary>Gets or sets the speech mode for this input method.</summary>
			<returns>A member of the <see cref="T:System.Windows.Input.SpeechMode"></see> enumeration specifying the current speech mode.The default value is <see cref="F:System.Windows.Input.SpeechMode.Indeterminate"></see>.</returns>
		</member>
		<member name="T:System.Windows.Input.InputMethodState">
			<summary> Describes the state of an <see cref="T:System.Windows.Input.InputMethod"></see>.</summary>
		</member>
		<member name="F:System.Windows.Input.InputMethodState.DoNotCare">
			<summary>The input method is in an indeterminate state.</summary>
		</member>
		<member name="F:System.Windows.Input.InputMethodState.Off">
			<summary>The input method is off.</summary>
		</member>
		<member name="F:System.Windows.Input.InputMethodState.On">
			<summary>The input method is on.</summary>
		</member>
		<member name="T:System.Windows.Input.InputMethodStateChangedEventArgs">
			<summary>Contains arguments associated with the <see cref="E:System.Windows.Input.InputMethod.StateChanged"></see> event.</summary>
		</member>
		<member name="P:System.Windows.Input.InputMethodStateChangedEventArgs.IsHandwritingStateChanged">
			<summary>Gets a value that indicates whether or not the <see cref="P:System.Windows.Input.InputMethod.HandwritingState"></see> property changed.</summary>
			<returns>true if the <see cref="P:System.Windows.Input.InputMethod.HandwritingState"></see> property changed; otherwise, false.This property has no default value.</returns>
		</member>
		<member name="P:System.Windows.Input.InputMethodStateChangedEventArgs.IsImeConversionModeChanged">
			<summary>Gets a value that indicates whether or not the <see cref="P:System.Windows.Input.InputMethod.ImeConversionMode"></see> property changed.</summary>
			<returns>true if the <see cref="P:System.Windows.Input.InputMethod.ImeConversionMode"></see> property changed; otherwise, false.This property has no default value.</returns>
		</member>
		<member name="P:System.Windows.Input.InputMethodStateChangedEventArgs.IsImeSentenceModeChanged">
			<summary>Gets a value that indicates whether or not the <see cref="P:System.Windows.Input.InputMethod.ImeSentenceMode"></see> property changed.</summary>
			<returns>true if the <see cref="P:System.Windows.Input.InputMethod.ImeSentenceMode"></see> property changed; otherwise, false.This property has no default value.</returns>
		</member>
		<member name="P:System.Windows.Input.InputMethodStateChangedEventArgs.IsImeStateChanged">
			<summary>Gets a value that indicates whether or not the <see cref="P:System.Windows.Input.InputMethod.ImeState"></see> property changed.</summary>
			<returns>true if the <see cref="P:System.Windows.Input.InputMethod.ImeState"></see> property changed; otherwise, false.This property has no default value.</returns>
		</member>
		<member name="P:System.Windows.Input.InputMethodStateChangedEventArgs.IsMicrophoneStateChanged">
			<summary>Gets a value that indicates whether or not the <see cref="P:System.Windows.Input.InputMethod.MicrophoneState"></see> property changed.</summary>
			<returns>true if the <see cref="P:System.Windows.Input.InputMethod.MicrophoneState"></see> property changed; otherwise, false.This property has no default value.</returns>
		</member>
		<member name="P:System.Windows.Input.InputMethodStateChangedEventArgs.IsSpeechModeChanged">
			<summary>Gets a value that indicates whether or not the <see cref="P:System.Windows.Input.InputMethod.SpeechMode"></see> property changed.</summary>
			<returns>true if the <see cref="P:System.Windows.Input.InputMethod.SpeechMode"></see> property changed; otherwise, false.This property has no default value.</returns>
		</member>
		<member name="T:System.Windows.Input.InputMethodStateChangedEventHandler">
			<summary>Delegate for events associated with changes in state for an input method.</summary>
		</member>
		<member name="T:System.Windows.Input.InputMode">
			<summary>Specifies the mode of input processing when the input was provided. </summary>
		</member>
		<member name="F:System.Windows.Input.InputMode.Foreground">
			<summary>The input was provided while the application was in the foreground. </summary>
		</member>
		<member name="F:System.Windows.Input.InputMode.Sink">
			<summary>The input was provided while the application was not in the foreground.</summary>
		</member>
		<member name="T:System.Windows.Input.InputScope">
			<summary>Represents information related to the scope of data provided by an input method.</summary>
		</member>
		<member name="M:System.Windows.Input.InputScope.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputScope"></see> class.</summary>
		</member>
		<member name="P:System.Windows.Input.InputScope.Names">
			<summary>Gets or sets the input scope name.</summary>
			<returns>A member of the <see cref="T:System.Windows.Input.InputScopeName"></see> enumeration specifying a name for this input scope.The default value is <see cref="F:System.Windows.Input.InputScopeName.Default"></see>.</returns>
			<exception cref="T:System.ArgumentException">Raised when an attempt is made to set this property to any value other than a valid member of the <see cref="T:System.Windows.Input.InputScopeName"></see> enumeration.</exception>
		</member>
		<member name="P:System.Windows.Input.InputScope.PhraseList">
			<summary>Gets a collection of phrases to be used as suggested input patterns by input processors.</summary>
			<returns>An object containing a collection of phrases to be used as suggested input patterns by input processors.  This object implements the <see cref="T:System.Collections.IList"></see> interface.This property has no default value.</returns>
		</member>
		<member name="P:System.Windows.Input.InputScope.RegularExpression">
			<summary>Gets or sets a regular expression to be used as a suggested text input pattern by input processors.</summary>
			<returns>A string that defines a regular expression to be used as a suggested text input pattern by input processors.This property has no default value.</returns>
			<exception cref="T:System.ArgumentNullException">Raised when an attempt is made to set this property to null.</exception>
		</member>
		<member name="P:System.Windows.Input.InputScope.SrgsMarkup">
			<summary>Gets or sets a string that specifies any Speech Recognition Grammar Specification (SRGS) markup to be used as a suggested input pattern by input processors.</summary>
			<returns>A string that specifies any SRGS markup to be used as a suggested input pattern by input processors.This property has no default value.</returns>
			<exception cref="T:System.ArgumentNullException">Raised when an attempt is made to set this property to null.</exception>
		</member>
		<member name="T:System.Windows.Input.InputScopeConverter">
			<summary>Provides facilities for converting between <see cref="T:System.Windows.Input.InputScope"></see> objects and strings.</summary>
		</member>
		<member name="M:System.Windows.Input.InputScopeConverter.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputScopeConverter"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Input.InputScopeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether an <see cref="T:System.Windows.Input.InputScope"></see> object can be converted from an object of a specified type.</summary>
			<returns>true if conversion from the specified type is possible; otherwise, false.</returns>
			<param name="context">An object that describes any type descriptor context.  This object must implement the <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> interface.  This parameter may be null.</param>
			<param name="sourceType">A <see cref="T:System.Type"></see> to check for conversion compatibility.</param>
		</member>
		<member name="M:System.Windows.Input.InputScopeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether an <see cref="T:System.Windows.Input.InputScope"></see> object can be converted to an object of a specified type.</summary>
			<returns>true if conversion to the specified type is possible; otherwise, false.</returns>
			<param name="context">An object that describes any type descriptor context.  This object must implement the <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> interface.  This parameter may be null.</param>
			<param name="destinationType">A <see cref="T:System.Type"></see> to check for conversion compatibility.</param>
		</member>
		<member name="M:System.Windows.Input.InputScopeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary>Converts a source object (string) into an <see cref="T:System.Windows.Input.InputScope"></see> object.</summary>
			<returns>An <see cref="T:System.Windows.Input.InputScope"></see> object converted from the specified source object.</returns>
			<param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see> object containing any cultural context for the conversion.  This parameter may be null.</param>
			<param name="source">A source object to convert from.  This object must be a string.</param>
			<param name="context">An object that describes any type descriptor context.  This object must implement the <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> interface.  This parameter may be null.</param>
		</member>
		<member name="M:System.Windows.Input.InputScopeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary>Converts an <see cref="T:System.Windows.Input.InputScope"></see> object into a specified object type (string).</summary>
			<returns>A new object of the specified type (string) converted from the given <see cref="T:System.Windows.Input.InputScope"></see> object.</returns>
			<param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see> object containing any cultural context for the conversion.  This parameter may be null.</param>
			<param name="context">An object that describes any type descriptor context.  This object must implement the <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> interface.  This parameter may be null.</param>
			<param name="destinationType">A destination type to convert type.  This type must be string.</param>
			<param name="value">An object to convert from.  This object must be of type <see cref="T:System.Windows.Input.InputScope"></see>.</param>
		</member>
		<member name="T:System.Windows.Input.InputScopeName">
			<summary>Defines a set of pre-defined names for text input patterns.</summary>
		</member>
		<member name="T:System.Windows.Input.InputScopePhrase">
			<summary>Represents a suggested input text pattern.</summary>
		</member>
		<member name="M:System.Windows.Input.InputScopePhrase.#ctor">
			<summary>This type or member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Input.InputScopePhrase.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputScopePhrase"></see> class, taking a string specifying the <see cref="P:System.Windows.Input.InputScopePhrase.Name"></see> of the input scope phrase.</summary>
			<param name="name">A string specifying the initial value for the <see cref="P:System.Windows.Input.InputScopePhrase.Name"></see> property.  This value cannot be null.</param>
			<exception cref="T:System.ArgumentNullException">Raised if name is null.</exception>
		</member>
		<member name="M:System.Windows.Input.InputScopePhrase.AddChild(System.Object)">
			<summary>This type or member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Input.InputScopePhrase.AddText(System.String)">
			<summary>This type or member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Input.InputScopePhrase.Name">
			<summary>Gets or sets a descriptive name associated with the text input pattern for this <see cref="T:System.Windows.Input.InputScopePhrase"></see>.</summary>
			<returns>A string containing the descriptive name for this InputScopePhrase.</returns>
		</member>
		<member name="T:System.Windows.Input.InputType">
			<summary> The type of input being reported. </summary>
		</member>
		<member name="T:System.Windows.Input.KeyBinding">
			<summary>Represents a binding between a <see cref="T:System.Windows.Input.KeyGesture"></see> and an <see cref="T:System.Windows.Input.ICommand"></see>, such as a <see cref="T:System.Windows.Input.RoutedCommand"></see>.</summary>
		</member>
		<member name="M:System.Windows.Input.KeyBinding.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyBinding"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyBinding"></see> class using the specified <see cref="T:System.Windows.Input.ICommand"></see> and <see cref="T:System.Windows.Input.KeyGesture"></see>.</summary>
			<param name="command">The command to associate with gesture.</param>
			<param name="gesture">The key combination to associate with command.</param>
		</member>
		<member name="M:System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyBinding"></see> class using the specified <see cref="T:System.Windows.Input.ICommand"></see> and the specified <see cref="T:System.Windows.Input.Key"></see> and <see cref="T:System.Windows.Input.ModifierKeys"></see> which will be converted into a <see cref="T:System.Windows.Input.KeyGesture"></see>. </summary>
			<param name="modifiers">The modifiers of the <see cref="T:System.Windows.Input.KeyGesture"></see> to be associated with command.</param>
			<param name="command">The command to associate with the <see cref="T:System.Windows.Input.KeyGesture"></see> comprised of key and modifiers.</param>
			<param name="key">The key portion of the <see cref="T:System.Windows.Input.KeyGesture"></see> to be associated with command.</param>
		</member>
		<member name="P:System.Windows.Input.KeyBinding.Gesture">
			<summary>Gets or sets the gesture associated with this <see cref="T:System.Windows.Input.KeyBinding"></see>. </summary>
			<returns>The key combination that is bound to the command.</returns>
		</member>
		<member name="P:System.Windows.Input.KeyBinding.Key">
			<summary>Gets or sets the <see cref="T:System.Windows.Input.Key"></see> of the <see cref="T:System.Windows.Input.KeyGesture"></see> associated with this <see cref="T:System.Windows.Input.KeyBinding"></see>.</summary>
			<returns>The key portion of the <see cref="T:System.Windows.Input.KeyGesture"></see> which is bound to the command.</returns>
		</member>
		<member name="P:System.Windows.Input.KeyBinding.Modifiers">
			<summary>Gets or sets the <see cref="T:System.Windows.Input.ModifierKeys"></see> of the <see cref="T:System.Windows.Input.KeyGesture"></see> associated with this <see cref="T:System.Windows.Input.KeyBinding"></see>. </summary>
			<returns>The modifier keys of the <see cref="T:System.Windows.Input.KeyGesture"></see> which is bound to the command.</returns>
		</member>
		<member name="T:System.Windows.Input.Keyboard">
			<summary> Represents the keyboard device for a specific thread. </summary>
		</member>
		<member name="E:System.Windows.Input.Keyboard.GotKeyboardFocus">
			<summary>Occurs when an element receives keyboard focus.</summary>
		</member>
		<member name="E:System.Windows.Input.Keyboard.KeyDown">
			<summary>Occurs when a key on the keyboard is pressed.</summary>
		</member>
		<member name="E:System.Windows.Input.Keyboard.KeyUp">
			<summary>Occurs when a key on the keyboard is released. </summary>
		</member>
		<member name="E:System.Windows.Input.Keyboard.LostKeyboardFocus">
			<summary>Occurs when an element loses keyboard focus.</summary>
		</member>
		<member name="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus">
			<summary>Occurs when an element gets keyboard focus.</summary>
		</member>
		<member name="E:System.Windows.Input.Keyboard.PreviewKeyDown">
			<summary>Occurs when a key on the keyboard is pressed.</summary>
		</member>
		<member name="E:System.Windows.Input.Keyboard.PreviewKeyUp">
			<summary> Occurs when a key on the keyboard is released.</summary>
		</member>
		<member name="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus">
			<summary>Occurs when an element loses keyboard focus.</summary>
		</member>
		<member name="F:System.Windows.Input.Keyboard.GotKeyboardFocusEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus"></see> GTMT#attached event.</summary>
			<returns>The <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.Input.Keyboard.KeyDownEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Keyboard.KeyDown"></see> GTMT#attached event.</summary>
			<returns>The <see cref="E:System.Windows.Input.Keyboard.KeyDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.Input.Keyboard.KeyUpEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Keyboard.KeyUp"></see> GTMT#attached event.</summary>
			<returns>The <see cref="E:System.Windows.Input.Keyboard.KeyUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.Input.Keyboard.LostKeyboardFocusEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus"></see> GTMT#attached event.</summary>
			<returns>The <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.Input.Keyboard.PreviewGotKeyboardFocusEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus"></see> GTMT#attached event.</summary>
			<returns>The <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.Input.Keyboard.PreviewKeyDownEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown"></see> GTMT#attached event.</summary>
			<returns>The <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.Input.Keyboard.PreviewKeyUpEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp"></see> GTMT#attached event.</summary>
			<returns>The <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.Input.Keyboard.PreviewLostKeyboardFocusEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus"></see> GTMT#attached event.</summary>
			<returns>The <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus"></see> event's identifier.</returns>
		</member>
		<member name="M:System.Windows.Input.Keyboard.AddKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
			<summary> Adds a handler for the KeyDown GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Keyboard.AddKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
			<summary> Adds a handler for the KeyUp GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Keyboard.AddPreviewKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
			<summary> Adds a handler for the PreviewKeyDown GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event Handler.</param>
		</member>
		<member name="M:System.Windows.Input.Keyboard.AddPreviewKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
			<summary> Adds a handler for the PreviewKeyUp GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Keyboard.Focus(System.Windows.IInputElement)">
			<summary>Sets keyboard focus on the specified <see cref="T:System.Windows.IInputElement"></see>. </summary>
			<param name="element">The element on which to set keyboard focus.</param>
		</member>
		<member name="M:System.Windows.Input.Keyboard.GetKeyStates(System.Windows.Input.Key)">
			<summary>Gets the set of key states for the specified key.</summary>
			<returns>The set of key states.</returns>
			<param name="key">The specified key.</param>
		</member>
		<member name="M:System.Windows.Input.Keyboard.IsKeyDown(System.Windows.Input.Key)">
			<summary>Determines whether or not the specified key is pressed. </summary>
			<returns>true if key is in the down state; otherwise, false.</returns>
			<param name="key">The specified key.</param>
		</member>
		<member name="M:System.Windows.Input.Keyboard.IsKeyToggled(System.Windows.Input.Key)">
			<summary>Determines whether or not the specified key is toggled. </summary>
			<returns>true if key is in the toggled state; otherwise, false.</returns>
			<param name="key">The specified key.</param>
		</member>
		<member name="M:System.Windows.Input.Keyboard.IsKeyUp(System.Windows.Input.Key)">
			<summary>Determines whether or not the specified key is released. </summary>
			<returns>true if key is in the up state; otherwise, false.</returns>
			<param name="key">The key to check.</param>
		</member>
		<member name="M:System.Windows.Input.Keyboard.RemoveKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
			<summary> Removes a handler for the KeyDown  GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Keyboard.RemoveKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
			<summary> Removes a handler for the KeyUp GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Keyboard.RemovePreviewKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
			<summary> Removes a handler for the PreviewKeyDown GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Keyboard.RemovePreviewKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
			<summary> Removes a handler for the PreviewKeyUp GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="P:System.Windows.Input.Keyboard.FocusedElement">
			<summary>Gets the <see cref="T:System.Windows.IInputElement"></see> that has keyboard focus. </summary>
			<returns>The focused element.</returns>
		</member>
		<member name="P:System.Windows.Input.Keyboard.Modifiers">
			<summary>Gets the set of <see cref="T:System.Windows.Input.ModifierKeys"></see>, such as Ctrl or Alt, which are currently pressed. </summary>
			<returns>The set of modifier keys.</returns>
		</member>
		<member name="T:System.Windows.Input.KeyboardDevice">
			<summary>Abstract class that represents the keyboard device to a specific thread. </summary>
		</member>
		<member name="M:System.Windows.Input.KeyboardDevice.#ctor(System.Windows.Input.InputManager)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyboardDevice"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Input.KeyboardDevice.Focus(System.Windows.IInputElement)">
			<summary>Sets keyboard focus on the specified <see cref="T:System.Windows.IInputElement"></see>.</summary>
			<param name="element">The element to focus the keyboard on.</param>
		</member>
		<member name="M:System.Windows.Input.KeyboardDevice.IsKeyDown(System.Windows.Input.Key)">
			<summary>Determines whether or not the specified key is in the down state.</summary>
			<returns>true if key is in the down state; otherwise, false.</returns>
			<param name="key">The key to check.</param>
		</member>
		<member name="M:System.Windows.Input.KeyboardDevice.IsKeyToggled(System.Windows.Input.Key)">
			<summary>Determines whether or not the specified key is in the toggled state.</summary>
			<returns>true if key is in the toggled state; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Input.KeyboardDevice.IsKeyUp(System.Windows.Input.Key)">
			<summary>Determines whether or not the specified key is in the up state.</summary>
			<returns>true if key is in the up state; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Input.KeyboardDevice.ActiveSource">
			<summary>Gets the <see cref="T:System.Windows.PresentationSource"></see> that is reporting input for this device. </summary>
			<returns>The source of input for this device.</returns>
		</member>
		<member name="P:System.Windows.Input.KeyboardDevice.Modifiers">
			<summary>Gets the set of <see cref="T:System.Windows.Input.ModifierKeys"></see>, such as Ctrl or Alt, which are currently pressed.</summary>
			<returns>The set of modifier keys.</returns>
		</member>
		<member name="P:System.Windows.Input.KeyboardDevice.Target">
			<summary>Gets the specified <see cref="T:System.Windows.IInputElement"></see> that input from this device is sent to. </summary>
			<returns>The element that receives input.</returns>
		</member>
		<member name="T:System.Windows.Input.KeyboardEventArgs">
			<summary>Provides data for keyboard related events. </summary>
		</member>
		<member name="M:System.Windows.Input.KeyboardEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyboardEventArgs"></see> class. </summary>
			<param name="timestamp">The time when the input occured.</param>
			<param name="keyboard">The logical keyboard device associated with this event.</param>
		</member>
		<member name="M:System.Windows.Input.KeyboardEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
			<summary> The mechanism used to call the type-specific handler on the target. </summary>
			<param name="genericTarget">The target to call the handler on.</param>
			<param name="genericHandler">The generic handler to call in a type-specific way.</param>
		</member>
		<member name="P:System.Windows.Input.KeyboardEventArgs.KeyboardDevice">
			<summary>Gets the logical keyboard. </summary>
			<returns>The logical keyboard.</returns>
		</member>
		<member name="T:System.Windows.Input.KeyboardEventHandler">
			<summary>Represents the method that handles Keyboard events. </summary>
		</member>
		<member name="T:System.Windows.Input.KeyboardFocusChangedEventArgs">
			<summary>Provides data for the keyboard focus events. </summary>
		</member>
		<member name="M:System.Windows.Input.KeyboardFocusChangedEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Int32,System.Windows.IInputElement,System.Windows.IInputElement)">
			<summary>Initializes a new instance of the KeyboardFocusChangedEventArgs class. </summary>
			<param name="newFocus">The element that now has focus.</param>
			<param name="oldFocus">The element that previously had focus.</param>
			<param name="timestamp">The time when the input occurred.</param>
			<param name="keyboard">The logical keyboard device associated with this event.</param>
		</member>
		<member name="M:System.Windows.Input.KeyboardFocusChangedEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
			<summary> Calls the type-specific handler on the target. </summary>
			<param name="genericTarget">The target on which you want to call the handler.</param>
			<param name="genericHandler">The generic handler to call in a type-specific way.</param>
		</member>
		<member name="P:System.Windows.Input.KeyboardFocusChangedEventArgs.NewFocus">
			<summary>Gets the element that now has focus. </summary>
			<returns>The element that has focus.</returns>
		</member>
		<member name="P:System.Windows.Input.KeyboardFocusChangedEventArgs.OldFocus">
			<summary>Gets the element that previously had focus. </summary>
			<returns>The previously focused element.</returns>
		</member>
		<member name="T:System.Windows.Input.KeyboardFocusChangedEventHandler">
			<summary> Represents the method used to handle events related to changes in keyboard focus, typically implemented on base elements. </summary>
		</member>
		<member name="T:System.Windows.Input.KeyEventArgs">
			<summary>Contains event information about a key and the state it was in at the time that a key-related event was raised. </summary>
		</member>
		<member name="M:System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)">
			<summary> Constructs an instance of the KeyEventArgs class. </summary>
			<param name="timestamp">The time when the input occurred.</param>
			<param name="inputSource">The input source that provided the input.</param>
			<param name="keyboard">The logical keyboard device associated with this event.</param>
			<param name="key">The key referenced by the event.</param>
		</member>
		<member name="M:System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
			<summary> The mechanism used to call the type-specific handler on the target. </summary>
			<param name="genericTarget">The target to call the handler on.</param>
			<param name="genericHandler">The generic handler to call in a type-specific way.</param>
		</member>
		<member name="P:System.Windows.Input.KeyEventArgs.IsDown">
			<summary>Gets whether or not the key is down. </summary>
			<returns>true if the key is down; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Input.KeyEventArgs.IsRepeat">
			<summary>Gets whether the key is a repeated key or not. </summary>
			<returns>true if the key is repeated; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Input.KeyEventArgs.IsToggled">
			<summary>Gets whether or not the key is toggled. </summary>
			<returns>true if the key is toggled; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Input.KeyEventArgs.IsUp">
			<summary>Gets whether or not the key referenced by the event is up. </summary>
			<returns>true if the key is up; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Input.KeyEventArgs.Key">
			<summary>The Key referenced by the event, if the key is not being handled specially. </summary>
			<returns>The key referenced by the event.</returns>
		</member>
		<member name="P:System.Windows.Input.KeyEventArgs.KeyStates">
			<summary>Gets the state of the key. </summary>
			<returns>The state of the key.</returns>
		</member>
		<member name="T:System.Windows.Input.KeyEventHandler">
			<summary>Represents the method that handles Key related events such <see cref="E:System.Windows.UIElement.KeyUp"></see> and <see cref="E:System.Windows.UIElement.KeyDown"></see>. </summary>
		</member>
		<member name="T:System.Windows.Input.KeyGesture">
			<summary>Creates a keyboard combination which can be bound to a command. </summary>
		</member>
		<member name="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyGesture"></see> class using the specified <see cref="T:System.Windows.Input.Key"></see>. </summary>
			<param name="key">The key associated with this gesture.</param>
		</member>
		<member name="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyGesture"></see> class using the specified <see cref="T:System.Windows.Input.Key"></see> and <see cref="T:System.Windows.Input.ModifierKeys"></see>.</summary>
			<param name="modifiers">The modifier keys associated with the gesture.</param>
			<param name="key">The key associated with the gesture.</param>
		</member>
		<member name="M:System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)">
			<summary>Determines whether <see cref="T:System.Windows.Input.KeyGesture"></see> matches the input associated with the specified <see cref="T:System.Windows.Input.InputEventArgs"></see> object.</summary>
			<returns>true if the event data matches this <see cref="T:System.Windows.Input.KeyGesture"></see>; otherwise, false.</returns>
			<param name="inputEventArgs">The input event data to compare this gesture to.</param>
			<param name="targetElement">The target.</param>
		</member>
		<member name="P:System.Windows.Input.KeyGesture.Key">
			<summary>Gets the key associated with this <see cref="T:System.Windows.Input.KeyGesture"></see>.</summary>
			<returns>The key associated with the key combination.</returns>
		</member>
		<member name="P:System.Windows.Input.KeyGesture.Modifiers">
			<summary>Gets the modifier keys associated with this <see cref="T:System.Windows.Input.KeyGesture"></see>.</summary>
			<returns>The modifier keys associated with the key combination.</returns>
		</member>
		<member name="T:System.Windows.Input.KeyGestureConverter">
			<summary> Provides a type converter to convert data for a KeyGesture to and from a string. </summary>
		</member>
		<member name="M:System.Windows.Input.KeyGestureConverter.#ctor">
			<summary> Initializes a new instance of the KeyGestureConverter class. </summary>
		</member>
		<member name="M:System.Windows.Input.KeyGestureConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines whether this converter can convert an object in the given source type to the native type of the converter. </summary>
			<returns>true if this object can perform the conversion; otherwise, false.</returns>
			<param name="context">An ITypeDescriptorContext object that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.</param>
			<param name="sourceType">The type from which you want to convert.</param>
		</member>
		<member name="M:System.Windows.Input.KeyGestureConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Returns a value that indicates whether this converter can convert an object to the given destination type using the context. </summary>
			<returns>true if this converter can perform the operation; otherwise, false.</returns>
			<param name="context">An ITypeDescriptorContext object that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.</param>
			<param name="destinationType">A Type object that represents the type to which you want to convert.</param>
		</member>
		<member name="M:System.Windows.Input.KeyGestureConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary> Converts the given object to the converter's native type. </summary>
			<returns>The converted object.</returns>
			<param name="culture">A CultureInfo object that specifies the culture to represent the object.</param>
			<param name="source">The object to convert.</param>
			<param name="context">An ITypeDescriptorContext object that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.</param>
		</member>
		<member name="M:System.Windows.Input.KeyGestureConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> Converts the specified object to another type. The most common types to convert are to and from a string object. </summary>
			<returns>The converted object.</returns>
			<param name="culture">A CultureInfo object that specifies the culture to represent the object.</param>
			<param name="context">An ITypeDescriptorContext object that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.</param>
			<param name="destinationType">The type to convert the object to.</param>
			<param name="value">The object to convert.</param>
		</member>
		<member name="T:System.Windows.Input.KeyStates">
			<summary>Specifies constants that define the state of a key.</summary>
		</member>
		<member name="F:System.Windows.Input.KeyStates.Down">
			<summary>The key is pressed.</summary>
		</member>
		<member name="F:System.Windows.Input.KeyStates.None">
			<summary>The key is not pressed.</summary>
		</member>
		<member name="F:System.Windows.Input.KeyStates.Toggled">
			<summary>The key is toggled.</summary>
		</member>
		<member name="T:System.Windows.Input.MediaCommands">
			<summary>Provides a standard set of media related commands.</summary>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.BoostBass">
			<summary>Represents the Boost Base command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextBoost BassWM_APPCOMMANDAPPCOMMAND_BASS_BOOST</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.ChannelDown">
			<summary> Represents the Channel Down command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextChannel DownWM_APPCOMMANDAPPCOMMAND_MEDIA_CHANNEL_DOWN</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.ChannelUp">
			<summary> Represents the Channel Up command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextChannel UpWM_APPCOMMANDAPPCOMMAND_MEDIA_CHANNEL_UP</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.DecreaseBass">
			<summary> Represents the Decrease Bass command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextDecrease BassWM_APPCOMMANDAPPCOMAND_BASS_DOWN</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.DecreaseMicrophoneVolume">
			<summary> Represents the Decrease Microphone Volume command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextDecrease Microphone VolumeWM_APPCOMMANDAPPCOMMAND_MICROPHONE_VOLUME_DOWN</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.DecreaseTreble">
			<summary> Represents the Decrease Treble command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextDecrease TrebleWM_APPCOMMANDAPPCOMMAND_TREBLE_DOWN</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.DecreaseVolume">
			<summary> Represents the Decrease Volume command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextDecrease VolumeWM_APPCOMMANDAPPCOMMAND_VOLUME_DOWN</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.FastForward">
			<summary> Represents the Fast Foward command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextFast ForwardWM_APPCOMMANDAPPCOMMAND_MEDIA_FASTFORWARD</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.IncreaseBass">
			<summary> Represents the Increase Bass command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextIncrease BassWM_APPCOMMANDAPPCOMMAND_BASS_UP</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.IncreaseMicrophoneVolume">
			<summary> Represents the Increase Microphone Volume command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextIncrease Microphone VolumeWM_APPCOMMANDAPPCOMMAND_MICROPHONE_VOLUME_UP</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.IncreaseTreble">
			<summary> Represents the Increase Treble command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextIncrease TrebleWM_APPCOMMANDAPPCOMMAND_TREBLE_UP</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.IncreaseVolume">
			<summary> Represents the Increase Volume command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextIncrease VolumeWM_APPCOMMANDAPPCOMMAND_VOLUME_UP</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.MuteMicrophoneVolume">
			<summary> Represents the Mute Microphone Volume command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextMute Microphone VolumeWM_APPCOMMANDAPPCOMMAND_MICROPHONE_VOLUME_MUTE</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.MuteVolume">
			<summary> Represents the Mute Volume command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextMute VolumeWM_APPCOMMANDAPPCOMMAND_VOLUME_MUTE</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.NextTrack">
			<summary> Represents the Next Track command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextNext TrackWM_APPCOMMANDAPPCOMMAND_MEDIA_NEXTTRACK</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.Pause">
			<summary> Represents the Pause command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextPauseWM_APPCOMMANDAPPCOMMAND_MEDIA_PAUSE</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.Play">
			<summary> Represents the Play command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextPlayWM_APPCOMMANDAPPCOMMAND_MEDIA_PLAY</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.PreviousTrack">
			<summary> Represents the Previous Track command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextPrevious TrackWM_APPCOMMANDAPPCOMMAND_MEDIA_PREVIOUSTRACK</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.Record">
			<summary> Represents the Record command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextRecordWM_APPCOMMANDAPPCOMMAND_MEDIA_RECORD</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.Rewind">
			<summary> Represents the Rewind command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextRewindWM_APPCOMMANDAPPCOMMAND_MEDIA_REWIND</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.Select">
			<summary> Represents the Select command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextSelectWM_APPCOMMANDAPPCOMMAND_MEDIA_SELECT</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.Stop">
			<summary> Represents the Stop command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextStopWM_APPCOMMANDAPPCOMMAND_MEDIA_STOP</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.ToggleMicrophoneOnOff">
			<summary> Represents the Toggle Microphone On Off command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextToggle Microphone OnOffWM_APPCOMMANDAPPCOMMAND_MIC_ON_OFF_TOGGLE</returns>
		</member>
		<member name="P:System.Windows.Input.MediaCommands.TogglePlayPause">
			<summary> Represents the Toggle Play Pause command. </summary>
			<returns>The command.Default ValuesKey GestureNo gesture defined.UI TextToggle Play PauseWM_APPCOMMANDAPPCOMMAND_MEDIA_PLAY_PAUSE</returns>
		</member>
		<member name="T:System.Windows.Input.Mouse">
			<summary>Represents the mouse device to a specific thread.</summary>
		</member>
		<member name="E:System.Windows.Input.Mouse.GotMouseCapture">
			<summary>Occurs when this element (or a child element along the route) captures the mosue.</summary>
		</member>
		<member name="E:System.Windows.Input.Mouse.LostMouseCapture">
			<summary>Occurs when this element (or a child element along the route) loses mouse capture.</summary>
		</member>
		<member name="E:System.Windows.Input.Mouse.MouseDown">
			<summary> Occurs when any mouse button is depressed. </summary>
		</member>
		<member name="E:System.Windows.Input.Mouse.MouseEnter">
			<summary>Occurs when the mouse pointer enters the boundaries of an element.</summary>
		</member>
		<member name="E:System.Windows.Input.Mouse.MouseLeave">
			<summary>Occurs when the mouse pointer leaves the boundaries of an element.</summary>
		</member>
		<member name="E:System.Windows.Input.Mouse.MouseMove">
			<summary>Occurs when the mouse pointer moves.</summary>
		</member>
		<member name="E:System.Windows.Input.Mouse.MouseUp">
			<summary> Occurs when any mouse button is released. </summary>
		</member>
		<member name="E:System.Windows.Input.Mouse.MouseWheel">
			<summary>Occurs when the mouse wheel is rotated.</summary>
		</member>
		<member name="E:System.Windows.Input.Mouse.PreviewMouseDown">
			<summary> Occurs when any mouse button is depressed. </summary>
		</member>
		<member name="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement">
			<summary>Occurs when the primary mouse button is pressed outside the element that is capturing mouse events. </summary>
		</member>
		<member name="E:System.Windows.Input.Mouse.PreviewMouseMove">
			<summary>Occurs when the mouse moves over an element.</summary>
		</member>
		<member name="E:System.Windows.Input.Mouse.PreviewMouseUp">
			<summary> Occurs when any mouse button is released. </summary>
		</member>
		<member name="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement">
			<summary> Occurs when the primary mouse button is released outside the element that is capturing mouse events.      </summary>
		</member>
		<member name="E:System.Windows.Input.Mouse.PreviewMouseWheel">
			<summary> Occurs when the mouse wheel rotates.  </summary>
		</member>
		<member name="E:System.Windows.Input.Mouse.QueryCursor">
			<summary>Occurs when the element queries for the current mouse cursor.</summary>
		</member>
		<member name="F:System.Windows.Input.Mouse.GotMouseCaptureEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Mouse.GotMouseCapture"></see> GTMT#attached event.</summary>
			<returns>The <see cref="E:System.Windows.Input.Mouse.GotMouseCapture"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.Input.Mouse.LostMouseCaptureEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Mouse.LostMouseCapture"></see> GTMT#attached event.</summary>
			<returns>The <see cref="E:System.Windows.Input.Mouse.LostMouseCapture"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.Input.Mouse.MouseDownEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Mouse.MouseDown"></see> GTMT#attached event.</summary>
			<returns>The <see cref="E:System.Windows.Input.Mouse.MouseDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.Input.Mouse.MouseEnterEvent">
			<summary> Identifies the <see cref="E:System.Windows.Input.Mouse.MouseEnter"></see> GTMT#attached event.</summary>
			<returns>The <see cref="E:System.Windows.Input.Mouse.MouseEnter"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.Input.Mouse.MouseLeaveEvent">
			<summary> Identifies the <see cref="E:System.Windows.Input.Mouse.MouseLeave"></see> GTMT#attached event.</summary>
			<returns>The <see cref="E:System.Windows.Input.Mouse.MouseLeave"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.Input.Mouse.MouseMoveEvent">
			<summary> Identifies the <see cref="E:System.Windows.Input.Mouse.MouseMove"></see> GTMT#attached event.</summary>
			<returns>The <see cref="E:System.Windows.Input.Mouse.MouseMove"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.Input.Mouse.MouseUpEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Mouse.MouseUp"></see> GTMT#attached event.</summary>
			<returns>The <see cref="E:System.Windows.Input.Mouse.MouseUp"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.Input.Mouse.MouseWheelDeltaForOneLine">
			<summary>Represents the number of units the mouse wheel should be rotated to scroll one line. </summary>
			<returns>The units in one scroll line.</returns>
		</member>
		<member name="F:System.Windows.Input.Mouse.MouseWheelEvent">
			<summary> Identifies the <see cref="E:System.Windows.Input.Mouse.MouseWheel"></see> GTMT#attached event.</summary>
			<returns>The <see cref="E:System.Windows.Input.Mouse.MouseWheel"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.Input.Mouse.PreviewMouseDownEvent">
			<summary> Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown"></see> GTMT#attached event.</summary>
			<returns>The <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElementEvent">
			<summary> Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement"></see> GTMT#attached event.</summary>
			<returns>The <see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.Input.Mouse.PreviewMouseMoveEvent">
			<summary> Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove"></see> GTMT#attached event.</summary>
			<returns>The <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.Input.Mouse.PreviewMouseUpEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp"></see> GTMT#attached event.</summary>
			<returns><see cref="E:System.Windows.Input.Mouse.PreviewMouseUp"></see></returns>
		</member>
		<member name="F:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElementEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement"></see> GTMT#attached event.</summary>
			<returns>The <see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.Input.Mouse.PreviewMouseWheelEvent">
			<summary> Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel"></see> GTMT#attached event.</summary>
			<returns>The <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel"></see> event's identifier.</returns>
		</member>
		<member name="F:System.Windows.Input.Mouse.QueryCursorEvent">
			<summary> Identifies the <see cref="E:System.Windows.Input.Mouse.QueryCursor"></see> GTMT#attached event.</summary>
			<returns>The <see cref="E:System.Windows.Input.Mouse.QueryCursor"></see> event's identifier.</returns>
		</member>
		<member name="M:System.Windows.Input.Mouse.AddGotMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
			<summary> Adds a handler for the GotMouseCapture GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.AddLostMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
			<summary> Adds a handler for the LostMouseCapture GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.AddMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
			<summary> Adds a handler for the MouseDown GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.AddMouseEnterHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
			<summary> Adds a handler for the MouseEnter GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.AddMouseLeaveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
			<summary> Adds a handler for the MouseLeave GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.AddMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
			<summary> Adds a handler for the MouseMove GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.AddMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
			<summary> Adds a handler for the MouseUp GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.AddMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
			<summary> Adds a handler for the MouseWheel GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.AddPreviewMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
			<summary> Adds a handler for the PreviewMouseDown GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.AddPreviewMouseDownOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
			<summary> Adds a handler for the PreviewMouseDownOutsideCapturedElement GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.AddPreviewMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
			<summary> Adds a handler for the PreviewMouseMove GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.AddPreviewMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
			<summary> Adds a handler for the PreviewMouseUp GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.AddPreviewMouseUpOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
			<summary> Adds a handler for the PreviewMouseUpOutsideCapturedElement GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.AddPreviewMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
			<summary> Adds a handler for the PreviewMouseWheel GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.AddQueryCursorHandler(System.Windows.DependencyObject,System.Windows.Input.QueryCursorEventHandler)">
			<summary> Adds a handler for the QueryCursor GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement)">
			<summary>Redirects mouse input to the specified <see cref="T:System.Windows.IInputElement"></see>. </summary>
			<returns>true if the element was able to capture the mouse; otherwise, false.</returns>
			<param name="element">The element to capture the mouse.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)">
			<summary>Redirects mouse input to the specified <see cref="T:System.Windows.IInputElement"></see> using the specified <see cref="T:System.Windows.Input.CaptureMode"></see>.</summary>
			<returns>true if the element was able to capture the mouse; otherwise, false.</returns>
			<param name="element">The element to capture the mouse.</param>
			<param name="captureMode">The capture policy to use.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.GetIntermediatePoints(System.Windows.IInputElement,System.Windows.Point[])">
			<summary> Retrieves up to 64 previous coordinates of the mouse or pen. </summary>
			<returns>The number of points returned.</returns>
			<param name="points">An array of  objects relative to relativeTo.</param>
			<param name="relativeTo">The element relative to which the points are to be returned.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.GetPosition(System.Windows.IInputElement)">
			<summary>Gets the position of the mouse relative to a specified <see cref="T:System.Windows.IInputElement"></see>. </summary>
			<returns>The position of the mouse in relation to the parameter relativeTo.</returns>
			<param name="relativeTo">The frame of reference in which to calculate the position of the mouse.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.RemoveGotMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
			<summary> Removes a handler for the GotMouseCapture GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.RemoveLostMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
			<summary> Removes a handler for the LostMouseCapture GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.RemoveMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
			<summary> Removes a handler for the MouseDown GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.RemoveMouseEnterHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
			<summary> Removes a handler for the MouseEnter GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.RemoveMouseLeaveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
			<summary> Removes a handler for the MouseLeave GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.RemoveMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
			<summary> Removes a handler for the MouseMove GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.RemoveMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
			<summary> Removes a handler for the MouseUp GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.RemoveMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
			<summary> Removes a handler for the MouseWheel GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.RemovePreviewMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
			<summary> Removes a handler for the PreviewMouseDown GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.RemovePreviewMouseDownOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
			<summary> Removes a handler for the PreviewMouseDownOutsideCapturedElement GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.RemovePreviewMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
			<summary> Removes a handler for the PreviewMouseMove GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.RemovePreviewMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
			<summary> Removes a handler for the PreviewMouseUp GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.RemovePreviewMouseUpOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
			<summary> Removes a handler for the PreviewMouseUpOutsideCapturedElement GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.RemovePreviewMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
			<summary> Removes a handler for the PreviewMouseWheel GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.RemoveQueryCursorHandler(System.Windows.DependencyObject,System.Windows.Input.QueryCursorEventHandler)">
			<summary> Removes a handler for the QueryCursor GTMT#attached event. </summary>
			<param name="element">The UIElement or ContentElement that listens to this event.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Input.Mouse.SetCursor(System.Windows.Input.Cursor)">
			<summary>Sets the mouse pointer to the specified <see cref="T:System.Windows.Input.Cursor"></see>. </summary>
			<returns>true, if the cursor was set; otherwise, false.</returns>
			<param name="cursor">The cursor to set the mouse pointer to.</param>
		</member>
		<member name="P:System.Windows.Input.Mouse.Captured">
			<summary>Gets the element that has captured the mouse. </summary>
			<returns>The element captured by the mouse.</returns>
		</member>
		<member name="P:System.Windows.Input.Mouse.DirectlyOver">
			<summary>Gets the IInputElement the mouse pointer is currently over.</summary>
			<returns>The element the mouse pointer is over.</returns>
		</member>
		<member name="P:System.Windows.Input.Mouse.LeftButton">
			<summary>Gets the state of the left button of the mouse.</summary>
			<returns>The state of the left mouse button.</returns>
		</member>
		<member name="P:System.Windows.Input.Mouse.MiddleButton">
			<summary> Gets the state of the middle button of the mouse.</summary>
			<returns>The state of the middle mouse button.</returns>
		</member>
		<member name="P:System.Windows.Input.Mouse.RightButton">
			<summary> Gets the state of the right button. </summary>
			<returns>The state of the right mouse button.</returns>
		</member>
		<member name="P:System.Windows.Input.Mouse.XButton1">
			<summary> Gets the state of the first extended button. </summary>
			<returns>The state of the first extended mouse button.</returns>
		</member>
		<member name="P:System.Windows.Input.Mouse.XButton2">
			<summary>Gets the state of the second extended button. </summary>
			<returns>The state of the second extended mouse button.</returns>
		</member>
		<member name="T:System.Windows.Input.MouseAction">
			<summary>Specifies constants that define actions performed by the mouse.</summary>
		</member>
		<member name="F:System.Windows.Input.MouseAction.LeftClick">
			<summary>A left mouse button click.</summary>
		</member>
		<member name="F:System.Windows.Input.MouseAction.LeftDoubleClick">
			<summary>A left mouse button double click.</summary>
		</member>
		<member name="F:System.Windows.Input.MouseAction.MiddleClick">
			<summary>A middle mouse button click.</summary>
		</member>
		<member name="F:System.Windows.Input.MouseAction.MiddleDoubleClick">
			<summary>A middle mouse button double click.</summary>
		</member>
		<member name="F:System.Windows.Input.MouseAction.None">
			<summary>No action. </summary>
		</member>
		<member name="F:System.Windows.Input.MouseAction.RightClick">
			<summary>A right mouse button click. </summary>
		</member>
		<member name="F:System.Windows.Input.MouseAction.RightDoubleClick">
			<summary>A right mouse button double click.</summary>
		</member>
		<member name="F:System.Windows.Input.MouseAction.WheelClick">
			<summary>A mouse wheel rotation. </summary>
		</member>
		<member name="T:System.Windows.Input.MouseActionConverter">
			<summary> Provides a type converter to convert data for a MouseAction to and from a string. </summary>
		</member>
		<member name="M:System.Windows.Input.MouseActionConverter.#ctor">
			<summary> Initializes a new instance of the MouseActionConverter class. </summary>
		</member>
		<member name="M:System.Windows.Input.MouseActionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines if this converter can convert an object in the given source type to the native type of the converter. </summary>
			<returns>true if this object can perform the conversion; otherwise, false.</returns>
			<param name="context">An ITypeDescriptorContext object that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.</param>
			<param name="sourceType">The type from which you want to convert.</param>
		</member>
		<member name="M:System.Windows.Input.MouseActionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Returns a value indicating whether this converter can convert an object to the given destination type using the context. </summary>
			<returns>true if this converter can perform the operation; otherwise, false.</returns>
			<param name="context">An ITypeDescriptorContext object that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.</param>
			<param name="destinationType">A Type object that represents the type to which you want to convert.</param>
		</member>
		<member name="M:System.Windows.Input.MouseActionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary> Converts the given object to the converter's native type. </summary>
			<returns>The converted object.</returns>
			<param name="culture">A CultureInfo object that specifies the culture to represent the object.</param>
			<param name="source">The object to convert.</param>
			<param name="context">An ITypeDescriptorContext object that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.</param>
		</member>
		<member name="M:System.Windows.Input.MouseActionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> Converts the specified object to another type. The most common types to convert are to and from a string object. </summary>
			<returns>The converted object.</returns>
			<param name="culture">A CultureInfo object that specifies the culture to represent the object.</param>
			<param name="context">An ITypeDescriptorContext object that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.</param>
			<param name="destinationType">The type to convert the object to.</param>
			<param name="value">The object to convert.</param>
		</member>
		<member name="T:System.Windows.Input.MouseBinding">
			<summary>Binds a <see cref="T:System.Windows.Input.MouseGesture"></see> to an <see cref="T:System.Windows.Input.ICommand"></see>.</summary>
		</member>
		<member name="M:System.Windows.Input.MouseBinding.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseBinding"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Input.MouseBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.MouseGesture)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseBinding"></see> class with the specified <see cref="T:System.Windows.Input.ICommand"></see> and <see cref="T:System.Windows.Input.MouseGesture"></see>.</summary>
			<param name="command">Command Associated</param>
			<param name="gesture">Mmouse Gesture associated</param>
		</member>
		<member name="P:System.Windows.Input.MouseBinding.Gesture">
			<summary>Gets or sets the gesture associated with this <see cref="T:System.Windows.Input.MouseBinding"></see>. </summary>
			<returns>The gesture.</returns>
		</member>
		<member name="P:System.Windows.Input.MouseBinding.MouseAction">
			<summary>Gests or sets the <see cref="T:System.Windows.Input.MouseAction"></see> associated with this <see cref="T:System.Windows.Input.MouseBinding"></see>.</summary>
			<returns>The mouse action.</returns>
		</member>
		<member name="T:System.Windows.Input.MouseButton">
			<summary>Defines values that specify the buttons on the mouse. </summary>
		</member>
		<member name="F:System.Windows.Input.MouseButton.Left">
			<summary>The left mouse button. </summary>
		</member>
		<member name="F:System.Windows.Input.MouseButton.Middle">
			<summary>The middle mouse button. </summary>
		</member>
		<member name="F:System.Windows.Input.MouseButton.Right">
			<summary>The right mouse button. </summary>
		</member>
		<member name="F:System.Windows.Input.MouseButton.XButton1">
			<summary>The first extended mouse button. </summary>
		</member>
		<member name="F:System.Windows.Input.MouseButton.XButton2">
			<summary>The second extended mouse button. </summary>
		</member>
		<member name="T:System.Windows.Input.MouseButtonEventArgs">
			<summary>Provides data for mouse button related events. </summary>
		</member>
		<member name="M:System.Windows.Input.MouseButtonEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Windows.Input.MouseButton)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseButtonEventArgs"></see> class with the specified <see cref="T:System.Windows.Input.MouseDevice"></see>, timestamp, and <see cref="T:System.Windows.Input.MouseButton"></see>. </summary>
			<param name="mouse">The logical Mouse device associated with this event.</param>
			<param name="timestamp">The time when the input occurred.</param>
			<param name="button">The mouse button whose state is being described.</param>
		</member>
		<member name="M:System.Windows.Input.MouseButtonEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Windows.Input.MouseButton,System.Windows.Input.StylusDevice)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseButtonEventArgs"></see> class with the specified <see cref="T:System.Windows.Input.MouseDevice"></see>, timestamp, <see cref="T:System.Windows.Input.MouseButton"></see>, and <see cref="T:System.Windows.Input.StylusDevice"></see>.  .</summary>
			<param name="mouse">The logical mouse device associated with this event.</param>
			<param name="timestamp">The time the event occurred.</param>
			<param name="stylusDevice">The stylus device associated with this event.</param>
			<param name="button">The button associated with this event.</param>
		</member>
		<member name="M:System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
			<summary>The mechanism used to call the type-specific handler on the target. </summary>
			<param name="genericTarget">The target to call the handler on.</param>
			<param name="genericHandler">The generic handler to call in a type-specific way.</param>
		</member>
		<member name="P:System.Windows.Input.MouseButtonEventArgs.ButtonState">
			<summary>Gets the state of the button associated with the event. </summary>
			<returns>The state the button is in.</returns>
		</member>
		<member name="P:System.Windows.Input.MouseButtonEventArgs.ChangedButton">
			<summary>Gets the button associated with the event. </summary>
			<returns>The button which was pressed.</returns>
		</member>
		<member name="P:System.Windows.Input.MouseButtonEventArgs.ClickCount">
			<summary>Gets the number of times the button was clicked. </summary>
			<returns>The number of times the mouse button was clicked.</returns>
		</member>
		<member name="T:System.Windows.Input.MouseButtonEventHandler">
			<summary>Represents the method used to handle mouse button related events. </summary>
		</member>
		<member name="T:System.Windows.Input.MouseButtonState">
			<summary>Specifies the possible states of a mouse button. </summary>
		</member>
		<member name="F:System.Windows.Input.MouseButtonState.Pressed">
			<summary>The button is pressed. </summary>
		</member>
		<member name="F:System.Windows.Input.MouseButtonState.Released">
			<summary>The button is released. </summary>
		</member>
		<member name="T:System.Windows.Input.MouseDevice">
			<summary>Represents the mouse device for a specific thread. </summary>
		</member>
		<member name="M:System.Windows.Input.MouseDevice.Capture(System.Windows.IInputElement)">
			<summary>Redirects mouse events to the specified <see cref="T:System.Windows.IInputElement"></see>. </summary>
			<returns>true if the element was able to capture the mouse; otherwise, false.</returns>
			<param name="element">The element to capture the mouse.</param>
		</member>
		<member name="M:System.Windows.Input.MouseDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)">
			<summary>Redirects mouse input to the specified <see cref="T:System.Windows.IInputElement"></see> using the specified <see cref="T:System.Windows.Input.CaptureMode"></see>.</summary>
			<returns>true if the element was able to capture the mouse; otherwise, false.</returns>
			<param name="element">The element to capture the mouse..</param>
			<param name="captureMode">The capture policy to use.</param>
		</member>
		<member name="M:System.Windows.Input.MouseDevice.GetButtonState(System.Windows.Input.MouseButton)">
			<summary>Gets the state of the specified mouse button.</summary>
			<returns>The state of the button.</returns>
			<param name="mouseButton">The button which is being queried.</param>
		</member>
		<member name="M:System.Windows.Input.MouseDevice.GetPosition(System.Windows.IInputElement)">
			<summary>Gets the position of the mouse relative to a specified <see cref="T:System.Windows.IInputElement"></see>.</summary>
			<returns>The position of the mouse in relation to the parameter relativeTo.</returns>
			<param name="relativeTo">The frame of reference in which to calculate the position of the mouse.</param>
		</member>
		<member name="M:System.Windows.Input.MouseDevice.SetCursor(System.Windows.Input.Cursor)">
			<summary>Sets the mouse pointer to the specified <see cref="T:System.Windows.Input.Cursor"></see></summary>
			<returns>true if the mouse cursor is set; otherwise, false.</returns>
			<param name="cursor">The cursor to set the mouse pointer to.</param>
		</member>
		<member name="P:System.Windows.Input.MouseDevice.Captured">
			<summary> Gets the <see cref="T:System.Windows.IInputElement"></see> that is captured by the mouse. </summary>
			<returns>The element which is captured by the mouse.</returns>
		</member>
		<member name="P:System.Windows.Input.MouseDevice.DirectlyOver">
			<summary>Gets the <see cref="T:System.Windows.IInputElement"></see> that the mouse pointer is directly over. </summary>
			<returns>The element the mouse pointer is over.</returns>
		</member>
		<member name="P:System.Windows.Input.MouseDevice.LeftButton">
			<summary>Gets the state of the left mouse button of this mouse device. </summary>
			<returns>The state of the button.</returns>
		</member>
		<member name="P:System.Windows.Input.MouseDevice.MiddleButton">
			<summary> The state of the middle button of this mouse device. </summary>
			<returns>The state of the button.</returns>
		</member>
		<member name="P:System.Windows.Input.MouseDevice.RightButton">
			<summary>Gets the state of the right button of this mouse device. </summary>
			<returns>The state of the button.</returns>
		</member>
		<member name="P:System.Windows.Input.MouseDevice.Target">
			<summary>Gets the <see cref="T:System.Windows.IInputElement"></see> that the input from this mouse device is sent to. </summary>
			<returns>The element that receives the input.</returns>
		</member>
		<member name="P:System.Windows.Input.MouseDevice.XButton1">
			<summary>Gets the state of the first extended button on this mouse device. </summary>
			<returns>The state of the button.</returns>
		</member>
		<member name="P:System.Windows.Input.MouseDevice.XButton2">
			<summary>Gets the state of the second extended button of this mouse device. </summary>
			<returns>The state of the button.</returns>
		</member>
		<member name="T:System.Windows.Input.MouseEventArgs">
			<summary>Provides data for Mouse related events </summary>
		</member>
		<member name="M:System.Windows.Input.MouseEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseEventArgs"></see> class using the specified <see cref="T:System.Windows.Input.MouseDevice"></see> and the specified timestamp </summary>
			<param name="mouse">The logical Mouse device associated with this event.</param>
			<param name="timestamp">The time when the input occurred.</param>
		</member>
		<member name="M:System.Windows.Input.MouseEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Windows.Input.StylusDevice)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseEventArgs"></see> class using the specified <see cref="T:System.Windows.Input.MouseDevice"></see>, the specified timestamp, and the specified <see cref="T:System.Windows.Input.StylusDevice"></see>.</summary>
			<param name="mouse">The logical Mouse device associated with this event.</param>
			<param name="timestamp">The time when the input occurred.</param>
			<param name="stylusDevice">The logical Stylus device associated with this event.</param>
		</member>
		<member name="M:System.Windows.Input.MouseEventArgs.GetPosition(System.Windows.IInputElement)">
			<summary>Gets the position of the mouse pointer relative to the specified element.</summary>
			<returns>The x and y coordinates of the position of the mouse relative to the specified oject.</returns>
			<param name="relativeTo">The frame of reference in which to calculate the position of the mouse pointer to.</param>
		</member>
		<member name="M:System.Windows.Input.MouseEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
			<summary> The mechanism used to call the type-specific handler on the target. </summary>
			<param name="genericTarget">The target to call the handler on.</param>
			<param name="genericHandler">The generic handler to call in a type-specific way.</param>
		</member>
		<member name="P:System.Windows.Input.MouseEventArgs.LeftButton">
			<summary>Gets the current state of the left button.</summary>
			<returns>The current state of the left mouse button which is either <see cref="F:System.Windows.Input.MouseButtonState.Pressed"></see> or <see cref="F:System.Windows.Input.MouseButtonState.Released"></see>.</returns>
		</member>
		<member name="P:System.Windows.Input.MouseEventArgs.MiddleButton">
			<summary>Gets the current state of the middle mouse button.</summary>
			<returns>The current state of the middle button which is either <see cref="F:System.Windows.Input.MouseButtonState.Pressed"></see> or <see cref="F:System.Windows.Input.MouseButtonState.Released"></see>.</returns>
		</member>
		<member name="P:System.Windows.Input.MouseEventArgs.MouseDevice">
			<summary>Gets the mouse device associated with this event. </summary>
			<returns>The mouse associated with this event.</returns>
		</member>
		<member name="P:System.Windows.Input.MouseEventArgs.RightButton">
			<summary>Gets the current state of the right mouse button.</summary>
			<returns>The current state of the right button which is either <see cref="F:System.Windows.Input.MouseButtonState.Pressed"></see> or <see cref="F:System.Windows.Input.MouseButtonState.Released"></see>.</returns>
		</member>
		<member name="P:System.Windows.Input.MouseEventArgs.StylusDevice">
			<summary>Gets the stylus devices associated with this event.</summary>
			<returns>The stylus associated with this event.</returns>
		</member>
		<member name="P:System.Windows.Input.MouseEventArgs.XButton1">
			<summary>Gets the current state of the first extended button.</summary>
			<returns>The current state of the first extended button which is either <see cref="F:System.Windows.Input.MouseButtonState.Pressed"></see> or <see cref="F:System.Windows.Input.MouseButtonState.Released"></see>.</returns>
		</member>
		<member name="P:System.Windows.Input.MouseEventArgs.XButton2">
			<summary>Gets the state of the second extended button.</summary>
			<returns>The current state of the second extended button which is either <see cref="F:System.Windows.Input.MouseButtonState.Pressed"></see> or <see cref="F:System.Windows.Input.MouseButtonState.Released"></see>.</returns>
		</member>
		<member name="T:System.Windows.Input.MouseEventHandler">
			<summary>Represents a method which handles mouse related events. </summary>
		</member>
		<member name="T:System.Windows.Input.MouseGesture">
			<summary>Creates an <see cref="T:System.Windows.Input.InputGesture"></see> consisting of a <see cref="T:System.Windows.Input.MouseAction"></see> with or without a set of <see cref="T:System.Windows.Input.ModifierKeys"></see>. </summary>
		</member>
		<member name="M:System.Windows.Input.MouseGesture.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseGesture"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Input.MouseGesture.#ctor(System.Windows.Input.MouseAction)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseGesture"></see> class using the specified <see cref="T:System.Windows.Input.MouseAction"></see>.</summary>
			<param name="mouseAction">Mouse Action</param>
		</member>
		<member name="M:System.Windows.Input.MouseGesture.#ctor(System.Windows.Input.MouseAction,System.Windows.Input.ModifierKeys)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseGesture"></see> class using the specified <see cref="T:System.Windows.Input.MouseAction"></see> and <see cref="T:System.Windows.Input.ModifierKeys"></see>.</summary>
			<param name="mouseAction">Mouse Action</param>
			<param name="modifiers">Modifiers</param>
		</member>
		<member name="M:System.Windows.Input.MouseGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)">
			<summary>Determines whether <see cref="T:System.Windows.Input.MouseGesture"></see> matches the input associated with the specified <see cref="T:System.Windows.Input.InputEventArgs"></see> object.</summary>
			<returns>true if the event data matches this <see cref="T:System.Windows.Input.MouseGesture"></see>; otherwise, false</returns>
		</member>
		<member name="P:System.Windows.Input.MouseGesture.Modifiers">
			<summary>Gets or sets the modifier keys associated with this <see cref="T:System.Windows.Input.MouseGesture"></see>.</summary>
			<returns>The modifier keys associated with this gesture.</returns>
		</member>
		<member name="P:System.Windows.Input.MouseGesture.MouseAction">
			<summary>Gets or sets the <see cref="T:System.Windows.Input.MouseAction"></see> associated with this gesture. </summary>
			<returns>The mouse action associated with this gesture.</returns>
		</member>
		<member name="T:System.Windows.Input.MouseGestureConverter">
			<summary> Provides a type converter to convert data for a MouseGesture to and from a string. </summary>
		</member>
		<member name="M:System.Windows.Input.MouseGestureConverter.#ctor">
			<summary> Initializes a new instance of the MouseGestureConverter class. </summary>
		</member>
		<member name="M:System.Windows.Input.MouseGestureConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines whether this converter can convert an object in the given source type to the native type of the converter. </summary>
			<returns>true if this object can perform the conversion; otherwise, false.</returns>
			<param name="context">An ITypeDescriptorContext object that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.</param>
			<param name="sourceType">The type from which you want to convert.</param>
		</member>
		<member name="M:System.Windows.Input.MouseGestureConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Returns a value indicating whether this converter can convert an object to the given destination type, using the context. </summary>
			<returns>true if this converter can perform the operation; otherwise, false.</returns>
			<param name="context">An ITypeDescriptorContext object that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.</param>
			<param name="destinationType">A Type object that represents the type to which you want to convert.</param>
		</member>
		<member name="M:System.Windows.Input.MouseGestureConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary> Converts the given object to the converter's native type. </summary>
			<returns>The converted object.</returns>
			<param name="culture">A CultureInfo object that specifies the culture to represent the object.</param>
			<param name="source">The object to convert.</param>
			<param name="context">An ITypeDescriptorContext object that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.</param>
		</member>
		<member name="M:System.Windows.Input.MouseGestureConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> Converts the specified object to another type. The most common types to convert are to and from a string object. </summary>
			<returns>The converted object.</returns>
			<param name="culture">A CultureInfo object that specifies the culture to represent the object.</param>
			<param name="context">An ITypeDescriptorContext object that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.</param>
			<param name="destinationType">The type to convert the object to.</param>
			<param name="value">The object to convert.</param>
		</member>
		<member name="T:System.Windows.Input.MouseWheelEventArgs">
			<summary>Provides event data for the state of the mouse wheel. </summary>
		</member>
		<member name="M:System.Windows.Input.MouseWheelEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Int32)">
			<summary> Initializes a new instance of the MouseWheelEventArgs class. </summary>
			<param name="mouse">The Mouse device associated with this event.</param>
			<param name="timestamp">The time when the input occurred.</param>
			<param name="delta">The amount the wheel has changed.</param>
		</member>
		<member name="M:System.Windows.Input.MouseWheelEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
			<summary>The mechanism used to call the type-specific handler on the target. </summary>
			<param name="genericTarget">The target to call the handler on.</param>
			<param name="genericHandler">The generic handler to call in a type-specific way.</param>
		</member>
		<member name="P:System.Windows.Input.MouseWheelEventArgs.Delta">
			<summary>The amount that the mouse wheel has changed.</summary>
			<returns>The amount the wheel has changed.</returns>
		</member>
		<member name="T:System.Windows.Input.MouseWheelEventHandler">
			<summary>Represents the method that handles MouseWheel events. </summary>
		</member>
		<member name="T:System.Windows.Input.NavigationCommands">
			<summary>Provides a standard set of navigation related commands.</summary>
		</member>
		<member name="P:System.Windows.Input.NavigationCommands.BrowseBack">
			<summary> Represents the Browse Back command. </summary>
			<returns>The command.Default ValuesKey GestureDelUI TextDeleteWM_APPCOMMANDAPPCOMMAND_BROWSER_BACK</returns>
		</member>
		<member name="P:System.Windows.Input.NavigationCommands.BrowseForward">
			<summary> Represents the Browse Forward command. </summary>
			<returns>The command.Default ValuesKey GestureDelUI TextDeleteWM_APPCOMMANDAPPCOMMAND_BROWSER_FORWARD</returns>
		</member>
		<member name="P:System.Windows.Input.NavigationCommands.BrowseHome">
			<summary> Represents the Browse Home command. </summary>
			<returns>The command.Default ValuesKey GestureDelUI TextDeleteWM_APPCOMMANDAPPCOMMAND_BROWSER_HOME</returns>
		</member>
		<member name="P:System.Windows.Input.NavigationCommands.BrowseStop">
			<summary> Represents the Browse Stop command. </summary>
			<returns>The command.Default ValuesKey GestureDelUI TextDeleteWM_APPCOMMANDAPPCOMMAND_BROWSER_STOP</returns>
		</member>
		<member name="P:System.Windows.Input.NavigationCommands.DecreaseZoom">
			<summary> Represents the Decrease Zoom command. </summary>
			<returns>The command.Default ValuesKey GestureDelUI TextDeleteWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.NavigationCommands.Favorites">
			<summary> Represents the Favorites command. </summary>
			<returns>The command.Default ValuesKey GestureDelUI TextDeleteWM_APPCOMMANDAPPCOMMAND_BROWSER_FAVORITES</returns>
		</member>
		<member name="P:System.Windows.Input.NavigationCommands.FirstPage">
			<summary>Represents the First page command.</summary>
			<returns>The command.Default ValuesKey GestureDelUI TextDeleteWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.NavigationCommands.GoToPage">
			<summary>Represents the Go To Page command.</summary>
			<returns>The command.Default ValuesKey GestureDelUI TextDeleteWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.NavigationCommands.IncreaseZoom">
			<summary> Represents the Increase Zoom command. </summary>
			<returns>The command.Default ValuesKey GestureDelUI TextDeleteWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.NavigationCommands.LastPage">
			<summary>Represents the Last Page command.</summary>
			<returns>The command.Default ValuesKey GestureDelUI TextDeleteWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.NavigationCommands.NavigateJournal">
			<summary>Represents the Navigate Journal command.</summary>
			<returns>The command.Default ValuesKey GestureDelUI TextDeleteWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.NavigationCommands.NextPage">
			<summary>Represents the Next Page command.</summary>
			<returns>The command.Default ValuesKey GestureDelUI TextDeleteWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.NavigationCommands.PreviousPage">
			<summary>Represents the Previous  Page command.</summary>
			<returns>The command.Default ValuesKey GestureDelUI TextDeleteWM_APPCOMMAND</returns>
		</member>
		<member name="P:System.Windows.Input.NavigationCommands.Refresh">
			<summary> Represents the Refresh command. </summary>
			<returns>The command.Default ValuesKey GestureDelUI TextDeleteWM_APPCOMMANDAPPCOMMAND_BROWSER_REFRESH</returns>
		</member>
		<member name="P:System.Windows.Input.NavigationCommands.Search">
			<summary>Represents the Search command. </summary>
			<returns>The command.Default ValuesKey GestureDelUI TextDeleteWM_APPCOMMANDAPPCOMMAND_BROWSER_SEARCH</returns>
		</member>
		<member name="P:System.Windows.Input.NavigationCommands.Zoom">
			<summary> Represents the Zoom command. </summary>
			<returns>The command.Default ValuesKey GestureDelUI TextDeleteWM_APPCOMMAND</returns>
		</member>
		<member name="T:System.Windows.Input.NotifyInputEventArgs">
			<summary> Provides information about an input event being processed by the input manager. </summary>
		</member>
		<member name="T:System.Windows.Input.PreProcessInputEventArgs">
			<summary> Allows the handler to cancel the processing of an input event. </summary>
		</member>
		<member name="T:System.Windows.Input.ProcessInputEventArgs">
			<summary> Provides access to the input manager's staging area. </summary>
		</member>
		<member name="M:System.Windows.Input.ProcessInputEventArgs.PeekInput">
			<summary> Returns the input event on the top of the staging area. </summary>
			<returns>The input event that is on the top of the staging area. This can be null, if the staging area is empty.</returns>
		</member>
		<member name="M:System.Windows.Input.ProcessInputEventArgs.PopInput">
			<summary> Pops off the input event on the top of the staging area. </summary>
			<returns>The input event that was on the top of the staging area. This can be null, if the staging area was empty.</returns>
		</member>
		<member name="M:System.Windows.Input.ProcessInputEventArgs.PushInput(System.Windows.Input.StagingAreaInputItem)">
			<summary> Pushes an input event onto the top of the staging area.             </summary>
			<returns>The staging area input item that wraps the specified input.</returns>
			<param name="input">The input event to place on the staging area. This may not be null, and may not already exist in the staging area.</param>
		</member>
		<member name="M:System.Windows.Input.ProcessInputEventArgs.PushInput(System.Windows.Input.InputEventArgs,System.Windows.Input.StagingAreaInputItem)">
			<summary> Pushes an input event onto the top of the staging area.             </summary>
			<returns>The staging area input item that wraps the specified input.</returns>
			<param name="promote">An existing staging area item to promote the state from.</param>
			<param name="input">The input event to place on the staging area. This may not be null, and may not already exist in the staging area.</param>
		</member>
		<member name="T:System.Windows.Input.QueryCursorEventArgs">
			<summary> Provides data for the QueryCursor event. </summary>
		</member>
		<member name="M:System.Windows.Input.QueryCursorEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32)">
			<summary> Initializes a new instance of the QueryCursorEventArgs class. </summary>
			<param name="mouse">The logical Mouse device associated with this event.</param>
			<param name="timestamp">The time when the input occured.</param>
		</member>
		<member name="M:System.Windows.Input.QueryCursorEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
			<summary> The mechanism used to call the type-specific handler on the target. </summary>
			<param name="genericTarget">The target to call the handler on.</param>
			<param name="genericHandler">The generic handler to call in a type-specific way.</param>
		</member>
		<member name="T:System.Windows.Input.RoutedCommand">
			<summary>Defines an <see cref="T:System.Windows.Input.ICommand"></see> which is routed through the element tree.</summary>
		</member>
		<member name="M:System.Windows.Input.RoutedCommand.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand"></see> class with the specified name and owner type.</summary>
			<param name="name">Declared name for serialization.</param>
			<param name="ownerType">The type which is registering the command.</param>
		</member>
		<member name="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand"></see> class with the specified name, owner type, and collection of gestures.</summary>
			<param name="name">Declared name for serialization.</param>
			<param name="inputGestures">Default input gestures associated with this command.</param>
			<param name="ownerType">The type that is registering the command.</param>
		</member>
		<member name="E:System.Windows.Input.RoutedCommand.CanExecuteChanged">
			<summary>Occurs when the ability of the command to execute on the current command target has chanted.</summary>
		</member>
		<member name="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)">
			<summary>Determines whether this <see cref="T:System.Windows.Input.RoutedCommand"></see> can execute on the current command target.</summary>
			<returns>true, if the command can execute on the current command target; otherwise, false.</returns>
			<param name="parameter">A user defined data type.</param>
			<param name="target">The command target.</param>
		</member>
		<member name="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">
			<summary>Executes the <see cref="T:System.Windows.Input.RoutedCommand"></see> on the current command target.</summary>
		</member>
		<member name="M:System.Windows.Input.RoutedCommand.System.Windows.Input.ICommand.Execute(System.Object)">
			<summary>This type or member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Input.RoutedCommand.InputGestures">
			<summary>Gets the collection of <see cref="T:System.Windows.Input.InputGesture"></see> objects that are associated with this command.</summary>
			<returns>The input gestures.</returns>
		</member>
		<member name="P:System.Windows.Input.RoutedCommand.Name">
			<summary>Gets the name of the command. </summary>
			<returns>The name..</returns>
		</member>
		<member name="T:System.Windows.Input.RoutedUICommand">
			<summary>Defines an <see cref="T:System.Windows.Input.ICommand"></see> which is routed through the element tree and contains a text property.</summary>
		</member>
		<member name="M:System.Windows.Input.RoutedUICommand.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedUICommand"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Input.RoutedUICommand.#ctor(System.String,System.String,System.Type)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedUICommand"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Input.RoutedUICommand.#ctor(System.String,System.String,System.Type,System.Windows.Input.InputGestureCollection)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedUICommand"></see> class.</summary>
		</member>
		<member name="T:System.Windows.Input.SpeechMode">
			<summary>Describes a mode of interpretation for speech input.</summary>
		</member>
		<member name="F:System.Windows.Input.SpeechMode.Command">
			<summary>Speech input is interpreted as commands. </summary>
		</member>
		<member name="F:System.Windows.Input.SpeechMode.Dictation">
			<summary>Speech input is interpreted as dictation. </summary>
		</member>
		<member name="F:System.Windows.Input.SpeechMode.Indeterminate">
			<summary>The speech input mode is indeterminate.</summary>
		</member>
		<member name="T:System.Windows.Input.StagingAreaInputItem">
			<summary> This class encapsulates an input event while it is being processed by the input manager. </summary>
		</member>
		<member name="M:System.Windows.Input.StagingAreaInputItem.GetData(System.Object)">
			<summary> Provides storage for arbitrary data needed during the processing of this input event. </summary>
			<returns>The data previously set for this key, or null.</returns>
			<param name="key">An arbitrary key for the data. This cannot be null.</param>
		</member>
		<member name="M:System.Windows.Input.StagingAreaInputItem.SetData(System.Object,System.Object)">
			<summary> Provides storage for arbitrary data needed during the processing of this input event. </summary>
			<param name="value">The data to set for this key. This can be null.</param>
			<param name="key">An arbitrary key for the data. This cannot be null.</param>
		</member>
		<member name="T:System.Windows.Input.Stylus">
			<summary>Provides access to general information about a tablet pen.</summary>
		</member>
		<member name="E:System.Windows.Input.Stylus.GotStylusCapture">
			<summary>Occurs when an element captures the stylus events.</summary>
		</member>
		<member name="E:System.Windows.Input.Stylus.LostStylusCapture">
			<summary>Occurs when an element releases the stylus events.</summary>
		</member>
		<member name="E:System.Windows.Input.Stylus.PreviewStylusButtonDown">
			<summary>Occurs when the user presses one of the buttons on the stylus.</summary>
		</member>
		<member name="E:System.Windows.Input.Stylus.PreviewStylusButtonUp">
			<summary>Occurs when the user releases one of the buttons on the stylus.</summary>
		</member>
		<member name="E:System.Windows.Input.Stylus.PreviewStylusDown">
			<summary>Occurs when user touches the tip of the stylus to the tablet.</summary>
		</member>
		<member name="E:System.Windows.Input.Stylus.PreviewStylusInAirMove">
			<summary>Occurs when the stylus moves while it is in range of, but not touching, the tablet.</summary>
		</member>
		<member name="E:System.Windows.Input.Stylus.PreviewStylusInRange">
			<summary>Occurs when the stylus comes within range of the tablet.</summary>
		</member>
		<member name="E:System.Windows.Input.Stylus.PreviewStylusMove">
			<summary>Occurs when the stylus moves while it is touching the tablet.</summary>
		</member>
		<member name="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange">
			<summary>Occurs when the stylus goes out of range of the tablet.</summary>
		</member>
		<member name="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture">
			<summary>Occurs when the user makes a system gesture with this stylus.</summary>
		</member>
		<member name="E:System.Windows.Input.Stylus.PreviewStylusUp">
			<summary>Occurs when the user lifts the stylus from the tablet.</summary>
		</member>
		<member name="E:System.Windows.Input.Stylus.StylusButtonDown">
			<summary>Occurs when the user presses one of the buttons on the stylus.</summary>
		</member>
		<member name="E:System.Windows.Input.Stylus.StylusButtonUp">
			<summary>Occurs when the user releases one of the buttons on the stylus.</summary>
		</member>
		<member name="E:System.Windows.Input.Stylus.StylusDown">
			<summary>Occurs when the user touches the tip of the stylus to the tablet.</summary>
		</member>
		<member name="E:System.Windows.Input.Stylus.StylusEnter">
			<summary>Occurs when the stylus cursor enters the bounds of an element.</summary>
		</member>
		<member name="E:System.Windows.Input.Stylus.StylusInAirMove">
			<summary>Occurs when the stylus moves while it is in range of, but not touching, the tablet.</summary>
		</member>
		<member name="E:System.Windows.Input.Stylus.StylusInRange">
			<summary>Occurs when the stylus comes within range of the tablet.</summary>
		</member>
		<member name="E:System.Windows.Input.Stylus.StylusLeave">
			<summary>Occurs when the stylus cursor leaves the bounds of an element.</summary>
		</member>
		<member name="E:System.Windows.Input.Stylus.StylusMove">
			<summary>Occurs when the stylus moves while it is touching the tablet.</summary>
		</member>
		<member name="E:System.Windows.Input.Stylus.StylusOutOfRange">
			<summary>Occurs when the stylus goes out of range of the tablet.</summary>
		</member>
		<member name="E:System.Windows.Input.Stylus.StylusSystemGesture">
			<summary>Occurs when the user makes a system gesture with this stylus.</summary>
		</member>
		<member name="E:System.Windows.Input.Stylus.StylusUp">
			<summary>Occurs when the user raises the stylus from the Tablet PC.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.GotStylusCaptureEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Stylus.GotStylusCapture"></see> event.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.IsFlicksEnabledProperty">
			<summary>Identifies the <see cref="P:System.Windows.Input.Stylus.IsFlicksEnabled"></see> attached property.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.IsPressAndHoldEnabledProperty">
			<summary>Identifies the <see cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled"></see> attached property.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.IsTapFeedbackEnabledProperty">
			<summary>Identifies the <see cref="P:System.Windows.Input.Stylus.IsTapFeedbackEnabled"></see> attached property.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.IsTouchFeedbackEnabledProperty">
			<summary>Identifies the <see cref="P:System.Windows.Input.Stylus.IsTouchFeedbackEnabled"></see> attached property.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.LostStylusCaptureEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Stylus.LostStylusCapture"></see> event.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.PreviewStylusButtonDownEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown"></see> event.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.PreviewStylusButtonUpEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp"></see> event.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.PreviewStylusDownEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown"></see> event.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.PreviewStylusInAirMoveEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove"></see> event.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.PreviewStylusInRangeEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange"></see> event.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.PreviewStylusMoveEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove"></see> event.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.PreviewStylusOutOfRangeEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange"></see> event.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.PreviewStylusSystemGestureEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture"></see> event.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.PreviewStylusUpEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp"></see> event.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.StylusButtonDownEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Stylus.StylusButtonDown"></see> event.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.StylusButtonUpEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Stylus.StylusButtonUp"></see> event.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.StylusDownEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Stylus.StylusDown"></see> event.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.StylusEnterEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Stylus.StylusEnter"></see> event.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.StylusInAirMoveEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Stylus.StylusInAirMove"></see> event.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.StylusInRangeEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Stylus.StylusInRange"></see> event.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.StylusLeaveEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Stylus.StylusLeave"></see> event.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.StylusMoveEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Stylus.StylusMove"></see> event.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.StylusOutOfRangeEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange"></see> event.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.StylusSystemGestureEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture"></see> event.</summary>
		</member>
		<member name="F:System.Windows.Input.Stylus.StylusUpEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.Stylus.StylusUp"></see> event.</summary>
		</member>
		<member name="M:System.Windows.Input.Stylus.AddGotStylusCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.Stylus.GotStylusCapture"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.AddLostStylusCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.Stylus.LostStylusCapture"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.AddPreviewStylusButtonDownHandler(System.Windows.DependencyObject,System.Windows.Input.StylusButtonEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.AddPreviewStylusButtonUpHandler(System.Windows.DependencyObject,System.Windows.Input.StylusButtonEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.AddPreviewStylusDownHandler(System.Windows.DependencyObject,System.Windows.Input.StylusDownEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.AddPreviewStylusInAirMoveHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.AddPreviewStylusInRangeHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.AddPreviewStylusMoveHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.AddPreviewStylusOutOfRangeHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.AddPreviewStylusSystemGestureHandler(System.Windows.DependencyObject,System.Windows.Input.StylusSystemGestureEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.AddPreviewStylusUpHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.AddStylusButtonDownHandler(System.Windows.DependencyObject,System.Windows.Input.StylusButtonEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.Stylus.StylusButtonDown"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.AddStylusButtonUpHandler(System.Windows.DependencyObject,System.Windows.Input.StylusButtonEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.Stylus.StylusButtonUp"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.AddStylusDownHandler(System.Windows.DependencyObject,System.Windows.Input.StylusDownEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.Stylus.StylusDown"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.AddStylusEnterHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.Stylus.StylusEnter"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.AddStylusInAirMoveHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.Stylus.StylusInAirMove"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.AddStylusInRangeHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.Stylus.StylusInRange"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.AddStylusLeaveHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.Stylus.StylusLeave"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.AddStylusMoveHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.Stylus.StylusMove"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.AddStylusOutOfRangeHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.AddStylusSystemGestureHandler(System.Windows.DependencyObject,System.Windows.Input.StylusSystemGestureEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.AddStylusUpHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.Stylus.StylusUp"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.Capture(System.Windows.IInputElement)">
			<summary>Captures the stylus to the specified element.</summary>
			<returns>true if the stylus is captured to element; otherwise, false.</returns>
			<param name="element">The element to capture the stylus to.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)">
			<summary>Captures the stylus to the specified element.</summary>
			<returns>true if the stylus is captured to element; otherwise, false.</returns>
			<param name="element">The element to capture the stylus to.</param>
			<param name="captureMode">One of the <see cref="T:System.Windows.Input.CaptureMode"></see> values.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.GetIsFlicksEnabled(System.Windows.DependencyObject)">
			<summary>Returns whether flicks are enabled for the specified element.</summary>
			<returns>true if the specified element has flicks enabled; otherwise, false.</returns>
			<param name="element">A <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> on which to determine whether flicks are enabled.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)">
			<summary>Returns whether press and hold is enabled for the specified element. </summary>
			<returns>true if the specified element has press and hold enabled; otherwise, false;</returns>
			<param name="element">A <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> on which to determine whether press and hold is enabled.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.GetIsTapFeedbackEnabled(System.Windows.DependencyObject)">
			<summary>Returns whether tap feedback is enabled on the specified element.</summary>
			<returns>true if the specified element has tap feedback enabled; otherwise, false.</returns>
			<param name="element">A <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> on which to determine whether tap feedback enabled.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.GetIsTouchFeedbackEnabled(System.Windows.DependencyObject)">
			<summary>Returns whether touch input feedback is enabled on the specified element.</summary>
			<returns>true if touch input feedback is enabled, otherwise false.</returns>
			<param name="element">A <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> on which to determine whether touch input feedback enabled.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.RemoveGotStylusCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.Stylus.GotStylusCapture"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.RemoveLostStylusCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.Stylus.LostStylusCapture"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.RemovePreviewStylusButtonDownHandler(System.Windows.DependencyObject,System.Windows.Input.StylusButtonEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.RemovePreviewStylusButtonUpHandler(System.Windows.DependencyObject,System.Windows.Input.StylusButtonEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.RemovePreviewStylusDownHandler(System.Windows.DependencyObject,System.Windows.Input.StylusDownEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.RemovePreviewStylusInAirMoveHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.RemovePreviewStylusInRangeHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.RemovePreviewStylusMoveHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.RemovePreviewStylusOutOfRangeHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.RemovePreviewStylusSystemGestureHandler(System.Windows.DependencyObject,System.Windows.Input.StylusSystemGestureEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.RemovePreviewStylusUpHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.RemoveStylusButtonDownHandler(System.Windows.DependencyObject,System.Windows.Input.StylusButtonEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.Stylus.StylusButtonDown"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.RemoveStylusButtonUpHandler(System.Windows.DependencyObject,System.Windows.Input.StylusButtonEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.Stylus.StylusButtonUp"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.RemoveStylusDownHandler(System.Windows.DependencyObject,System.Windows.Input.StylusDownEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.Stylus.StylusDown"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.RemoveStylusEnterHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.Stylus.StylusEnter"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.RemoveStylusInAirMoveHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.Stylus.StylusInAirMove"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.RemoveStylusInRangeHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.Stylus.StylusInRange"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.RemoveStylusLeaveHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.Stylus.StylusLeave"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.RemoveStylusMoveHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.Stylus.StylusMove"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.RemoveStylusOutOfRangeHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.RemoveStylusSystemGestureHandler(System.Windows.DependencyObject,System.Windows.Input.StylusSystemGestureEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.RemoveStylusUpHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.Stylus.StylusUp"></see> event.</summary>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> that listens to this event.</param>
			<param name="handler">The event handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.SetIsFlicksEnabled(System.Windows.DependencyObject,System.Boolean)">
			<summary>Enables or disables flicks on the specified element.</summary>
			<param name="enabled">true to enable flicks; false to disable flicks.</param>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> on which to enable flicks.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)">
			<summary>Enables or disables press and hold on the specified element.</summary>
			<param name="enabled">true to enable press and hold; false to disable press and hold.</param>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> on which to enable press and hold.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.SetIsTapFeedbackEnabled(System.Windows.DependencyObject,System.Boolean)">
			<summary>Enables or disables tap feedback on the specified element.</summary>
			<param name="enabled">true to enable tap feedback; false to disable tap feedback.</param>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> on which to enable tap feedback.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.SetIsTouchFeedbackEnabled(System.Windows.DependencyObject,System.Boolean)">
			<summary>Enables or disables touch input feedback on the specified element.</summary>
			<param name="enabled">true to enable touch input feedback; false to disable touch input feedback.</param>
			<param name="element">The <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.ContentElement"></see> on which to enable tap feedback.</param>
		</member>
		<member name="M:System.Windows.Input.Stylus.Synchronize">
			<summary>Synchronizes the cursor and the user interface.</summary>
		</member>
		<member name="P:System.Windows.Input.Stylus.Captured">
			<summary>Gets the element to which the stylus is bound.</summary>
			<returns>The <see cref="T:System.Windows.IInputElement"></see> to which the stylus is bound.</returns>
		</member>
		<member name="P:System.Windows.Input.Stylus.CurrentStylusDevice">
			<summary>Gets the stylus that represents the stylus currently in use.</summary>
			<returns>The <see cref="T:System.Windows.Input.StylusDevice"></see> that represents the stylus currently in use.</returns>
		</member>
		<member name="P:System.Windows.Input.Stylus.DirectlyOver">
			<summary>Gets the element that is directly beneath the stylus.</summary>
			<returns>The <see cref="T:System.Windows.IInputElement"></see> that is directly beneath the stylus.</returns>
		</member>
		<member name="P:System.Windows.Input.Stylus.IsFlicksEnabled">
			<summary>Gets or sets a value indicating whether flicks are enabled.</summary>
			<returns>true if flicks are enabled; otherwise, false. </returns>
		</member>
		<member name="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled">
			<summary>Gets or sets a values indicating whether press and hold is enabled.</summary>
			<returns>true if press and hold is enabled; otherwise, false;</returns>
		</member>
		<member name="P:System.Windows.Input.Stylus.IsTapFeedbackEnabled">
			<summary>Gets or sets whether a value indicating whether tap feedback is enabled.</summary>
			<returns>true if tap feedback is enabled, otherwise false.</returns>
		</member>
		<member name="P:System.Windows.Input.Stylus.IsTouchFeedbackEnabled">
			<summary>Gets or sets whether a value indicating whether touch feedback is enabled.</summary>
			<returns>true if touch feedback is enabled, otherwise false.</returns>
		</member>
		<member name="T:System.Windows.Input.StylusButton">
			<summary>Represents a button on a stylus.</summary>
		</member>
		<member name="P:System.Windows.Input.StylusButton.Guid">
			<summary>Gets the <see cref="T:System.Guid"></see> that represents the stylus button.</summary>
			<returns>The <see cref="T:System.Guid"></see> property that represents the stylus button.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusButton.Name">
			<summary>Gets the name of the stylus button.</summary>
			<returns>The name of the stylus button.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusButton.StylusButtonState">
			<summary>Gets the state of the stylus button.</summary>
			<returns>One of the <see cref="T:System.Windows.Input.StylusButtonState"></see> values.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusButton.StylusDevice">
			<summary>Gets the stylus that this button belongs to.</summary>
			<returns>A <see cref="T:System.Windows.Input.StylusDevice"></see> that represents the current stylus.</returns>
		</member>
		<member name="T:System.Windows.Input.StylusButtonCollection">
			<summary>Contains a collection of <see cref="T:System.Windows.Input.StylusButton"></see> objects.</summary>
		</member>
		<member name="M:System.Windows.Input.StylusButtonCollection.GetStylusButtonByGuid(System.Guid)">
			<summary>Gets the <see cref="T:System.Windows.Input.StylusButton"></see> that the specified GUID identifies.</summary>
			<returns>The <see cref="T:System.Windows.Input.StylusButton"></see> of the specified GUID.</returns>
			<param name="guid">The <see cref="T:System.Guid"></see> that specifies the desired <see cref="T:System.Windows.Input.StylusButton"></see>.</param>
		</member>
		<member name="T:System.Windows.Input.StylusButtonEventArgs">
			<summary>Provides data for the <see cref="E:System.Windows.UIElement.StylusButtonDown"></see> and <see cref="E:System.Windows.UIElement.StylusButtonUp"></see> events. </summary>
		</member>
		<member name="M:System.Windows.Input.StylusButtonEventArgs.#ctor(System.Windows.Input.StylusDevice,System.Int32,System.Windows.Input.StylusButton)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusButtonEventArgs"></see> class. </summary>
			<param name="timestamp">The time when the event occurs.</param>
			<param name="button">The <see cref="T:System.Windows.Input.StylusButton"></see> that raises the event.</param>
			<param name="stylusDevice">The <see cref="T:System.Windows.Input.StylusDevice"></see> to associate with this event.</param>
		</member>
		<member name="P:System.Windows.Input.StylusButtonEventArgs.StylusButton">
			<summary>Gets the <see cref="T:System.Windows.Input.StylusButton"></see> that raises this event.</summary>
			<returns>The <see cref="T:System.Windows.Input.StylusButton"></see> that raises this event.</returns>
		</member>
		<member name="T:System.Windows.Input.StylusButtonEventHandler">
			<summary>Represents the method that handles the <see cref="E:System.Windows.UIElement.StylusButtonDown"></see> event or <see cref="E:System.Windows.UIElement.StylusButtonUp"></see> event of a <see cref="T:System.Windows.UIElement"></see>. </summary>
		</member>
		<member name="T:System.Windows.Input.StylusButtonState">
			<summary>Represents the state of a <see cref="T:System.Windows.Input.StylusButton"></see>.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusButtonState.Down">
			<summary>The button is pressed down.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusButtonState.Up">
			<summary>The button is up.</summary>
		</member>
		<member name="T:System.Windows.Input.StylusDevice">
			<summary>Represents a tablet pen used with a Tablet PC.</summary>
		</member>
		<member name="M:System.Windows.Input.StylusDevice.Capture(System.Windows.IInputElement)">
			<summary>Binds input from the stylus to the specified element.</summary>
			<returns>true if the input element is captured successfully; otherwise, false. The default is false.</returns>
			<param name="element">The element to which the stylus is bound.</param>
			<exception cref="T:System.ArgumentNullException">element is null.</exception>
			<exception cref="T:System.InvalidOperationException">element is neither <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.FrameworkContentElement"></see>.</exception>
		</member>
		<member name="M:System.Windows.Input.StylusDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)">
			<summary>Binds the stylus to the specified element.</summary>
			<returns>true if the input element is captured successfully; otherwise, false. The default is false.</returns>
			<param name="captureMode">One of the <see cref="T:System.Windows.Input.CaptureMode"></see> values.</param>
			<param name="Element">The element to which the stylus is bound.</param>
			<exception cref="T:System.ArgumentNullException">element or captureMode is null.</exception>
			<exception cref="T:System.InvalidOperationException">element is neither <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.FrameworkContentElement"></see>.</exception>
		</member>
		<member name="M:System.Windows.Input.StylusDevice.GetPosition(System.Windows.IInputElement)">
			<summary>Gets the position of the stylus.</summary>
			<returns>A <see cref="T:System.Windows.Point"></see> that represents the position of the stylus, in relation to relativeTo.</returns>
			<param name="relativeTo">The <see cref="T:System.Windows.IInputElement"></see> to which the (x, y) coordinates are mapped.</param>
			<exception cref="T:System.InvalidOperationException">relativeTo is neither <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.FrameworkContentElement"></see>.</exception>
		</member>
		<member name="M:System.Windows.Input.StylusDevice.GetStylusPoints(System.Windows.IInputElement)">
			<summary>Returns a <see cref="T:System.Windows.Input.StylusPointCollection"></see> that contains <see cref="T:System.Windows.Input.StylusPoint"></see> objects collected from the stylus.</summary>
			<returns>A <see cref="T:System.Windows.Input.StylusPointCollection"></see> that contains <see cref="T:System.Windows.Input.StylusPoint"></see> objects that the stylus collected.</returns>
			<param name="relativeTo">The <see cref="T:System.Windows.IInputElement"></see> to which the (x, y) coordinates in the <see cref="T:System.Windows.Input.StylusPointCollection"></see> are mapped.</param>
			<exception cref="T:System.InvalidOperationException">relativeTo is neither <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.FrameworkContentElement"></see>.</exception>
		</member>
		<member name="M:System.Windows.Input.StylusDevice.GetStylusPoints(System.Windows.IInputElement,System.Windows.Input.StylusPointDescription)">
			<summary>Returns a <see cref="T:System.Windows.Input.StylusPointCollection"></see> that contains <see cref="T:System.Windows.Input.StylusPoint"></see> objects collected from the stylus and uses the specified <see cref="T:System.Windows.Input.StylusPointDescription"></see>.</summary>
			<returns>A <see cref="T:System.Windows.Input.StylusPointCollection"></see> that contains <see cref="T:System.Windows.Input.StylusPoint"></see> objects that the stylus collected.</returns>
			<param name="subsetToReformatTo">The <see cref="T:System.Windows.Input.StylusPointDescription"></see> to be used by the <see cref="T:System.Windows.Input.StylusPointCollection"></see>.</param>
			<param name="relativeTo">The <see cref="T:System.Windows.IInputElement"></see> to which the (x, y) coordinates in the <see cref="T:System.Windows.Input.StylusPointCollection"></see> are mapped.</param>
			<exception cref="T:System.InvalidOperationException">relativeTo is neither <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.FrameworkContentElement"></see>.</exception>
		</member>
		<member name="M:System.Windows.Input.StylusDevice.Synchronize">
			<summary>Synchronizes the cursor and the user interface.</summary>
		</member>
		<member name="M:System.Windows.Input.StylusDevice.ToString">
			<summary>Returns the name of the stylus device.</summary>
			<returns>The name of the <see cref="T:System.Windows.Input.StylusDevice"></see>.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusDevice.ActiveSource">
			<summary>Gets the <see cref="T:System.Windows.PresentationSource"></see> that reports current input for the stylus.</summary>
			<returns>The <see cref="T:System.Windows.PresentationSource"></see> that reports current input for the stylus.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusDevice.Captured">
			<summary>Gets the element that captured the stylus.</summary>
			<returns>The <see cref="T:System.Windows.IInputElement"></see> that captured the stylus.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusDevice.DirectlyOver">
			<summary>Gets the graphical element directly beneath the cursor.</summary>
			<returns>The <see cref="T:System.Windows.IInputElement"></see> directly beneath the cursor.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusDevice.Id">
			<summary>Gets the identifier for the stylus device.</summary>
			<returns>The identifier for the stylus device.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusDevice.InAir">
			<summary>Gets whether the tablet pen is above, and not in contact with, the digitizer.</summary>
			<returns>true if the pen is above, and not in contact with, the digitizer; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusDevice.InRange">
			<summary>Gets a value that indicates whether the tablet pen is in range of the digitizer.</summary>
			<returns>true if the pen is within range of the digitizer; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusDevice.Inverted">
			<summary>Gets a value that indicates whether the secondary tip of the stylus is in use.</summary>
			<returns>true if the secondary tip of the stylus is in use; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusDevice.Name">
			<summary>Gets the name of the stylus.</summary>
			<returns>The name of the stylus.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusDevice.StylusButtons">
			<summary>Gets the stylus buttons on the stylus.</summary>
			<returns>A reference to a <see cref="T:System.Windows.Input.StylusButtonCollection"></see> object representing all of the buttons on the stylus.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusDevice.TabletDevice">
			<summary>Gets the <see cref="T:System.Windows.Input.TabletDevice"></see> that represents the Tablet PC.</summary>
			<returns>The <see cref="T:System.Windows.Input.TabletDevice"></see> that represents the Tablet PC.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusDevice.Target">
			<summary>Gets the element that receives input.</summary>
			<returns>The <see cref="T:System.Windows.IInputElement"></see> object that receives input.</returns>
		</member>
		<member name="T:System.Windows.Input.StylusDeviceCollection">
			<summary>Contains the <see cref="T:System.Windows.Input.StylusDevice"></see> objects that represent the stylus devices of a Tablet PC.</summary>
		</member>
		<member name="T:System.Windows.Input.StylusDownEventArgs">
			<summary>Provides data for the <see cref="E:System.Windows.UIElement.StylusDown"></see> event. </summary>
		</member>
		<member name="M:System.Windows.Input.StylusDownEventArgs.#ctor(System.Windows.Input.StylusDevice,System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusDownEventArgs"></see> class. </summary>
			<param name="timestamp">A timestamp used to disambiguate instances of the event.</param>
			<param name="stylusDevice">Device instance that the event is associated with.</param>
		</member>
		<member name="M:System.Windows.Input.StylusDownEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
			<param name="genericTarget">Intended sender of the event.</param>
			<param name="genericHandler">The handler method.</param>
		</member>
		<member name="P:System.Windows.Input.StylusDownEventArgs.TapCount">
			<summary>Gets the number of times the tablet pen was tapped.</summary>
			<returns>The number of times the tablet pen was tapped.</returns>
		</member>
		<member name="T:System.Windows.Input.StylusDownEventHandler">
			<summary>Represents the method that handles the Stylus.StylusDown event, as well as several variations including the corresponding Preview event, and re-exposes the event in the base element classes. </summary>
		</member>
		<member name="T:System.Windows.Input.StylusEventArgs">
			<summary>Provides data for several of the events that are associated with the <see cref="T:System.Windows.Input.Stylus"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Input.StylusEventArgs.#ctor(System.Windows.Input.StylusDevice,System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusEventArgs"></see> class. </summary>
			<param name="timestamp">The time when the event occurs.</param>
			<param name="stylus">The stylus to associate with the event.</param>
		</member>
		<member name="M:System.Windows.Input.StylusEventArgs.GetPosition(System.Windows.IInputElement)">
			<summary>Gets the position of the stylus.</summary>
			<returns>A <see cref="T:System.Windows.Point"></see> that represents the position of the stylus, based on the coordinates of relativeTo.</returns>
			<param name="relativeTo">The <see cref="T:System.Windows.IInputElement"></see> that the (x, y) coordinates are mapped to.</param>
		</member>
		<member name="M:System.Windows.Input.StylusEventArgs.GetStylusPoints(System.Windows.IInputElement)">
			<summary>Returns a <see cref="T:System.Windows.Input.StylusPointCollection"></see> that contains <see cref="T:System.Windows.Input.StylusPoint"></see> objects collected in the event.</summary>
			<returns>A <see cref="T:System.Windows.Input.StylusPointCollection"></see> that contains <see cref="T:System.Windows.Input.StylusPoint"></see> objects collected in the event.</returns>
			<param name="relativeTo">The <see cref="T:System.Windows.IInputElement"></see> to which the (x, y) coordinates in the <see cref="T:System.Windows.Input.StylusPointCollection"></see> are mapped.</param>
			<exception cref="T:System.InvalidOperationException">relativeTo is neither <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.FrameworkContentElement"></see>.</exception>
		</member>
		<member name="M:System.Windows.Input.StylusEventArgs.GetStylusPoints(System.Windows.IInputElement,System.Windows.Input.StylusPointDescription)">
			<summary>Returns a <see cref="T:System.Windows.Input.StylusPointCollection"></see> that contains <see cref="T:System.Windows.Input.StylusPoint"></see> objects collected in the event.</summary>
			<returns>A <see cref="T:System.Windows.Input.StylusPointCollection"></see> that contains <see cref="T:System.Windows.Input.StylusPoint"></see> objects collected in the event.</returns>
			<param name="subsetToReformatTo">The <see cref="T:System.Windows.Input.StylusPointDescription"></see> to be used by the <see cref="T:System.Windows.Input.StylusPointCollection"></see>.</param>
			<param name="relativeTo">A <see cref="T:System.Windows.Input.StylusPointCollection"></see> that contains <see cref="T:System.Windows.Input.StylusPoint"></see> objects collected in the event.</param>
			<exception cref="T:System.InvalidOperationException">relativeTo is neither <see cref="T:System.Windows.UIElement"></see> or <see cref="T:System.Windows.FrameworkContentElement"></see>.</exception>
		</member>
		<member name="P:System.Windows.Input.StylusEventArgs.InAir">
			<summary>Gets a value that indicates whether the stylus is in proximity to, but not touching, the digitizer.</summary>
			<returns>true if the stylus is in proximity to, but not touching, the digitizer; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusEventArgs.Inverted">
			<summary>Gets a value that indicates whether the stylus in inverted.</summary>
			<returns>true if the stylus is inverted; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusEventArgs.StylusDevice">
			<summary>Gets the <see cref="T:System.Windows.Input.StylusDevice"></see> that represents the stylus.</summary>
			<returns>The <see cref="T:System.Windows.Input.StylusDevice"></see> that represents the stylus.</returns>
		</member>
		<member name="T:System.Windows.Input.StylusEventHandler">
			<summary>Represents the method that handles a stylus event of a class that the implements the <see cref="T:System.Windows.IInputElement"></see> interface.</summary>
		</member>
		<member name="T:System.Windows.Input.StylusPoint">
			<summary>Represents a single data point collected from the digitizer and stylus.</summary>
		</member>
		<member name="M:System.Windows.Input.StylusPoint.#ctor(System.Double,System.Double)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPoint"></see> class with the specified (x, y) coordinates.</summary>
			<param name="X">The x-coordinate of the <see cref="T:System.Windows.Input.StylusPoint"></see>.</param>
			<param name="Y">The y-coordinate of the <see cref="T:System.Windows.Input.StylusPoint"></see>.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPoint.#ctor(System.Double,System.Double,System.Single)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPoint"></see> class with the specified (x, y) coordinates and pressure.</summary>
			<param name="y">The y-coordinate of the <see cref="T:System.Windows.Input.StylusPoint"></see>.</param>
			<param name="pressureFactor">The amount of pressure applied to the <see cref="T:System.Windows.Input.StylusPoint"></see>.</param>
			<param name="x">The x-coordinate of the <see cref="T:System.Windows.Input.StylusPoint"></see>.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">pressureFactor is less than 0 or greater than 1.</exception>
		</member>
		<member name="M:System.Windows.Input.StylusPoint.#ctor(System.Double,System.Double,System.Single,System.Windows.Input.StylusPointDescription,System.Int32[])">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPoint"></see> class with the specified (x, y) coordinates, pressureFactor and additional parameters specified in the <see cref="T:System.Windows.Input.StylusPointDescription"></see>.</summary>
			<param name="stylusPointDescription">A <see cref="T:System.Windows.Input.StylusPointDescription"></see> that specifies the additional properties stored in the <see cref="T:System.Windows.Input.StylusPoint"></see>.</param>
			<param name="X">The x-coordinate of the <see cref="T:System.Windows.Input.StylusPoint"></see>.</param>
			<param name="Y">The y-coordinate of the <see cref="T:System.Windows.Input.StylusPoint"></see>.</param>
			<param name="pressureFactor">The amount of pressure applied to the <see cref="T:System.Windows.Input.StylusPoint"></see>.</param>
			<param name="additionalValues">An array of 32-bit signed integers that contains the values of the properties defined in stylusPointDescription.</param>
			<exception cref="T:System.ArgumentException">The number of values in additionalValues does not match the number of properties in stylusPointDescription minus 3.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">pressureFactor is less than 0 or greater than 1.-or-The values in additionalValues that correspond to button properties are not 0 or 1.</exception>
		</member>
		<member name="F:System.Windows.Input.StylusPoint.MaxXY">
			<summary>Specifies the largest valid value for the (x, y) coordinates.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPoint.MinXY">
			<summary>Specifies the smallest valid value for the (x, y) coordinates.</summary>
		</member>
		<member name="M:System.Windows.Input.StylusPoint.Equals(System.Object)">
			<summary>Returns a value indicating whether the specified object is equal to the <see cref="T:System.Windows.Input.StylusPoint"></see>.</summary>
			<returns>true if the objects are equal; otherwise, false.</returns>
			<param name="o">The <see cref="T:System.Windows.Input.StylusPoint"></see> to compare to the current <see cref="T:System.Windows.Input.StylusPoint"></see>.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPoint.Equals(System.Windows.Input.StylusPoint)">
			<summary>Returns whether the specified <see cref="T:System.Windows.Input.StylusPoint"></see> is equal to the current <see cref="T:System.Windows.Input.StylusPoint"></see>.</summary>
			<returns>true if the <see cref="T:System.Windows.Input.StylusPoint"></see> objects are equal; otherwise, false.</returns>
			<param name="value">The <see cref="T:System.Windows.Input.StylusPoint"></see> to compare to the current <see cref="T:System.Windows.Input.StylusPoint"></see>.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPoint.Equals(System.Windows.Input.StylusPoint,System.Windows.Input.StylusPoint)">
			<summary>Returns whether the two specified <see cref="T:System.Windows.Input.StylusPoint"></see> objects are equal.</summary>
			<returns>true if the <see cref="T:System.Windows.Input.StylusPoint"></see> objects are equal; otherwise, false.</returns>
			<param name="stylusPoint1">The first <see cref="T:System.Windows.Input.StylusPoint"></see> to compare.</param>
			<param name="stylusPoint2">The second <see cref="T:System.Windows.Input.StylusPoint"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPoint.GetPropertyValue(System.Windows.Input.StylusPointProperty)">
			<summary>Returns the value of the specified property.</summary>
			<returns>The value of the specified <see cref="T:System.Windows.Input.StylusPointProperty"></see>.</returns>
			<param name="stylusPointProperty">The <see cref="T:System.Windows.Input.StylusPointProperty"></see> that specifies which property value to get.</param>
			<exception cref="T:System.ArgumentException">stylusPointProperty is not one of the properties in <see cref="P:System.Windows.Input.StylusPoint.Description"></see>.</exception>
		</member>
		<member name="M:System.Windows.Input.StylusPoint.HasProperty(System.Windows.Input.StylusPointProperty)">
			<summary>Returns whether the current <see cref="T:System.Windows.Input.StylusPoint"></see> contains the specified property.</summary>
			<returns>true if the specified <see cref="T:System.Windows.Input.StylusPointProperty"></see> is in the current <see cref="T:System.Windows.Input.StylusPoint"></see>; otherwise, false.</returns>
			<param name="stylusPointProperty">The <see cref="T:System.Windows.Input.StylusPointProperty"></see> to check for in the <see cref="T:System.Windows.Input.StylusPoint"></see>.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPoint.op_Equality(System.Windows.Input.StylusPoint,System.Windows.Input.StylusPoint)">
			<summary>Compares two specified <see cref="T:System.Windows.Input.StylusPoint"></see> objects for equality.</summary>
			<returns>true if the <see cref="T:System.Windows.Input.StylusPoint"></see> objects are equal; otherwise, false.</returns>
			<param name="stylusPoint1">The first <see cref="T:System.Windows.Input.StylusPoint"></see> to compare.</param>
			<param name="stylusPoint2">The second <see cref="T:System.Windows.Input.StylusPoint"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPoint.op_Explicit(System.Windows.Input.StylusPoint)~System.Windows.Point">
			<summary>Casts the specified <see cref="T:System.Windows.Input.StylusPoint"></see> to a <see cref="T:System.Windows.Point"></see>.</summary>
			<returns>A <see cref="T:System.Windows.Point"></see> that contains the same (x, y) coordinates as stylusPoint.</returns>
			<param name="stylusPoint">The <see cref="T:System.Windows.Input.StylusPoint"></see> to cast to a <see cref="T:System.Windows.Point"></see>.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPoint.op_Inequality(System.Windows.Input.StylusPoint,System.Windows.Input.StylusPoint)">
			<summary>Returns whether the specified <see cref="T:System.Windows.Input.StylusPoint"></see> objects are unequal.</summary>
			<returns>true if the specified <see cref="T:System.Windows.Input.StylusPoint"></see> objects are unequal; otherwise, false.</returns>
			<param name="stylusPoint1">The first <see cref="T:System.Windows.Input.StylusPoint"></see> to compare.</param>
			<param name="stylusPoint2">The second <see cref="T:System.Windows.Input.StylusPoint"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPoint.SetPropertyValue(System.Windows.Input.StylusPointProperty,System.Int32)">
			<summary>Sets the specified property to the specified value.</summary>
			<param name="stylusPointProperty">The <see cref="T:System.Windows.Input.StylusPointProperty"></see> that specifies which property value to set.</param>
			<param name="value">The value of the property.</param>
			<exception cref="T:System.ArgumentException">stylusPointProperty is not one of the properties in <see cref="P:System.Windows.Input.StylusPoint.Description"></see>.</exception>
		</member>
		<member name="P:System.Windows.Input.StylusPoint.Description">
			<summary>Gets or sets the <see cref="T:System.Windows.Input.StylusPointDescription"></see> that specifies the properties stored in the <see cref="T:System.Windows.Input.StylusPoint"></see>.</summary>
			<returns>The <see cref="T:System.Windows.Input.StylusPointDescription"></see> that specifies the properties stored in the <see cref="T:System.Windows.Input.StylusPoint"></see>.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusPoint.PressureFactor">
			<summary>Gets or sets a value between 0 and 1 that reflects the amount of pressure the stylus applies to the digitizer's surface when the <see cref="T:System.Windows.Input.StylusPoint"></see> is created.</summary>
			<returns>Value between 0 and 1 that reflects the amount of pressure the stylus applies to the digitizer's surface when the <see cref="T:System.Windows.Input.StylusPoint"></see> is created.</returns>
			<exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Windows.Input.StylusPoint.PressureFactor"></see> property is set to a value less than 0 or greater than 1.</exception>
		</member>
		<member name="P:System.Windows.Input.StylusPoint.X">
			<summary>Gets or sets the value for the x-coordinate of the <see cref="T:System.Windows.Input.StylusPoint"></see>.</summary>
			<returns>The x-coordinate of the <see cref="T:System.Windows.Input.StylusPoint"></see>.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusPoint.Y">
			<summary>Gets or sets the y-coordinate of the <see cref="T:System.Windows.Input.StylusPoint"></see>.</summary>
			<returns>The y-coordinate of the <see cref="T:System.Windows.Input.StylusPoint"></see>.</returns>
		</member>
		<member name="T:System.Windows.Input.StylusPointCollection">
			<summary>Contains a collection of <see cref="T:System.Windows.Input.StylusPoint"></see> objects.</summary>
		</member>
		<member name="M:System.Windows.Input.StylusPointCollection.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPointCollection"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Input.StylusPointCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Point})">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPointCollection"></see> class with the specified points. </summary>
			<param name="points">A generic IEnumerable of type <see cref="T:System.Windows.Point"></see> that specifies the <see cref="T:System.Windows.Input.StylusPoint"></see> objects to add to the <see cref="T:System.Windows.Input.StylusPointCollection"></see>.</param>
			<exception cref="T:System.ArgumentNullException">points is null.</exception>
			<exception cref="T:System.ArgumentException">The length of points is 0.</exception>
		</member>
		<member name="M:System.Windows.Input.StylusPointCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Input.StylusPoint})">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPointCollection"></see> class with the specified <see cref="T:System.Windows.Input.StylusPoint"></see> objects. </summary>
			<param name="stylusPoints">A generic IEnumerable of type <see cref="T:System.Windows.Input.StylusPoint"></see> to add to the <see cref="T:System.Windows.Input.StylusPointCollection"></see>.</param>
			<exception cref="T:System.ArgumentException">The length of points is 0.-or-The <see cref="T:System.Windows.Input.StylusPoint"></see> objects in stylusPoints have incompatible <see cref="T:System.Windows.Input.StylusPointDescription"></see> objects.</exception>
			<exception cref="T:System.ArgumentNullException">stylusPoints is null.</exception>
		</member>
		<member name="M:System.Windows.Input.StylusPointCollection.#ctor(System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPointCollection"></see> class that can initially contain the specified number of <see cref="T:System.Windows.Input.StylusPoint"></see> objects.</summary>
			<param name="initialCapacity">The number of <see cref="T:System.Windows.Input.StylusPoint"></see> objects the <see cref="T:System.Windows.Input.StylusPointCollection"></see> can initially contain.</param>
			<exception cref="T:System.ArgumentException">initialCapacity is negative.</exception>
		</member>
		<member name="M:System.Windows.Input.StylusPointCollection.#ctor(System.Windows.Input.StylusPointDescription)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPointCollection"></see> class that contains the properties specified in the <see cref="T:System.Windows.Input.StylusPointDescription"></see>.</summary>
			<param name="stylusPointDescription">A <see cref="T:System.Windows.Input.StylusPointDescription"></see> that specifies the additional properties stored in each <see cref="T:System.Windows.Input.StylusPoint"></see>.</param>
			<exception cref="T:System.ArgumentNullException">stylusPointDescription is null.</exception>
		</member>
		<member name="M:System.Windows.Input.StylusPointCollection.#ctor(System.Windows.Input.StylusPointDescription,System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPointCollection"></see> class that is the specified size and contains the properties specified in the <see cref="T:System.Windows.Input.StylusPointDescription"></see>.</summary>
			<param name="stylusPointDescription">A <see cref="T:System.Windows.Input.StylusPointDescription"></see> that specifies the additional properties stored in each <see cref="T:System.Windows.Input.StylusPoint"></see>.</param>
			<param name="initialCapacity">The number of <see cref="T:System.Windows.Input.StylusPoint"></see> objects the <see cref="T:System.Windows.Input.StylusPointCollection"></see> can initially contain.</param>
			<exception cref="T:System.ArgumentNullException">stylusPointDescription is null.</exception>
			<exception cref="T:System.ArgumentException">initialCapacity is negative.</exception>
		</member>
		<member name="E:System.Windows.Input.StylusPointCollection.Changed">
			<summary>Occurs when the <see cref="T:System.Windows.Input.StylusPointCollection"></see> changes.</summary>
		</member>
		<member name="M:System.Windows.Input.StylusPointCollection.Add(System.Windows.Input.StylusPointCollection)">
			<summary>Adds the specified <see cref="T:System.Windows.Input.StylusPointCollection"></see> to the current <see cref="T:System.Windows.Input.StylusPointCollection"></see>.</summary>
			<param name="stylusPoints">The <see cref="T:System.Windows.Input.StylusPointCollection"></see> to add to the current <see cref="T:System.Windows.Input.StylusPointCollection"></see>.</param>
			<exception cref="T:System.ArgumentException">The <see cref="T:System.Windows.Input.StylusPointDescription"></see> of stylusPoints is not compatible with the <see cref="P:System.Windows.Input.StylusPointCollection.Description"></see> property.</exception>
			<exception cref="T:System.ArgumentNullException">stylusPoints is null.</exception>
		</member>
		<member name="M:System.Windows.Input.StylusPointCollection.ClearItems">
			<summary>Removes all <see cref="T:System.Windows.Input.StylusPoint"></see> objects from the <see cref="T:System.Windows.Input.StylusPointCollection"></see>.</summary>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Input.StylusPointCollection"></see> is connected to a <see cref="T:System.Windows.Ink.Stroke"></see>.</exception>
		</member>
		<member name="M:System.Windows.Input.StylusPointCollection.Clone">
			<summary>Copies the <see cref="T:System.Windows.Input.StylusPointCollection"></see>.</summary>
			<returns>A new <see cref="T:System.Windows.Input.StylusPointCollection"></see> that contains copies of the <see cref="T:System.Windows.Input.StylusPoint"></see> objects in the current <see cref="T:System.Windows.Input.StylusPointCollection"></see>.</returns>
		</member>
		<member name="M:System.Windows.Input.StylusPointCollection.InsertItem(System.Int32,System.Windows.Input.StylusPoint)">
			<summary>Inserts the specified <see cref="T:System.Windows.Input.StylusPoint"></see> into the <see cref="T:System.Windows.Input.StylusPointCollection"></see> at the specified position.</summary>
			<param name="stylusPoint">The <see cref="T:System.Windows.Input.StylusPoint"></see> to insert into the <see cref="T:System.Windows.Input.StylusPointCollection"></see>.</param>
			<param name="index">The position at which to insert the <see cref="T:System.Windows.Input.StylusPoint"></see>.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">index is greater or equal to the number of <see cref="T:System.Windows.Input.StylusPoint"></see> objects in the <see cref="T:System.Windows.Input.StylusPointCollection"></see>.</exception>
			<exception cref="T:System.ArgumentException">The <see cref="T:System.Windows.Input.StylusPointDescription"></see> of stylusPoint is not compatible with the <see cref="P:System.Windows.Input.StylusPointCollection.Description"></see> property.</exception>
		</member>
		<member name="M:System.Windows.Input.StylusPointCollection.OnChanged(System.EventArgs)">
			<summary>Raises the <see cref="E:System.Windows.Input.StylusPointCollection.Changed"></see> event.</summary>
			<param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
		</member>
		<member name="M:System.Windows.Input.StylusPointCollection.op_Explicit(System.Windows.Input.StylusPointCollection)~System.Windows.Point[]">
			<summary>Converts a <see cref="T:System.Windows.Input.StylusPointCollection"></see> into a point array.</summary>
			<returns>A point array that contains points that correspond to each <see cref="T:System.Windows.Input.StylusPoint"></see> in the <see cref="T:System.Windows.Input.StylusPointCollection"></see>.</returns>
			<param name="stylusPoints">The stylus point collection to convert to a point array.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPointCollection.Reformat(System.Windows.Input.StylusPointDescription)">
			<summary>Finds the intersection of the specified <see cref="T:System.Windows.Input.StylusPointDescription"></see> and the <see cref="P:System.Windows.Input.StylusPointCollection.Description"></see> property.</summary>
			<returns>A <see cref="T:System.Windows.Input.StylusPointCollection"></see> that has a <see cref="T:System.Windows.Input.StylusPointDescription"></see> that is a subset of the specified <see cref="T:System.Windows.Input.StylusPointDescription"></see> and the <see cref="T:System.Windows.Input.StylusPointDescription"></see> that the current <see cref="T:System.Windows.Input.StylusPointCollection"></see> uses.</returns>
			<param name="subsetToReformatTo">A <see cref="T:System.Windows.Input.StylusPointDescription"></see> to intersect with the <see cref="T:System.Windows.Input.StylusPointDescription"></see> of the current <see cref="T:System.Windows.Input.StylusPointCollection"></see>.</param>
			<exception cref="T:System.ArgumentException">subsetToReformatTo is not a subset of the <see cref="P:System.Windows.Input.StylusPointCollection.Description"></see> property.</exception>
		</member>
		<member name="M:System.Windows.Input.StylusPointCollection.RemoveItem(System.Int32)">
			<summary>Removes the <see cref="T:System.Windows.Input.StylusPoint"></see> at the specified position from the <see cref="T:System.Windows.Input.StylusPointCollection"></see>.</summary>
			<param name="index">The position at which to remove the <see cref="T:System.Windows.Input.StylusPoint"></see>.</param>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Input.StylusPointCollection"></see> is connected to a <see cref="T:System.Windows.Ink.Stroke"></see> and there is only one <see cref="T:System.Windows.Input.StylusPoint"></see> in the <see cref="T:System.Windows.Input.StylusPointCollection"></see>.</exception>
		</member>
		<member name="M:System.Windows.Input.StylusPointCollection.SetItem(System.Int32,System.Windows.Input.StylusPoint)">
			<summary>Sets the specified <see cref="T:System.Windows.Input.StylusPoint"></see> at the specified position.</summary>
			<param name="stylusPoint">The <see cref="T:System.Windows.Input.StylusPoint"></see> to set at the specified position.</param>
			<param name="index">The position at which to set the <see cref="T:System.Windows.Input.StylusPoint"></see>.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">index is greater than the number of <see cref="T:System.Windows.Input.StylusPoint"></see> objects in the <see cref="T:System.Windows.Input.StylusPointCollection"></see>.</exception>
			<exception cref="T:System.ArgumentException">The <see cref="T:System.Windows.Input.StylusPointDescription"></see> of stylusPoint is not compatible with the <see cref="P:System.Windows.Input.StylusPointCollection.Description"></see> property.</exception>
		</member>
		<member name="P:System.Windows.Input.StylusPointCollection.Description">
			<summary>Gets the <see cref="T:System.Windows.Input.StylusPointDescription"></see> that is associated with the <see cref="T:System.Windows.Input.StylusPoint"></see> objects in the <see cref="T:System.Windows.Input.StylusPointCollection"></see>.</summary>
			<returns>The <see cref="T:System.Windows.Input.StylusPointDescription"></see> that is associated with the <see cref="T:System.Windows.Input.StylusPoint"></see> objects in the <see cref="T:System.Windows.Input.StylusPointCollection"></see>.</returns>
		</member>
		<member name="T:System.Windows.Input.StylusPointDescription">
			<summary>Specifies the properties that are in a <see cref="T:System.Windows.Input.StylusPoint"></see>.</summary>
		</member>
		<member name="M:System.Windows.Input.StylusPointDescription.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPointDescription"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Input.StylusPointDescription.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Input.StylusPointPropertyInfo})">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPointDescription"></see> class with the specified <see cref="T:System.Windows.Input.StylusPointPropertyInfo"></see> objects. </summary>
			<param name="stylusPointPropertyInfos">A generic IEnumerable of type <see cref="T:System.Windows.Input.StylusPointPropertyInfo"></see> that specifies the properties in the <see cref="T:System.Windows.Input.StylusPointDescription"></see>.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPointDescription.AreCompatible(System.Windows.Input.StylusPointDescription,System.Windows.Input.StylusPointDescription)">
			<summary>Returns a value that indicates whether the specified <see cref="T:System.Windows.Input.StylusPointDescription"></see> objects are identical.</summary>
			<returns>true if the <see cref="T:System.Windows.Input.StylusPointDescription"></see> objects are identical; otherwise, false.</returns>
			<param name="stylusPointDescription2">The second <see cref="T:System.Windows.Input.StylusPointDescription"></see> to check.</param>
			<param name="stylusPointDescription1">The first <see cref="T:System.Windows.Input.StylusPointDescription"></see> to check.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPointDescription.GetCommonDescription(System.Windows.Input.StylusPointDescription,System.Windows.Input.StylusPointDescription)">
			<summary>Returns the intersection of the specified <see cref="T:System.Windows.Input.StylusPointDescription"></see> objects.</summary>
			<returns>A <see cref="T:System.Windows.Input.StylusPointDescription"></see> that contains the properties that are present if both of the specified <see cref="T:System.Windows.Input.StylusPointDescription"></see> objects.</returns>
			<param name="stylusPointDescriptionPreserveInfo">The second <see cref="T:System.Windows.Input.StylusPointDescription"></see> to intersect.</param>
			<param name="stylusPointDescription1">The first <see cref="T:System.Windows.Input.StylusPointDescription"></see> to intersect.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPointDescription.GetPropertyInfo(System.Windows.Input.StylusPointProperty)">
			<summary>Gets the <see cref="T:System.Windows.Input.StylusPointPropertyInfo"></see> for the specified property.</summary>
			<returns>The <see cref="T:System.Windows.Input.StylusPointPropertyInfo"></see> for the specified <see cref="T:System.Windows.Input.StylusPointProperty"></see>.</returns>
			<param name="stylusPointProperty">The <see cref="T:System.Windows.Input.StylusPointProperty"></see> that specifies the property of the desired <see cref="T:System.Windows.Input.StylusPointPropertyInfo"></see>.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPointDescription.GetStylusPointProperties">
			<summary>Gets all the properties of the <see cref="T:System.Windows.Input.StylusPointDescription"></see>.</summary>
			<returns>A collection that contains all of the <see cref="T:System.Windows.Input.StylusPointPropertyInfo"></see> objects in the <see cref="T:System.Windows.Input.StylusPointDescription"></see>.</returns>
		</member>
		<member name="M:System.Windows.Input.StylusPointDescription.HasProperty(System.Windows.Input.StylusPointProperty)">
			<summary>Returns a value that indicates whether the current <see cref="T:System.Windows.Input.StylusPointDescription"></see> has the specified property.</summary>
			<returns>true if the <see cref="T:System.Windows.Input.StylusPointDescription"></see> has the specified <see cref="T:System.Windows.Input.StylusPointProperty"></see>; otherwise, false.</returns>
			<param name="stylusPointProperty">The <see cref="T:System.Windows.Input.StylusPointProperty"></see> to check for in the <see cref="T:System.Windows.Input.StylusPointDescription"></see>.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPointDescription.IsSubsetOf(System.Windows.Input.StylusPointDescription)">
			<summary>Returns a value that indicates whether the current <see cref="T:System.Windows.Input.StylusPointDescription"></see> is a subset of the specifies <see cref="T:System.Windows.Input.StylusPointDescription"></see>.</summary>
			<returns>true if the current <see cref="T:System.Windows.Input.StylusPointDescription"></see> is a subset of the specified <see cref="T:System.Windows.Input.StylusPointDescription"></see>; otherwise, false.</returns>
			<param name="stylusPointDescriptionSuperset">The <see cref="T:System.Windows.Input.StylusPointDescription"></see> against which to check whether the current <see cref="T:System.Windows.Input.StylusPointDescription"></see> is a subset.</param>
		</member>
		<member name="P:System.Windows.Input.StylusPointDescription.PropertyCount">
			<summary>Gets the number of properties in the <see cref="T:System.Windows.Input.StylusPointDescription"></see>.</summary>
			<returns>The number of properties in the <see cref="T:System.Windows.Input.StylusPointDescription"></see>.</returns>
		</member>
		<member name="T:System.Windows.Input.StylusPointProperties">
			<summary>Contains a <see cref="T:System.Windows.Input.StylusPointProperty"></see> for each property that the Windows Presentation Foundation supports.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointProperties.AltitudeOrientation">
			<summary>Represents the angle between the axis of the pen and the surface of the Tablet PC.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointProperties.AzimuthOrientation">
			<summary>Represents the clockwise rotation of the cursor, through a full circular range around the z-axis.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointProperties.BarrelButton">
			<summary>Represents the barrel button of a stylus.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointProperties.ButtonPressure">
			<summary>Represents the pressure on a pressure-sensitive button.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointProperties.Height">
			<summary> Represents the height of the contact point on the digitizer.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointProperties.NormalPressure">
			<summary>Represents the pressure of the pen tip perpendicular to the Tablet PC surface.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointProperties.PacketStatus">
			<summary>Represents the current status of the cursor.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointProperties.PitchRotation">
			<summary>Represents whether the tip is above or below a horizontal line that is perpendicular to the writing surface.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointProperties.RollRotation">
			<summary>Represents the clockwise rotation of the pen around its own axis.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointProperties.SecondaryTipButton">
			<summary>Represents the secondary tip button of a stylus.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointProperties.SerialNumber">
			<summary>Identifies the <see cref="T:System.Windows.Input.StylusPoint"></see>.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointProperties.SystemTouch">
			<summary>Represents the type of touch contact, such as finger, palm, or frame hold, that generates the <see cref="T:System.Windows.Input.StylusPoint"></see>.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointProperties.TangentPressure">
			<summary>Represents the pen tip pressure along the plane of the Tablet PC surface.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointProperties.TipButton">
			<summary>Represents the tip button of a stylus.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointProperties.TwistOrientation">
			<summary>Represents the clockwise rotation of the cursor around its own axis.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointProperties.Width">
			<summary>Represents the width of the contact point on the digitizer.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointProperties.X">
			<summary>Represents the x-coordinate in the tablet coordinate space.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointProperties.XTiltOrientation">
			<summary>Represents the angle between the (y, z) plane and the pen and y-axis plane.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointProperties.Y">
			<summary>Represents the y-coordinate in the tablet coordinate space.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointProperties.YawRotation">
			<summary>Represents the angle of the pen to the left or right around the center of its horizontal axis when the pen is horizontal.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointProperties.YTiltOrientation">
			<summary>Represents the angle between the (x, z) plane and the pen and x-axis plane.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointProperties.Z">
			<summary>Represents the z-coordinate or distance of the pen tip from the tablet surface.</summary>
		</member>
		<member name="T:System.Windows.Input.StylusPointProperty">
			<summary>Represents a property stored in a <see cref="T:System.Windows.Input.StylusPoint"></see>.</summary>
		</member>
		<member name="M:System.Windows.Input.StylusPointProperty.#ctor(System.Windows.Input.StylusPointProperty)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPointProperty"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Input.StylusPointProperty.#ctor(System.Guid,System.Boolean)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPointProperty"></see> class using the specified GUID. </summary>
			<param name="identifier">The <see cref="T:System.Guid"></see> that uniquely identifies the <see cref="T:System.Windows.Input.StylusPointProperty"></see>.</param>
			<param name="isButton">true to indicate that the property represents a button on the stylus; otherwise, false. </param>
		</member>
		<member name="P:System.Windows.Input.StylusPointProperty.Id">
			<summary>Gets the GUID for the current <see cref="T:System.Windows.Input.StylusPointProperty"></see>.</summary>
			<returns>The GUID for the current <see cref="T:System.Windows.Input.StylusPointProperty"></see>.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusPointProperty.IsButton">
			<summary>Gets whether the <see cref="T:System.Windows.Input.StylusPointProperty"></see> represents a button on the stylus.</summary>
			<returns>true if the <see cref="T:System.Windows.Input.StylusPointProperty"></see> represents a button on the stylus; otherwise, false.</returns>
		</member>
		<member name="T:System.Windows.Input.StylusPointPropertyInfo">
			<summary>Specifies the constraints of a property in a <see cref="T:System.Windows.Input.StylusPoint"></see>.</summary>
		</member>
		<member name="M:System.Windows.Input.StylusPointPropertyInfo.#ctor(System.Windows.Input.StylusPointProperty)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPointPropertyInfo"></see> class. </summary>
			<param name="stylusPointProperty">The <see cref="T:System.Windows.Input.StylusPointProperty"></see> to base the new <see cref="T:System.Windows.Input.StylusPointProperty"></see> on.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPointPropertyInfo.#ctor(System.Windows.Input.StylusPointProperty,System.Int32,System.Int32,System.Windows.Input.StylusPointPropertyUnit,System.Single)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPointPropertyInfo"></see> class using the specified values.</summary>
			<param name="maximum">The maximum value accepted for the <see cref="T:System.Windows.Input.StylusPoint"></see> property.</param>
			<param name="stylusPointProperty">The <see cref="T:System.Windows.Input.StylusPointProperty"></see> to base the new <see cref="T:System.Windows.Input.StylusPointProperty"></see> on.</param>
			<param name="resolution">The scale that converts a <see cref="T:System.Windows.Input.StylusPoint"></see> property value into its units.</param>
			<param name="Unit">One of the <see cref="T:System.Windows.Input.StylusPointPropertyUnit"></see> values.</param>
			<param name="minimum">The minimum value accepted for the <see cref="T:System.Windows.Input.StylusPoint"></see> property.</param>
		</member>
		<member name="P:System.Windows.Input.StylusPointPropertyInfo.Maximum">
			<summary>Gets the maximum value accepted for the <see cref="T:System.Windows.Input.StylusPoint"></see> property.</summary>
			<returns>The maximum value accepted for the <see cref="T:System.Windows.Input.StylusPoint"></see> property.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusPointPropertyInfo.Minimum">
			<summary>Gets the minimum value accepted for the <see cref="T:System.Windows.Input.StylusPoint"></see> property.</summary>
			<returns>The minimum value accepted for the <see cref="T:System.Windows.Input.StylusPoint"></see> property.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusPointPropertyInfo.Resolution">
			<summary>Gets the scale that converts a <see cref="T:System.Windows.Input.StylusPoint"></see> property value into its units.</summary>
			<returns>The scale that converts a <see cref="T:System.Windows.Input.StylusPoint"></see> property value into its units.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusPointPropertyInfo.Unit">
			<summary>Gets the type of measurement that is used by <see cref="T:System.Windows.Input.StylusPoint"></see> property. </summary>
			<returns>One of the <see cref="T:System.Windows.Input.StylusPointPropertyUnit"></see> values.</returns>
		</member>
		<member name="T:System.Windows.Input.StylusPointPropertyUnit">
			<summary>Specifies the unit of measurement for a <see cref="T:System.Windows.Input.StylusPoint"></see> property.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointPropertyUnit.Centimeters">
			<summary>Indicates that a <see cref="T:System.Windows.Input.StylusPoint"></see> property is measured in centimeters.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointPropertyUnit.Degrees">
			<summary>Indicates that a <see cref="T:System.Windows.Input.StylusPoint"></see> property is measured in degrees.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointPropertyUnit.Grams">
			<summary>Indicates that a <see cref="T:System.Windows.Input.StylusPoint"></see> property is measured in grams.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointPropertyUnit.Inches">
			<summary>Indicates that a <see cref="T:System.Windows.Input.StylusPoint"></see> property is measured in inches.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointPropertyUnit.None">
			<summary>Indicates that a <see cref="T:System.Windows.Input.StylusPoint"></see> property's measurement is not specified.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointPropertyUnit.Pounds">
			<summary>Indicates that a <see cref="T:System.Windows.Input.StylusPoint"></see> property is measured in pounds.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointPropertyUnit.Radians">
			<summary>Indicates that a <see cref="T:System.Windows.Input.StylusPoint"></see> property is measured in radians.</summary>
		</member>
		<member name="F:System.Windows.Input.StylusPointPropertyUnit.Seconds">
			<summary>Indicates that a <see cref="T:System.Windows.Input.StylusPoint"></see> property is measured in seconds.</summary>
		</member>
		<member name="T:System.Windows.Input.StylusSystemGestureEventArgs">
			<summary>Provides data for the <see cref="E:System.Windows.UIElement.StylusSystemGesture"></see> event. </summary>
		</member>
		<member name="M:System.Windows.Input.StylusSystemGestureEventArgs.#ctor(System.Windows.Input.StylusDevice,System.Int32,System.Windows.Input.SystemGesture)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs"></see> class. </summary>
			<param name="Timestamp">The time the event occurs.</param>
			<param name="systemGesture">The <see cref="T:System.Windows.Input.SystemGesture"></see> that raises the event.</param>
			<param name="stylusDevice">The <see cref="T:System.Windows.Input.StylusDevice"></see> to associate with the event.</param>
		</member>
		<member name="P:System.Windows.Input.StylusSystemGestureEventArgs.SystemGesture">
			<summary>Gets the <see cref="T:System.Windows.Input.SystemGesture"></see> that raises the event.</summary>
			<returns>The <see cref="T:System.Windows.Input.SystemGesture"></see> that raises the event.</returns>
		</member>
		<member name="T:System.Windows.Input.StylusSystemGestureEventHandler">
			<summary>Represents the method that handles the <see cref="E:System.Windows.UIElement.StylusSystemGesture"></see> event of a <see cref="T:System.Windows.UIElement"></see>. </summary>
		</member>
		<member name="T:System.Windows.Input.SystemGesture">
			<summary>Defines the available system gestures.</summary>
		</member>
		<member name="F:System.Windows.Input.SystemGesture.Drag">
			<summary>Maps to a left drag on a mouse.</summary>
		</member>
		<member name="F:System.Windows.Input.SystemGesture.Flick">
			<summary>Occurs with a short, quick stroke that translates into a specific command. The action taken by a flick is set system-wide. An application can listen for a <see cref="F:System.Windows.Input.SystemGesture.Flick"></see> and prevent it from becoming one of the standard <see cref="T:System.Windows.Input.ApplicationCommands"></see> by setting the <see cref="P:System.Windows.RoutedEventArgs.Handled"></see> property to true in the <see cref="E:System.Windows.UIElement.StylusSystemGesture"></see> event. Only Windows Vista supports flicks.</summary>
		</member>
		<member name="F:System.Windows.Input.SystemGesture.HoldEnter">
			<summary>Indicates that press and hold has occurred.</summary>
		</member>
		<member name="F:System.Windows.Input.SystemGesture.HoldLeave">
			<summary>Not implemented.</summary>
		</member>
		<member name="F:System.Windows.Input.SystemGesture.HoverEnter">
			<summary>Maps to a mouse hover. This can be used to show ToolTip rollover effects, or other mouse hover behaviors.</summary>
		</member>
		<member name="F:System.Windows.Input.SystemGesture.HoverLeave">
			<summary>Maps to a mouse leaving a hover. This can be used to end ToolTip rollover effects or other mouse hover behaviors.</summary>
		</member>
		<member name="F:System.Windows.Input.SystemGesture.None">
			<summary>No system gesture.</summary>
		</member>
		<member name="F:System.Windows.Input.SystemGesture.RightDrag">
			<summary>Maps to a right drag on a mouse. This can be used to drag an object or selection to a different area and is followed by the appearance of the shortcut menu which provides options for moving the object.</summary>
		</member>
		<member name="F:System.Windows.Input.SystemGesture.RightTap">
			<summary>Maps to a right-click on a mouse. This can be used to show a shortcut menu.</summary>
		</member>
		<member name="F:System.Windows.Input.SystemGesture.Tap">
			<summary>Maps to a left-click on a mouse. This can be used to choose a command from the menu or toolbar, take action if a command is chosen, set an insertion point, or show selection feedback.</summary>
		</member>
		<member name="T:System.Windows.Input.Tablet">
			<summary>Provides access to static methods that return the tablet devices attached to the system. </summary>
		</member>
		<member name="P:System.Windows.Input.Tablet.CurrentTabletDevice">
			<summary>Gets the current <see cref="T:System.Windows.Input.TabletDevice"></see>.</summary>
			<returns>The current <see cref="T:System.Windows.Input.TabletDevice"></see>.</returns>
		</member>
		<member name="P:System.Windows.Input.Tablet.TabletDevices">
			<summary>Gets the <see cref="T:System.Windows.Input.TabletDeviceCollection"></see> associated with the system.</summary>
			<returns>The <see cref="T:System.Windows.Input.TabletDeviceCollection"></see> associated with the Tablet PC.</returns>
		</member>
		<member name="T:System.Windows.Input.TabletDevice">
			<summary>Represents the digitizer device of a Tablet PC. </summary>
		</member>
		<member name="M:System.Windows.Input.TabletDevice.ToString">
			<summary>Returns the name of the tablet device.</summary>
			<returns>A <see cref="T:System.String"></see> that contains the name of the <see cref="T:System.Windows.Input.TabletDevice"></see>.</returns>
		</member>
		<member name="P:System.Windows.Input.TabletDevice.ActiveSource">
			<summary>Gets the <see cref="T:System.Windows.PresentationSource"></see> that reports current input for the tablet device.</summary>
			<returns>The <see cref="T:System.Windows.PresentationSource"></see> that reports current input for the tablet device.</returns>
		</member>
		<member name="P:System.Windows.Input.TabletDevice.Id">
			<summary>Gets the unique identifier for the tablet device on the system.</summary>
			<returns>The unique identifier for the tablet device on the system.</returns>
		</member>
		<member name="P:System.Windows.Input.TabletDevice.Name">
			<summary>Gets the name of the tablet device.</summary>
			<returns>The name of the tablet device.</returns>
		</member>
		<member name="P:System.Windows.Input.TabletDevice.ProductId">
			<summary>Gets the product identifier for the tablet device.</summary>
			<returns>The product identifier for the tablet device.</returns>
		</member>
		<member name="P:System.Windows.Input.TabletDevice.StylusDevices">
			<summary>Gets the <see cref="T:System.Windows.Input.StylusDeviceCollection"></see> associated with the tablet device.</summary>
			<returns>The <see cref="T:System.Windows.Input.StylusDeviceCollection"></see> associated with the tablet device.</returns>
		</member>
		<member name="P:System.Windows.Input.TabletDevice.SupportedStylusPointProperties">
			<summary>Gets a collection of <see cref="T:System.Windows.Input.StylusPointProperty"></see> objects that the <see cref="T:System.Windows.Input.TabletDevice"></see> supports.</summary>
			<returns>A collection of <see cref="T:System.Windows.Input.StylusPointProperty"></see> objects that the <see cref="T:System.Windows.Input.TabletDevice"></see> supports.</returns>
		</member>
		<member name="P:System.Windows.Input.TabletDevice.TabletHardwareCapabilities">
			<summary>Gets the <see cref="T:System.Windows.Input.TabletHardwareCapabilities"></see> for the tablet device.</summary>
			<returns>The <see cref="T:System.Windows.Input.TabletHardwareCapabilities"></see> for the tablet device.</returns>
		</member>
		<member name="P:System.Windows.Input.TabletDevice.Target">
			<summary>Gets the <see cref="T:System.Windows.IInputElement"></see> that provides basic input processing for the tablet device.</summary>
			<returns>The <see cref="T:System.Windows.IInputElement"></see> that provides basic input processing for the tablet device.</returns>
		</member>
		<member name="P:System.Windows.Input.TabletDevice.Type">
			<summary>Gets the <see cref="T:System.Windows.Input.TabletDeviceType"></see> of the tablet device.</summary>
			<returns>The <see cref="T:System.Windows.Input.TabletDeviceType"></see> of the tablet device.</returns>
		</member>
		<member name="T:System.Windows.Input.TabletDeviceCollection">
			<summary>Contains the <see cref="T:System.Windows.Input.TabletDevice"></see> objects that represent the digitizer devices of a tablet device.</summary>
		</member>
		<member name="M:System.Windows.Input.TabletDeviceCollection.CopyTo(System.Windows.Input.TabletDevice[],System.Int32)">
			<summary>Copies all elements in the current collection to the specified one-dimensional array, starting at the specified destination array index.</summary>
			<param name="Index">The zero-based index in the array parameter where copying begins.</param>
			<param name="Array">The one-dimensional array that is the destination of elements copied from the collection. The array must have zero-based indexing.</param>
			<exception cref="T:System.IndexOutOfRangeException">If index is less than 0 or index is greater than or equal to array.length.</exception>
			<exception cref="T:System.ArgumentNullException">If array is null.</exception>
			<exception cref="T:System.ArgumentException">If index + collection count is greater than or equal to array.length.</exception>
		</member>
		<member name="M:System.Windows.Input.TabletDeviceCollection.System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
			<summary>Copies all elements in the current collection to the specified one-dimensional array, starting at the specified destination array index.</summary>
			<param name="Index">The zero-based index in the array parameter where copying begins.</param>
			<param name="Array">The one-dimensional array that is the destination of elements copied from the collection. The array must have zero-based indexing.</param>
			<exception cref="T:System.IndexOutOfRangeException">If index is less than 0 or index is greater than or equal to array.length.</exception>
			<exception cref="T:System.ArgumentNullException">If array is null.</exception>
			<exception cref="T:System.ArgumentException">If index + collection count is greater than or equal to array.length.</exception>
		</member>
		<member name="P:System.Windows.Input.TabletDeviceCollection.Count">
			<summary>Gets the number of <see cref="T:System.Windows.Input.TabletDevice"></see> objects in the collection.</summary>
			<returns>The number of <see cref="T:System.Windows.Input.TabletDevice"></see> objects in the collection.</returns>
		</member>
		<member name="P:System.Windows.Input.TabletDeviceCollection.IsSynchronized">
			<summary>Gets a value that indicates whether access to the collection is synchronized (thread safe).</summary>
			<returns>true if access to the collection is synchronized (thread safe); otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Windows.Input.TabletDeviceCollection.Item(System.Int32)">
			<summary>Gets the <see cref="T:System.Windows.Input.TabletDevice"></see> object at the specified index within the collection.</summary>
			<returns>The <see cref="T:System.Windows.Input.TabletDevice"></see> object at the specified index within the collection.</returns>
			<param name="Index">The zero-based index of the <see cref="T:System.Windows.Input.TabletDevice"></see> that is retrieved from the collection.</param>
			<exception cref="T:System.IndexOutOfRangeException">If index is less than 0 or index is greater than or equal to the number of <see cref="T:System.Windows.Input.TabletDeviceCollection"></see> objects in the collection.</exception>
		</member>
		<member name="P:System.Windows.Input.TabletDeviceCollection.SyncRoot">
			<summary>Gets an object that can be used to synchronize access to the collection.</summary>
			<returns>An object that can be used to synchronize access to the collection.</returns>
		</member>
		<member name="T:System.Windows.Input.TabletDeviceType">
			<summary>Defines values for the type of devices the tablet device uses. </summary>
		</member>
		<member name="F:System.Windows.Input.TabletDeviceType.Stylus">
			<summary>Indicates the tablet device is a stylus.</summary>
		</member>
		<member name="F:System.Windows.Input.TabletDeviceType.Touch">
			<summary>Indicates the tablet device is a touch screen.</summary>
		</member>
		<member name="T:System.Windows.Input.TabletHardwareCapabilities">
			<summary>Defines values that specify the hardware capabilities of a tablet device, including desktop digitizers and mice. </summary>
		</member>
		<member name="F:System.Windows.Input.TabletHardwareCapabilities.HardProximity">
			<summary>Indicates the tablet device can generate in-air packets when the stylus is in the physical detection range (proximity) of the tablet device.</summary>
		</member>
		<member name="F:System.Windows.Input.TabletHardwareCapabilities.Integrated">
			<summary>Indicates the digitizer is integrated with the display.</summary>
		</member>
		<member name="F:System.Windows.Input.TabletHardwareCapabilities.None">
			<summary>Indicates the tablet device cannot provide this information.</summary>
		</member>
		<member name="F:System.Windows.Input.TabletHardwareCapabilities.StylusHasPhysicalIds">
			<summary>Indicates the tablet device can uniquely identify the active stylus.</summary>
		</member>
		<member name="F:System.Windows.Input.TabletHardwareCapabilities.StylusMustTouch">
			<summary>Indicates the stylus must be in physical contact with the tablet device to report its position.</summary>
		</member>
		<member name="T:System.Windows.Input.TextComposition">
			<summary>Represents a composition related to text input.  Includes the composition text itself, any related control or system text, and a state of completion for the composition.</summary>
		</member>
		<member name="M:System.Windows.Input.TextComposition.#ctor(System.Windows.Input.InputManager,System.Windows.IInputElement,System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.TextComposition"></see> class, taking a specified <see cref="T:System.Windows.Input.InputManager"></see>, source element, and composition text as initial values for the new instance.</summary>
			<param name="source">A source element for this text composition.  The object underlying the source element must implement the <see cref="T:System.Windows.IInputElement"></see> interface.</param>
			<param name="inputManager">An input manager to associate with this text composition.</param>
			<param name="resultText">A string containing the initial text for the composition.  This parameter will become the value of the <see cref="P:System.Windows.Input.TextComposition.Text"></see> property in the new class instance.</param>
		</member>
		<member name="M:System.Windows.Input.TextComposition.#ctor(System.Windows.Input.InputManager,System.Windows.IInputElement,System.String,System.Windows.Input.TextCompositionAutoComplete)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.TextComposition"></see> class, taking a specified <see cref="T:System.Windows.Input.InputManager"></see>, source element, composition text, and a <see cref="T:System.Windows.Input.TextCompositionAutoComplete"></see> setting as initial values for the new instance.</summary>
			<param name="source">A source element for this text composition.  The object underlying the source element must implement the <see cref="T:System.Windows.IInputElement"></see> interface.</param>
			<param name="autoComplete">A member of the <see cref="T:System.Windows.Input.TextCompositionAutoComplete"></see> enumerations specifying desired auto-complete behavior for this text composition.</param>
			<param name="inputManager">An input manager to associate with this text composition.</param>
			<param name="resultText">A string containing the initial text for the composition.  This parameter will become the value of the <see cref="P:System.Windows.Input.TextComposition.Text"></see> property in the new class instance.</param>
		</member>
		<member name="M:System.Windows.Input.TextComposition.Complete">
			<summary>Completes this text composition.</summary>
		</member>
		<member name="P:System.Windows.Input.TextComposition.AutoComplete">
			<summary>Gets the auto-complete setting for this text composition.</summary>
			<returns>A member of the <see cref="T:System.Windows.Input.TextCompositionAutoComplete"></see> enumerations specifying the current auto-complete behavior for this text composition.</returns>
		</member>
		<member name="P:System.Windows.Input.TextComposition.CompositionText">
			<summary>Gets or sets the composition text for this text composition.</summary>
			<returns>A string containing the composition text for this text composition.</returns>
		</member>
		<member name="P:System.Windows.Input.TextComposition.ControlText">
			<summary>Gets or sets any control text associated with this text composition.</summary>
			<returns>A string containing any control text associated with this text composition.</returns>
		</member>
		<member name="P:System.Windows.Input.TextComposition.SystemCompositionText">
			<summary>Gets or sets the system composition text for this text composition.</summary>
			<returns>A string containing the system composition text for this text composition.</returns>
		</member>
		<member name="P:System.Windows.Input.TextComposition.SystemText">
			<summary>Gets or sets the system text for this text composition.</summary>
			<returns>A string containing the system text for this text composition.</returns>
		</member>
		<member name="P:System.Windows.Input.TextComposition.Text">
			<summary>Gets or sets the current text for this text composition.</summary>
			<returns>A string containing the current text for this text composition.</returns>
		</member>
		<member name="T:System.Windows.Input.TextCompositionAutoComplete">
			<summary>Defines a set of states for the handling of automatic completion of a text composition.</summary>
		</member>
		<member name="F:System.Windows.Input.TextCompositionAutoComplete.Off">
			<summary>Auto-complete is off.</summary>
		</member>
		<member name="F:System.Windows.Input.TextCompositionAutoComplete.On">
			<summary>Auto-complete is on. A <see cref="E:System.Windows.Input.TextCompositionManager.TextInput"></see> event will be raised automatically by the <see cref="T:System.Windows.Input.TextCompositionManager"></see> after a <see cref="E:System.Windows.Input.TextCompositionManager.TextInputStart"></see> event is handled.</summary>
		</member>
		<member name="T:System.Windows.Input.TextCompositionEventArgs">
			<summary>Contains arguments associated with changes to a <see cref="T:System.Windows.Input.TextComposition"></see>.</summary>
		</member>
		<member name="M:System.Windows.Input.TextCompositionEventArgs.#ctor(System.Windows.Input.InputDevice,System.Windows.Input.TextComposition)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.TextCompositionEventArgs"></see> class, taking a specified <see cref="T:System.Windows.Input.InputDevice"></see> and <see cref="T:System.Windows.Input.TextComposition"></see> as initial values for the class.</summary>
			<param name="composition">A <see cref="T:System.Windows.Input.TextComposition"></see> object associated with this event.</param>
			<param name="inputDevice">The input device associated with this event.</param>
			<exception cref="T:System.ArgumentNullException">Raised when composition is null.</exception>
		</member>
		<member name="M:System.Windows.Input.TextCompositionEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
			<summary>Invokes a type-specific event handler on a specified target object.</summary>
			<param name="genericTarget">A target object to invoke the event handler on.</param>
			<param name="genericHandler">A delegate for the event handler to invoke.</param>
		</member>
		<member name="P:System.Windows.Input.TextCompositionEventArgs.ControlText">
			<summary>Gets control text associated with a <see cref="T:System.Windows.Input.TextComposition"></see> event.</summary>
			<returns>A string containing any control text associated with this event.</returns>
		</member>
		<member name="P:System.Windows.Input.TextCompositionEventArgs.SystemText">
			<summary>Gets system text associated with a <see cref="T:System.Windows.Input.TextComposition"></see> event.</summary>
			<returns>A string containing any system text associated with this event.</returns>
		</member>
		<member name="P:System.Windows.Input.TextCompositionEventArgs.Text">
			<summary>Gets input text associated with a <see cref="T:System.Windows.Input.TextComposition"></see> event.</summary>
			<returns>A string containing the input text associated with this event.</returns>
		</member>
		<member name="P:System.Windows.Input.TextCompositionEventArgs.TextComposition">
			<summary>Gets the <see cref="T:System.Windows.Input.TextComposition"></see> associated with a <see cref="T:System.Windows.Input.TextComposition"></see> event.</summary>
			<returns>A <see cref="T:System.Windows.Input.TextComposition"></see> object containing the text composition associated with this event.</returns>
		</member>
		<member name="T:System.Windows.Input.TextCompositionEventHandler">
			<summary>Delegate for events related to changes in a <see cref="T:System.Windows.Input.TextComposition"></see>.</summary>
		</member>
		<member name="T:System.Windows.Input.TextCompositionManager">
			<summary>Provides facilities for managing events related to input and text compositions.</summary>
		</member>
		<member name="F:System.Windows.Input.TextCompositionManager.PreviewTextInputEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput"></see> attached event.</summary>
			<returns>The identifier for the <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput"></see> attached event.</returns>
		</member>
		<member name="F:System.Windows.Input.TextCompositionManager.PreviewTextInputStartEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInputStart"></see> attached event.</summary>
			<returns>The identifier for the <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInputStart"></see> attached event.</returns>
		</member>
		<member name="F:System.Windows.Input.TextCompositionManager.PreviewTextInputUpdateEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInputUpdate"></see> attached event.</summary>
			<returns>The identifier for the <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInputUpdate"></see> attached event.</returns>
		</member>
		<member name="F:System.Windows.Input.TextCompositionManager.TextInputEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.TextCompositionManager.TextInput"></see> attached event.</summary>
			<returns>The identifier for the <see cref="E:System.Windows.Input.TextCompositionManager.TextInput"></see> attached event.</returns>
		</member>
		<member name="F:System.Windows.Input.TextCompositionManager.TextInputStartEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.TextCompositionManager.TextInputStart"></see> attached event.</summary>
			<returns>The identifier for the <see cref="E:System.Windows.Input.TextCompositionManager.TextInputStart"></see> attached event.</returns>
		</member>
		<member name="F:System.Windows.Input.TextCompositionManager.TextInputUpdateEvent">
			<summary>Identifies the <see cref="E:System.Windows.Input.TextCompositionManager.TextInputUpdate"></see> attached event.</summary>
			<returns>The identifier for the <see cref="E:System.Windows.Input.TextCompositionManager.TextInputUpdate"></see> attached event.</returns>
		</member>
		<member name="M:System.Windows.Input.TextCompositionManager.AddPreviewTextInputHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput"></see>   GTMT#attached event.</summary>
			<param name="element">A dependency object to add the event handler to.  The dependency object must be a <see cref="T:System.Windows.UIElement"></see> or a <see cref="T:System.Windows.ContentElement"></see>.</param>
			<param name="handler">A delegate that designates the handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.TextCompositionManager.AddPreviewTextInputStartHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInputStart"></see>   GTMT#attached event.</summary>
			<param name="element">A dependency object to add the event handler to.  The dependency object must be a <see cref="T:System.Windows.UIElement"></see> or a <see cref="T:System.Windows.ContentElement"></see>.</param>
			<param name="handler">A delegate that designates the handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.TextCompositionManager.AddPreviewTextInputUpdateHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInputUpdate"></see>   GTMT#attached event.</summary>
			<param name="element">A dependency object to add the event handler to.  The dependency object must be a <see cref="T:System.Windows.UIElement"></see> or a <see cref="T:System.Windows.ContentElement"></see>.</param>
			<param name="handler">A delegate that designates the handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.TextCompositionManager.AddTextInputHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.TextCompositionManager.TextInput"></see>   GTMT#attached event.</summary>
			<param name="element">A dependency object to add the event handler to.  The dependency object must be a <see cref="T:System.Windows.UIElement"></see> or a <see cref="T:System.Windows.ContentElement"></see>.</param>
			<param name="handler">A delegate that designates the handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.TextCompositionManager.AddTextInputStartHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.TextCompositionManager.TextInputStart"></see>   GTMT#attached event.</summary>
			<param name="element">A dependency object to add the event handler to.  The dependency object must be a <see cref="T:System.Windows.UIElement"></see> or a <see cref="T:System.Windows.ContentElement"></see>.</param>
			<param name="handler">A delegate that designates the handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.TextCompositionManager.AddTextInputUpdateHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
			<summary>Adds a handler for the <see cref="E:System.Windows.Input.TextCompositionManager.TextInputUpdate"></see>   GTMT#attached event.</summary>
			<param name="element">A dependency object to add the event handler to.  The dependency object must be a <see cref="T:System.Windows.UIElement"></see> or a <see cref="T:System.Windows.ContentElement"></see>.</param>
			<param name="handler">A delegate that designates the handler to add.</param>
		</member>
		<member name="M:System.Windows.Input.TextCompositionManager.CompleteComposition(System.Windows.Input.TextComposition)">
			<summary>Completes a specified text composition.</summary>
			<returns>true if the text composition was successfully completed; otherwise, false.</returns>
			<param name="composition">A <see cref="T:System.Windows.Input.TextComposition"></see> object to complete.</param>
			<exception cref="T:System.ArgumentNullException">Raised when composition is null.</exception>
			<exception cref="T:System.ArgumentException">Raised when there is no input manager associated with composition, or when the text composition is already marked as completed.</exception>
		</member>
		<member name="M:System.Windows.Input.TextCompositionManager.RemovePreviewTextInputHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput"></see>   GTMT#attached event.</summary>
			<param name="element">A dependency object to remove the event handler from.  The dependency object must be a <see cref="T:System.Windows.UIElement"></see> or a <see cref="T:System.Windows.ContentElement"></see>.</param>
			<param name="handler">A delegate that designates the handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.TextCompositionManager.RemovePreviewTextInputStartHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.TextCompositionManager.TextInputStart"></see>   GTMT#attached event.</summary>
			<param name="element">A dependency object to remove the event handler from.  The dependency object must be a <see cref="T:System.Windows.UIElement"></see> or a <see cref="T:System.Windows.ContentElement"></see>.</param>
			<param name="handler">A delegate that designates the handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.TextCompositionManager.RemovePreviewTextInputUpdateHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInputUpdate"></see>   GTMT#attached event.</summary>
			<param name="element">A dependency object to remove the event handler from.  The dependency object must be a <see cref="T:System.Windows.UIElement"></see> or a <see cref="T:System.Windows.ContentElement"></see>.</param>
			<param name="handler">A delegate that designates the handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.TextCompositionManager.RemoveTextInputHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.TextCompositionManager.TextInput"></see>   GTMT#attached event.</summary>
			<param name="element">A dependency object to remove the event handler from.  The dependency object must be a <see cref="T:System.Windows.UIElement"></see> or a <see cref="T:System.Windows.ContentElement"></see>.</param>
			<param name="handler">A delegate that designates the handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.TextCompositionManager.RemoveTextInputStartHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.TextCompositionManager.TextInputStart"></see>   GTMT#attached event.</summary>
			<param name="element">A dependency object to remove the event handler from.  The dependency object must be a <see cref="T:System.Windows.UIElement"></see> or a <see cref="T:System.Windows.ContentElement"></see>.</param>
			<param name="handler">A delegate that designates the handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.TextCompositionManager.RemoveTextInputUpdateHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
			<summary>Removes a handler for the <see cref="E:System.Windows.Input.TextCompositionManager.TextInputUpdate"></see>   GTMT#attached event.</summary>
			<param name="element">A dependency object to remove the event handler from.  The dependency object must be a <see cref="T:System.Windows.UIElement"></see> or a <see cref="T:System.Windows.ContentElement"></see>.</param>
			<param name="handler">A delegate that designates the handler to remove.</param>
		</member>
		<member name="M:System.Windows.Input.TextCompositionManager.StartComposition(System.Windows.Input.TextComposition)">
			<summary>Starts a specified text composition.</summary>
			<returns>true if the text composition was successfully started; otherwise, false.</returns>
			<param name="composition">A <see cref="T:System.Windows.Input.TextComposition"></see> object to start.</param>
		</member>
		<member name="M:System.Windows.Input.TextCompositionManager.UpdateComposition(System.Windows.Input.TextComposition)">
			<summary>Updates a specified text composition.</summary>
			<returns>true if the text composition was successfully updated; otherwise, false.</returns>
			<param name="composition">A <see cref="T:System.Windows.Input.TextComposition"></see> object to update.</param>
		</member>
		<member name="T:System.Windows.Input.StylusPlugIns.DynamicRenderer">
			<summary>Draws ink on a surface as the user moves the tablet pen.</summary>
		</member>
		<member name="M:System.Windows.Input.StylusPlugIns.DynamicRenderer.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPlugIns.DynamicRenderer"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Input.StylusPlugIns.DynamicRenderer.GetDispatcher">
			<summary>Returns a <see cref="T:System.Windows.Threading.Dispatcher"></see> for the rendering thread.</summary>
			<returns>A <see cref="T:System.Windows.Threading.Dispatcher"></see> for the rendering thread.</returns>
		</member>
		<member name="M:System.Windows.Input.StylusPlugIns.DynamicRenderer.OnDraw(System.Windows.Media.DrawingContext,System.Windows.Input.StylusPointCollection,System.Windows.Media.Geometry,System.Windows.Media.Brush)">
			<summary>Draws the ink in real-time so it appears to "flow" from the tablet pen or other pointing device.</summary>
			<param name="drawingContext">The <see cref="T:System.Windows.Media.DrawingContext"></see> object onto which the stroke is rendered.</param>
			<param name="stylusPoints">The <see cref="T:System.Windows.Input.StylusPointCollection"></see> that represents the segment of the stroke to draw.</param>
			<param name="geometry">A <see cref="T:System.Windows.Media.Geometry"></see> that represents the path of the mouse pointer.</param>
			<param name="fillBrush">A Brush that specifies the appearance of the current stroke.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPlugIns.DynamicRenderer.OnDrawingAttributesReplaced">
			<summary>Occurs when the <see cref="P:System.Windows.Input.StylusPlugIns.DynamicRenderer.DrawingAttributes"></see> property changes.</summary>
		</member>
		<member name="M:System.Windows.Input.StylusPlugIns.DynamicRenderer.Reset(System.Windows.Input.StylusDevice,System.Windows.Input.StylusPointCollection)">
			<summary>Clears rendering on the current stroke and redraws it.</summary>
			<param name="stylusPoints">The stylus points to be redrawn.</param>
			<param name="stylusDevice">The current stylus device.</param>
			<exception cref="T:System.ArgumentException">Neither the stylus nor the mouse is in the down state.</exception>
		</member>
		<member name="P:System.Windows.Input.StylusPlugIns.DynamicRenderer.DrawingAttributes">
			<summary>Gets or sets the <see cref="T:System.Windows.Ink.DrawingAttributes"></see> that specifies the appearance of the rendered ink.</summary>
			<returns>The <see cref="T:System.Windows.Ink.DrawingAttributes"></see> that specifies the appearance of the rendered ink.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusPlugIns.DynamicRenderer.RootVisual">
			<summary>Gets the root visual for the <see cref="T:System.Windows.Input.StylusPlugIns.DynamicRenderer"></see>.</summary>
			<returns>The root <see cref="T:System.Windows.Media.Visual"></see> for the <see cref="T:System.Windows.Input.StylusPlugIns.DynamicRenderer"></see>.</returns>
		</member>
		<member name="T:System.Windows.Input.StylusPlugIns.RawStylusInput">
			<summary>Provides information about input from a <see cref="T:System.Windows.Input.StylusDevice"></see> to a <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn"></see>.</summary>
		</member>
		<member name="M:System.Windows.Input.StylusPlugIns.RawStylusInput.GetStylusPoints">
			<summary>Gets the stylus points that are collected from the stylus.</summary>
			<returns>The stylus points that are collected from the stylus.</returns>
		</member>
		<member name="M:System.Windows.Input.StylusPlugIns.RawStylusInput.NotifyWhenProcessed(System.Object)">
			<summary>Subscribes to the application thread's corresponding stylus methods.</summary>
			<param name="callbackData">The data to pass to the application thread.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPlugIns.RawStylusInput.SetStylusPoints(System.Windows.Input.StylusPointCollection)">
			<summary>Sets the stylus points that are passed to the application thread.</summary>
			<param name="stylusPoints">The stylus points to pass to the application thread.</param>
		</member>
		<member name="P:System.Windows.Input.StylusPlugIns.RawStylusInput.StylusDeviceId">
			<summary>Gets the identifier of the current stylus device.</summary>
			<returns>The identifier of the current <see cref="T:System.Windows.Input.StylusDevice"></see>.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusPlugIns.RawStylusInput.TabletDeviceId">
			<summary>Gets the identifier of the current tablet device.</summary>
			<returns>The identifier of the current <see cref="T:System.Windows.Input.TabletDevice"></see>.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusPlugIns.RawStylusInput.Timestamp">
			<summary>Gets the time at which the input occurred.</summary>
			<returns>The time at which the input occurred.</returns>
		</member>
		<member name="T:System.Windows.Input.StylusPlugIns.StylusPlugIn">
			<summary>Represents a plug-in that can be added to a control's <see cref="P:System.Windows.UIElement.StylusPlugIns"></see> property.</summary>
		</member>
		<member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnAdded">
			<summary>Occurs when the <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn"></see> is added to an element.</summary>
		</member>
		<member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnEnabledChanged">
			<summary>Occurs when the <see cref="P:System.Windows.Input.StylusPlugIns.StylusPlugIn.Enabled"></see> property changes.</summary>
		</member>
		<member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnIsActiveForInputChanged">
			<summary>Occurs when the <see cref="P:System.Windows.Input.StylusPlugIns.StylusPlugIn.IsActiveForInput"></see> property changes.</summary>
		</member>
		<member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnRemoved">
			<summary>Occurs when the <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn"></see> is removed from an element.</summary>
		</member>
		<member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnStylusDown(System.Windows.Input.StylusPlugIns.RawStylusInput)">
			<summary>Occurs on a thread in the pen thread pool when the tablet pen touches the digitizer.</summary>
			<param name="rawStylusInput">A <see cref="T:System.Windows.Input.StylusPlugIns.RawStylusInput"></see> that contains information about input from the pen.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnStylusDownProcessed(System.Object,System.Boolean)">
			<summary>Occurs on the application UI (user interface) thread when the tablet pen touches the digitizer.</summary>
			<param name="targetVerified">true if the pen's input was correctly routed to the <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn"></see>; otherwise, false.</param>
			<param name="callbackData">The object that the application passed to the <see cref="M:System.Windows.Input.StylusPlugIns.RawStylusInput.NotifyWhenProcessed(System.Object)"></see> method.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnStylusEnter(System.Windows.Input.StylusPlugIns.RawStylusInput,System.Boolean)">
			<summary>Occurs on a pen thread when the cursor enters the bounds of an element.</summary>
			<param name="confirmed">true if the pen actually left the bounds of the element; otherwise, false.</param>
			<param name="rawStylusInput">A <see cref="T:System.Windows.Input.StylusPlugIns.RawStylusInput"></see> that contains information about input from the pen.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnStylusLeave(System.Windows.Input.StylusPlugIns.RawStylusInput,System.Boolean)">
			<summary>Occurs on a pen thread when the cursor leaves the bounds of an element.</summary>
			<param name="confirmed">true if the pen actually left the bounds of the element; otherwise, false.</param>
			<param name="rawStylusInput">A <see cref="T:System.Windows.Input.StylusPlugIns.RawStylusInput"></see> that contains information about input from the pen.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnStylusMove(System.Windows.Input.StylusPlugIns.RawStylusInput)">
			<summary>Occurs on a pen thread when the tablet pen moves on the digitizer.</summary>
			<param name="rawStylusInput">A <see cref="T:System.Windows.Input.StylusPlugIns.RawStylusInput"></see> that contains information about input from the pen.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnStylusMoveProcessed(System.Object,System.Boolean)">
			<summary>Occurs on the application UI (user interface) thread when the tablet pen moves on the digitizer.</summary>
			<param name="targetVerified">true if the pen's input was correctly routed to the <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn"></see>; otherwise, false.</param>
			<param name="callbackData">The object that the application passed to the <see cref="M:System.Windows.Input.StylusPlugIns.RawStylusInput.NotifyWhenProcessed(System.Object)"></see> method.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnStylusUp(System.Windows.Input.StylusPlugIns.RawStylusInput)">
			<summary>Occurs on a pen thread when the user lifts the tablet pen from the digitizer.</summary>
			<param name="rawStylusInput">A <see cref="T:System.Windows.Input.StylusPlugIns.RawStylusInput"></see> that contains information about input from the pen.</param>
		</member>
		<member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnStylusUpProcessed(System.Object,System.Boolean)">
			<summary>Occurs on the application UI (user interface) thread when the user lifts the tablet pen from the digitizer.</summary>
			<param name="targetVerified">true if the pen's input was correctly routed to the <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn"></see>; otherwise, false.</param>
			<param name="callbackData">The object that the application passed to the <see cref="M:System.Windows.Input.StylusPlugIns.RawStylusInput.NotifyWhenProcessed(System.Object)"></see> method.</param>
		</member>
		<member name="P:System.Windows.Input.StylusPlugIns.StylusPlugIn.Element">
			<summary>Gets the <see cref="T:System.Windows.UIElement"></see> to which the <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn"></see> is attached. </summary>
			<returns>The <see cref="T:System.Windows.UIElement"></see> to which the <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn"></see> is attached.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusPlugIns.StylusPlugIn.ElementBounds">
			<summary>Gets the cached bounds of the element.</summary>
			<returns>The cached bounds of the element.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusPlugIns.StylusPlugIn.Enabled">
			<summary>Gets or sets whether the <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn"></see> is active.</summary>
			<returns>true if the <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn"></see> is active; otherwise, false. The default is true.</returns>
		</member>
		<member name="P:System.Windows.Input.StylusPlugIns.StylusPlugIn.IsActiveForInput">
			<summary>Gets whether the <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn"></see> is able to accept input.</summary>
			<returns>true if the <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn"></see> is able to accept input; otherwise false.</returns>
		</member>
		<member name="T:System.Windows.Input.StylusPlugIns.StylusPlugInCollection">
			<summary>Represent a collection of <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn"></see> objects.</summary>
		</member>
		<member name="T:System.Windows.Interop.CursorInteropHelper">
			<summary>A static helper class with one method, which is used to obtain a TLA#tla_winclient <see cref="T:System.Windows.Input.Cursor"></see> object based on a provided TLA#tla_win32 cursor handle.</summary>
		</member>
		<member name="M:System.Windows.Interop.CursorInteropHelper.Create(System.Runtime.InteropServices.SafeHandle)">
			<summary>Returns a TLA#tla_winclient <see cref="T:System.Windows.Input.Cursor"></see> object based on a provided TLA#tla_win32 cursor handle.</summary>
			<returns>The TLA#tla_winclient cursor object based on the provided TLA#tla_win32 cursor handle.</returns>
			<param name="cursorHandle">Cursor reference to use for interoperation.</param>
		</member>
		<member name="T:System.Windows.Interop.HwndSource">
			<summary> Used to host a TLA#tla_winclient application within a TLA#tla_win32 window. </summary>
		</member>
		<member name="M:System.Windows.Interop.HwndSource.#ctor(System.Windows.Interop.HwndSourceParameters)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Interop.HwndSource"></see> class with a structure that contains the initial settings. </summary>
			<param name="parameters">A structure that contains the parameters needed to create the window.</param>
		</member>
		<member name="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
			<summary>Obsolete. Use the <see cref="M:System.Windows.Interop.HwndSource.#ctor(System.Windows.Interop.HwndSourceParameters)"></see> constructor instead.</summary>
			<param name="y">The position of the window's upper edge.</param>
			<param name="name">The window's name.</param>
			<param name="style">The TLA2#tla_win32 styles for the window.</param>
			<param name="classStyle">The TLA#tla_win32 class styles for the window.</param>
			<param name="exStyle">The extended TLA2#tla_win32 styles for the window.</param>
			<param name="parent">The handle of the window's parent window.</param>
			<param name="x">The position of the window's left edge.</param>
		</member>
		<member name="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
			<summary>Obsolete. Use the <see cref="M:System.Windows.Interop.HwndSource.#ctor(System.Windows.Interop.HwndSourceParameters)"></see> constructor instead.</summary>
			<param name="y">The position of the window's upper edge.</param>
			<param name="width">The window's width.</param>
			<param name="name">The window's name.</param>
			<param name="style">The TLA2#tla_win32 styles for the window.</param>
			<param name="classStyle">The TLA#tla_win32 class styles for the window.</param>
			<param name="height">The window's height.</param>
			<param name="exStyle">The extended TLA2#tla_win32 styles for the window.</param>
			<param name="parent">The handle of the window's parent window.</param>
			<param name="x">The position of the window's left edge.</param>
		</member>
		<member name="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr,System.Boolean)">
			<summary>Obsolete. Use the <see cref="M:System.Windows.Interop.HwndSource.#ctor(System.Windows.Interop.HwndSourceParameters)"></see> constructor instead.</summary>
			<param name="y">The position of the window's upper edge.</param>
			<param name="width">The window's width.</param>
			<param name="name">The window's name.</param>
			<param name="style">The TLA2#tla_win32 styles for the window.</param>
			<param name="adjustSizingForNonClientArea">Specifies whether to include the non-client area for sizing. Set this value to true to have the layout manager include the non-client area and false otherwise.</param>
			<param name="classStyle">The TLA#tla_win32 class styles for the window.</param>
			<param name="height">The window's height.</param>
			<param name="exStyle">The extended TLA2#tla_win32 styles for the window.</param>
			<param name="parent">The handle of the window's parent window.</param>
			<param name="x">The position of the window's left edge.</param>
		</member>
		<member name="E:System.Windows.Interop.HwndSource.AutoResized">
			<summary> Occurs when layout causes the source to automatically resize. </summary>
		</member>
		<member name="E:System.Windows.Interop.HwndSource.Disposed">
			<summary> Occurs when this object is disposed. </summary>
		</member>
		<member name="E:System.Windows.Interop.HwndSource.SizeToContentChanged">
			<summary>Occurs when the value of the <see cref="P:System.Windows.Interop.HwndSource.SizeToContent"></see> property changes.</summary>
		</member>
		<member name="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)">
			<summary> Adds an event handler object that receives all window messages. </summary>
			<param name="hook">The handler that will receive the window messages.</param>
		</member>
		<member name="M:System.Windows.Interop.HwndSource.CreateHandleRef">
			<summary> Gets the window's window handle (HWND), packaged in a HandleRef structure. </summary>
			<returns>A structure that contains the window's window handle (HWND).</returns>
		</member>
		<member name="M:System.Windows.Interop.HwndSource.FromHwnd(System.IntPtr)">
			<summary> Returns the specified window's <see cref="T:System.Windows.Interop.HwndSource"></see> object. </summary>
			<returns>The <see cref="T:System.Windows.Interop.HwndSource"></see> object for the window specified by hwnd.</returns>
			<param name="hwnd">The window's handle (HWND).</param>
		</member>
		<member name="M:System.Windows.Interop.HwndSource.GetCompositionTargetCore">
			<summary> Gets the window's visual target. </summary>
			<returns>Returns the window's visual target.</returns>
		</member>
		<member name="M:System.Windows.Interop.HwndSource.RemoveHook(System.Windows.Interop.HwndSourceHook)">
			<summary> Removes the event handler added by <see cref="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)"></see>. </summary>
			<param name="hook">The event handler to be removed.</param>
		</member>
		<member name="M:System.Windows.Interop.HwndSource.System.Windows.Interop.IKeyboardInputSink.HasFocusWithin">
			<summary> Specifies whether the sink or one of its descendents has focus. </summary>
			<returns>Returns true if the sink or one of its descendents has focus and false otherwise.</returns>
		</member>
		<member name="M:System.Windows.Interop.HwndSource.System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
			<summary> Called when one of the sink's mnemonics is invoked. </summary>
			<returns>Returns true if the message was handled and false otherwise.</returns>
			<param name="modifiers">Modifier keys.</param>
			<param name="msg">The message and associated data. Do not modify this structure. It is passed by reference only for performance reasons.</param>
		</member>
		<member name="M:System.Windows.Interop.HwndSource.System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
			<summary> Called by a child component to register its <see cref="T:System.Windows.Interop.IKeyboardInputSink"></see> interface. </summary>
			<returns>A reference to this component's <see cref="T:System.Windows.Interop.IKeyboardInputSink"></see> interface.</returns>
			<param name="sink">A reference to the child component's <see cref="T:System.Windows.Interop.IKeyboardInputSink"></see> interface.</param>
		</member>
		<member name="M:System.Windows.Interop.HwndSource.System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)">
			<summary> Called to set focus on either the first or last tab stop. </summary>
			<returns>Returns true if focus has been set as requested, and false if there are no tab stops.</returns>
			<param name="request">Specifies whether focus should be set to the first or last tab stop.</param>
		</member>
		<member name="M:System.Windows.Interop.HwndSource.System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
			<summary> Called to give the component an opportunity to process keyboard input. </summary>
			<returns>Returns true if the message was handled and false otherwise.</returns>
			<param name="modifiers">Modifier keys.</param>
			<param name="msg">The message and associated data. Do not modify this structure. It is passed by reference only for performance reasons.</param>
		</member>
		<member name="M:System.Windows.Interop.HwndSource.System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
			<summary> Called to give the component an opportunity to process WM_CHAR, WM_SYSCHAR, WM_DEADCHAR, and WM_SYSDEADCHAR input messages before System.Windows.Interop.IKeyboardInputSink.OnMnemonic is called. </summary>
			<returns>Returns true if the message was handled and System.Windows.Interop.IKeyboardInputSink.OnMnemonic should not be called. Returns false otherwise.</returns>
			<param name="modifiers">Modifier keys.</param>
			<param name="msg">The message and associated data. Do not modify this structure. It is passed by reference only for performance reasons.</param>
		</member>
		<member name="P:System.Windows.Interop.HwndSource.CompositionTarget">
			<summary> Gets the visual manager for the hosted window. </summary>
			<returns>The visual manager.</returns>
		</member>
		<member name="P:System.Windows.Interop.HwndSource.Handle">
			<summary> Gets the window handle. </summary>
			<returns>The window handle.</returns>
		</member>
		<member name="P:System.Windows.Interop.HwndSource.IsDisposed">
			<summary> Gets a value that indicates whether the object has been disposed. </summary>
			<returns>Set to true if the object has been disposed; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Interop.HwndSource.RootVisual">
			<summary> Gets or sets the window's root visual object. </summary>
			<returns>The window's root visual object.</returns>
		</member>
		<member name="P:System.Windows.Interop.HwndSource.SizeToContent">
			<summary> Get or sets whether and how the window should be sized to its content. </summary>
			<returns>A value that specifies whether and how the window should be sized to its content. The default value is <see cref="F:System.Windows.SizeToContent.Manual"></see>, which specifies that the window should not be sized to its content.</returns>
		</member>
		<member name="P:System.Windows.Interop.HwndSource.UsesPerPixelOpacity">
			<summary>Gets a value that declares whether the per-pixel opacity of the source window content is respected.</summary>
			<returns>true if using per-pixel opacity; otherwise, false.</returns>
		</member>
		<member name="T:System.Windows.Interop.HwndSourceHook">
			<summary> Represents the method that handles TLA#tla_win32 window messages. </summary>
			<returns>The appropriate return value depends on the particular message. See the message documentation details.</returns>
		</member>
		<member name="T:System.Windows.Interop.HwndSourceParameters">
			<summary> Contains the parameters used to create a <see cref="T:System.Windows.Interop.HwndSource"></see> object using its constructor.</summary>
		</member>
		<member name="M:System.Windows.Interop.HwndSourceParameters.#ctor(System.String)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Interop.HwndSourceParameters"></see> class with a specified window name. </summary>
			<param name="name">The window's name.</param>
		</member>
		<member name="M:System.Windows.Interop.HwndSourceParameters.#ctor(System.String,System.Int32,System.Int32)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Interop.HwndSourceParameters"></see> class with a specified window name and initial size. </summary>
			<param name="width">The window's width in pixels.</param>
			<param name="name">The window's name.</param>
			<param name="height">The window's height in pixels.</param>
		</member>
		<member name="M:System.Windows.Interop.HwndSourceParameters.Equals(System.Windows.Interop.HwndSourceParameters)">
			<summary> Determines whether this structure is equal to a specified <see cref="T:System.Windows.Interop.HwndSourceParameters"></see> structure. </summary>
			<returns>true if the structures are equal; otherwise, false.</returns>
			<param name="obj">The structure to be tested for equality.</param>
		</member>
		<member name="M:System.Windows.Interop.HwndSourceParameters.Equals(System.Object)">
			<summary> Determines whether this structure is equal to a specified structure. </summary>
			<returns>true if the structures are equal; otherwise, false.</returns>
			<param name="obj">The structure to be tested for equality.</param>
		</member>
		<member name="M:System.Windows.Interop.HwndSourceParameters.GetHashCode">
			<summary> Gets the structure's hash code. </summary>
			<returns>The structure's hash code.</returns>
		</member>
		<member name="M:System.Windows.Interop.HwndSourceParameters.op_Equality(System.Windows.Interop.HwndSourceParameters,System.Windows.Interop.HwndSourceParameters)">
			<summary> Determines whether a <see cref="T:System.Windows.Interop.HwndSourceParameters"></see>  structure is equal to another <see cref="T:System.Windows.Interop.HwndSourceParameters"></see>  structure.</summary>
			<returns>true if the structures are equal; otherwise, false.</returns>
			<param name="a">The first <see cref="T:System.Windows.Interop.HwndSourceParameters"></see> to compare.</param>
			<param name="b">The second <see cref="T:System.Windows.Interop.HwndSourceParameters"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.Interop.HwndSourceParameters.op_Inequality(System.Windows.Interop.HwndSourceParameters,System.Windows.Interop.HwndSourceParameters)">
			<summary> Determines whether a <see cref="T:System.Windows.Interop.HwndSourceParameters"></see> structure is not equal to another <see cref="T:System.Windows.Interop.HwndSourceParameters"></see> structure.</summary>
			<param name="a">The first <see cref="T:System.Windows.Interop.HwndSourceParameters"></see> to compare.</param>
			<param name="b">The second <see cref="T:System.Windows.Interop.HwndSourceParameters"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.Interop.HwndSourceParameters.SetPosition(System.Int32,System.Int32)">
			<summary>Sets the values used for screen position of the window for the <see cref="T:System.Windows.Interop.HwndSource"></see>. </summary>
			<param name="y">The position of the window's upper edge.</param>
			<param name="x">The position of the window's left edge.</param>
		</member>
		<member name="M:System.Windows.Interop.HwndSourceParameters.SetSize(System.Int32,System.Int32)">
			<summary>Sets the values used for window size of the <see cref="T:System.Windows.Interop.HwndSource"></see>. </summary>
			<param name="width">The window's width in device pixels.</param>
			<param name="height">The window's height in device pixels.</param>
		</member>
		<member name="P:System.Windows.Interop.HwndSourceParameters.AdjustSizingForNonClientArea">
			<summary> Gets or sets a value that indicates whether to include the nonclient area for sizing. </summary>
			<returns>true if the layout manager sizing logic should include the nonclient area; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Windows.Interop.HwndSourceParameters.ExtendedWindowStyle">
			<summary> Gets or sets the extended TLA#tla_win styles for the window. </summary>
			<returns>The extended window styles. See CreateWindowEx for a list of these styles. The default is 0 (no such styles).</returns>
		</member>
		<member name="P:System.Windows.Interop.HwndSourceParameters.HasAssignedSize">
			<summary> Gets a value that indicates whether a size was assigned. </summary>
			<returns>true if the window size was assigned; otherwise, false. The default is false, unless the structure was created with provided height and width, in which case the value will be true.</returns>
		</member>
		<member name="P:System.Windows.Interop.HwndSourceParameters.Height">
			<summary> Gets or sets a value that indicates the window's height. </summary>
			<returns>The window's height in device pixels. The default value is 1.</returns>
		</member>
		<member name="P:System.Windows.Interop.HwndSourceParameters.HwndSourceHook">
			<summary> Gets or sets the window's message hook. </summary>
			<returns>The window's message hook.</returns>
		</member>
		<member name="P:System.Windows.Interop.HwndSourceParameters.ParentWindow">
			<summary> Gets or sets the window's parent window pointer. </summary>
			<returns>The parent window's HWND.</returns>
		</member>
		<member name="P:System.Windows.Interop.HwndSourceParameters.PositionX">
			<summary> Gets or sets the position of the window's left edge. </summary>
			<returns>The position of the window's left edge. The default is CW_USEDEFAULT, as processed by CreateWindow.</returns>
		</member>
		<member name="P:System.Windows.Interop.HwndSourceParameters.PositionY">
			<summary> Gets or sets the position of the window's upper edge. </summary>
			<returns>The position of the window's upper edge. The default is CW_USEDEFAULT, as processed by CreateWindow.</returns>
		</member>
		<member name="P:System.Windows.Interop.HwndSourceParameters.UsesPerPixelOpacity">
			<summary>Gets a value that declares whether the per-pixel opacity of the source window content is respected.</summary>
			<returns>true if using per-pixel opacity; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Interop.HwndSourceParameters.Width">
			<summary> Gets or sets a value that indicates the window's width. </summary>
			<returns>The window's width in device pixels. The default value is 1.</returns>
		</member>
		<member name="P:System.Windows.Interop.HwndSourceParameters.WindowClassStyle">
			<summary> Gets or sets the TLA#tla_win class style for the window. </summary>
			<returns>The window class style. See Window Class Styles  for details. The default is 0 (no such styles).</returns>
		</member>
		<member name="P:System.Windows.Interop.HwndSourceParameters.WindowName">
			<summary> Gets or sets the window's name. </summary>
			<returns>The window's name.</returns>
		</member>
		<member name="P:System.Windows.Interop.HwndSourceParameters.WindowStyle">
			<summary> Gets or sets the window's style. </summary>
			<returns>The window's style. See Window Styles for a complete list of style bits. See Remarks for defaults.</returns>
		</member>
		<member name="T:System.Windows.Interop.HwndTarget">
			<summary> Represents a binding to a window handle (HWND). </summary>
		</member>
		<member name="M:System.Windows.Interop.HwndTarget.#ctor(System.IntPtr)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Interop.HwndTarget"></see> class with a specified window handle (HWND). </summary>
			<param name="hwnd">The handle of the window that this object will draw to.</param>
		</member>
		<member name="P:System.Windows.Interop.HwndTarget.BackgroundColor">
			<summary> Gets or sets the window's background color. </summary>
			<returns>The background color, as a <see cref="T:System.Windows.Media.Color"></see>.</returns>
		</member>
		<member name="P:System.Windows.Interop.HwndTarget.RootVisual">
			<summary>Gets or sets the root visual object of the page to be hosted by the window. </summary>
			<returns>The hosted page's root visual.</returns>
		</member>
		<member name="P:System.Windows.Interop.HwndTarget.TransformFromDevice">
			<summary> Gets a matrix that transforms the coordinates of the device associated with the rendering destination to this target. </summary>
			<returns>The transform matrix.</returns>
		</member>
		<member name="P:System.Windows.Interop.HwndTarget.TransformToDevice">
			<summary> Gets a matrix that transforms the coordinates of this target to the device associated with the rendering destination. </summary>
			<returns>The transform matrix.</returns>
		</member>
		<member name="P:System.Windows.Interop.HwndTarget.UsesPerPixelOpacity">
			<summary>Gets a value that declares whether the per-pixel opacity of the source window content is respected.</summary>
			<returns>true if using per-pixel opacity; otherwise, false.</returns>
		</member>
		<member name="T:System.Windows.Interop.Imaging">
			<summary>Provides managed / unmanaged interoperation for creating image objects.</summary>
		</member>
		<member name="M:System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(System.IntPtr,System.IntPtr,System.Windows.Int32Rect,System.Windows.Media.Imaging.BitmapSizeOptions)">
			<summary>Returns a managed <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>, given a pointer to an unmanaged bitmap. </summary>
			<returns>The managed image source.</returns>
			<param name="bitmap">Pointer to the unmanaged bitmap.</param>
			<param name="sourceRect">Size of the source image.</param>
			<param name="palette">Pointer to the bitmap's palette map.</param>
			<param name="sizeOptions">An emeration that specifies how to handle conversions.</param>
		</member>
		<member name="M:System.Windows.Interop.Imaging.CreateBitmapSourceFromHIcon(System.IntPtr,System.Windows.Int32Rect,System.Windows.Media.Imaging.BitmapSizeOptions)">
			<summary>Returns a managed <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>, given a pointer to an unmanaged icon image. </summary>
			<param name="icon">Pointer to the unmanaged icon source.</param>
			<param name="sourceRect">Size of the source image.</param>
			<param name="sizeOptions">An emeration that specifies how to handle conversions.</param>
		</member>
		<member name="M:System.Windows.Interop.Imaging.CreateBitmapSourceFromMemorySection(System.IntPtr,System.Int32,System.Int32,System.Windows.Media.PixelFormat,System.Int32,System.Int32)">
			<summary>Returns a managed <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>, given an unmanaged memory location. </summary>
			<param name="pixelWidth"> Integer that specifies the width, in pixels, of the bitmap.</param>
			<param name="format">A value of the enumeration.</param>
			<param name="section">Pointer to memory section.</param>
			<param name="pixelHeight"> Integer that specifies the height, in pixels, of the bitmap.</param>
		</member>
		<member name="T:System.Windows.Interop.IWin32Window">
			<summary>Defines the contract for tla#tla_win32 window handles.</summary>
		</member>
		<member name="P:System.Windows.Interop.IWin32Window.Handle">
			<summary>Gets the window handle.</summary>
			<returns>The window handle.</returns>
		</member>
		<member name="T:System.Windows.Markup.IAddChild">
			<summary> Parses elements that allow child Objects or text in TLA#tla_xaml, but do not map directly to an associated property. </summary>
		</member>
		<member name="M:System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary> Adds a child Object to classes that implement this interface. </summary>
			<param name="value">Specifies the child Object to add.</param>
		</member>
		<member name="M:System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary> Handles the addition of a node's text content to the object. </summary>
			<param name="text">Text to add to the object.</param>
		</member>
		<member name="T:System.Windows.Markup.IUriContext">
			<summary> The IUriContext interface allows elements (like Frame, PageViewer) and type converters (like BitmapImage TypeConverters) a way to ensure that base uri is set on them by the parser, codegen for xaml, baml and caml cases. The elements can then use this base uri to navigate. </summary>
		</member>
		<member name="P:System.Windows.Markup.IUriContext.BaseUri">
			<summary> Gets or sets the base TLA#tla_uri of the current context. </summary>
			<returns>The base TLA2#tla_uri of the current context.</returns>
		</member>
		<member name="T:System.Windows.Markup.XmlLanguage">
			<summary>Represents an RFC 3066 language tag for use in TLA#tla_xml and TLA#tla_xaml markup.</summary>
		</member>
		<member name="M:System.Windows.Markup.XmlLanguage.GetEquivalentCulture">
			<summary>Returns the appropriate equivalent <see cref="T:System.Globalization.CultureInfo"></see> for this <see cref="T:System.Windows.Markup.XmlLanguage"></see>, if and only if such a <see cref="T:System.Globalization.CultureInfo"></see> is registered for the <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag"></see> value of this <see cref="T:System.Windows.Markup.XmlLanguage"></see></summary>
			<returns>A <see cref="T:System.Globalization.CultureInfo"></see> that can be used for localization-globalization TLA2#tla_api calls that take that type as an argument.</returns>
			<exception cref="T:System.InvalidOperationException">No registered <see cref="T:System.Globalization.CultureInfo"></see> for the provided <see cref="T:System.Windows.Markup.XmlLanguage"></see> exists, as determined by a call to <see cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)"></see>.</exception>
		</member>
		<member name="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)">
			<summary>Returns a <see cref="T:System.Windows.Markup.XmlLanguage"></see> instance, based on a string representing the language per RFC 3066.</summary>
			<returns>A new <see cref="T:System.Windows.Markup.XmlLanguage"></see> with the provided string as its <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag"></see> value.</returns>
			<param name="ietfLanguageTag">An RFC 3066 language string, or empty string.</param>
			<exception cref="T:System.ArgumentException">ietfLanguageTag parameter was non-empty, but did not conform to the syntax specified in RFC 3066. See Remarks.</exception>
			<exception cref="T:System.ArgumentNullException">ietfLanguageTag parameter cannot be null.</exception>
		</member>
		<member name="M:System.Windows.Markup.XmlLanguage.GetSpecificCulture">
			<summary>Returns the most-closely-related non-neutral <see cref="T:System.Globalization.CultureInfo"></see> for this <see cref="T:System.Windows.Markup.XmlLanguage"></see>.</summary>
			<returns>A <see cref="T:System.Globalization.CultureInfo"></see> that can be used for localization-globalization TLA2#tla_api calls that take that type as an argument.</returns>
			<exception cref="T:System.InvalidOperationException">No related non-neutral <see cref="T:System.Globalization.CultureInfo"></see> is registered for the current <see cref="T:System.Windows.Markup.XmlLanguage"></see>  <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag"></see>.</exception>
		</member>
		<member name="M:System.Windows.Markup.XmlLanguage.ToString">
			<summary>Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Windows.Markup.XmlLanguage"></see>.</summary>
			<returns>A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Windows.Markup.XmlLanguage"></see>.</returns>
		</member>
		<member name="P:System.Windows.Markup.XmlLanguage.Empty">
			<summary>Gets a static <see cref="T:System.Windows.Markup.XmlLanguage"></see> instance as would be created by <see cref="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)"></see> with the language tag as an empty attribute string.</summary>
			<returns>The empty language tag version of <see cref="T:System.Windows.Markup.XmlLanguage"></see>, for use in comparison operations.</returns>
		</member>
		<member name="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag">
			<summary>Gets the string representation of the language tag.</summary>
			<returns>The string representation of the language tag.</returns>
		</member>
		<member name="T:System.Windows.Markup.XmlLanguageConverter">
			<summary>Provides type conversion for the <see cref="T:System.Windows.Markup.XmlLanguage"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Markup.XmlLanguageConverter.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XmlLanguageConverter"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Markup.XmlLanguageConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Returns whether this converter can convert an object of one type to the type of this converter.</summary>
			<returns>true if this converter can perform the conversion; otherwise, false.</returns>
			<param name="typeDescriptorContext">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context. </param>
			<param name="sourceType">A type that represents the type you want to convert from.</param>
		</member>
		<member name="M:System.Windows.Markup.XmlLanguageConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Returns whether this converter can convert the object to the specified type.</summary>
			<returns>true if this converter can perform the conversion; otherwise, false.</returns>
			<param name="typeDescriptorContext">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
			<param name="destinationType">A type that represents the type you want to convert to. </param>
		</member>
		<member name="M:System.Windows.Markup.XmlLanguageConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary>Converts the given value to the type of this converter.</summary>
			<returns>An object that represents the converted value.</returns>
			<param name="typeDescriptorContext">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context. </param>
			<param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture. </param>
			<param name="source">The object to convert.</param>
		</member>
		<member name="M:System.Windows.Markup.XmlLanguageConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary>Converts the given value object to the specified type.</summary>
			<returns>An object that represents the converted value.</returns>
			<param name="typeDescriptorContext">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context. </param>
			<param name="destinationType">A type that represents the type you want to convert to. </param>
			<param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture. </param>
			<param name="value">The object to convert. This is expected to be type <see cref="T:System.Windows.Markup.XmlLanguage"></see>.</param>
		</member>
		<member name="T:System.Windows.Media.AlignmentX">
			<summary> Describes how content is positioned horizontally within a container. </summary>
		</member>
		<member name="F:System.Windows.Media.AlignmentX.Center">
			<summary> Center contents horizontally within the container. </summary>
		</member>
		<member name="F:System.Windows.Media.AlignmentX.Left">
			<summary>Align contents toward the left of the container. </summary>
		</member>
		<member name="F:System.Windows.Media.AlignmentX.Right">
			<summary> Align contents toward the right of the container. </summary>
		</member>
		<member name="T:System.Windows.Media.AlignmentY">
			<summary> Describes how content is positioned vertically within a container. </summary>
		</member>
		<member name="F:System.Windows.Media.AlignmentY.Bottom">
			<summary> Align contents toward the bottom of the container. </summary>
		</member>
		<member name="F:System.Windows.Media.AlignmentY.Center">
			<summary> Center contents vertically within the container.</summary>
		</member>
		<member name="F:System.Windows.Media.AlignmentY.Top">
			<summary> Align contents toward the top of the container. </summary>
		</member>
		<member name="T:System.Windows.Media.ArcSegment">
			<summary> Represents an elliptical arc between two points. </summary>
		</member>
		<member name="M:System.Windows.Media.ArcSegment.#ctor">
			<summary> Initializes a new instance of the ArcSegment class. </summary>
		</member>
		<member name="M:System.Windows.Media.ArcSegment.#ctor(System.Windows.Point,System.Windows.Size,System.Double,System.Boolean,System.Windows.Media.SweepDirection,System.Boolean)">
			<summary> Initializes a new instance of the ArcSegment class. </summary>
			<param name="sweepDirection">Set to <see cref="F:System.Windows.Media.SweepDirection.Clockwise"></see> to draw the arc in a positive angle direction; set to <see cref="F:System.Windows.Media.SweepDirection.CounterClockwise"></see> to draw the arc in a negative angle direction.</param>
			<param name="size">The x- and y-radius of the arc. The x-radius is specified by the Size structure's Width property, and the y-radius is specified by the Size structure's Height property.</param>
			<param name="point">The destination point of the arc; the start point of the arc is defined as the current point of the PathFigure to which the ArcSegment is added.</param>
			<param name="isStroked">Set to true to stroke the arc when a Pen is used to render the segment; otherwise, false.</param>
		</member>
		<member name="F:System.Windows.Media.ArcSegment.PointProperty">
			<summary> Identifies the Point GTMT#dependency property. </summary>
			<returns>The Point GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.ArcSegment.SizeProperty">
			<summary> Identifies the Size GTMT#dependency property. </summary>
			<returns>The Size GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.ArcSegment.Clone">
			<summary>Creates a modifiable clone of this instance.</summary>
			<returns>A modifiable clone of this segment. The returned copy is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.ArcSegment.CloneCurrentValue">
			<summary>Returns a non-animated version of this instance that represents its current value.</summary>
			<returns>A non-animated version of this instance that represents its current value. If this instance is not animated, a reference to the current object is returned; otherwise, a non-animated copy with all of its values set to current animated values is created and returned.</returns>
		</member>
		<member name="P:System.Windows.Media.ArcSegment.IsLargeArc">
			<summary>Gets or sets a value that indicates whether the arc should be greater than 180 degrees.</summary>
			<returns>true if the arc should be greater than 180 degrees; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.ArcSegment.Point">
			<summary> Gets or sets the endpoint of the elliptical arc. </summary>
			<returns>The point to which the arc is drawn.</returns>
		</member>
		<member name="P:System.Windows.Media.ArcSegment.Size">
			<summary> Gets or sets the x- and y-radius of the arc as a Size structure. </summary>
			<returns>A Size structure that describes the x- and y-radius of the elliptical arc. The Size structure's Width property specifies the arc's x-radius; its Height property specifies the arc's y-radius. The default value is 0,0. </returns>
		</member>
		<member name="P:System.Windows.Media.ArcSegment.SweepDirection">
			<summary> Gets or sets a value that specifies whether the arc is drawn in the <see cref="F:System.Windows.Media.SweepDirection.Clockwise"></see> or <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise"></see> direction. </summary>
			<returns>A value that specifies the direction in which the arc is drawn. The default value is <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.BezierSegment">
			<summary>Represents a cubic Bezier curve drawn between two points. </summary>
		</member>
		<member name="M:System.Windows.Media.BezierSegment.#ctor">
			<summary>Initializes a new instance of the BezierSegment class. </summary>
		</member>
		<member name="M:System.Windows.Media.BezierSegment.#ctor(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Boolean)">
			<summary>Initializes a new instance of the BezierSegment class with the specified control points, end point, and stroke option. </summary>
			<param name="point2">The second control point, which determines the ending portion of the curve.</param>
			<param name="point3">The point to which the curve is drawn.</param>
			<param name="point1">The first control point, which determines the beginning portion of the curve.</param>
			<param name="isStroked">true to stroke the curve when a Pen is used to render the segment; otherwise, false.</param>
		</member>
		<member name="F:System.Windows.Media.BezierSegment.Point1Property">
			<summary>Identifies the Point1 GTMT#dependency property. </summary>
			<returns>The Point1 GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.BezierSegment.Point2Property">
			<summary>Identifies the Point2 GTMT#dependency property. </summary>
			<returns>The Point2 GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.BezierSegment.Point3Property">
			<summary>Identifies the Point3 GTMT#dependency property. </summary>
			<returns>The Point3 GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.BezierSegment.Clone">
			<summary>Returns a modifiable clone of this instance.</summary>
			<returns>A modifiable clone of the segment. The returned clone is effectively a deep copy of the current object. You can defer some copying until it is necessary in order to improve performance. The <see cref="P:System.Windows.Freezable.IsFrozen"></see> property of the copy is false.</returns>
		</member>
		<member name="M:System.Windows.Media.BezierSegment.CloneCurrentValue">
			<summary>Returns a non-animated clone of this instance that represents its current value. </summary>
			<returns>A non-animated clone of this instance that represents its current value. The returned BezierSegment has the same value as the instantaneous value of the current object, but it is not animated.</returns>
		</member>
		<member name="P:System.Windows.Media.BezierSegment.Point1">
			<summary>Gets or sets the first control point of the curve. </summary>
			<returns>The first control point of the curve.</returns>
		</member>
		<member name="P:System.Windows.Media.BezierSegment.Point2">
			<summary>Gets or sets the second control point of the curve. </summary>
			<returns>The second control point of the curve.</returns>
		</member>
		<member name="P:System.Windows.Media.BezierSegment.Point3">
			<summary>Gets or sets the end point of the curve. </summary>
			<returns>The end point of the curve.</returns>
		</member>
		<member name="T:System.Windows.Media.Brush">
			<summary> Abstract class that provides generic means for painting an area. Classes that derive from Brush describe how the area is painted.       </summary>
		</member>
		<member name="M:System.Windows.Media.Brush.#ctor">
			<summary> Initializes a new instance of the Brush class. </summary>
		</member>
		<member name="F:System.Windows.Media.Brush.OpacityProperty">
			<summary> Identifies the Opacity GTMT#dependency property. </summary>
			<returns>The Opacity GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.Brush.RelativeTransformProperty">
			<summary> Identifies the RelativeTransform GTMT#dependency property. </summary>
			<returns>The RelativeTransform GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.Brush.TransformProperty">
			<summary> Identifies the Transform GTMT#dependency property. </summary>
			<returns>The Transform GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.Brush.Clone">
			<summary> Returns a modifiable clone of the brush. </summary>
			<returns>Returns a modifiable clone of the brush. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Brush.CloneCurrentValue">
			<summary> Returns a non-animated version of the brush. The returned brush represents the current object's state at the time this method was called.           </summary>
			<returns>Returns the current value of the brush. The returned Brush has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="M:System.Windows.Media.Brush.ToString">
			<summary> Return string representation of this Brush.              </summary>
			<returns>A string representation of this object.</returns>
		</member>
		<member name="M:System.Windows.Media.Brush.ToString(System.IFormatProvider)">
			<summary> Creates a string representation of this object based on the IFormatProvider             passed in.  If the provider is null, the CurrentCulture is used.              </summary>
			<returns>A string representation of this object.</returns>
		</member>
		<member name="P:System.Windows.Media.Brush.Opacity">
			<summary> Gets or sets the degree of opacity of a Brush.  </summary>
			<returns>The value of the Opacity property is expressed as a value between 0 and 1.  A value of 0 indicates that the element is completely transparent, while a value of 1 indicates that the element is completely opaque. A value of 0.5 indicates the element is 50% opaque, a value of 0.725 indicates the element is 72.5% opaque, and so on. Values less than 0 are treated as 0, while values greater than 1 are treated as 1.  </returns>
		</member>
		<member name="P:System.Windows.Media.Brush.RelativeTransform">
			<summary> Gets or sets the transformation that is applied to the brush before it's been mapped and positioned to fill the output area. </summary>
			<returns>The transformation that is applied to the brush before its been mapped and positioned to fill the output area.</returns>
		</member>
		<member name="P:System.Windows.Media.Brush.Transform">
			<summary> Gets or sets the transformation that is applied to the brush. This transformation is applied after the brush's output has been mapped and positioned. </summary>
			<returns>The transformation to apply to the brush. The default value is the Identity transformation.</returns>
		</member>
		<member name="T:System.Windows.Media.BrushConverter">
			<summary> Used to convert a Brush object to or from another object type. </summary>
		</member>
		<member name="M:System.Windows.Media.BrushConverter.#ctor">
			<summary> Initializes a new instance of the BrushConverter class. </summary>
		</member>
		<member name="M:System.Windows.Media.BrushConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines whether this class can convert an object of a given type to a Brush object. </summary>
			<returns>Returns true if conversion is possible (object is string type); otherwise, false.</returns>
			<param name="context">The conversion context.</param>
			<param name="sourceType">The type from which to convert.</param>
		</member>
		<member name="M:System.Windows.Media.BrushConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines whether this class can convert an object of a given type to the specified destination type. </summary>
			<returns>Returns true if conversion is possible; otherwise, false.</returns>
			<param name="context">The conversion context.</param>
			<param name="destinationType">The destination type.</param>
		</member>
		<member name="M:System.Windows.Media.BrushConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary> Converts from an object of a given type to a Brush object. </summary>
			<returns>Returns a new Brush object if successful; otherwise, NULL.</returns>
			<param name="culture">The culture information that applies to the conversion.</param>
			<param name="context">The conversion context.</param>
			<param name="value">The object to convert.</param>
			<exception cref="T:System.NotSupportedException">value is NULL or cannot be converted to a Brush.</exception>
		</member>
		<member name="M:System.Windows.Media.BrushConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> Converts a Brush object to a specified type, using the specified context and culture information. </summary>
			<returns>An object that represents the converted value.</returns>
			<param name="culture">The current culture information.</param>
			<param name="context">The conversion context.</param>
			<param name="destinationType">The destination type that the value object is converted to.</param>
			<param name="value">The Brush to convert.</param>
			<exception cref="T:System.NotSupportedException">value is NULL or it is not a Brush-or-destinationType is not a valid destination type.</exception>
		</member>
		<member name="T:System.Windows.Media.Brushes">
			<summary>Implements a set of predefined solid colors. </summary>
		</member>
		<member name="P:System.Windows.Media.Brushes.AliceBlue">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFF0F8FF. </summary>
			<returns>A frozen <see cref="T:System.Windows.Media.SolidColorBrush"></see> with a <see cref="P:System.Windows.Media.SolidColorBrush.Color"></see> of #FFF0F8FF.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.AntiqueWhite">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFAEBD7. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Aqua">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF00FFFF. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Aquamarine">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF7FFFD4. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Azure">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFF0FFFF. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Beige">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFF5F5DC. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Bisque">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFFE4C4. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Black">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF000000. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.BlanchedAlmond">
			<summary> Gets the solid fill color that has a hexadecimal value of #FFFFEBCD. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Blue">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF0000FF. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.BlueViolet">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF8A2BE2. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Brown">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFA52A2A. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.BurlyWood">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFDEB887. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.CadetBlue">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF5F9EA0. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Chartreuse">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF7FFF00. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Chocolate">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFD2691E. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Coral">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFF7F50. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.CornflowerBlue">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF6495ED. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Cornsilk">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFFF8DC. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Crimson">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFDC143C. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Cyan">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF00FFFF. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.DarkBlue">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF00008B. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.DarkCyan">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF008B8B. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.DarkGoldenrod">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFB8860B. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.DarkGray">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFA9A9A9. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.DarkGreen">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF006400. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.DarkKhaki">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFBDB76B. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.DarkMagenta">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF8B008B. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.DarkOliveGreen">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF556B2F. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.DarkOrange">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFF8C00. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.DarkOrchid">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF9932CC. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.DarkRed">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF8B0000. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.DarkSalmon">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFE9967A. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.DarkSeaGreen">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF8FBC8F. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.DarkSlateBlue">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF483D8B. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.DarkSlateGray">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF2F4F4F. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.DarkTurquoise">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF00CED1. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.DarkViolet">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF9400D3. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.DeepPink">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFF1493. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.DeepSkyBlue">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF00BFFF. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.DimGray">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF696969. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.DodgerBlue">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF1E90FF. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Firebrick">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFB22222. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.FloralWhite">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFFFAF0. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.ForestGreen">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF228B22. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Fuchsia">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFF00FF. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Gainsboro">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFDCDCDC. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.GhostWhite">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFF8F8FF. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Gold">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFFD700. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Goldenrod">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFDAA520. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Gray">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF808080. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Green">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF008000. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.GreenYellow">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFADFF2F. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Honeydew">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFF0FFF0. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.HotPink">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFF69B4. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.IndianRed">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFCD5C5C. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Indigo">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF4B0082. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Ivory">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFFFFF0. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Khaki">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFF0E68C. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Lavender">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFE6E6FA. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.LavenderBlush">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFFF0F5. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.LawnGreen">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF7CFC00. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.LemonChiffon">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFFFACD. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.LightBlue">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFADD8E6. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.LightCoral">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFF08080. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.LightCyan">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFE0FFFF. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.LightGoldenrodYellow">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFAFAD2. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.LightGray">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFD3D3D3. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.LightGreen">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF90EE90. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.LightPink">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFFB6C1. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.LightSalmon">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFFA07A. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.LightSeaGreen">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF20B2AA. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.LightSkyBlue">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF87CEFA. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.LightSlateGray">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF778899. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.LightSteelBlue">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFB0C4DE. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.LightYellow">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFFFFE0. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Lime">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF00FF00. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.LimeGreen">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF32CD32. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Linen">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFAF0E6. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Magenta">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFF00FF. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Maroon">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF800000. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.MediumAquamarine">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF66CDAA. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.MediumBlue">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF0000CD. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.MediumOrchid">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFBA55D3. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.MediumPurple">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF9370DB. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.MediumSeaGreen">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF3CB371. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.MediumSlateBlue">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF7B68EE. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.MediumSpringGreen">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF00FA9A. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.MediumTurquoise">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF48D1CC. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.MediumVioletRed">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFC71585. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.MidnightBlue">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF191970. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.MintCream">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFF5FFFA. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.MistyRose">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFFE4E1. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Moccasin">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFFE4B5. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.NavajoWhite">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFFDEAD. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Navy">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF000080. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.OldLace">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFDF5E6. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Olive">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF808000. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.OliveDrab">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF6B8E23. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Orange">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFFA500. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.OrangeRed">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFF4500. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Orchid">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFDA70D6. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.PaleGoldenrod">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFEEE8AA. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.PaleGreen">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF98FB98. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.PaleTurquoise">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFAFEEEE. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.PaleVioletRed">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFDB7093. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.PapayaWhip">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFFEFD5. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.PeachPuff">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFFDAB9. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Peru">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFCD853F. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Pink">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFFC0CB. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Plum">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFDDA0DD. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.PowderBlue">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFB0E0E6. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Purple">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF800080. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Red">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFF0000. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.RosyBrown">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFBC8F8F. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.RoyalBlue">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF4169E1. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.SaddleBrown">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF8B4513. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Salmon">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFA8072. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.SandyBrown">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFF4A460. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.SeaGreen">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF2E8B57. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Sienna">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFA0522D. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Silver">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFC0C0C0. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.SkyBlue">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF87CEEB. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.SlateBlue">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF6A5ACD. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.SlateGray">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF708090. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Snow">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFFFAFA. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.SpringGreen">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF00FF7F. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.SteelBlue">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF4682B4. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Tan">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFD2B48C. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Teal">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF008080. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Thistle">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFD8BFD8. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Tomato">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFF6347. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Transparent">
			<summary>Gets the solid fill color that has a hexadecimal value of #00FFFFFF. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Turquoise">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF40E0D0. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Violet">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFEE82EE. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Wheat">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFF5DEB3. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.White">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFFFFFF. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.WhiteSmoke">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFF5F5F5. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.Yellow">
			<summary>Gets the solid fill color that has a hexadecimal value of #FFFFFF00. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="P:System.Windows.Media.Brushes.YellowGreen">
			<summary>Gets the solid fill color that has a hexadecimal value of #FF9ACD32. </summary>
			<returns>A solid fill color.</returns>
		</member>
		<member name="T:System.Windows.Media.BrushMappingMode">
			<summary>Specifies the coordinate system used by a Brush. </summary>
		</member>
		<member name="F:System.Windows.Media.BrushMappingMode.Absolute">
			<summary>The coordinate system is not relative to the <see cref="T:System.Windows.Media.Brush"></see> output area. Values are interpreted directly in local space.  </summary>
		</member>
		<member name="F:System.Windows.Media.BrushMappingMode.RelativeToBoundingBox">
			<summary>The coordinate system is relative to the <see cref="T:System.Windows.Media.Brush"></see> output area: 0 indicates 0 percent of the output area and 1 indicates 100 percent of the output area. For example, (0.5, 0.5) describes a point in the middle of the output area, and (1, 1) describes a point at the bottom right of the output area. </summary>
		</member>
		<member name="T:System.Windows.Media.CharacterMetrics">
			<summary>Metrics used to lay out a character in a device font.</summary>
		</member>
		<member name="M:System.Windows.Media.CharacterMetrics.#ctor">
			<summary>Constructs a CharacterMetrics object with default values.</summary>
		</member>
		<member name="M:System.Windows.Media.CharacterMetrics.#ctor(System.String)">
			<summary>Constructs a CharacterMetrics with the specified values.</summary>
			<param name="metrics">Value of the Metrics property.</param>
		</member>
		<member name="M:System.Windows.Media.CharacterMetrics.Equals(System.Object)">
			<summary>Compares two CharacterMetrics for equality.</summary>
			<returns>A value of type <see cref="T:System.Boolean"></see>.</returns>
			<param name="obj">A value of type <see cref="T:System.Object"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.CharacterMetrics.GetHashCode">
			<summary>Compates a hash value for a CharacterMetrics.</summary>
			<returns>A value of type <see cref="T:System.Int32"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.CharacterMetrics.Baseline">
			<summary>Vertical offset from the bottom of the black box to the baseline. A positive value indicates the baseline is above the bottom of the black box, and a negative value indicates the baseline is below the bottom of the black box.</summary>
			<returns>A value of type <see cref="T:System.Double"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.CharacterMetrics.BlackBoxHeight">
			<summary>Height of the black box for the character.</summary>
			<returns>A value of type <see cref="T:System.Double"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.CharacterMetrics.BlackBoxWidth">
			<summary>Width of the black box for the character.</summary>
			<returns>A value of type <see cref="T:System.Double"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.CharacterMetrics.BottomSideBearing">
			<summary>Recommended white space below the black box. A negative value results in an overhang. The vertical advance for the character is TopSideBearing + BlackBoxHeight + BottomSideBearing, and cannot be less than zero.</summary>
			<returns>A value of type <see cref="T:System.Double"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.CharacterMetrics.LeftSideBearing">
			<summary>Recommended white space to the left of the black box. A negative value results in an overhang. The horizontal advance for the character is LeftSideBearing + BlackBoxWidth + RightSideBearing, and cannot be less than zero.</summary>
			<returns>A value of type <see cref="T:System.Double"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.CharacterMetrics.Metrics">
			<summary>String specifying the following properties in the following order: BlackBoxWidth, BlackBoxHeight, Baseline, LeftSideBearing, RightSideBearing, TopSideBearing, BottomSideBearing. Property values are delimited by commas, and the first two properties are required. The remaining properties may be omitted and default to zero. For example, "0.75,0.75,,0.1" sets the first, second, and fourth properties to the specified values and the rest to zero.</summary>
			<returns>A value of type <see cref="T:System.String"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.CharacterMetrics.RightSideBearing">
			<summary>Recommended white space to the right of the black box. A negative value results in an overhang. The horizontal advance for the character is LeftSideBearing + BlackBoxWidth + RightSideBearing, and cannot be less than zero.</summary>
			<returns>A value of type <see cref="T:System.Double"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.CharacterMetrics.TopSideBearing">
			<summary>Recommended white space above the black box. A negative value results in an overhang. The vertical advance for the character is TopSideBearing + BlackBoxHeight + BottomSideBearing, and cannot be less than zero.</summary>
			<returns>A value of type <see cref="T:System.Double"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.CharacterMetricsDictionary">
			<summary>Represents a dictionary of character metrics for a device font that is indexed by Unicode scalar values.</summary>
		</member>
		<member name="M:System.Windows.Media.CharacterMetricsDictionary.Add(System.Int32,System.Windows.Media.CharacterMetrics)">
			<summary>Adds a culture and associated CharacterMetrics to the collection.</summary>
			<param name="value">A value of type <see cref="T:System.Windows.Media.CharacterMetrics"></see>.</param>
			<param name="key">A value of type <see cref="T:System.Int32"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.CharacterMetricsDictionary.Clear">
			<summary>Removes all objects from the collection.</summary>
		</member>
		<member name="M:System.Windows.Media.CharacterMetricsDictionary.ContainsKey(System.Int32)">
			<summary>Determines whether the collection contains the specified culture.</summary>
			<returns>A value of type <see cref="T:System.Boolean"></see>.</returns>
			<param name="key">A value of type <see cref="T:System.Int32"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.CharacterMetricsDictionary.GetEnumerator">
			<summary>Returns an enumerator that iterates through the collection.</summary>
			<returns>An enumerator that iterates through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.CharacterMetricsDictionary.Remove(System.Int32)">
			<summary>Removes the specified culture and associated CharacterMetrics.</summary>
			<returns>A value of type <see cref="T:System.Boolean"></see>.</returns>
			<param name="key">A value of type <see cref="T:System.Int32"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.CharacterMetricsDictionary.System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.CharacterMetricsDictionary.System.Collections.IDictionary.Add(System.Object,System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.CharacterMetricsDictionary.System.Collections.IDictionary.Remove(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.CharacterMetricsDictionary.TryGetValue(System.Int32,System.Windows.Media.CharacterMetrics@)">
			<summary>If the dictionary contains an entry for the specified culture, returns true and stores the CharacterMetrics in the value parameter; otherwise returns false and sets value to null.</summary>
			<returns>A value of type <see cref="T:System.Boolean"></see>.</returns>
			<param name="value">A value of type <see cref="T:System.Windows.Media.CharacterMetrics"></see>.</param>
			<param name="key">A value of type <see cref="T:System.Int32"></see>.</param>
		</member>
		<member name="P:System.Windows.Media.CharacterMetricsDictionary.Count">
			<summary>Gets the number of elements in the collection.</summary>
			<returns>A value of type <see cref="T:System.Int32"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.CharacterMetricsDictionary.IsReadOnly">
			<summary>Gets a value indicating whether the dictionary is read-only.</summary>
			<returns>Returns true if the dictionary is read-only; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.CharacterMetricsDictionary.Item(System.Int32)">
			<summary>Gets or sets the CharacterMetrics associated with the specified culture.</summary>
			<returns>A value of type <see cref="T:System.Windows.Media.CharacterMetrics"></see>.</returns>
			<param name="key">A value of type <see cref="T:System.Int32"></see>.</param>
		</member>
		<member name="P:System.Windows.Media.CharacterMetricsDictionary.Keys">
			<summary>Gets a collection containing the keys (cultures) in the dictionary.</summary>
			<returns>A collection of keys of type <see cref="T:System.Int32"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.CharacterMetricsDictionary.Values">
			<summary>Gets a collection containing the values (strings) in the dictionary.</summary>
			<returns>A collection containing an array of type <see cref="T:System.Windows.Media.CharacterMetrics"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.Color">
			<summary> Describes a color in terms of alpha, red, green, and blue channels. </summary>
		</member>
		<member name="M:System.Windows.Media.Color.Add(System.Windows.Media.Color,System.Windows.Media.Color)">
			<summary> Adds two Color structures. </summary>
			<returns>The result of adding color1 and color2.</returns>
			<param name="color2">The second color structure to add.</param>
			<param name="color1">The first color to add.</param>
		</member>
		<member name="M:System.Windows.Media.Color.AreClose(System.Windows.Media.Color,System.Windows.Media.Color)">
			<summary> Compares two Color structures for fuzzy equality. </summary>
			<returns>true if color1 and color2 are nearly identical; otherwise, false.</returns>
			<param name="color2">The second Color structure to compare.</param>
			<param name="color1">The first Color structure to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Color.Equals(System.Windows.Media.Color)">
			<summary>Tests whether a Color structures is identical to this Color structure.</summary>
			<returns>true if this Color structure is equal to color; otherwise, false.</returns>
			<param name="color">The Color structure to compare. </param>
		</member>
		<member name="M:System.Windows.Media.Color.Equals(System.Object)">
			<summary> Tests whether the specified Object is a Color structure and is equivalent to this Color structure. </summary>
			<returns>true if o, the passed Object, is a Color structure and is identical to this Color structure; otherwise, false.</returns>
			<param name="o">The Object to compare to this Color structure.</param>
		</member>
		<member name="M:System.Windows.Media.Color.Equals(System.Windows.Media.Color,System.Windows.Media.Color)">
			<summary> Tests whether two Color structures are identical. </summary>
			<returns>true if color1 and color2 are equal; otherwise, false.</returns>
			<param name="color2">The second Color structure to compare.</param>
			<param name="color1">The first Color structure to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Color.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
			<summary> Creates a Color structure using the specified sRGB alpha component and color component values. </summary>
			<returns>The Color structure created from  a, r, g, and b.</returns>
			<param name="a">The alpha channel, A, of the new Color structure.</param>
			<param name="g">The green channel, G, of the new Color structure.</param>
			<param name="r">The red channel, R, of the new Color structure.</param>
			<param name="b">The blue channel, B, of the new Color structure..</param>
		</member>
		<member name="M:System.Windows.Media.Color.FromAValues(System.Single,System.Single[],System.Uri)">
			<summary>Creates a Color structure using the specified alpha component, color channel values, and color profile.</summary>
			<returns>The Color structure created.</returns>
			<param name="a">The alpha channel of the new Color structure.</param>
			<param name="profileUri">The TLA#tla_icc or TLA#tla_icm color profile used for the Color structure. </param>
			<param name="values">The collection of values used to specify the color channels of the Color structure. These values map to the profileUri.</param>
		</member>
		<member name="M:System.Windows.Media.Color.FromRgb(System.Byte,System.Byte,System.Byte)">
			<summary> Creates a Color structure using the specified sRGB color component values and an alpha value of 1. </summary>
			<returns>The Color structure created from r, g, and b and an alpha component value of 1.</returns>
			<param name="g">The sRGB green component, G, of the new Color structure.</param>
			<param name="r">The sRGB red component, R, of the new Color structure.</param>
			<param name="b">The sRGB blue component, B, of the new Color structure..</param>
		</member>
		<member name="M:System.Windows.Media.Color.FromScRgb(System.Single,System.Single,System.Single,System.Single)">
			<summary> Creates a Color structure using the specified ScRGB alpha component and color component values. </summary>
			<returns>The Color created form the parameters a, r, g, and b..</returns>
			<param name="a">The ScRGB alpha channel, ScA of the new Color structure.</param>
			<param name="g">The ScRGB green channel, ScG of the new Color structure.</param>
			<param name="r">The ScRGB red channel, ScA of the new Color structure.</param>
			<param name="b">The ScRGB blue channel, ScB of the new Color structure.</param>
		</member>
		<member name="M:System.Windows.Media.Color.FromValues(System.Single[],System.Uri)">
			<summary>Creates a Color structure with the specified color channel values, and color profile, and an alpha value of 1.</summary>
			<returns>The Color structure created.</returns>
			<param name="profileUri">The TLA#tla_icc or TLA#tla_icm color profile used for the Color structure.</param>
			<param name="values">The collection of values used to specify the color channels of the Color structure. These values map to the profileUri.</param>
		</member>
		<member name="M:System.Windows.Media.Color.GetHashCode">
			<summary> Gets a hashcode for this Color structure. </summary>
			<returns>Hashcode for this Color structure.</returns>
		</member>
		<member name="M:System.Windows.Media.Color.Multiply(System.Windows.Media.Color,System.Single)">
			<summary> Multiplies the alpha, red, blue, and green channels of the specified Color structure by the specified value. </summary>
			<returns>The result of multiplying color by coef.</returns>
			<param name="color">The Color to be multiplied.</param>
		</member>
		<member name="M:System.Windows.Media.Color.op_Addition(System.Windows.Media.Color,System.Windows.Media.Color)">
			<summary> Adds two Color structures. </summary>
			<returns>The result of adding color1 and color2.</returns>
			<param name="color2">The second Color structure to add.</param>
			<param name="color1">The first Color structure to add.</param>
		</member>
		<member name="M:System.Windows.Media.Color.op_Equality(System.Windows.Media.Color,System.Windows.Media.Color)">
			<summary> Tests whether two Color structures are exactly identical. </summary>
			<returns>true if color1 and color2 are exactly identical; otherwise, false.</returns>
			<param name="color2">The second Color structure to compare.</param>
			<param name="color1">The first Color structure to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Color.op_Inequality(System.Windows.Media.Color,System.Windows.Media.Color)">
			<summary> Tests whether two Color structures are not identical. </summary>
			<returns>true if color1 and color2 are not equal; otherwise, false.</returns>
			<param name="color2">The second Color structure to compare.</param>
			<param name="color1">The first Color structure to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Color.op_Multiply(System.Windows.Media.Color,System.Single)">
			<summary> Multiplies the alpha, red, blue, and green channels of the specified Color structure by the specified value. </summary>
			<returns>The result of multiplying color by coef.</returns>
			<param name="coefficient">The coefficient</param>
			<param name="color">The Color to be multiplied.</param>
		</member>
		<member name="M:System.Windows.Media.Color.op_Subtraction(System.Windows.Media.Color,System.Windows.Media.Color)">
			<summary> Subtracts a Color structure from a Color structure. </summary>
			<returns>The result of subtracting color2 from color1.</returns>
			<param name="color2">The Color structure to subtract from color1.</param>
			<param name="color1">The Color structure to be subtracted from.</param>
		</member>
		<member name="M:System.Windows.Media.Color.Subtract(System.Windows.Media.Color,System.Windows.Media.Color)">
			<summary> Subtracts a Color structure from a Color structure. </summary>
			<returns>The result of subtracting color2 from color1.</returns>
			<param name="color2">The Color structure to subtract from color1.</param>
			<param name="color1">The Color structure to be subtracted from.</param>
		</member>
		<member name="M:System.Windows.Media.Color.ToString">
			<summary> Creates a String representation of this Color structure using the ScRGB components. </summary>
			<returns>The String represnetation of this Color structure.</returns>
		</member>
		<member name="M:System.Windows.Media.Color.ToString(System.IFormatProvider)">
			<summary> Creates a String representation of this Color structure using the ScRGB components. </summary>
			<returns>The String represnetation of this Color structure.</returns>
			<param name="provider">Culture-specific formatting information.</param>
		</member>
		<member name="P:System.Windows.Media.Color.A">
			<summary> Gets or sets the sRGB alpha component value of this Color structure. </summary>
			<returns>The sRGB alpha component value of this Color structure.</returns>
		</member>
		<member name="P:System.Windows.Media.Color.B">
			<summary> Gets or sets the sRGB blue component value of this Color structure. </summary>
			<returns>The sRGB blue component value of this Color structure.</returns>
		</member>
		<member name="P:System.Windows.Media.Color.ColorContext">
			<summary>Gets the TLA#tla_icc or TLA#tla_icm color profile of the <see cref="T:System.Windows.Media.Color"></see>.</summary>
			<returns>The TLA#tla_icc or TLA#tla_icm color profile of the <see cref="T:System.Windows.Media.Color"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Color.G">
			<summary> Gets or sets the sRGB green component value of this Color structure. </summary>
			<returns>The sRGB green component value of this Color structure.</returns>
		</member>
		<member name="P:System.Windows.Media.Color.R">
			<summary> Gets or sets the sRGB red component value of this Color structure. </summary>
			<returns>The sRGB red component value of this Color structure.</returns>
		</member>
		<member name="P:System.Windows.Media.Color.ScA">
			<summary> Gets or sets the ScRGB alpha component value of this Color structure. </summary>
			<returns>The ScRGB alpha component value of this Color structure.</returns>
		</member>
		<member name="P:System.Windows.Media.Color.ScB">
			<summary> Gets or sets the ScRGB blue component value of this Color structure. </summary>
			<returns>The ScRGB red component value of this Color structure.</returns>
		</member>
		<member name="P:System.Windows.Media.Color.ScG">
			<summary> Gets or sets the ScRGB green component value of this Color structure. </summary>
			<returns>The ScRGB green component value of this Color structure.</returns>
		</member>
		<member name="P:System.Windows.Media.Color.ScR">
			<summary> Gets or sets the ScRGB red component value of this Color structure. </summary>
			<returns>The ScRGB red component value of this Color structure.</returns>
		</member>
		<member name="T:System.Windows.Media.ColorContext">
			<summary>Represents the TLA#tla_icc or TLA#tla_icm color profile that is associated with a GTMT#bitmap image.</summary>
		</member>
		<member name="M:System.Windows.Media.ColorContext.#ctor(System.Windows.Media.PixelFormat)">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.ColorContext"></see> with the standard color profile (sRGB, ScRGB, RGB, CMYK, Gray, or Multichannel) that most closely matches the supplied <see cref="T:System.Windows.Media.PixelFormat"></see>.</summary>
			<param name="pixelFormat">The <see cref="T:System.Windows.Media.PixelFormat"></see> from which the <see cref="T:System.Windows.Media.ColorContext"></see> is derived.</param>
		</member>
		<member name="M:System.Windows.Media.ColorContext.#ctor(System.Uri)">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.ColorContext"></see> with the TLA#tla_icc or TLA#tla_icm color profile located at a given <see cref="T:System.Uri"></see>.</summary>
			<param name="profileUri">The <see cref="T:System.Uri"></see> that identifies the location of the desired color profile.</param>
		</member>
		<member name="M:System.Windows.Media.ColorContext.Equals(System.Object)">
			<summary>Determines whether an <see cref="T:System.Object"></see> is equal to an instance of <see cref="T:System.Windows.Media.ColorContext"></see>.</summary>
			<returns>true if the supplied <see cref="T:System.Object"></see> is equal to this instance of <see cref="T:System.Windows.Media.ColorContext"></see>; otherwise, false.</returns>
			<param name="obj">Identifies the <see cref="T:System.Object"></see> to compare for equality.</param>
		</member>
		<member name="M:System.Windows.Media.ColorContext.GetHashCode">
			<summary>Gets the GTMT#hash code for this instance of <see cref="T:System.Windows.Media.ColorContext"></see>. </summary>
			<returns>An <see cref="T:System.Int32"></see> that represents the GTMT#hash code for the object.</returns>
		</member>
		<member name="M:System.Windows.Media.ColorContext.op_Equality(System.Windows.Media.ColorContext,System.Windows.Media.ColorContext)">
			<summary>Operates on two instances of <see cref="T:System.Windows.Media.ColorContext"></see> to determine equality.</summary>
			<returns>true if the instances of <see cref="T:System.Windows.Media.ColorContext"></see> are equal; otherwise, false.</returns>
			<param name="context1">The first instance of <see cref="T:System.Windows.Media.ColorContext"></see> to compare.</param>
			<param name="context2">The second instance of <see cref="T:System.Windows.Media.ColorContext"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.Media.ColorContext.op_Inequality(System.Windows.Media.ColorContext,System.Windows.Media.ColorContext)">
			<summary>Operates on two instances of <see cref="T:System.Windows.Media.ColorContext"></see> to determine that they are not equal.</summary>
			<returns>true if the instances of <see cref="T:System.Windows.Media.ColorContext"></see> are not equal; otherwise, false.</returns>
			<param name="context1">The first instance of <see cref="T:System.Windows.Media.ColorContext"></see> to compare.</param>
			<param name="context2">The second instance of <see cref="T:System.Windows.Media.ColorContext"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.Media.ColorContext.OpenProfileStream">
			<summary>Returns a readable <see cref="T:System.IO.Stream"></see> of raw color profile data.</summary>
			<returns>A readable <see cref="T:System.IO.Stream"></see> of raw color profile data.</returns>
		</member>
		<member name="P:System.Windows.Media.ColorContext.ProfileUri">
			<summary>Gets a <see cref="T:System.Uri"></see> that represents the location of a TLA#tla_icc or TLA#tla_icm color profile.</summary>
			<returns>A <see cref="T:System.Uri"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.ColorConverter">
			<summary> Converts instances of other types to and from an instance of Color. </summary>
		</member>
		<member name="M:System.Windows.Media.ColorConverter.#ctor">
			<summary> Initializes a new instance of ColorConverter. </summary>
		</member>
		<member name="M:System.Windows.Media.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines whether an object can be converted from a given type to an instance of a Color.  </summary>
			<returns>true if the type can be converted to a Color; otherwise, false.</returns>
			<param name="td">Describes the context information of a type.</param>
			<param name="t">The type of the source that is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Media.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines whether an instance of a Color can be converted to a different type. </summary>
			<returns>true if this Color can be converted to destinationType; otherwise, false.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The desired type this Color is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Media.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary> Attempts to convert the specified object to a Color. </summary>
			<returns>The Color created from converting value.</returns>
			<param name="td">Describes the context information of a type.</param>
			<param name="value">The object being converted.</param>
		</member>
		<member name="M:System.Windows.Media.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> Attempts to convert a Color to a specified type. </summary>
			<returns>The object created from converting this Color.</returns>
			<param name="culture">Describes the CultureInfo of the type being converted.</param>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The type to convert this Color to.</param>
			<param name="value">The Color to convert.</param>
		</member>
		<member name="T:System.Windows.Media.ColorInterpolationMode">
			<summary> ColorInterpolationMode - This determines how the colors in a gradient are interpolated. </summary>
		</member>
		<member name="F:System.Windows.Media.ColorInterpolationMode.ScRgbLinearInterpolation">
			<summary> ScRgbLinearInterpolation - Colors are interpolated in the scRGB color space </summary>
		</member>
		<member name="F:System.Windows.Media.ColorInterpolationMode.SRgbLinearInterpolation">
			<summary> SRgbLinearInterpolation - Colors are interpolated in the sRGB color space </summary>
		</member>
		<member name="T:System.Windows.Media.Colors">
			<summary>Implements a set of predefined colors. This class cannot be inherited.</summary>
		</member>
		<member name="P:System.Windows.Media.Colors.AliceBlue">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFF0F8FF. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.AntiqueWhite">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFAEBD7. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Aqua">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF00FFFF. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Aquamarine">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF7FFFD4. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Azure">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFF0FFFF. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Beige">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFF5F5DC. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Bisque">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFFE4C4. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Black">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF000000. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.BlanchedAlmond">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFFEBCD. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Blue">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF0000FF. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.BlueViolet">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF8A2BE2. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Brown">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFA52A2A. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.BurlyWood">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFDEB887. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.CadetBlue">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF5F9EA0. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Chartreuse">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF7FFF00. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Chocolate">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFD2691E. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Coral">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFF7F50. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.CornflowerBlue">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF6495ED. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Cornsilk">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFFF8DC. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Crimson">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFDC143C. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Cyan">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF00FFFF. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.DarkBlue">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF00008B. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.DarkCyan">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF008B8B. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.DarkGoldenrod">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFB8860B. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.DarkGray">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFA9A9A9. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.DarkGreen">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF006400. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.DarkKhaki">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFBDB76B. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.DarkMagenta">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF8B008B. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.DarkOliveGreen">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF556B2F. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.DarkOrange">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFF8C00. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.DarkOrchid">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF9932CC. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.DarkRed">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF8B0000. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.DarkSalmon">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFE9967A. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.DarkSeaGreen">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF8FBC8F. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.DarkSlateBlue">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF483D8B. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.DarkSlateGray">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF2F4F4F. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.DarkTurquoise">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF00CED1. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.DarkViolet">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF9400D3. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.DeepPink">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFF1493. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.DeepSkyBlue">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF00BFFF. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.DimGray">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF696969. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.DodgerBlue">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF1E90FF. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Firebrick">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFB22222. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.FloralWhite">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFFFAF0. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.ForestGreen">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF228B22. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Fuchsia">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFF00FF. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Gainsboro">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFDCDCDC. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.GhostWhite">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFF8F8FF. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Gold">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFFD700. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Goldenrod">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFDAA520. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Gray">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF808080. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Green">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF008000. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.GreenYellow">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFADFF2F. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Honeydew">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFF0FFF0. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.HotPink">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFF69B4. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.IndianRed">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFCD5C5C. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Indigo">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF4B0082. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Ivory">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFFFFF0. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Khaki">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFF0E68C. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Lavender">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFE6E6FA. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.LavenderBlush">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFFF0F5. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.LawnGreen">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF7CFC00. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.LemonChiffon">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFFFACD. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.LightBlue">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFADD8E6. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.LightCoral">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFF08080. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.LightCyan">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFE0FFFF. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.LightGoldenrodYellow">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFAFAD2. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.LightGray">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFD3D3D3. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.LightGreen">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF90EE90. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.LightPink">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFFB6C1. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.LightSalmon">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFFA07A. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.LightSeaGreen">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF20B2AA. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.LightSkyBlue">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF87CEFA. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.LightSlateGray">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF778899. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.LightSteelBlue">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFB0C4DE. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.LightYellow">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFFFFE0. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Lime">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF00FF00. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.LimeGreen">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF32CD32. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Linen">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFAF0E6. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Magenta">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFF00FF. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Maroon">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF800000. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.MediumAquamarine">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF66CDAA. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.MediumBlue">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF0000CD. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.MediumOrchid">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFBA55D3. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.MediumPurple">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF9370DB. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.MediumSeaGreen">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF3CB371. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.MediumSlateBlue">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF7B68EE. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.MediumSpringGreen">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF00FA9A. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.MediumTurquoise">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF48D1CC. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.MediumVioletRed">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFC71585. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.MidnightBlue">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF191970. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.MintCream">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFF5FFFA. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.MistyRose">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFFE4E1. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Moccasin">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFFE4B5. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.NavajoWhite">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFFDEAD. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Navy">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF000080. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.OldLace">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFDF5E6. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Olive">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF808000. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.OliveDrab">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF6B8E23. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Orange">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFFA500. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.OrangeRed">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFF4500. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Orchid">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFDA70D6. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.PaleGoldenrod">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFEEE8AA. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.PaleGreen">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF98FB98. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.PaleTurquoise">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFAFEEEE. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.PaleVioletRed">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFDB7093. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.PapayaWhip">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFFEFD5. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.PeachPuff">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFFDAB9. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Peru">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFCD853F. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Pink">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFFC0CB. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Plum">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFDDA0DD. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.PowderBlue">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFB0E0E6. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Purple">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF800080. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Red">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFF0000. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.RosyBrown">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFBC8F8F. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.RoyalBlue">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF4169E1. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.SaddleBrown">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF8B4513. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Salmon">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFA8072. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.SandyBrown">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFF4A460. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.SeaGreen">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF2E8B57. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.SeaShell">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFFF5EE. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Sienna">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFA0522D. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Silver">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFC0C0C0. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.SkyBlue">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF87CEEB. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.SlateBlue">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF6A5ACD. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.SlateGray">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF708090. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Snow">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFFFAFA. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.SpringGreen">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF00FF7F. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.SteelBlue">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF4682B4. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Tan">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFD2B48C. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Teal">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF008080. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Thistle">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFD8BFD8. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Tomato">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFF6347. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Transparent">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #00FFFFFF. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Turquoise">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF40E0D0. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Violet">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFEE82EE. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Wheat">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFF5DEB3. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.White">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFFFFFF. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.WhiteSmoke">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFF5F5F5. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.Yellow">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FFFFFF00. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="P:System.Windows.Media.Colors.YellowGreen">
			<summary>Gets the system-defined color that has an TLA#tla_argb value of #FF9ACD32. </summary>
			<returns>Represents colors in terms of alpha, red, green, and blue channels.</returns>
		</member>
		<member name="T:System.Windows.Media.CombinedGeometry">
			<summary>Represents a 2-D geometric shape defined by the combination of two <see cref="T:System.Windows.Media.Geometry"></see> objects. </summary>
		</member>
		<member name="M:System.Windows.Media.CombinedGeometry.#ctor">
			<summary> Initializes a new instance of the Geometry class. </summary>
		</member>
		<member name="M:System.Windows.Media.CombinedGeometry.#ctor(System.Windows.Media.Geometry,System.Windows.Media.Geometry)">
			<summary> Initializes a new instance of the Geometry class with the specified Geometry objects. </summary>
			<param name="geometry1">The first Geometry to combine.</param>
			<param name="geometry2">The second Geometry to combine.</param>
		</member>
		<member name="F:System.Windows.Media.CombinedGeometry.Geometry1Property">
			<summary> Identifies the Geometry1 GTMT#dependency property. </summary>
			<returns>The Geometry1 GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.CombinedGeometry.Geometry2Property">
			<summary> Identifies the Geometry2 GTMT#dependency property. </summary>
			<returns>The Geometry2 GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.CombinedGeometry.CloneCurrentValue">
			<summary>Returns a non-animated copy of the combined geometry. The returned combined geometry represents the current object's state at the time this method was called.</summary>
			<returns>A non-animated copy of the combined geometry that represents its current value. The returned CombinedGeometry has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="M:System.Windows.Media.CombinedGeometry.GetArea(System.Double,System.Windows.Media.ToleranceType)">
			<summary> Gets the area of the filled region. </summary>
			<returns>The area of the filled region of this combined geometry.</returns>
			<param name="type">Specifies how the error tolerance will be interpreted.</param>
			<param name="tolerance">The computational tolerance of error.</param>
		</member>
		<member name="M:System.Windows.Media.CombinedGeometry.IsEmpty">
			<summary> Determines whether this CombinedGeometry object is empty. </summary>
			<returns>true if this CombinedGeometry is empty; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Media.CombinedGeometry.MayHaveCurves">
			<summary> Determines whether this CombinedGeometry object may have curved segments. </summary>
			<returns>true if this CombinedGeometry object may have curved segments; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.CombinedGeometry.Bounds">
			<summary> Gets a Rect that specifies the bounding box of this CombinedGeometry object.   Note: This method does not take any pens into account.    </summary>
			<returns>The bounding box of this CombinedGeometry.</returns>
		</member>
		<member name="P:System.Windows.Media.CombinedGeometry.Geometry1">
			<summary> Gets the first Geometry object of this CombinedGeometry object. </summary>
			<returns>The first Geometry object to combine.</returns>
		</member>
		<member name="P:System.Windows.Media.CombinedGeometry.Geometry2">
			<summary> Gets the second Geometry object of this CombinedGeometry object. </summary>
			<returns>The second Geometry object.</returns>
		</member>
		<member name="P:System.Windows.Media.CombinedGeometry.GeometryCombineMode">
			<summary>Gets or sets the method by which the two geometries (specified by the <see cref="P:System.Windows.Media.CombinedGeometry.Geometry1"></see> and <see cref="P:System.Windows.Media.CombinedGeometry.Geometry2"></see> properties) are combined.</summary>
			<returns>The method by which <see cref="P:System.Windows.Media.CombinedGeometry.Geometry1"></see> and <see cref="P:System.Windows.Media.CombinedGeometry.Geometry2"></see> are combined. The default value is <see cref="F:System.Windows.Media.GeometryCombineMode.Union"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.CompositionTarget">
			<summary>Represents the display surface of your application.</summary>
		</member>
		<member name="E:System.Windows.Media.CompositionTarget.Rendering">
			<summary>Occurs just before the objects in the composition tree are rendered.</summary>
		</member>
		<member name="P:System.Windows.Media.CompositionTarget.RootVisual">
			<summary>Gets or sets the root visual of the <see cref="T:System.Windows.Media.CompositionTarget"></see>.</summary>
			<returns>The root visual of the <see cref="T:System.Windows.Media.CompositionTarget"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.ContainerVisual">
			<summary>Manages a collection of <see cref="T:System.Windows.Media.Visual"></see> objects.</summary>
		</member>
		<member name="M:System.Windows.Media.ContainerVisual.#ctor">
			<summary>Creates a new instance of the <see cref="T:System.Windows.Media.ContainerVisual"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.ContainerVisual.GetVisualChild(System.Int32)">
			<summary>Returns a specified child <see cref="T:System.Windows.Media.Visual"></see> for the parent <see cref="T:System.Windows.Media.ContainerVisual"></see>.</summary>
			<returns>Returns a value of type <see cref="T:System.Windows.Media.Visual"></see>.</returns>
			<param name="index">A value of type <see cref="T:System.Int32"></see> that represents the index value of the child <see cref="T:System.Windows.Media.Visual"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.ContainerVisual.HitTest(System.Windows.Point)">
			<summary>Returns the top-most visual object of a hit test by specifying a <see cref="T:System.Windows.Point"></see>.</summary>
			<returns>The hit test result of the visual returned as a <see cref="T:System.Windows.Media.HitTestResult"></see> type.</returns>
			<param name="point">The point value to hit test against.</param>
		</member>
		<member name="M:System.Windows.Media.ContainerVisual.HitTest(System.Windows.Media.HitTestFilterCallback,System.Windows.Media.HitTestResultCallback,System.Windows.Media.HitTestParameters)">
			<summary>Initiate a hit test on the <see cref="T:System.Windows.Media.ContainerVisual"></see> by using the <see cref="T:System.Windows.Media.HitTestFilterCallback"></see> and <see cref="T:System.Windows.Media.HitTestResultCallback"></see> objects.</summary>
			<param name="hitTestParameters">A value of type <see cref="T:System.Windows.Media.HitTestParameters"></see>.</param>
			<param name="filterCallback">A value of type <see cref="T:System.Windows.Media.HitTestFilterCallback"></see>.</param>
			<param name="resultCallback">A value of type <see cref="T:System.Windows.Media.HitTestResultCallback"></see>.</param>
		</member>
		<member name="P:System.Windows.Media.ContainerVisual.BitmapEffect">
			<summary>Gets or sets a <see cref="T:System.Windows.Media.Effects.BitmapEffect"></see> value for the <see cref="T:System.Windows.Media.ContainerVisual"></see>.</summary>
			<returns>The bitmap effect for this visual object.</returns>
		</member>
		<member name="P:System.Windows.Media.ContainerVisual.BitmapEffectInput">
			<summary>Gets or sets a <see cref="T:System.Windows.Media.Effects.BitmapEffectInput"></see> value for the <see cref="T:System.Windows.Media.ContainerVisual"></see>.</summary>
			<returns>The bitmap effect input value for this visual object.</returns>
		</member>
		<member name="P:System.Windows.Media.ContainerVisual.Children">
			<summary>Gets the child collection of the <see cref="T:System.Windows.Media.ContainerVisual"></see>.</summary>
			<returns><see cref="T:System.Windows.Media.VisualCollection"></see> that contains the children of the <see cref="T:System.Windows.Media.ContainerVisual"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.ContainerVisual.Clip">
			<summary>Gets or sets the clipping region of the <see cref="T:System.Windows.Media.ContainerVisual"></see>.</summary>
			<returns>The <see cref="T:System.Windows.Media.Geometry"></see> that defines the clipping region.</returns>
		</member>
		<member name="P:System.Windows.Media.ContainerVisual.ContentBounds">
			<summary>Gets the bounding box for the contents of the <see cref="T:System.Windows.Media.ContainerVisual"></see>.</summary>
			<returns>A value of type <see cref="T:System.Windows.Rect"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.ContainerVisual.DescendantBounds">
			<summary>Gets the union of all of the content bounding boxes for all of the descendants of the <see cref="T:System.Windows.Media.ContainerVisual"></see>, but not including the contents of the <see cref="T:System.Windows.Media.ContainerVisual"></see>.</summary>
			<returns>A value of type <see cref="T:System.Windows.Rect"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.ContainerVisual.Offset">
			<summary>Gets or sets the offset value of the <see cref="T:System.Windows.Media.ContainerVisual"></see>.</summary>
			<returns>A <see cref="T:System.Windows.Vector"></see> that represents the offset value of the <see cref="T:System.Windows.Media.ContainerVisual"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.ContainerVisual.Opacity">
			<summary>Gets or sets the opacity of the <see cref="T:System.Windows.Media.ContainerVisual"></see>.</summary>
			<returns>The value of the Opacity property is expressed as a value between 0 and 1, specifying a range from fully transparent to fully opaque. A value of 0 indicates that the Opacity is completely transparent, while a value of 1 indicates that the Opacity is completely opaque. A value 0.5 would indicate the Opacity is 50% opaque, a value of 0.725 would indicate the Opacity is 72.5% opaque, and so on. Values less than 0 are treated as 0, while values greater than 1 are treated as 1.</returns>
		</member>
		<member name="P:System.Windows.Media.ContainerVisual.OpacityMask">
			<summary>Gets or sets the opacity mask value of the <see cref="T:System.Windows.Media.ContainerVisual"></see>.</summary>
			<returns>A value of type <see cref="T:System.Windows.Media.Brush"></see> representing the opacity mask value of the <see cref="T:System.Windows.Media.ContainerVisual"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.ContainerVisual.Parent">
			<summary>Gets the parent Visual for the <see cref="T:System.Windows.Media.ContainerVisual"></see>.</summary>
			<returns>The parent of the visual.</returns>
		</member>
		<member name="P:System.Windows.Media.ContainerVisual.Transform">
			<summary>Gets or sets the transform value of the <see cref="T:System.Windows.Media.ContainerVisual"></see>.</summary>
			<returns>A value of type <see cref="T:System.Windows.Media.Transform"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.ContainerVisual.VisualChildrenCount">
			<summary>Gets the number of children for the <see cref="T:System.Windows.Media.ContainerVisual"></see>.</summary>
			<returns>The number of children in the <see cref="T:System.Windows.Media.VisualCollection"></see> of the <see cref="T:System.Windows.Media.ContainerVisual"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.ContainerVisual.XSnappingGuidelines">
			<summary>Gets or sets the X (horizontal) guideline for the <see cref="T:System.Windows.Media.ContainerVisual"></see>.</summary>
			<returns>A value of type <see cref="T:System.Windows.Media.DoubleCollection"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.ContainerVisual.YSnappingGuidelines">
			<summary>Gets or sets the Y (vertical) guideline for the <see cref="T:System.Windows.Media.ContainerVisual"></see>.</summary>
			<returns>A value of type <see cref="T:System.Windows.Media.DoubleCollection"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.DashStyle">
			<summary> Represents the sequence of dashes and gaps that will be applied by a Pen. </summary>
		</member>
		<member name="M:System.Windows.Media.DashStyle.#ctor">
			<summary> Initializes a new instance of a DashStyle. </summary>
		</member>
		<member name="M:System.Windows.Media.DashStyle.CloneCurrentValue">
			<summary>Returns a non-animated version of the dash style. The returned dash style represents the current object's state at the time this method was called.           </summary>
			<returns>A non-animated copy of this instance that represents its current value. The returned DashStyle has the same value as the instantaneous value of the current object, but is not animated</returns>
		</member>
		<member name="P:System.Windows.Media.DashStyle.Dashes">
			<summary> Gets or sets the collection of dashes and gaps in this DashStyle. </summary>
			<returns>The collection of dashes and gaps.  The default value is empty.</returns>
		</member>
		<member name="P:System.Windows.Media.DashStyle.Offset">
			<summary> Gets or sets how far in the dash sequence the stroke will start. </summary>
			<returns>The offset for the dash sequence.  The default value is 0.</returns>
		</member>
		<member name="T:System.Windows.Media.DashStyles">
			<summary>Implements a set of predefined DashStyle objects. </summary>
		</member>
		<member name="P:System.Windows.Media.DashStyles.Dash">
			<summary>Gets a DashStyle with a Dashes property equal to 2,2. </summary>
			<returns>A dash sequence of 2,2.</returns>
		</member>
		<member name="P:System.Windows.Media.DashStyles.DashDot">
			<summary>Gets a DashStyle with a Dashes property equal to 2,2,0,2. </summary>
			<returns>A dash sequence of 2,2,0,2.</returns>
		</member>
		<member name="P:System.Windows.Media.DashStyles.DashDotDot">
			<summary>Gets a DashStyle with a Dashes property equal to 2,2,0,2,0,2. </summary>
			<returns>A dash sequence of 2,2,0,2,0,2.</returns>
		</member>
		<member name="P:System.Windows.Media.DashStyles.Dot">
			<summary>Gets a DashStyle with a Dashes property equal to 0,2. </summary>
			<returns>A dash sequence of 0,2.</returns>
		</member>
		<member name="P:System.Windows.Media.DashStyles.Solid">
			<summary>Gets a DashStyle with an empty Dashes property. </summary>
			<returns>A dash sequence with no dashes.</returns>
		</member>
		<member name="T:System.Windows.Media.DoubleCollection">
			<summary> Represents an ordered collection of Doubles. </summary>
		</member>
		<member name="M:System.Windows.Media.DoubleCollection.#ctor">
			<summary> Initializes a new instance of a DoubleCollection. </summary>
		</member>
		<member name="M:System.Windows.Media.DoubleCollection.Add(System.Double)">
			<summary> Adds a Double to the end of this DoubleCollection. </summary>
			<param name="value">The item to add to the end of this collection.</param>
		</member>
		<member name="M:System.Windows.Media.DoubleCollection.Clone">
			<summary> Returns a modifiable clone of the collection and its contents. </summary>
			<returns>A modifiable clone of the collection and its contents. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.DoubleCollection.Contains(System.Double)">
			<summary> Determines whether a Double is in this DoubleCollection. </summary>
			<returns>true if value, the specified Double, is in this DoubleCollection; otherwise, false.</returns>
			<param name="value">The item to locate in this collection.</param>
		</member>
		<member name="M:System.Windows.Media.DoubleCollection.CopyTo(System.Double[],System.Int32)">
			<summary> Copies the items of this DoubleCollection, starting the specified index, into an array of Points. </summary>
			<param name="array">The array that is the destination of the items copied from this DoubleCollection.</param>
			<param name="index">The index at which to being copying.</param>
		</member>
		<member name="M:System.Windows.Media.DoubleCollection.IndexOf(System.Double)">
			<summary> Gets the index of the first occurrence of the specified Double. </summary>
			<returns>The index of the specified Double.</returns>
			<param name="value">The item to search for.</param>
		</member>
		<member name="M:System.Windows.Media.DoubleCollection.Insert(System.Int32,System.Double)">
			<summary> Inserts a Double into this DoubleCollection at the specified index. </summary>
			<param name="value">The item to insert.</param>
			<param name="index">The index at which to insert value, the specified Double.</param>
		</member>
		<member name="M:System.Windows.Media.DoubleCollection.Parse(System.String)">
			<summary> Converts a String representation of a collection of doubles into an equivalent DoubleCollection.      </summary>
			<returns>Returns the equivalent DoubleCollection. </returns>
			<param name="source">The String representation of the collection of doubles. </param>
		</member>
		<member name="M:System.Windows.Media.DoubleCollection.Remove(System.Double)">
			<summary> Removes the first occurrence of the specified Double  from this DoubleCollection. </summary>
			<param name="value">The item to remove from this collection.</param>
		</member>
		<member name="M:System.Windows.Media.DoubleCollection.RemoveAt(System.Int32)">
			<summary> Removes the Double  at the specified index from this DoubleCollection. </summary>
			<param name="index">The index of the item to remove.</param>
		</member>
		<member name="M:System.Windows.Media.DoubleCollection.System.IFormattable.ToString(System.String,System.IFormatProvider)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code. </summary>
			<returns>A string representation of this object.</returns>
		</member>
		<member name="M:System.Windows.Media.DoubleCollection.ToString">
			<summary> Creates a String representation of this DoubleCollection. </summary>
			<returns>Returns a String containing the values of this DoubleCollection.</returns>
		</member>
		<member name="M:System.Windows.Media.DoubleCollection.ToString(System.IFormatProvider)">
			<summary> Creates a String representation of this DoubleCollection. </summary>
			<returns>Returns a String containing the values of this DoubleCollection.</returns>
			<param name="provider">Culture-specific formatting information.</param>
		</member>
		<member name="P:System.Windows.Media.DoubleCollection.Count">
			<summary> Gets the number of doubles contained in the DoubleCollection.  </summary>
			<returns>The number of doubles contained in the DoubleCollection. </returns>
		</member>
		<member name="P:System.Windows.Media.DoubleCollection.Item(System.Int32)">
			<summary> Gets or sets the Double at the specified zero-based index. </summary>
			<returns>The item at the specified index.</returns>
			<param name="index">The zero-based index of the Double object to get or set. </param>
		</member>
		<member name="T:System.Windows.Media.DoubleCollection.Enumerator">
			<summary> Enumerates items in a <see cref="T:System.Windows.Media.DoubleCollection"></see>. </summary>
		</member>
		<member name="M:System.Windows.Media.DoubleCollection.Enumerator.MoveNext">
			<summary> Advances the enumerator to the next element of the collection. </summary>
			<returns>true if the enumerator was successfully advanced to the next element, false if the enumerator has passed the end of the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.DoubleCollectionConverter">
			<summary> Converts instances of other types to and from a DoubleCollection. </summary>
		</member>
		<member name="M:System.Windows.Media.DoubleCollectionConverter.#ctor">
			<summary> Initializes a new instance of DoubleCollection. </summary>
		</member>
		<member name="M:System.Windows.Media.DoubleCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines whether an object can be converted from a given type to an instance of a DoubleCollection.  </summary>
			<returns>true if the type can be converted to a DoubleCollection; otherwise, false.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="sourceType">The type of the source that is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Media.DoubleCollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines whether an instance of a DoubleCollection can be converted to a different type. </summary>
			<returns>true if this DoubleCollection can be converted to destinationType; otherwise, false.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The desired type this DoubleCollection is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Media.DoubleCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary> Attempts to convert the specified object to a DoubleCollection. </summary>
			<returns>The DoubleCollection created from converting value.</returns>
			<param name="culture">Describes the CultureInfo of the type being converted.</param>
			<param name="context">Describes the context information of a type.</param>
			<param name="value">The object being converted.</param>
		</member>
		<member name="M:System.Windows.Media.DoubleCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> Attempts to convert a DoubleCollection to a specified type. </summary>
			<returns>The object created from converting this DoubleCollection.</returns>
			<param name="culture">Describes the CultureInfo of the type being converted.</param>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The type to convert this DoubleCollection to.</param>
			<param name="value">The DoubleCollection to convert.</param>
		</member>
		<member name="T:System.Windows.Media.Drawing">
			<summary> Abstract class that describes a TLA#tla_2d drawing.  </summary>
		</member>
		<member name="M:System.Windows.Media.Drawing.Clone">
			<summary> Returns a modifiable clone of the drawing. </summary>
			<returns>Returns a modifiable clone of the drawing. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Drawing.CloneCurrentValue">
			<summary>Returns a non-animated version of the drawing. The returned drawing represents the current object's state at the time this method was called.           </summary>
			<returns>A non-animated version of this instance that represents its current value. The returned Drawing has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="P:System.Windows.Media.Drawing.Bounds">
			<summary> Gets the axis-aligned bounds of the drawing's contents. </summary>
			<returns>The axis-aligned bounds of the drawing's contents.</returns>
		</member>
		<member name="T:System.Windows.Media.DrawingBrush">
			<summary>Paints an area with a Drawing, which can include shapes, text, video, images, or other drawings. </summary>
		</member>
		<member name="M:System.Windows.Media.DrawingBrush.#ctor">
			<summary>Initializes a new instance of the DrawingBrush class. The resulting brush has no content. </summary>
		</member>
		<member name="M:System.Windows.Media.DrawingBrush.#ctor(System.Windows.Media.Drawing)">
			<summary>Initializes a new instance of the DrawingBrush class that contains the specified Drawing. </summary>
			<param name="d rawing">The Drawing that describes the contents of the brush.</param>
		</member>
		<member name="F:System.Windows.Media.DrawingBrush.DrawingProperty">
			<summary>Identifies the Drawing GTMT#dependency property. </summary>
			<returns>The Drawing GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.DrawingBrush.Clone">
			<summary>Returns a modifiable clone of the <see cref="T:System.Windows.Media.DrawingBrush"></see>. </summary>
			<returns>A modifiable clone of the <see cref="T:System.Windows.Media.DrawingBrush"></see>. </returns>
		</member>
		<member name="M:System.Windows.Media.DrawingBrush.CloneCurrentValue">
			<summary>Returns a non-animated version of the <see cref="T:System.Windows.Media.DrawingBrush"></see>. </summary>
			<returns>A non-animated version of this instance that represents its current value. </returns>
		</member>
		<member name="P:System.Windows.Media.DrawingBrush.Drawing">
			<summary>Gets or sets the Drawing that describes the contents of this <see cref="T:System.Windows.Media.DrawingBrush"></see>. </summary>
			<returns>The Drawing that describes the contents of this <see cref="T:System.Windows.Media.DrawingBrush"></see>. The default is null reference (Nothing in Visual Basic).</returns>
		</member>
		<member name="T:System.Windows.Media.DrawingCollection">
			<summary> A collection of Drawing objects.</summary>
		</member>
		<member name="M:System.Windows.Media.DrawingCollection.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.DrawingCollection"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.DrawingCollection.CloneCurrentValue">
			<summary> Returns a non-animated version of the collection. The returned collection represents the current object's state at the time this method was called.           </summary>
			<returns>A non-animated version of this instance that represents its current value. The returned DrawingCollection has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="M:System.Windows.Media.DrawingCollection.System.Collections.IList.Insert(System.Int32,System.Object)">
			<summary>This member supports the TLA2#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="T:System.Windows.Media.DrawingCollection.Enumerator">
			<summary> Enumerates items in a <see cref="T:System.Windows.Media.DrawingCollection"></see>. </summary>
		</member>
		<member name="M:System.Windows.Media.DrawingCollection.Enumerator.MoveNext">
			<summary> Advances the enumerator to the next element of the collection. </summary>
			<returns>true if the enumerator was successfully advanced to the next element, false if the enumerator has passed the end of the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.DrawingContext">
			<summary>Describes visual content using draw, push, and pop commands. </summary>
		</member>
		<member name="M:System.Windows.Media.DrawingContext.Close">
			<summary> Closes the DrawingContext and flushes the content.            Afterward, the DrawingContext cannot be used anymore.            This call does not require all Push calls to have been Popped. </summary>
			<exception cref="T:System.ObjectDisposedException">This call is illegal if this object has already been closed or disposed.</exception>
		</member>
		<member name="M:System.Windows.Media.DrawingContext.DisposeCore">
			<summary> Releases all resources used by this DrawingContext. </summary>
			<exception cref="T:System.ObjectDisposedException">Thrown if this object has already been closed or disposed.</exception>
		</member>
		<member name="M:System.Windows.Media.DrawingContext.DrawEllipse(System.Windows.Media.Brush,System.Windows.Media.Pen,System.Windows.Point,System.Double,System.Double)">
			<summary> Draws an ellipse with the specified Brush and Pen. </summary>
			<param name="brush">The brush with which to fill the ellipse.  This is optional, and can be null. If the brush is null, no fill is drawn.</param>
			<param name="center">The location of the center of the ellipse.</param>
			<param name="radiusX">The horizontal radius of the ellipse.</param>
			<param name="radiusY">The vertical radius of the ellipse.</param>
			<param name="pen">The pen with which to stroke the ellipse.  This is optional, and can be null. If the pen is null, no stroke is drawn.</param>
		</member>
		<member name="M:System.Windows.Media.DrawingContext.DrawEllipse(System.Windows.Media.Brush,System.Windows.Media.Pen,System.Windows.Point,System.Windows.Media.Animation.AnimationClock,System.Double,System.Windows.Media.Animation.AnimationClock,System.Double,System.Windows.Media.Animation.AnimationClock)">
			<summary> Draws an ellipse with the specified Brush and Pen and applies the specified animation clocks. </summary>
			<param name="radiusYAnimations">The animation clock for radiusY.</param>
			<param name="brush">The brush with which to fill the ellipse.  This is optional, and can be null. If the brush is null, no fill is drawn.</param>
			<param name="radiusXAnimations">The animation clock for radiusX.</param>
			<param name="center">The location of the center of the ellipse.</param>
			<param name="centerAnimations">The animation clock for center.</param>
			<param name="radiusY">The vertical radius of the ellipse.</param>
			<param name="pen">The pen with which to stroke the ellipse.  This is optional, and can be null. If the pen is null, no stroke is drawn.</param>
			<param name="radiusX">The horizontal radius of the ellipse.</param>
		</member>
		<member name="M:System.Windows.Media.DrawingContext.DrawGeometry(System.Windows.Media.Brush,System.Windows.Media.Pen,System.Windows.Media.Geometry)">
			<summary> Draws the specified Geometry using the specified Brush and Pen. </summary>
			<param name="brush">The Brush with which to fill the Geometry.            This is optional, and can be null. If the brush is null, no fill is drawn.</param>
			<param name="geometry">The Geometry to draw.</param>
			<param name="pen">The Pen with which to stroke the Geometry.            This is optional, and can be null. If the pen is null, no stroke is drawn.</param>
		</member>
		<member name="M:System.Windows.Media.DrawingContext.DrawGlyphRun(System.Windows.Media.Brush,System.Windows.Media.GlyphRun)">
			<summary> Draws a GlyphRun. </summary>
			<param name="glyphRun">The GlyphRun to draw.</param>
			<param name="foregroundBrush">The foreground used to draw the GlyphRun.</param>
		</member>
		<member name="M:System.Windows.Media.DrawingContext.DrawImage(System.Windows.Media.ImageSource,System.Windows.Rect)">
			<summary> Draws an image into the region defined by the specified Rect.  </summary>
			<param name="imageSource">The ImageSource to draw.</param>
			<param name="rectangle">The region in which to draw bitmapSource.</param>
		</member>
		<member name="M:System.Windows.Media.DrawingContext.DrawImage(System.Windows.Media.ImageSource,System.Windows.Rect,System.Windows.Media.Animation.AnimationClock)">
			<summary> Draws an image into the region defined by the specified Rect.  </summary>
			<param name="imageSource">The ImageSource to draw.</param>
			<param name="rectangle">The region in which to draw bitmapSource.</param>
			<param name="rectangleAnimations">The animation clock for rectangle.</param>
		</member>
		<member name="M:System.Windows.Media.DrawingContext.DrawLine(System.Windows.Media.Pen,System.Windows.Point,System.Windows.Point)">
			<summary> Draws a line between two Points using the specfied Pen.  Draws a line from the specified Points using the specfied Pen. </summary>
			<param name="point0">The start point of the line.</param>
			<param name="point1">The end point of the line.</param>
			<param name="pen">The pen to stroke the line.</param>
		</member>
		<member name="M:System.Windows.Media.DrawingContext.DrawLine(System.Windows.Media.Pen,System.Windows.Point,System.Windows.Media.Animation.AnimationClock,System.Windows.Point,System.Windows.Media.Animation.AnimationClock)">
			<summary> Draws a line between two Points using the specfied Pen and applies the specified animation clocks. </summary>
			<param name="point1Animations">The animation clock for point1.</param>
			<param name="point0Animations">The animation clock for point0.</param>
			<param name="point0">The start point of the line.</param>
			<param name="point1">The end point of the line.</param>
			<param name="pen">The pen to stroke the line.</param>
		</member>
		<member name="M:System.Windows.Media.DrawingContext.DrawRectangle(System.Windows.Media.Brush,System.Windows.Media.Pen,System.Windows.Rect)">
			<summary> Draws a rectangle with the specified Brush and Pen.  Note: The pen and the brush can be null. </summary>
			<param name="brush">The brush with which to fill the rectangle.  This is optional, and can be null. If the brush is null, no fill is drawn.</param>
			<param name="rectangle">The rectangle to draw.</param>
			<param name="pen">The pen with which to stroke the rectangle.  This is optional, and can be null. If the pen is null, no stroke is drawn.</param>
		</member>
		<member name="M:System.Windows.Media.DrawingContext.DrawRectangle(System.Windows.Media.Brush,System.Windows.Media.Pen,System.Windows.Rect,System.Windows.Media.Animation.AnimationClock)">
			<summary> Draws a rectangle with the specified Brush and Pen and applies the specified animation clocks.  Note: The pen and the brush can be null. </summary>
			<param name="brush">The brush with which to fill the rectangle.  This is optional, and can be null. If the brush is null, no fill is drawn.</param>
			<param name="rectangle">The rectangle to draw.</param>
			<param name="pen">The pen with which to stroke the rectangle.  This is optional, and can be null. If the pen is null, no stroke is drawn.</param>
			<param name="rectangleAnimations">The animation clock this rectangle.</param>
		</member>
		<member name="M:System.Windows.Media.DrawingContext.DrawRoundedRectangle(System.Windows.Media.Brush,System.Windows.Media.Pen,System.Windows.Rect,System.Double,System.Double)">
			<summary> Draws a rounded rectangle with the specified Brush and Pen.  Note: The pen and the brush can be null. </summary>
			<param name="brush">The brush used to fill the rectangle.</param>
			<param name="rectangle">The rectangle to draw.</param>
			<param name="radiusX">The radius in the X dimension of the rounded corners.  This value will be clamped to the range of 0 to Width/2]</param>
			<param name="radiusY">The radius in the Y dimension of the rounded corners.  This value will be clamped to a value between 0 to Height/2.</param>
			<param name="pen">The pen used to stroke the rectangle.</param>
		</member>
		<member name="M:System.Windows.Media.DrawingContext.DrawRoundedRectangle(System.Windows.Media.Brush,System.Windows.Media.Pen,System.Windows.Rect,System.Windows.Media.Animation.AnimationClock,System.Double,System.Windows.Media.Animation.AnimationClock,System.Double,System.Windows.Media.Animation.AnimationClock)">
			<summary> Draws a rounded rectangle with the specified Brush and Pen and applies the specified animation clocks.  Note: The pen and the brush can be null. </summary>
			<param name="brush">The brush used to fill the rectangle.</param>
			<param name="rectangle">The rectangle to draw.</param>
			<param name="radiusX">The radius in the X dimension of the rounded corners.  This value will be clamped to the range of 0 to Width/2]</param>
			<param name="radiusY">The radius in the Y dimension of the rounded corners.  This value will be clamped to a value between 0 to Height/2.</param>
			<param name="pen">The pen used to stroke the rectangle.</param>
		</member>
		<member name="M:System.Windows.Media.DrawingContext.DrawText(System.Windows.Media.FormattedText,System.Windows.Point)">
			<summary> Draws test on the DrawingContext at the given location. </summary>
			<param name="origin">The location where the text is to be drawn.</param>
			<param name="formattedText">The formatted text to be drawn.</param>
			<exception cref="T:System.ObjectDisposedException">Thrown when the object has already been closed or disposed.</exception>
		</member>
		<member name="M:System.Windows.Media.DrawingContext.PushClip(System.Windows.Media.Geometry)">
			<summary> Adds the specified clip region to the drawing.   Note: The clip region applies to all subsequent drawing operations, until it is removed by the Pop command. </summary>
			<param name="clipGeometry">The clip region to push onto the drawing..</param>
		</member>
		<member name="M:System.Windows.Media.DrawingContext.PushOpacity(System.Double)">
			<summary> Adds the specified opacity to the drawing.   Note: The opacity will be blended into all subsequent drawing operations, until it is removed by the Pop command. </summary>
			<param name="opacity">The level of opacity.</param>
		</member>
		<member name="M:System.Windows.Media.DrawingContext.PushOpacity(System.Double,System.Windows.Media.Animation.AnimationClock)">
			<summary> Adds the specified opacity to the drawing and applies the specified animation clock.  Note: The opacity will be blended into all subsequent drawing operations, until it is removed by the Pop command. </summary>
			<param name="opacity">The level of opacity.</param>
			<param name="opacityAnimations">The animation clock for opacity</param>
		</member>
		<member name="M:System.Windows.Media.DrawingContext.PushTransform(System.Windows.Media.Transform)">
			<summary> Adds the specified Transform to the drawing.   Note: The transform applies to all subsequent drawing operations, until it is removed by the Pop command. </summary>
			<param name="transform">The transform to push onto the drawing.</param>
		</member>
		<member name="T:System.Windows.Media.DrawingGroup">
			<summary>Represents a collection of drawings which can be operated upon as a single drawing. </summary>
		</member>
		<member name="M:System.Windows.Media.DrawingGroup.#ctor">
			<summary> Initializes a new instance of the DrawingGroup class. </summary>
		</member>
		<member name="F:System.Windows.Media.DrawingGroup.BitmapEffectInputProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.DrawingGroup.BitmapEffectInput"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.DrawingGroup.BitmapEffectInput"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.DrawingGroup.BitmapEffectProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.DrawingGroup.BitmapEffect"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.DrawingGroup.BitmapEffect"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.DrawingGroup.ChildrenProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.DrawingGroup.Children"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.DrawingGroup.Children"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.DrawingGroup.ClipGeometryProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.DrawingGroup.ClipGeometry"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.DrawingGroup.ClipGeometry"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.DrawingGroup.GuidelineSetProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.DrawingGroup.GuidelineSet"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.DrawingGroup.GuidelineSet"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.DrawingGroup.OpacityMaskProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.DrawingGroup.OpacityMask"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.DrawingGroup.OpacityMask"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.DrawingGroup.OpacityProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.DrawingGroup.Opacity"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.DrawingGroup.Opacity"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.DrawingGroup.TransformProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.DrawingGroup.Transform"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.DrawingGroup.Transform"></see> GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.DrawingGroup.Append">
			<summary> Opens the DrawingGroup for populating its children, appending to any existing children in the collection. </summary>
			<returns>a DrawingContext used to populate the DrawingGroup's children.</returns>
		</member>
		<member name="M:System.Windows.Media.DrawingGroup.CloneCurrentValue">
			<summary>Returns a non-animated version of this instance.</summary>
			<returns>A non-animated version of this instance that represents its current value.</returns>
		</member>
		<member name="M:System.Windows.Media.DrawingGroup.Open">
			<summary> Opens the DrawingGroup for populating its children, clearing any existing children. </summary>
			<returns>a DrawingContext used to populate the DrawingGroup's children.</returns>
		</member>
		<member name="P:System.Windows.Media.DrawingGroup.BitmapEffect">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.Effects.BitmapEffect"></see> to apply to this <see cref="T:System.Windows.Media.DrawingGroup"></see>.</summary>
			<returns>The <see cref="T:System.Windows.Media.Effects.BitmapEffect"></see> to apply to this <see cref="T:System.Windows.Media.DrawingGroup"></see>. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.DrawingGroup.Children">
			<summary> Gets or sets the <see cref="T:System.Windows.Media.Drawing"></see> objects contained by this <see cref="T:System.Windows.Media.DrawingGroup"></see>. </summary>
			<returns>A collection of the <see cref="T:System.Windows.Media.Drawing"></see> objects in this <see cref="T:System.Windows.Media.DrawingGroup"></see>. The default value is an empty <see cref="T:System.Windows.Media.DrawingCollection"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.DrawingGroup.ClipGeometry">
			<summary> Gets or sets the clip region of this <see cref="T:System.Windows.Media.DrawingGroup"></see>. </summary>
			<returns>The geometry used to clip this <see cref="T:System.Windows.Media.DrawingGroup"></see>. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.DrawingGroup.Opacity">
			<summary>Gets or sets the opacity of this <see cref="T:System.Windows.Media.DrawingGroup"></see>. </summary>
			<returns>A value between 0 and 1, inclusive, that describes the opacity of this <see cref="T:System.Windows.Media.DrawingGroup"></see>. A value of 1 specifies that the <see cref="T:System.Windows.Media.DrawingGroup"></see> should be completely opaque, while a value of 0 specifies that it should be completely transparent. A value less than 0 is treated as 0, while a value greater than 1 is treated as 1. The default value is 1.</returns>
		</member>
		<member name="P:System.Windows.Media.DrawingGroup.OpacityMask">
			<summary>Gets or sets the opacity mask for this <see cref="T:System.Windows.Media.DrawingGroup"></see>.</summary>
			<returns>A brush that describes the opacity of this <see cref="T:System.Windows.Media.DrawingGroup"></see>. The brush is mapped to the drawing group and the opacity value of each brush pixel is used to determine the resulting opacity of each corresponding pixel of the <see cref="T:System.Windows.Media.DrawingGroup"></see>. Only the opacity value of each color in the brush is used for this processing; all other color information is ignored. A null value indicates that there is no opacity mask; this <see cref="T:System.Windows.Media.DrawingGroup"></see>'s opacity is uniform. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.DrawingGroup.Transform">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.Transform"></see> that is applied to this <see cref="T:System.Windows.Media.DrawingGroup"></see>. </summary>
			<returns>The transformation to apply to this <see cref="T:System.Windows.Media.DrawingGroup"></see>. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.DrawingImage">
			<summary> An <see cref="T:System.Windows.Media.ImageSource"></see> that uses a <see cref="T:System.Windows.Media.Drawing"></see> for content. </summary>
		</member>
		<member name="M:System.Windows.Media.DrawingImage.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.DrawingImage"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.DrawingImage.#ctor(System.Windows.Media.Drawing)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.DrawingImage"></see> class that has the specified <see cref="P:System.Windows.Media.DrawingImage.Drawing"></see>.  </summary>
			<param name="drawing">The <see cref="P:System.Windows.Media.DrawingImage.Drawing"></see> of the new <see cref="T:System.Windows.Media.DrawingImage"></see> instance.</param>
		</member>
		<member name="F:System.Windows.Media.DrawingImage.DrawingProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.DrawingImage.Drawing"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.DrawingImage.Drawing"></see> GTMT#dependency property.</returns>
		</member>
		<member name="P:System.Windows.Media.DrawingImage.Drawing">
			<summary> Gets or sets the drawing content for the <see cref="T:System.Windows.Media.DrawingImage"></see>.</summary>
			<returns>The drawing content for the <see cref="T:System.Windows.Media.DrawingImage"></see>. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.DrawingImage.Height">
			<summary> Gets the height of the <see cref="T:System.Windows.Media.DrawingImage"></see>.</summary>
			<returns>The height of the <see cref="T:System.Windows.Media.DrawingImage"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.DrawingImage.Metadata">
			<summary>Gets the metadata of the <see cref="T:System.Windows.Media.DrawingImage"></see>.</summary>
			<returns>The metadata of the <see cref="T:System.Windows.Media.DrawingImage"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.DrawingImage.Width">
			<summary> Gets the width of the <see cref="T:System.Windows.Media.DrawingImage"></see>. </summary>
			<returns>The width of the <see cref="T:System.Windows.Media.DrawingImage"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.DrawingVisual">
			<summary><see cref="T:System.Windows.Media.DrawingVisual"></see> is a visual object that can be used to render vector graphics on the screen. The content is persisted by the system.</summary>
		</member>
		<member name="M:System.Windows.Media.DrawingVisual.#ctor">
			<summary>Initializes a new instance of the DrawingVisual class.</summary>
		</member>
		<member name="M:System.Windows.Media.DrawingVisual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
			<summary>Determines whether a geometry value is within the bounds of the visual object.</summary>
			<returns>A value of type <see cref="T:System.Windows.Media.GeometryHitTestResult"></see>.</returns>
			<param name="hitTestParameters">A value of type <see cref="T:System.Windows.Media.GeometryHitTestParameters"></see> that specifies the <see cref="T:System.Windows.Media.Geometry"></see> to hit test against.</param>
		</member>
		<member name="M:System.Windows.Media.DrawingVisual.HitTestCore(System.Windows.Media.PointHitTestParameters)">
			<summary>Determines whether a point coordinate value is within the bounds of the <see cref="T:System.Windows.Media.DrawingVisual"></see> object.</summary>
			<returns>A value of type <see cref="T:System.Windows.Media.HitTestResult"></see>, representing the <see cref="T:System.Windows.Media.Visual"></see> returned from a hit test. </returns>
			<param name="hitTestParameters">A value of type <see cref="T:System.Windows.Media.PointHitTestParameters"></see> that specifies the <see cref="T:System.Windows.Point"></see> to hit test against.</param>
		</member>
		<member name="M:System.Windows.Media.DrawingVisual.RenderOpen">
			<summary>Opens the <see cref="T:System.Windows.Media.DrawingVisual"></see> object for rendering. The returned <see cref="T:System.Windows.Media.DrawingContext"></see> value can be used to render into the <see cref="T:System.Windows.Media.DrawingVisual"></see>.</summary>
			<returns>A value of type <see cref="T:System.Windows.Media.DrawingContext"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.DrawingVisual.Drawing">
			<summary>Gets the drawing content of the <see cref="T:System.Windows.Media.DrawingVisual"></see> object.</summary>
			<returns>Gets a value of type <see cref="T:System.Windows.Media.DrawingGroup"></see> that represents the collection of <see cref="T:System.Windows.Media.Drawing"></see> objects in the <see cref="T:System.Windows.Media.DrawingVisual"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.EdgeMode">
			<summary>The <see cref="T:System.Windows.Media.EdgeMode"></see> enumeration determines how the edges of non-text drawing primitives objects are rendered.</summary>
		</member>
		<member name="F:System.Windows.Media.EdgeMode.Aliased">
			<summary>Render the edges of non-text drawing primitives as aliased edges.</summary>
		</member>
		<member name="F:System.Windows.Media.EdgeMode.Unspecified">
			<summary>No edge mode is specified. Do not alter the current edge mode of non-text drawing primitives.</summary>
		</member>
		<member name="T:System.Windows.Media.EllipseGeometry">
			<summary>Represents the geometry of a circle or ellipse. </summary>
		</member>
		<member name="M:System.Windows.Media.EllipseGeometry.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.EllipseGeometry"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.EllipseGeometry.#ctor(System.Windows.Rect)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.EllipseGeometry"></see> class that has a horizontal diameter equal to the width of the passed Rect, a vertical diameter equal to the length of the passed Rect, and a center point location equal to the center of the passed Rect. </summary>
			<param name="rect">The rectangle that describes the ellipse dimensions.</param>
		</member>
		<member name="M:System.Windows.Media.EllipseGeometry.#ctor(System.Windows.Point,System.Double,System.Double)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.EllipseGeometry"></see> class as an ellipse that has a specified center location, x radius, and y radius. </summary>
			<param name="center">The location of the center of the ellipse.</param>
			<param name="radiusX">The horizontal radius of the ellipse.</param>
			<param name="radiusY">The vertical radius of the ellipse.</param>
		</member>
		<member name="M:System.Windows.Media.EllipseGeometry.#ctor(System.Windows.Point,System.Double,System.Double,System.Windows.Media.Transform)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.EllipseGeometry"></see> class.  </summary>
			<param name="transform">The transformation to apply to the ellipse.</param>
			<param name="center">The location of the center of the ellipse.</param>
			<param name="radiusX">The horizontal radius of the ellipse.</param>
			<param name="radiusY">The vertical radius of the ellipse.</param>
		</member>
		<member name="F:System.Windows.Media.EllipseGeometry.CenterProperty">
			<summary>Identifies the Center GTMT#dependency property. </summary>
			<returns>The Center GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.EllipseGeometry.RadiusXProperty">
			<summary>Identifies the RadiusX GTMT#dependency property. </summary>
			<returns>The RadiusX GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.EllipseGeometry.RadiusYProperty">
			<summary>Identifies the RadiusY GTMT#dependency property. </summary>
			<returns>The RadiusY GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.EllipseGeometry.Clone">
			<summary>Returns a modifiable clone of the <see cref="T:System.Windows.Media.EllipseGeometry"></see> class. </summary>
			<returns>A modifiable copy of the <see cref="T:System.Windows.Media.EllipseGeometry"></see>. </returns>
		</member>
		<member name="M:System.Windows.Media.EllipseGeometry.CloneCurrentValue">
			<summary>Returns a non-animated version of the <see cref="T:System.Windows.Media.EllipseGeometry"></see>, which represents the current state at the time this method was called. </summary>
			<returns>The current value of the <see cref="T:System.Windows.Media.EllipseGeometry"></see>, which has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="M:System.Windows.Media.EllipseGeometry.GetArea(System.Double,System.Windows.Media.ToleranceType)">
			<summary>Gets the area of the filled region. </summary>
			<returns>The area of the filled region of this ellipse.</returns>
			<param name="type">The interpretation of the error tolerance.</param>
			<param name="tolerance">The computational tolerance of error.</param>
		</member>
		<member name="M:System.Windows.Media.EllipseGeometry.IsEmpty">
			<summary>Determines whether this <see cref="T:System.Windows.Media.EllipseGeometry"></see> object is empty. </summary>
			<returns>true if this <see cref="T:System.Windows.Media.EllipseGeometry"></see> is empty; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Media.EllipseGeometry.MayHaveCurves">
			<summary>Determines whether this <see cref="T:System.Windows.Media.EllipseGeometry"></see> object can have curved segments. </summary>
			<returns>true if this <see cref="T:System.Windows.Media.EllipseGeometry"></see> object can have curved segments; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.EllipseGeometry.Bounds">
			<summary>Gets a Rect that represents the bounding box of an <see cref="T:System.Windows.Media.EllipseGeometry"></see>. This method does not consider pens. </summary>
			<returns>The bounding box of the <see cref="T:System.Windows.Media.EllipseGeometry"></see>. </returns>
		</member>
		<member name="P:System.Windows.Media.EllipseGeometry.Center">
			<summary>Gets or sets the center point of the <see cref="T:System.Windows.Media.EllipseGeometry"></see>.  </summary>
			<returns>The center point of the <see cref="T:System.Windows.Media.EllipseGeometry"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.EllipseGeometry.RadiusX">
			<summary>Gets or sets the x-radius value of the <see cref="T:System.Windows.Media.EllipseGeometry"></see>. </summary>
			<returns>The x-radius value of the <see cref="T:System.Windows.Media.EllipseGeometry"></see>. </returns>
		</member>
		<member name="P:System.Windows.Media.EllipseGeometry.RadiusY">
			<summary>Gets or sets the y-radius value of the <see cref="T:System.Windows.Media.EllipseGeometry"></see>.</summary>
			<returns>The y-radius value of the <see cref="T:System.Windows.Media.EllipseGeometry"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.ExceptionEventArgs">
			<summary>Provides error exception data for media events.</summary>
		</member>
		<member name="P:System.Windows.Media.ExceptionEventArgs.ErrorException">
			<summary>Gets the exception that details the error condition.</summary>
			<returns>The exception that details the error condition.</returns>
			<exception cref="T:System.IO.FileNotFoundException">The media file is not found.</exception>
			<exception cref="T:System.IO.FileFormatException">The media file format is not supported by any installed GTMT#codec.-or-The file format is not recognized.</exception>
			<exception cref="T:System.Runtime.InteropServices.COMException">A COM error code appears. </exception>
			<exception cref="T:System.Security.SecurityException">The attempt to access the media file is denied.</exception>
			<exception cref="T:System.NotSupportedException">The detected version of TLA#tla_wmp is not supported.-or-Video resources are insufficient for media playback.</exception>
		</member>
		<member name="T:System.Windows.Media.FamilyTypeface">
			<summary>A <see cref="T:System.Windows.Media.FamilyTypeface"></see> object specifies the details of a single typeface supported by a <see cref="T:System.Windows.Media.FontFamily"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.FamilyTypeface.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.FamilyTypeface"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.FamilyTypeface.Equals(System.Windows.Media.FamilyTypeface)">
			<summary>Compares two font family typefaces for equality.</summary>
			<returns>true if typeface is not null and has the same properties as this font family typeface; otherwise, false.</returns>
			<param name="typeface">The <see cref="T:System.Windows.Media.FamilyTypeface"></see> value to compare.</param>
		</member>
		<member name="M:System.Windows.Media.FamilyTypeface.Equals(System.Object)">
			<summary>Compares two font family typefaces for equality.</summary>
			<returns>true if typeface is not null and has the same properties as this typeface; otherwise, false.</returns>
			<param name="o">The <see cref="T:System.Object"></see> value that represents the typeface to compare.</param>
		</member>
		<member name="M:System.Windows.Media.FamilyTypeface.GetHashCode">
			<summary>Serves as a hash function for a <see cref="T:System.Windows.Media.FamilyTypeface"></see> object. The <see cref="M:System.Windows.Media.FamilyTypeface.GetHashCode"></see> method is suitable for use in hashing algorithms and data structures like a hash table.</summary>
			<returns>A value of type <see cref="T:System.Int32"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.FamilyTypeface.AdjustedFaceNames">
			<summary>Gets a collection of localized face names adjusted by the font differentiator.</summary>
			<returns>An array of type <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.FamilyTypeface.CapsHeight">
			<summary>Gets or sets the distance from baseline to top of an English capital, relative to em size.</summary>
			<returns>A value of type <see cref="T:System.Double"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.FamilyTypeface.DeviceFontCharacterMetrics">
			<summary>Gets the collection of character metrics for a device font family typeface.</summary>
			<returns>A value of type <see cref="T:System.Windows.Media.CharacterMetricsDictionary"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.FamilyTypeface.DeviceFontName">
			<summary>Gets or sets the name or unique identifier for a device font family typeface.</summary>
			<returns>A value of type <see cref="T:System.String"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.FamilyTypeface.Stretch">
			<summary>Gets or sets the designed stretch of the font family typeface.</summary>
			<returns>A value of type <see cref="T:System.Windows.FontStretch"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.FamilyTypeface.StrikethroughPosition">
			<summary>Gets or sets the position of the strikethrough value relative to the baseline. The value is also relative to em size.</summary>
			<returns>A value of type <see cref="T:System.Double"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.FamilyTypeface.StrikethroughThickness">
			<summary>Gets or sets the thickness of the strikethrough relative to em size. </summary>
			<returns>A value of type <see cref="T:System.Double"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.FamilyTypeface.Style">
			<summary>Gets or sets the style of the font family typeface design. </summary>
			<returns>A value of type <see cref="T:System.Windows.FontStyle"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.FamilyTypeface.UnderlinePosition">
			<summary>Gets or sets the position of underline value relative to the baseline. The value is also relative to em size.</summary>
			<returns>A value of type <see cref="T:System.Double"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.FamilyTypeface.UnderlineThickness">
			<summary>Gets or sets the thickness of underline relative to em size.</summary>
			<returns>A value of type <see cref="T:System.Double"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.FamilyTypeface.Weight">
			<summary>Gets or sets the designed weight of this font family typeface.</summary>
			<returns>A value of type <see cref="T:System.Windows.FontWeight"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.FamilyTypeface.XHeight">
			<summary>Gets or sets the Western x-height relative to em size.</summary>
			<returns>A value of type <see cref="T:System.Double"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.FamilyTypefaceCollection">
			<summary> List of FamilyTypeface objects in a FontFamily, in lookup order. </summary>
		</member>
		<member name="M:System.Windows.Media.FamilyTypefaceCollection.Add(System.Windows.Media.FamilyTypeface)">
			<summary> Adds a FamilyTypeface to the font family. </summary>
			<param name="item">A value of type <see cref="T:System.Windows.Media.FamilyTypeface"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.FamilyTypefaceCollection.Contains(System.Windows.Media.FamilyTypeface)">
			<summary> Determines whether the FontFamily contains the specified FamilyTypeface. </summary>
			<param name="item">A value of type <see cref="T:System.Windows.Media.FamilyTypeface"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.FamilyTypefaceCollection.CopyTo(System.Windows.Media.FamilyTypeface[],System.Int32)">
			<summary> Copies the contents of the list to the specified array. </summary>
			<param name="array">Is an array of type <see cref="T:System.Windows.Media.FamilyTypeface"></see>.</param>
			<param name="index">A value of type <see cref="T:System.Int32"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.FamilyTypefaceCollection.IndexOf(System.Windows.Media.FamilyTypeface)">
			<summary> Gets the index of the specified FamilyTypeface. </summary>
			<param name="item">A value of type <see cref="T:System.Windows.Media.FamilyTypeface"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.FamilyTypefaceCollection.Insert(System.Int32,System.Windows.Media.FamilyTypeface)">
			<summary> Inserts a FamilyTypeface into the list. </summary>
			<param name="item">A value of type <see cref="T:System.Windows.Media.FamilyTypeface"></see>.</param>
			<param name="index">A value of type <see cref="T:System.Int32"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.FamilyTypefaceCollection.Remove(System.Windows.Media.FamilyTypeface)">
			<summary> Removes the specified FamilyTypeface. </summary>
			<param name="item">A value of type <see cref="T:System.Windows.Media.FamilyTypeface"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.FamilyTypefaceCollection.RemoveAt(System.Int32)">
			<summary> Removes the FamilyTypeface at the specified index. </summary>
			<param name="index">A value of type <see cref="T:System.Int32"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.FamilyTypefaceCollection.System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.FamilyTypefaceCollection.System.Collections.IList.Insert(System.Int32,System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.FamilyTypefaceCollection.System.Collections.IList.Remove(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.FamilyTypefaceCollection.Item(System.Int32)">
			<summary> Gets or sets the FamilyTypeface at the specified index. </summary>
			<param name="index">A value of type <see cref="T:System.Int32"></see>.</param>
		</member>
		<member name="T:System.Windows.Media.FillRule">
			<summary> Specifies how the intersecting areas of <see cref="T:System.Windows.Media.PathFigure"></see> objects contained in a <see cref="T:System.Windows.Media.Geometry"></see> are combined to form the area of the <see cref="T:System.Windows.Media.Geometry"></see>.</summary>
		</member>
		<member name="F:System.Windows.Media.FillRule.EvenOdd">
			<summary>Determines whether a point is in the fill region by drawing a ray from that point to infinity in any direction and counting the number of path segments within the given shape that the ray crosses. If this number is odd, the point is inside; if even, the point is outside.</summary>
		</member>
		<member name="F:System.Windows.Media.FillRule.Nonzero">
			<summary>Determines whether a point is in the fill region of the path by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray. Starting with a count of zero, add one each time a segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left. After counting the crossings, if the result is zero then the point is outside the path. Otherwise, it is inside.</summary>
		</member>
		<member name="T:System.Windows.Media.FontEmbeddingManager">
			<summary> The FontEmbeddingManager class handles physical and composite font embedding. </summary>
		</member>
		<member name="M:System.Windows.Media.FontEmbeddingManager.#ctor">
			<summary> Creates a new instance of font usage manager. </summary>
		</member>
		<member name="M:System.Windows.Media.FontEmbeddingManager.GetUsedGlyphs(System.Uri)">
			<summary> Obtain the list of glyphs used by the glyph typeface specified by a Uri. </summary>
			<param name="glyphTypeface">Specifies the Uri of a glyph typeface to obtain usage data for.</param>
			<exception cref="T:System.ArgumentException">Glyph typeface Uri does not point to a previously recorded glyph typeface.</exception>
		</member>
		<member name="M:System.Windows.Media.FontEmbeddingManager.RecordUsage(System.Windows.Media.GlyphRun)">
			<summary> Collects information about glyph typeface and index used by a glyph run. </summary>
			<param name="glyphRun">Glyph run to obtain typeface and index information from.</param>
		</member>
		<member name="P:System.Windows.Media.FontEmbeddingManager.GlyphTypefaceUris">
			<summary> Returns the collection of glyph typefaces used by the previously added glyph runs. </summary>
			<returns>The collection of glyph typefaces used by the previously added glyph runs.</returns>
		</member>
		<member name="T:System.Windows.Media.FontEmbeddingRight">
			<summary>The FontEmbeddingRight enumeration is used to describe font embedding permissions specified in an OpenType font file.</summary>
		</member>
		<member name="F:System.Windows.Media.FontEmbeddingRight.Editable">
			<summary>The font may be embedded but must only be installed temporarily on other systems. In contrast to the PreviewAndPrint setting, documents containing Editable fonts may be opened for reading, editing is permitted, and changes may be saved.</summary>
		</member>
		<member name="F:System.Windows.Media.FontEmbeddingRight.EditableButNoSubsetting">
			<summary>The font may be embedded but must only be installed temporarily on other systems. Documents containing the font may be opened for reading, editing is permitted, and changes may be saved. The font may not be subsetted prior to embedding.</summary>
		</member>
		<member name="F:System.Windows.Media.FontEmbeddingRight.EditableButNoSubsettingAndWithBitmapsOnly">
			<summary>The font may be embedded but must only be installed temporarily on other systems. Documents containing the font may be opened for reading, editing is permitted, and changes may be saved. The font may not be subsetted prior to embedding. Only bitmaps contained in the font may be embedded. No outline data may be embedded.</summary>
		</member>
		<member name="F:System.Windows.Media.FontEmbeddingRight.EditableButWithBitmapsOnly">
			<summary>The font may be embedded but must only be installed temporarily on other systems. Documents containing the font may be opened for reading, editing is permitted, and changes may be saved. Only bitmaps contained in the font may be embedded. No outline data may be embedded.</summary>
		</member>
		<member name="F:System.Windows.Media.FontEmbeddingRight.Installable">
			<summary>Fonts with this setting indicate that they may be embedded and permanently installed on the remote system by an application. The user of the remote system acquires the identical rights, obligations and licenses for that font as the original purchaser of the font, and is subject to the same end-user license agreement, copyright, design patent, and/or trademark as was the original purchaser.</summary>
		</member>
		<member name="F:System.Windows.Media.FontEmbeddingRight.InstallableButNoSubsetting">
			<summary>Fonts with this setting indicate that they may be embedded and permanently installed on the remote system by an application. They may not be subsetted prior to embedding.</summary>
		</member>
		<member name="F:System.Windows.Media.FontEmbeddingRight.InstallableButNoSubsettingAndWithBitmapsOnly">
			<summary>Fonts with this setting indicate that they may be embedded and permanently installed on the remote system by an application. They may not be subsetted prior to embedding. Only bitmaps contained in the fonts may be embedded. No outline data may be embedded.</summary>
		</member>
		<member name="F:System.Windows.Media.FontEmbeddingRight.InstallableButWithBitmapsOnly">
			<summary>Fonts with this setting indicate that they may be embedded and permanently installed on the remote system by an application. Only bitmaps contained in the fonts may be embedded. No outline data may be embedded.</summary>
		</member>
		<member name="F:System.Windows.Media.FontEmbeddingRight.PreviewAndPrint">
			<summary>The font may be embedded and temporarily loaded on the remote system. Documents containing the font must be opened in a read-only mode.</summary>
		</member>
		<member name="F:System.Windows.Media.FontEmbeddingRight.PreviewAndPrintButNoSubsetting">
			<summary>The font may be embedded and temporarily loaded on the remote system. Documents containing the font must be opened in a read-only mode. The font may not be subsetted prior to embedding.</summary>
		</member>
		<member name="F:System.Windows.Media.FontEmbeddingRight.PreviewAndPrintButNoSubsettingAndWithBitmapsOnly">
			<summary>The font may be embedded and temporarily loaded on the remote system. Documents containing the font must be opened in a read-only mode. The font may not be subsetted prior to embedding. Only bitmaps contained in the font may be embedded. No outline data may be embedded.</summary>
		</member>
		<member name="F:System.Windows.Media.FontEmbeddingRight.PreviewAndPrintButWithBitmapsOnly">
			<summary>The font may be embedded and temporarily loaded on the remote system. Documents containing the font must be opened in a read-only mode. Only bitmaps contained in the font may be embedded. No outline data may be embedded.</summary>
		</member>
		<member name="F:System.Windows.Media.FontEmbeddingRight.RestrictedLicense">
			<summary>Fonts with this setting must not be modified, embedded or exchanged in any manner without first obtaining permission of the legal owner.</summary>
		</member>
		<member name="T:System.Windows.Media.FontFamily">
			<summary>Represents a family of related fonts.</summary>
		</member>
		<member name="M:System.Windows.Media.FontFamily.#ctor">
			<summary>Initializes a new instance of an anonymous <see cref="T:System.Windows.Media.FontFamily"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.FontFamily.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.FontFamily"></see> class from the specified font family name.</summary>
			<param name="familyName">The family name or names that make up the new <see cref="T:System.Windows.Media.FontFamily"></see>. Multiple family names should be separated by commas. </param>
			<exception cref="T:System.ArgumentNullException">familyName cannot be null.</exception>
		</member>
		<member name="M:System.Windows.Media.FontFamily.#ctor(System.Uri,System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.FontFamily"></see> class from the specified font family name and an optional base TLA#tla_uri value.</summary>
			<param name="baseUri">Specifies the base TLA2#tla_uri that is used to resolve familyName.</param>
			<param name="familyName">The family name or names that make up the new <see cref="T:System.Windows.Media.FontFamily"></see>. Multiple family names should be separated by commas.</param>
		</member>
		<member name="M:System.Windows.Media.FontFamily.Equals(System.Object)">
			<summary>Gets a value that indicates whether the current font family object and the specified font family object are the same.</summary>
			<returns>true if o is equal to the current <see cref="T:System.Windows.Media.FontFamily"></see> object; otherwise, false. If o is not a <see cref="T:System.Windows.Media.FontFamily"></see> object, false is returned.</returns>
			<param name="o">The <see cref="T:System.Windows.Media.FontFamily"></see> object to compare.</param>
		</member>
		<member name="M:System.Windows.Media.FontFamily.GetHashCode">
			<summary>Serves as a hash function for <see cref="T:System.Windows.Media.FontFamily"></see>. It is suitable for use in hashing algorithms and data structures such as a hash table.</summary>
			<returns>An <see cref="T:System.Int32"></see> value that represents the hash code for the current object.</returns>
		</member>
		<member name="M:System.Windows.Media.FontFamily.GetTypefaces">
			<summary>Returns a collection of <see cref="T:System.Windows.Media.Typeface"></see> objects that represent the type faces in the default system font location.</summary>
			<returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> of <see cref="T:System.Windows.Media.Typeface"></see> objects.</returns>
		</member>
		<member name="M:System.Windows.Media.FontFamily.ToString">
			<summary>Returns the value of the <see cref="P:System.Windows.Media.FontFamily.Source"></see> property.</summary>
			<returns>The source location of the <see cref="T:System.Windows.Media.FontFamily"></see> object, including the directory or TLA#tla_uri location reference.</returns>
		</member>
		<member name="P:System.Windows.Media.FontFamily.Baseline">
			<summary>Gets or sets the distance between the baseline and the character cell top.</summary>
			<returns>A <see cref="T:System.Double"></see> that indicates the distance between the baseline and the character cell top, expressed as a fraction of the font em size.</returns>
		</member>
		<member name="P:System.Windows.Media.FontFamily.BaseUri">
			<summary>Gets the base TLA#tla_uri that is used to resolve a font family name.</summary>
			<returns>A value of type <see cref="T:System.Uri"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.FontFamily.FamilyMaps">
			<summary>Gets the collection of <see cref="T:System.Windows.Media.FontFamilyMap"></see> objects. </summary>
			<returns>A <see cref="T:System.Windows.Media.FontFamilyMapCollection"></see> that contains <see cref="T:System.Windows.Media.FontFamilyMap"></see> objects.</returns>
		</member>
		<member name="P:System.Windows.Media.FontFamily.FamilyNames">
			<summary>Gets a collection of strings and <see cref="T:System.Globalization.CultureInfo"></see> values that represent the font family names of the <see cref="T:System.Windows.Media.FontFamily"></see> object.</summary>
			<returns>A <see cref="T:System.Windows.Media.LanguageSpecificStringDictionary"></see> that represents the font family names.</returns>
		</member>
		<member name="P:System.Windows.Media.FontFamily.FamilyTypefaces">
			<summary>Gets a collection of typefaces for the <see cref="T:System.Windows.Media.FontFamily"></see> object.</summary>
			<returns>A <see cref="T:System.Windows.Media.FamilyTypefaceCollection"></see> that represents a collection of typefaces for the <see cref="T:System.Windows.Media.FontFamily"></see> object.</returns>
		</member>
		<member name="P:System.Windows.Media.FontFamily.LineSpacing">
			<summary>Gets or sets the line spacing value for the <see cref="T:System.Windows.Media.FontFamily"></see> object. The line spacing is the recommended baseline-to-baseline distance for the text in this font relative to the em size.</summary>
			<returns>A <see cref="T:System.Double"></see> that represents the line spacing for the <see cref="T:System.Windows.Media.FontFamily"></see> object.</returns>
		</member>
		<member name="P:System.Windows.Media.FontFamily.Source">
			<summary>Gets the font family name that is used to construct the <see cref="T:System.Windows.Media.FontFamily"></see> object.</summary>
			<returns>The font family name of the <see cref="T:System.Windows.Media.FontFamily"></see> object.</returns>
		</member>
		<member name="T:System.Windows.Media.FontFamilyConverter">
			<summary> FontFamilyConverter - converter class for converting between the FontFamily and String types. </summary>
		</member>
		<member name="M:System.Windows.Media.FontFamilyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> CanConvertTo - Returns whether or not this class can convert to the specified type. Conversion is possible only if the source and destination types are FontFamily and string, respectively, and the font family is not anonymous (i.e., the Source propery is not null). </summary>
			<returns>true if conversion is possible</returns>
			<param name="context">ITypeDescriptorContext</param>
			<param name="destinationType">Type to convert to</param>
		</member>
		<member name="T:System.Windows.Media.FontFamilyMap">
			<summary>Defines which <see cref="T:System.Windows.Media.FontFamily"></see> to use for a specified set of Unicode code points and a culture-specific language.</summary>
		</member>
		<member name="M:System.Windows.Media.FontFamilyMap.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.FontFamilyMap"></see> class.</summary>
		</member>
		<member name="P:System.Windows.Media.FontFamilyMap.Language">
			<summary>Gets or sets the culture-specific language for the <see cref="T:System.Windows.Media.FontFamilyMap"></see>.</summary>
			<returns>A <see cref="T:System.Windows.Markup.XmlLanguage"></see> value representing the culture-specific language. The default value is a null string.</returns>
		</member>
		<member name="P:System.Windows.Media.FontFamilyMap.Scale">
			<summary>Gets or sets the font scale factor for the target <see cref="T:System.Windows.Media.FontFamily"></see>.</summary>
			<returns>A <see cref="T:System.Double"></see> value representing the scale factor. The default value is 1.0.</returns>
		</member>
		<member name="P:System.Windows.Media.FontFamilyMap.Target">
			<summary>Gets or sets the target font family name for which the Unicode range applies to.</summary>
			<returns>A <see cref="T:System.String"></see> value representing the font family name. The default value is a null string.</returns>
		</member>
		<member name="P:System.Windows.Media.FontFamilyMap.Unicode">
			<summary>Gets or sets a string value representing one or more Unicode code point ranges.</summary>
			<returns>A <see cref="T:System.String"></see> value representing Unicode code point ranges. The default value is "0000-10ffff".</returns>
			<exception cref="T:System.FormatException">Unicode range not valid.</exception>
		</member>
		<member name="T:System.Windows.Media.FontFamilyMapCollection">
			<summary>Represents an ordered collection of <see cref="T:System.Windows.Media.FontFamilyMap"></see> objects.</summary>
		</member>
		<member name="M:System.Windows.Media.FontFamilyMapCollection.Add(System.Windows.Media.FontFamilyMap)">
			<summary>Inserts the specified <see cref="T:System.Windows.Media.FontFamilyMap"></see> object into the collection.</summary>
			<param name="item">The object to insert.</param>
		</member>
		<member name="M:System.Windows.Media.FontFamilyMapCollection.Clear">
			<summary>Removes all <see cref="T:System.Windows.Media.FontFamilyMap"></see> objects from the <see cref="T:System.Windows.Media.FontFamilyMapCollection"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.FontFamilyMapCollection.Contains(System.Windows.Media.FontFamilyMap)">
			<summary>Indicates whether the <see cref="T:System.Windows.Media.FontFamilyMapCollection"></see> contains the specified <see cref="T:System.Windows.Media.FontFamilyMap"></see> object.</summary>
			<returns>true if the collection contains item; otherwise false.</returns>
			<param name="item">The object to locate.</param>
		</member>
		<member name="M:System.Windows.Media.FontFamilyMapCollection.CopyTo(System.Windows.Media.FontFamilyMap[],System.Int32)">
			<summary>Copies the <see cref="T:System.Windows.Media.FontFamilyMap"></see> objects in the collection into an array of FontFamilyMaps, starting at the specified index position.</summary>
			<param name="array">The destination array.</param>
			<param name="index">The zero-based index position where copying begins.</param>
		</member>
		<member name="M:System.Windows.Media.FontFamilyMapCollection.GetEnumerator">
			<summary>Returns an enumerator that can iterate through the collection.</summary>
			<returns>An enumerator that can iterate through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.FontFamilyMapCollection.IndexOf(System.Windows.Media.FontFamilyMap)">
			<summary>Returns the index of the specified <see cref="T:System.Windows.Media.FontFamilyMap"></see> object within the collection.</summary>
			<returns>The zero-based index of item, if found; otherwise -1;</returns>
			<param name="item">The object to locate.</param>
		</member>
		<member name="M:System.Windows.Media.FontFamilyMapCollection.Insert(System.Int32,System.Windows.Media.FontFamilyMap)">
			<summary>Inserts the specified <see cref="T:System.Windows.Media.FontFamilyMap"></see> object at the specified index position in the collection.</summary>
			<param name="item">The object to insert.</param>
			<param name="index">The zero-based index position to insert the object.</param>
		</member>
		<member name="M:System.Windows.Media.FontFamilyMapCollection.Remove(System.Windows.Media.FontFamilyMap)">
			<summary>Removes the specified <see cref="T:System.Windows.Media.FontFamilyMap"></see> object from the collection.</summary>
			<returns>true if item was successfully deleted; otherwise false.</returns>
			<param name="item">The object to remove.</param>
		</member>
		<member name="M:System.Windows.Media.FontFamilyMapCollection.RemoveAt(System.Int32)">
			<summary>Deletes a <see cref="T:System.Windows.Media.FontFamilyMap"></see> object from the <see cref="T:System.Windows.Media.FontFamilyMapCollection"></see>.</summary>
			<param name="index">The zero-based index position to remove the object.</param>
		</member>
		<member name="M:System.Windows.Media.FontFamilyMapCollection.System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.FontFamilyMapCollection.System.Collections.IList.Insert(System.Int32,System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.FontFamilyMapCollection.System.Collections.IList.Remove(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.FontFamilyMapCollection.Count">
			<summary>Gets the number of <see cref="T:System.Windows.Media.FontFamilyMap"></see> objects in the <see cref="T:System.Windows.Media.FontFamilyMapCollection"></see>.</summary>
			<returns>The number of objects in the collection.</returns>
		</member>
		<member name="P:System.Windows.Media.FontFamilyMapCollection.IsReadOnly">
			<summary>Gets a value that indicates if a <see cref="T:System.Windows.Media.FontFamilyMapCollection"></see> is read only.</summary>
			<returns>true if the collection is read only; otherwise false.</returns>
		</member>
		<member name="P:System.Windows.Media.FontFamilyMapCollection.Item(System.Int32)">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.FontFamilyMap"></see> object at the specified index position.</summary>
			<returns>The <see cref="T:System.Windows.Media.FontFamilyMap"></see> object at the index position.</returns>
			<param name="index">The zero-based index position of the object to get or set.</param>
		</member>
		<member name="M:System.Windows.Media.FontFamilyValueSerializer.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.FontFamilyValueSerializer"></see> class.</summary>
		</member>
		<member name="T:System.Windows.Media.Fonts">
			<summary>Provides enumeration support for <see cref="T:System.Windows.Media.FontFamily"></see> and <see cref="T:System.Windows.Media.TypeFace"></see> objects.</summary>
		</member>
		<member name="M:System.Windows.Media.Fonts.GetFontFamilies(System.String)">
			<summary>Returns the collection of <see cref="T:System.Windows.Media.FontFamily"></see> objects from a string value that represents the location of the fonts.</summary>
			<returns>An <see cref="T:System.Collections.ICollection"></see> of <see cref="T:System.Windows.Media.FontFamily"></see> objects that represent the fonts in location.</returns>
			<param name="location">The location that contains the fonts.</param>
			<exception cref="T:System.ArgumentNullException">The base URI parameter cannot be null unless location is an absolute URI.</exception>
		</member>
		<member name="M:System.Windows.Media.Fonts.GetFontFamilies(System.Uri)">
			<summary>Returns a collection of <see cref="T:System.Windows.Media.FontFamily"></see> objects from a TLA#tla_uri value that represents the location of the fonts.</summary>
			<returns>An <see cref="T:System.Collections.ICollection"></see> of <see cref="T:System.Windows.Media.FontFamily"></see> objects that represent the fonts in baseUri.</returns>
			<param name="baseUri">The base URI value of the location of the fonts.</param>
		</member>
		<member name="M:System.Windows.Media.Fonts.GetFontFamilies(System.Uri,System.String)">
			<summary>Returns a collection of <see cref="T:System.Windows.Media.FontFamily"></see> objects using a base TLA#tla_uri value to resolve the font location.</summary>
			<returns>An <see cref="T:System.Collections.ICollection"></see> of <see cref="T:System.Windows.Media.FontFamily"></see> objects that represent the fonts in the resolved font location.</returns>
			<param name="baseUri">The base URI value of the location of the fonts.</param>
			<param name="location">The location that contains the fonts.</param>
		</member>
		<member name="M:System.Windows.Media.Fonts.GetTypefaces(System.String)">
			<summary>Returns the collection of <see cref="T:System.Windows.Media.TypeFace"></see> objects from a string value that represents the font directory location.</summary>
			<returns>An <see cref="T:System.Collections.ICollection"></see> of <see cref="T:System.Windows.Media.TypeFace"></see> objects that represent the fonts in folder.</returns>
			<param name="location">The location that contains the fonts.</param>
			<exception cref="T:System.ArgumentNullException">The base URI parameter cannot be null unless location is an absolute URI.</exception>
		</member>
		<member name="M:System.Windows.Media.Fonts.GetTypefaces(System.Uri)">
			<summary>Returns a collection of <see cref="T:System.Windows.Media.TypeFace"></see> objects from a TLA#tla_uri value that represents the font location.</summary>
			<returns>An <see cref="T:System.Collections.ICollection"></see> of <see cref="T:System.Windows.Media.TypeFace"></see> objects that represent the fonts in baseUri.</returns>
			<param name="baseUri">The base URI value of the location of the fonts.</param>
		</member>
		<member name="M:System.Windows.Media.Fonts.GetTypefaces(System.Uri,System.String)">
			<summary>Returns a collection of <see cref="T:System.Windows.Media.TypeFace"></see> objects using a base TLA#tla_uri value to resolve the font location.</summary>
			<returns>An <see cref="T:System.Collections.ICollection"></see> of <see cref="T:System.Windows.Media.TypeFace"></see> objects that represent the fonts in the resolved font location.</returns>
			<param name="baseUri">The base URI value of the location of the fonts.</param>
			<param name="location">The location that contains the fonts.</param>
		</member>
		<member name="P:System.Windows.Media.Fonts.SystemFontFamilies">
			<summary>Gets the collection of <see cref="T:System.Windows.Media.FontFamily"></see> objects from the default system font location.</summary>
			<returns>An <see cref="T:System.Collections.ICollection"></see> of <see cref="T:System.Windows.Media.FontFamily"></see> objects that represent the fonts in the system fonts collection.</returns>
		</member>
		<member name="P:System.Windows.Media.Fonts.SystemTypefaces">
			<summary>Gets the collection of <see cref="T:System.Windows.Media.TypeFace"></see> objects from the default system font location.</summary>
			<returns>An <see cref="T:System.Collections.ICollection"></see> of <see cref="T:System.Windows.Media.TypeFace"></see> objects that represent the fonts in the system fonts collection.</returns>
		</member>
		<member name="T:System.Windows.Media.FormattedText">
			<summary>The <see cref="T:System.Windows.Media.FormattedText"></see> object provides low-level control for drawing text in TLA#tla_winclient applications.</summary>
		</member>
		<member name="M:System.Windows.Media.FormattedText.#ctor(System.String,System.Globalization.CultureInfo,System.Windows.FlowDirection,System.Windows.Media.Typeface,System.Double,System.Windows.Media.Brush)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.FormattedText"></see> class.</summary>
			<param name="culture">The specific culture of the text.</param>
			<param name="textToFormat">The text to be displayed.</param>
			<param name="typeface">The font family, weight, style and stretch the text should be formatted with.</param>
			<param name="foreground">The brush used to paint the each glyph.</param>
			<param name="emSize">The font size the text should be formatted at.</param>
			<param name="flowDirection">The direction the text is read.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.#ctor(System.String,System.Globalization.CultureInfo,System.Windows.FlowDirection,System.Windows.Media.Typeface,System.Double,System.Windows.Media.Brush,System.Windows.Media.NumberSubstitution)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.FormattedText"></see> class.</summary>
			<param name="culture">The specific culture of the text.</param>
			<param name="textToFormat">The text to be displayed.</param>
			<param name="typeface">The font family, weight, style and stretch the text should be formatted with.</param>
			<param name="foreground">The brush used to paint the each glyph.</param>
			<param name="emSize">The font size the text should be formatted at.</param>
			<param name="numberSubstitution">The number substitution behavior to apply to the text.</param>
			<param name="flowDirection">The direction the text is read.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.BuildGeometry(System.Windows.Point)">
			<summary>Returns a <see cref="T:System.Windows.Media.Geometry"></see> object that represents the formatted text, including all glyphs and text decorations.</summary>
			<returns>The <see cref="T:System.Windows.Media.Geometry"></see> object representation of the formatted text.</returns>
			<param name="origin">The top-left origin of the resulting geometry.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.BuildHighlightGeometry(System.Windows.Point)">
			<summary>Returns a <see cref="T:System.Windows.Media.Geometry"></see> object that represents the highlight bounding box of the formatted text.</summary>
			<returns>The <see cref="T:System.Windows.Media.Geometry"></see> object that represents the highlight bounding box of the formatted text.</returns>
			<param name="origin">The origin of the highlight region.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.BuildHighlightGeometry(System.Windows.Point,System.Int32,System.Int32)">
			<summary>Returns a <see cref="T:System.Windows.Media.Geometry"></see> object that represents the highlight bounding box for a specified substring of the formatted text.</summary>
			<returns>The <see cref="T:System.Windows.Media.Geometry"></see> object that represents the highlight bounding box of the formatted text substring.</returns>
			<param name="count">The number of characters the highlight bounds should contain.</param>
			<param name="origin">The origin of the highlight region.</param>
			<param name="startIndex">The index of the initial character the highlight bounds should be obtained for.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.GetMaxTextWidths">
			<summary>Retrieves an array of text widths. Each element in the array represents the maximum text width of sequential lines of text.</summary>
			<returns>An array of maximum text widths.</returns>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetCulture(System.Globalization.CultureInfo)">
			<summary>Sets the <see cref="T:System.Globalization.CultureInfo"></see> for the entire set of characters in the <see cref="T:System.Windows.Media.FormattedText"></see> object.</summary>
			<param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use for text formatting.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetCulture(System.Globalization.CultureInfo,System.Int32,System.Int32)">
			<summary>Sets the <see cref="T:System.Globalization.CultureInfo"></see> for a specified subset of characters in the <see cref="T:System.Windows.Media.FormattedText"></see> object.</summary>
			<param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use for text formatting.</param>
			<param name="count">The number of characters the change should be applied to.</param>
			<param name="startIndex">The start index of initial character to apply the change to.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetFontFamily(System.Windows.Media.FontFamily)">
			<summary>Sets the font family for a <see cref="T:System.Windows.Media.FormattedText"></see> object.</summary>
			<param name="fontFamily">The <see cref="T:System.Windows.Media.FontFamily"></see> to use for text formatting.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetFontFamily(System.String)">
			<summary>Sets the font family for the entire set of characters in the <see cref="T:System.Windows.Media.FormattedText"></see> object.</summary>
			<param name="fontFamily">The <see cref="T:System.Windows.Media.FontFamily"></see> to use for text formatting.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetFontFamily(System.Windows.Media.FontFamily,System.Int32,System.Int32)">
			<summary>Sets the font family for a specified subset of characters in the <see cref="T:System.Windows.Media.FormattedText"></see> object.</summary>
			<param name="count">The number of characters the change should apply to.</param>
			<param name="fontFamily">The <see cref="T:System.Windows.Media.FontFamily"></see> to use for text formatting.</param>
			<param name="startIndex">The starting index of the initial character to apply the font family change to.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetFontFamily(System.String,System.Int32,System.Int32)">
			<summary>Sets the font family for a specified subset of characters in the <see cref="T:System.Windows.Media.FormattedText"></see> object.</summary>
			<param name="count">The number of characters the change should apply to.</param>
			<param name="fontFamily">A <see cref="T:System.String"></see> representing the font family value to use for text formatting.</param>
			<param name="startIndex">The starting index of the initial character to apply the font family change to.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetFontSize(System.Double)">
			<summary>Sets the font size for the entire set of characters in the <see cref="T:System.Windows.Media.FormattedText"></see> object.</summary>
			<param name="emSize">The font size in 'em' units to use for text formatting.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetFontSize(System.Double,System.Int32,System.Int32)">
			<summary>Sets the font size for a specified subset of characters in the <see cref="T:System.Windows.Media.FormattedText"></see> object.</summary>
			<param name="count">The number of characters to apply the font size to.</param>
			<param name="emSize">The font size in 'em' units to use for text formatting.</param>
			<param name="startIndex">The start index of the initial character to apply the font size to.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetFontStretch(System.Windows.FontStretch)">
			<summary>Sets the font stretch value for the entire set of characters in the <see cref="T:System.Windows.Media.FormattedText"></see> object.</summary>
			<param name="stretch">The desired <see cref="T:System.Windows.FontStretch"></see> value to use for text formatting.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetFontStretch(System.Windows.FontStretch,System.Int32,System.Int32)">
			<summary>Sets the font stretch value for a specified subset of characters in the <see cref="T:System.Windows.Media.FormattedText"></see> object.</summary>
			<param name="count">The number of characters to apply the font stretch to.</param>
			<param name="stretch">The desired <see cref="T:System.Windows.FontStretch"></see> value to use for text formatting.</param>
			<param name="startIndex">The start index of the initial character to apply the font stretch to.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetFontStyle(System.Windows.FontStyle)">
			<summary>Sets the font style for the entire set of characters in the <see cref="T:System.Windows.Media.FormattedText"></see> object.</summary>
			<param name="style">The <see cref="T:System.Windows.FontStyle"></see> value to use for text formatting.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetFontStyle(System.Windows.FontStyle,System.Int32,System.Int32)">
			<summary>Sets the font style for a specified subset of characters in the <see cref="T:System.Windows.Media.FormattedText"></see> object.</summary>
			<param name="count">The number of characters to apply the font style to.</param>
			<param name="style">The <see cref="T:System.Windows.FontStyle"></see> value to use for text formatting.</param>
			<param name="startIndex">The start index of the initial character to apply the font style to.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetFontTypeface(System.Windows.Media.Typeface)">
			<summary>Sets the font typeface for the entire set of characters in the <see cref="T:System.Windows.Media.FormattedText"></see> object.</summary>
			<param name="typeface">The <see cref="T:System.Windows.Media.Typeface"></see> to use for text formatting.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetFontTypeface(System.Windows.Media.Typeface,System.Int32,System.Int32)">
			<summary>Sets the font typeface for a specified subset of characters in the <see cref="T:System.Windows.Media.FormattedText"></see> object.</summary>
			<param name="count">The number of characters to apply the typeface to.</param>
			<param name="typeface">The <see cref="T:System.Windows.Media.Typeface"></see> to use for text formatting.</param>
			<param name="startIndex">The start index of the initial character to apply the typeface to.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetFontWeight(System.Windows.FontWeight)">
			<summary>Sets the font weight for the entire set of characters in the <see cref="T:System.Windows.Media.FormattedText"></see> object.</summary>
			<param name="weight">The <see cref="T:System.Windows.FontWeight"></see> to use for text formatting.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetFontWeight(System.Windows.FontWeight,System.Int32,System.Int32)">
			<summary>Changes the FontWeight for specified text within a <see cref="T:System.Windows.Media.FormattedText"></see> object. </summary>
			<param name="count">The number of characters to apply the font weight to.</param>
			<param name="weight">The font weight to use for text formatting.</param>
			<param name="startIndex">The start index of the initial character to apply the font weight to.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetForegroundBrush(System.Windows.Media.Brush)">
			<summary>Changes the foreground Brush for an entire <see cref="T:System.Windows.Media.FormattedText"></see> object. </summary>
			<param name="foregroundBrush">The brush to use for the text foreground.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetForegroundBrush(System.Windows.Media.Brush,System.Int32,System.Int32)">
			<summary>Changes the foreground Brush for specified text within a <see cref="T:System.Windows.Media.FormattedText"></see> object. </summary>
			<param name="count">The number of characters to apply the foreground brush to.</param>
			<param name="foregroundBrush">The brush to use for the text foreground.</param>
			<param name="startIndex">The start index of the initial character to apply the foreground brush to.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetMaxTextWidths(System.Double[])">
			<summary>Sets the array of maximum text widths, overriding the MaxTextWidth property. Each element in the array represents the maximum text width of sequential lines of text. </summary>
			<param name="maxTextWidths">The array of maximum text widths.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetNumberSubstitution(System.Windows.Media.NumberSubstitution)">
			<summary>Sets the number substitution behavior for the entire set of characters in the <see cref="T:System.Windows.Media.FormattedText"></see> object.</summary>
			<param name="numberSubstitution">Number substitution behavior to apply to the text; can be null, in which case the default number substitution method for the text culture is used.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetNumberSubstitution(System.Windows.Media.NumberSubstitution,System.Int32,System.Int32)">
			<summary>Sets the number substitution behavior for specified text within a <see cref="T:System.Windows.Media.FormattedText"></see> object.</summary>
			<param name="count">The number of characters the change should be applied to.</param>
			<param name="startIndex">The start index of initial character to apply the change to.</param>
			<param name="numberSubstitution">Number substitution behavior to apply to the text; can be null, in which case the default number substitution method for the text culture is used.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetTextDecorations(System.Windows.TextDecorationCollection)">
			<summary>Sets the <see cref="T:System.Windows.TextDecorationCollection"></see> for the entire set of characters in the <see cref="T:System.Windows.Media.FormattedText"></see> object.</summary>
			<param name="textDecorations">The TextDecorationCollection to apply to the text.</param>
		</member>
		<member name="M:System.Windows.Media.FormattedText.SetTextDecorations(System.Windows.TextDecorationCollection,System.Int32,System.Int32)">
			<summary>Sets the <see cref="T:System.Windows.TextDecorationCollection"></see> for specified text within a <see cref="T:System.Windows.Media.FormattedText"></see> object.</summary>
			<param name="count">The number of characters to apply the text decorations to.</param>
			<param name="textDecorations">The TextDecorationCollection to apply to the text.</param>
			<param name="startIndex">The start index of the initial character to apply the text decorations to.</param>
		</member>
		<member name="P:System.Windows.Media.FormattedText.Baseline">
			<summary>Gets a value that indicates the distance from the top of the first line to the baseline of the first line of a <see cref="T:System.Windows.Media.FormattedText"></see> object.</summary>
			<returns>A value that indicates the distance from the top of the first line to the baseline of the first line.</returns>
		</member>
		<member name="P:System.Windows.Media.FormattedText.Extent">
			<summary>Gets the distance from the top-most inked pixel of the first line to the bottom-most inked pixel of the last line.</summary>
			<returns>The distance from the top-most black pixel of the first line to the bottom-most black pixel of the last line. </returns>
		</member>
		<member name="P:System.Windows.Media.FormattedText.FlowDirection">
			<summary>Gets or sets the FlowDirection of a FormattedText object.</summary>
			<returns>The FlowDirection of the formatted text.</returns>
		</member>
		<member name="P:System.Windows.Media.FormattedText.Height">
			<summary>Gets the distance from the top of the first line to the bottom of the last line of the FormattedText object.</summary>
			<returns>The distance from the top of the first line to the bottom of the last line.</returns>
		</member>
		<member name="P:System.Windows.Media.FormattedText.LineHeight">
			<summary>Gets the line height, or line spacing, between lines of text.</summary>
			<returns>The line spacing between lines of text.</returns>
		</member>
		<member name="P:System.Windows.Media.FormattedText.MaxLineCount">
			<summary>Gets or sets the maximum number of lines to display. Text exceeding the MaxLineCount will not be displayed. </summary>
			<returns>The maximum number of lines to display.</returns>
		</member>
		<member name="P:System.Windows.Media.FormattedText.MaxTextHeight">
			<summary>Gets or sets the maximum height of a text column.</summary>
			<returns>The maximum height of a text column.</returns>
		</member>
		<member name="P:System.Windows.Media.FormattedText.MaxTextWidth">
			<summary>Gets or sets the maximum text width (length) for a line of text.</summary>
			<returns>The maximum text width for a line of text.</returns>
		</member>
		<member name="P:System.Windows.Media.FormattedText.MinWidth">
			<summary> Gets the minimum text width for a line of text to prevent words from breaking (being automatically hyphenated). </summary>
			<returns>The minimum text width that can be specified using MaxTextWidth to prevent words from breaking.</returns>
		</member>
		<member name="P:System.Windows.Media.FormattedText.OverhangAfter">
			<summary> Gets the distance from the bottom of the last line of text to the bottom-most inked pixel. </summary>
			<returns>The distance from the bottom of the last line to the bottom-most inked pixel. The value is positive if the bottom-most inked pixel goes below the line bottom, and is negative if it is within (on or above) the line. </returns>
		</member>
		<member name="P:System.Windows.Media.FormattedText.OverhangLeading">
			<summary>Gets the maximum distance from the leading alignment point to the leading inked pixel of a line.</summary>
			<returns>The maximum distance from the leading alignment point to the leading inked pixel of a line. When the leading alignment point comes before the leading inked pixel, the value is negative.   </returns>
		</member>
		<member name="P:System.Windows.Media.FormattedText.OverhangTrailing">
			<summary>Gets the maximum distance from the trailing inked pixel to the trailing alignment point of a line.</summary>
			<returns>The maximum distance from the trailing inked pixel to the trailing alignment point of a line.</returns>
		</member>
		<member name="P:System.Windows.Media.FormattedText.Text">
			<summary>Gets the string of text to be displayed.</summary>
			<returns>The string of text to be displayed.</returns>
		</member>
		<member name="P:System.Windows.Media.FormattedText.TextAlignment">
			<summary>Gets or sets the alignment of text within a <see cref="T:System.Windows.Media.FormattedText"></see> object.</summary>
			<returns>The alignment of text within a <see cref="T:System.Windows.Media.FormattedText"></see> object.</returns>
		</member>
		<member name="P:System.Windows.Media.FormattedText.Trimming">
			<summary>Gets or sets the means by which the omission of text is indicated.</summary>
			<returns>The trimming type used to indicate how the omission of text is indicated. The default is WordEllipsis.</returns>
		</member>
		<member name="P:System.Windows.Media.FormattedText.Width">
			<summary>Gets the width between the leading and trailing alignment points of a line, excluding any trailing white-space characters.</summary>
			<returns>The width between the leading and trailing alignment points of a line, excluding any trailing white-space characters.</returns>
		</member>
		<member name="P:System.Windows.Media.FormattedText.WidthIncludingTrailingWhitespace">
			<summary>Gets the width between the leading and trailing alignment points of a line, including any trailing white-space characters.</summary>
			<returns>The width between the leading and trailing alignment points of a line, including any trailing white-space characters.</returns>
		</member>
		<member name="T:System.Windows.Media.GeneralTransform">
			<summary>An abstract class that provides generalized transformation support for objects, such as points and rectangles. </summary>
		</member>
		<member name="M:System.Windows.Media.GeneralTransform.ToString">
			<summary>Creates a string representation of this <see cref="T:System.Windows.Media.GeneralTransform"></see>.</summary>
			<returns>A string representation of this instance.</returns>
		</member>
		<member name="M:System.Windows.Media.GeneralTransform.ToString(System.IFormatProvider)">
			<summary>Creates a string representation of this instance, based on the passed IFormatProvider parameter.</summary>
			<returns>A string representation of this instance, based on provider.</returns>
			<param name="provider">IFormatProvider instance used to process this instance.</param>
		</member>
		<member name="M:System.Windows.Media.GeneralTransform.Transform(System.Windows.Point)">
			<summary>Transforms the specified point and returns the result.</summary>
			<returns>The result of transforming point.</returns>
			<param name="point">The point to transform.</param>
			<exception cref="T:System.InvalidOperationException">The transform did not succeed.</exception>
		</member>
		<member name="M:System.Windows.Media.GeneralTransform.TransformBounds(System.Windows.Rect)">
			<summary>When overridden in a derived class, transforms the specified bounding box and returns an axis-aligned bounding box that is exactly large enough to contain it.</summary>
			<returns>The smallest axis-aligned bounding box possible that contains the transformed rect.</returns>
			<param name="rect">The bounding box to transform.</param>
		</member>
		<member name="M:System.Windows.Media.GeneralTransform.TryTransform(System.Windows.Point,System.Windows.Point@)">
			<summary>When overridden in a derived class, attempts to transform the specified point and returns a value that indicates whether the transformation was successful.</summary>
			<returns>true if inPoint was transformed; otherwise, false.</returns>
			<param name="inPoint">The point to transform.</param>
			<param name="result">The result of transforming inPoint.</param>
		</member>
		<member name="P:System.Windows.Media.GeneralTransform.Inverse">
			<summary>Gets the inverse transformation of this <see cref="T:System.Windows.Media.GeneralTransform"></see>, if possible.</summary>
			<returns>Returns an inverse of this instance, if possible; otherwise null.</returns>
		</member>
		<member name="T:System.Windows.Media.GeneralTransformCollection">
			<summary>Represents an ordered collection of <see cref="T:System.Windows.Media.GeneralTransform"></see> objects. </summary>
		</member>
		<member name="M:System.Windows.Media.GeneralTransformCollection.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.GeneralTransformCollection"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.GeneralTransformCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.GeneralTransform})">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.GeneralTransformCollection"></see> class.</summary>
			<param name="collection">Initial object in the new collection class.</param>
		</member>
		<member name="M:System.Windows.Media.GeneralTransformCollection.Add(System.Windows.Media.GeneralTransform)">
			<summary>Adds a <see cref="T:System.Windows.Media.GeneralTransform"></see> object to the end of the <see cref="T:System.Windows.Media.GeneralTransformCollection"></see>.</summary>
			<param name="value">The object to add.</param>
		</member>
		<member name="M:System.Windows.Media.GeneralTransformCollection.Clear">
			<summary>Removes all <see cref="T:System.Windows.Media.GeneralTransform"></see> objects from the <see cref="T:System.Windows.Media.GeneralTransformCollection"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.GeneralTransformCollection.Contains(System.Windows.Media.GeneralTransform)">
			<summary>Indicates whether the <see cref="T:System.Windows.Media.GeneralTransformCollection"></see> contains the specified <see cref="T:System.Windows.Media.GeneralTransform"></see> object.</summary>
			<returns>true if the collection contains value; otherwise false.</returns>
			<param name="value">The object to locate.</param>
		</member>
		<member name="M:System.Windows.Media.GeneralTransformCollection.CopyTo(System.Windows.Media.GeneralTransform[],System.Int32)">
			<summary>Copies the <see cref="T:System.Windows.Media.GeneralTransform"></see> objects in the collection into an array of GeneralTransforms, starting at the specified index position. </summary>
			<param name="array">The destination array.</param>
			<param name="index">The zero-based index position where copying begins.</param>
		</member>
		<member name="M:System.Windows.Media.GeneralTransformCollection.GetEnumerator">
			<summary>Returns an enumerator that can iterate through the collection.</summary>
			<returns>An enumerator that can iterate the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.GeneralTransformCollection.IndexOf(System.Windows.Media.GeneralTransform)">
			<summary>Searches for the specified <see cref="T:System.Windows.Media.GeneralTransform"></see> object within a <see cref="T:System.Windows.Media.GeneralTransformCollection"></see>. </summary>
			<returns>The zero-based index position of value, if found; otherwise -1;</returns>
			<param name="value">The object to locate.</param>
		</member>
		<member name="M:System.Windows.Media.GeneralTransformCollection.Insert(System.Int32,System.Windows.Media.GeneralTransform)">
			<summary>Inserts a <see cref="T:System.Windows.Media.GeneralTransform"></see> object into the specified index position within the <see cref="T:System.Windows.Media.GeneralTransformCollection"></see>.</summary>
			<param name="value">The object to insert.</param>
			<param name="index">The zero-based index position to insert the object.</param>
		</member>
		<member name="M:System.Windows.Media.GeneralTransformCollection.Remove(System.Windows.Media.GeneralTransform)">
			<summary>Deletes a <see cref="T:System.Windows.Media.GeneralTransform"></see> object from the <see cref="T:System.Windows.Media.GeneralTransformCollection"></see>.</summary>
			<returns>true if value was successfully deleted; otherwise false.</returns>
			<param name="value">The object to remove.</param>
		</member>
		<member name="M:System.Windows.Media.GeneralTransformCollection.RemoveAt(System.Int32)">
			<summary>Deletes a <see cref="T:System.Windows.Media.GeneralTransform"></see> object from the <see cref="T:System.Windows.Media.GeneralTransformCollection"></see>.</summary>
			<param name="index">The zero-based index position to remove the object.</param>
		</member>
		<member name="M:System.Windows.Media.GeneralTransformCollection.System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.GeneralTransformCollection.System.Collections.IList.Insert(System.Int32,System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.GeneralTransformCollection.System.Collections.IList.Remove(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.GeneralTransformCollection.Count">
			<summary>Gets the number of <see cref="T:System.Windows.Media.GeneralTransform"></see> objects in the <see cref="T:System.Windows.Media.GeneralTransformCollection"></see>.</summary>
			<returns>The number of objects in the collection.</returns>
		</member>
		<member name="P:System.Windows.Media.GeneralTransformCollection.Item(System.Int32)">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.GeneralTransform"></see> object at the specified index position. </summary>
			<returns>The <see cref="T:System.Windows.Media.GeneralTransform"></see> object at the index position.</returns>
			<param name="index">The zero-based index position of the object to get or set.</param>
		</member>
		<member name="M:System.Windows.Media.GeneralTransformCollection.Enumerator.System.IDisposable.Dispose">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="T:System.Windows.Media.Geometry">
			<summary>Classes that derive from this abstract base class define geometric shapes. The Geometry class of objects can be used for clipping, hit-testing, and rendering 2-D graphic data.  </summary>
		</member>
		<member name="F:System.Windows.Media.Geometry.TransformProperty">
			<summary> Identifies the Transform GTMT#dependency property. </summary>
			<returns>The Transform GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.Geometry.Clone">
			<summary>Returns a modifiable clone of this geometry.</summary>
			<returns>A modifiable clone of this <see cref="T:System.Windows.Media.Geometry"></see>. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Geometry.CloneCurrentValue">
			<summary>Returns a non-animated version of the <see cref="T:System.Windows.Media.Geometry"></see>. The returned <see cref="T:System.Windows.Media.Geometry"></see> represents the current object's state at the time this method was called.           </summary>
			<returns>The current value of the <see cref="T:System.Windows.Media.Geometry"></see>. The returned Geometry has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="M:System.Windows.Media.Geometry.Combine(System.Windows.Media.Geometry,System.Windows.Media.Geometry,System.Windows.Media.GeometryCombineMode,System.Windows.Media.Transform)">
			<summary>Combines the two geometries using the specified <see cref="T:System.Windows.Media.GeometryCombineMode"></see> and applies the specified transform to the resulting geometry.</summary>
			<returns>The combined geometry.</returns>
			<param name="geometry1">The first geometry to combine.</param>
			<param name="geometry2">The second geometry to combine.</param>
			<param name="mode">One of the enumeration values that specifies how the geometries are combined.</param>
			<param name="transform">A transformation to apply to the combined geometry, or null.</param>
		</member>
		<member name="M:System.Windows.Media.Geometry.Combine(System.Windows.Media.Geometry,System.Windows.Media.Geometry,System.Windows.Media.GeometryCombineMode,System.Windows.Media.Transform,System.Double,System.Windows.Media.ToleranceType)">
			<summary>Combines the two geometries using the specified <see cref="T:System.Windows.Media.GeometryCombineMode"></see> and tolerance factor, and applies the specified transform to the resulting geometry.</summary>
			<returns>The combined geometry.</returns>
			<param name="type">One of the enumeration values, <see cref="F:System.Windows.Media.ToleranceType.Absolute"></see> or <see cref="F:System.Windows.Media.ToleranceType.Relative"></see>, that specifies whether the tolerance factor is an absolute value or relative to the area of this geometry.</param>
			<param name="geometry1">The first geometry to combine.</param>
			<param name="geometry2">The second geometry to combine.</param>
			<param name="mode">One of the enumeration values that specifies how the geometries are combined.</param>
			<param name="transform">A transformation to apply to the combined geometry, or null.</param>
			<param name="tolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution. If tolerance is less than 10-6, 10-6 is used instead.</param>
		</member>
		<member name="M:System.Windows.Media.Geometry.FillContains(System.Windows.Media.Geometry)">
			<summary>Indicates whether this geometry completely contains the specified <see cref="T:System.Windows.Media.Geometry"></see>.</summary>
			<returns>true if this geometry completely contains geometry; otherwise, false.</returns>
			<param name="geometry">The geometry to test for containment.</param>
		</member>
		<member name="M:System.Windows.Media.Geometry.FillContains(System.Windows.Point)">
			<summary>Indicates whether this geometry contains the specified <see cref="T:System.Windows.Point"></see>.</summary>
			<returns>true if this geometry contains hitPoint; otherwise, false.</returns>
			<param name="hitPoint">The point to test for containment.</param>
		</member>
		<member name="M:System.Windows.Media.Geometry.FillContains(System.Windows.Media.Geometry,System.Double,System.Windows.Media.ToleranceType)">
			<summary>Indicates whether this geometry contains the specified <see cref="T:System.Windows.Media.Geometry"></see>, given the specified margin of error.</summary>
			<returns>true if this geometry contains geometry, given the specified margin of error; otherwise, false.</returns>
			<param name="type">One of the enumeration values, <see cref="F:System.Windows.Media.ToleranceType.Absolute"></see> or <see cref="F:System.Windows.Media.ToleranceType.Relative"></see>, that specifies whether the tolerance factor is an absolute value or relative to the area of this geometry.</param>
			<param name="geometry">The geometry to test for containment.</param>
			<param name="tolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution. If tolerance is less than 10-6, 10-6 is used instead.</param>
		</member>
		<member name="M:System.Windows.Media.Geometry.FillContains(System.Windows.Point,System.Double,System.Windows.Media.ToleranceType)">
			<returns>true if this geometry contains hitPoint, given the specified margin of error; otherwise, false.</returns>
			<param name="type">One of the enumeration values, <see cref="F:System.Windows.Media.ToleranceType.Absolute"></see> or <see cref="F:System.Windows.Media.ToleranceType.Relative"></see>, that specifies whether the tolerance factor is an absolute value or relative to the area of this geometry.</param>
			<param name="hitPoint">The point to test for containment.</param>
			<param name="tolerance">The maximum bounds on the distance between points in the polygonal approximation of this geometry. Smaller values produce more accurate results but cause slower execution. If tolerance is less than 10-6, 10-6 is used instead.</param>
		</member>
		<member name="M:System.Windows.Media.Geometry.FillContainsWithDetail(System.Windows.Media.Geometry)">
			<summary>Returns a value that describes the intersection between this geometry and the specified geometry.</summary>
			<returns>One of the enumeration values.</returns>
			<param name="geometry">The geometry to test for containment.</param>
		</member>
		<member name="M:System.Windows.Media.Geometry.FillContainsWithDetail(System.Windows.Media.Geometry,System.Double,System.Windows.Media.ToleranceType)">
			<summary>Returns a value that describes the intersection between this geometry and the specified geometry, given the specified margin of error.</summary>
			<returns>One of the enumeration values.</returns>
			<param name="type">One of the enumeration values, <see cref="F:System.Windows.Media.ToleranceType.Absolute"></see> or <see cref="F:System.Windows.Media.ToleranceType.Relative"></see>, that specifies whether the tolerance factor is an absolute value or relative to the area of this geometry.</param>
			<param name="geometry">The geometry to test for containment.</param>
			<param name="tolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution. If tolerance is less than 10-6, 10-6 is used instead.</param>
		</member>
		<member name="M:System.Windows.Media.Geometry.GetArea">
			<summary> Gets the area of the filled region of this <see cref="T:System.Windows.Media.Geometry"></see> object. </summary>
			<returns>The area of the filled region of this geometry.</returns>
		</member>
		<member name="M:System.Windows.Media.Geometry.GetArea(System.Double,System.Windows.Media.ToleranceType)">
			<summary> Gets the area, within the specified error of tolerance, of the filled region of this <see cref="T:System.Windows.Media.Geometry"></see> object. </summary>
			<returns>The area of the filled region of this geometry.</returns>
			<param name="type">One of the enumeration values, <see cref="F:System.Windows.Media.ToleranceType.Absolute"></see> or <see cref="F:System.Windows.Media.ToleranceType.Relative"></see>, that specifies whether the tolerance factor is an absolute value or relative to the area of this geometry.</param>
			<param name="tolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. If tolerance is less than 10-6, 10-6 is used instead.</param>
		</member>
		<member name="M:System.Windows.Media.Geometry.GetFlattenedPathGeometry">
			<summary> Gets a PathGeometry that is an polygonal approximation of this <see cref="T:System.Windows.Media.Geometry"></see> object. </summary>
			<returns>The polygonal approximation of this <see cref="T:System.Windows.Media.Geometry"></see>.</returns>
		</member>
		<member name="M:System.Windows.Media.Geometry.GetFlattenedPathGeometry(System.Double,System.Windows.Media.ToleranceType)">
			<summary>Gets a PathGeometry, within the specified tolerance that is a polygonal approximation of this <see cref="T:System.Windows.Media.Geometry"></see> object. </summary>
			<returns>The polygonal approximation of this <see cref="T:System.Windows.Media.Geometry"></see>.</returns>
			<param name="type">One of the enumeration values, <see cref="F:System.Windows.Media.ToleranceType.Absolute"></see> or <see cref="F:System.Windows.Media.ToleranceType.Relative"></see>, that specifies whether the tolerance factor is an absolute value or relative to the area of this geometry.</param>
			<param name="tolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. If tolerance is less than 10-6, 10-6 is used instead.</param>
		</member>
		<member name="M:System.Windows.Media.Geometry.GetOutlinedPathGeometry">
			<summary> Gets a PathGeometry that is a simplified outline of the filled region of this <see cref="T:System.Windows.Media.Geometry"></see>. </summary>
			<returns>A simplified outline of the filled region of this <see cref="T:System.Windows.Media.Geometry"></see>.</returns>
		</member>
		<member name="M:System.Windows.Media.Geometry.GetOutlinedPathGeometry(System.Double,System.Windows.Media.ToleranceType)">
			<summary> Gets a PathGeometry, within the specified error of tolerance, that is a simplified outline of the filled region of this <see cref="T:System.Windows.Media.Geometry"></see>. </summary>
			<returns>A simplified outline of the filled region of this <see cref="T:System.Windows.Media.Geometry"></see>.</returns>
			<param name="type">One of the enumeration values, <see cref="F:System.Windows.Media.ToleranceType.Absolute"></see> or <see cref="F:System.Windows.Media.ToleranceType.Relative"></see>, that specifies whether the tolerance factor is an absolute value or relative to the area of this geometry.</param>
			<param name="tolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. If tolerance is less than 10-6, 10-6 is used instead.</param>
		</member>
		<member name="M:System.Windows.Media.Geometry.GetRenderBounds(System.Windows.Media.Pen)">
			<summary>Returns an axis-aligned rectangle that is exactly large enough to contain this geometry after it's been outlined with the specified <see cref="T:System.Windows.Media.Pen"></see>. </summary>
			<returns>An axis aligned rectangle that is exactly large enough to contain this outlined geometry.</returns>
			<param name="pen">An object that describes the area of this geometry's stroke.</param>
		</member>
		<member name="M:System.Windows.Media.Geometry.GetRenderBounds(System.Windows.Media.Pen,System.Double,System.Windows.Media.ToleranceType)">
			<summary>Returns an axis-aligned rectangle that is exactly large enough to contain this geometry after it's been outlined with the specified <see cref="T:System.Windows.Media.Pen"></see>, given the specified tolerance factor.</summary>
			<returns>An axis aligned rectangle that is exactly large enough to contain this outlined geometry.</returns>
			<param name="type">One of the enumeration values, <see cref="F:System.Windows.Media.ToleranceType.Absolute"></see> or <see cref="F:System.Windows.Media.ToleranceType.Relative"></see>, that specifies whether the tolerance factor is an absolute value or relative to the area of this geometry.</param>
			<param name="tolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. If tolerance is less than 10-6, 10-6 is used instead.</param>
			<param name="pen">An object that describes the area of this geometry's stroke.</param>
		</member>
		<member name="M:System.Windows.Media.Geometry.GetWidenedPathGeometry(System.Windows.Media.Pen)">
			<summary> Gets a PathGeometry that is the shape defined by the stroke on this Geometry produced by the specified Pen. </summary>
			<returns>The outlined geometry.</returns>
			<param name="pen">An object that describes the area of this geometry's stroke.</param>
		</member>
		<member name="M:System.Windows.Media.Geometry.GetWidenedPathGeometry(System.Windows.Media.Pen,System.Double,System.Windows.Media.ToleranceType)">
			<summary>Gets a PathGeometry that is the shape defined by the stroke on this Geometry produced by the specified Pen, given the specified tolerance factor.</summary>
			<returns>This geometry, widened by pen.</returns>
			<param name="type">One of the enumeration values, <see cref="F:System.Windows.Media.ToleranceType.Absolute"></see> or <see cref="F:System.Windows.Media.ToleranceType.Relative"></see>, that specifies whether the tolerance factor is an absolute value or relative to the area of this geometry.</param>
			<param name="tolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution. If tolerance is less than 10-6, 10-6 is used instead.</param>
			<param name="pen">The object used to define the area of this geometry's stroke.</param>
		</member>
		<member name="M:System.Windows.Media.Geometry.IsEmpty">
			<summary> Determines whether this object is empty. </summary>
			<returns>true if this geometry is empty; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Media.Geometry.MayHaveCurves">
			<summary> Determines whether this object might have curved segments. </summary>
			<returns>true if this geometry object might have curved segments; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Media.Geometry.StrokeContains(System.Windows.Media.Pen,System.Windows.Point)">
			<summary>Determines whether the specified <see cref="T:System.Windows.Point"></see> is contained in the stroke produced by applying the specified <see cref="T:System.Windows.Media.Pen"></see> to this geometry. </summary>
			<returns>true if hitPoint is contained in the stroke produced by applying the specified <see cref="T:System.Windows.Media.Pen"></see> to this geometry; otherwise, false.</returns>
			<param name="hitPoint">The point to test for containment.</param>
			<param name="pen">An object that determines the area of the geometry's stroke.</param>
		</member>
		<member name="M:System.Windows.Media.Geometry.StrokeContains(System.Windows.Media.Pen,System.Windows.Point,System.Double,System.Windows.Media.ToleranceType)">
			<summary>Determines whether the specified <see cref="T:System.Windows.Point"></see> is contained in the stroke produced by applying the specified <see cref="T:System.Windows.Media.Pen"></see> to this geometry, given the specified margin of error.</summary>
			<returns>true if the stroke created by applying the specified <see cref="T:System.Windows.Media.Pen"></see> to this geometry contains the specified point, given the specified tolerance factor; otherwise, false.</returns>
			<param name="type">One of the enumeration values, <see cref="F:System.Windows.Media.ToleranceType.Absolute"></see> or <see cref="F:System.Windows.Media.ToleranceType.Relative"></see>, that specifies whether the tolerance factor is an absolute value or relative to the area of the geometry's stroke. </param>
			<param name="hitPoint">The point to test for containment.</param>
			<param name="tolerance">The maximum bounds on the distance between points in the polygonal approximation of this geometry. Smaller values produce more accurate results but cause slower execution. If tolerance is less than 10-6, 10-6 is used instead.</param>
			<param name="pen">An object that defines the stroke of a geometry.</param>
		</member>
		<member name="M:System.Windows.Media.Geometry.StrokeContainsWithDetail(System.Windows.Media.Pen,System.Windows.Media.Geometry)">
			<summary>Returns a value that describes the intersection between the specified <see cref="T:System.Windows.Media.Geometry"></see> and the stroke created by applying the specified <see cref="T:System.Windows.Media.Pen"></see> to this geometry.</summary>
			<returns>One of the enumeration values.</returns>
			<param name="geometry">The geometry to test for containment.</param>
			<param name="pen">An object that determines the area of the geometry's stroke.</param>
		</member>
		<member name="M:System.Windows.Media.Geometry.StrokeContainsWithDetail(System.Windows.Media.Pen,System.Windows.Media.Geometry,System.Double,System.Windows.Media.ToleranceType)">
			<summary>Gets a value that describes the intersection between the specified <see cref="T:System.Windows.Media.Geometry"></see> and the stroke created by applying the specified <see cref="T:System.Windows.Media.Pen"></see> to this geometry, given the specified margin of error.</summary>
			<returns>One of the enumeration values.</returns>
			<param name="type">One of the enumeration values, <see cref="F:System.Windows.Media.ToleranceType.Absolute"></see> or <see cref="F:System.Windows.Media.ToleranceType.Relative"></see>, that specifies whether the margin of error is an absolute value or relative to the area of the geometry's stroke.</param>
			<param name="geometry">The geometry to test for containment.</param>
			<param name="tolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution. If tolerance is less than 10-6, 10-6 is used instead.</param>
			<param name="pen">An object that determines the area of the geometry's stroke.</param>
		</member>
		<member name="M:System.Windows.Media.Geometry.ToString">
			<summary> Creates a string representation of this object based on the current culture. </summary>
			<returns>A string representation of this object.</returns>
		</member>
		<member name="M:System.Windows.Media.Geometry.ToString(System.IFormatProvider)">
			<summary> Creates a string representation of this object based on the IFormatProvider passed in. If the provider is null, the CurrentCulture is used. </summary>
			<returns>A string representation of this object.</returns>
		</member>
		<member name="P:System.Windows.Media.Geometry.Bounds">
			<summary> Gets a Rect that specifies the bounding box of a Geometry. This method does not take any pens into account. </summary>
			<returns>The bounding box of the Geometry.</returns>
		</member>
		<member name="P:System.Windows.Media.Geometry.Empty">
			<summary> Gets an empty object. </summary>
			<returns>The empty geometry object.</returns>
		</member>
		<member name="P:System.Windows.Media.Geometry.StandardFlatteningTolerance">
			<summary> Gets the standard error of tolerance used for polygonal approximation. </summary>
			<returns>The standard error of tolerance, 0.25.</returns>
		</member>
		<member name="P:System.Windows.Media.Geometry.Transform">
			<summary> Gets or sets the Transform object applied to a Geometry. </summary>
			<returns>The transformation applied to the Geometry. Note that this value may be a single Transform or a TransformCollection cast as a Transform.</returns>
		</member>
		<member name="T:System.Windows.Media.GeometryCollection">
			<summary> Represents a collection of Geometry objects.  </summary>
		</member>
		<member name="M:System.Windows.Media.GeometryCollection.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.GeometryCollection"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.GeometryCollection.Clone">
			<summary> Returns a modifiable clone of the collection and its contents. </summary>
			<returns>A modifiable clone of the collection and its contents. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.GeometryCollection.Remove(System.Windows.Media.Geometry)">
			<summary> Removes the first occurrence of the specified Geometry  from this GeometryCollection. </summary>
			<returns>true if value was removed from the collection; otherwise, false.</returns>
			<param name="value">The Geometry  to remove from this GeometryCollection.</param>
		</member>
		<member name="M:System.Windows.Media.GeometryCollection.RemoveAt(System.Int32)">
			<summary> Removes the Geometry  at the specified index from this GeometryCollection. </summary>
			<param name="index">The index of the Geometry  to remove.</param>
		</member>
		<member name="P:System.Windows.Media.GeometryCollection.Count">
			<summary> Gets the number of geometries contained in the GeometryCollection.  </summary>
			<returns>The number of geometries contained in the GeometryCollection. </returns>
		</member>
		<member name="T:System.Windows.Media.GeometryCollection.Enumerator">
			<summary> Enumerates items in a <see cref="T:System.Windows.Media.GeometryCollection"></see>. </summary>
		</member>
		<member name="M:System.Windows.Media.GeometryCollection.Enumerator.MoveNext">
			<summary> Advances the enumerator to the next element of the collection. </summary>
			<returns>true if the enumerator was successfully advanced to the next element, false if the enumerator has passed the end of the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.GeometryCollection.Enumerator.System.IDisposable.Dispose">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="T:System.Windows.Media.GeometryCombineMode">
			<summary>Specifies the different methods by which two geometries can be combined.  </summary>
		</member>
		<member name="F:System.Windows.Media.GeometryCombineMode.Exclude">
			<summary>The second region is excluded from the first.  Given two geometries, A and B, the area of geometry B is removed from the area of geometry A, producing a region that is A - B.</summary>
		</member>
		<member name="F:System.Windows.Media.GeometryCombineMode.Intersect">
			<summary>The two regions are combined by taking their intersection.  The New area consists of the overlapping region between the two geometries.  </summary>
		</member>
		<member name="F:System.Windows.Media.GeometryCombineMode.Union">
			<summary>The two regions are combined by taking the union of both.  The resulting geometry is geometry A + geometry B.</summary>
		</member>
		<member name="F:System.Windows.Media.GeometryCombineMode.Xor">
			<summary>The two regions are combined by taking the area that exists in the first region but not the second and the area that exists in the second region but not the first.  The new region consists of (A-B) + (B-A), where A and B are geometries.  </summary>
		</member>
		<member name="T:System.Windows.Media.GeometryConverter">
			<summary> GeometryConverter - Converter class for converting instances of other types to and from Geometry instances </summary>
		</member>
		<member name="M:System.Windows.Media.GeometryConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Returns true if this type converter can convert from a given type. </summary>
			<returns>bool - True if this converter can convert from the provided type, false if not.</returns>
			<param name="context">The ITypeDescriptorContext for this call.</param>
			<param name="sourceType">The Type being queried for support.</param>
		</member>
		<member name="M:System.Windows.Media.GeometryConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Returns true if this type converter can convert to the given type. </summary>
			<returns>bool - True if this converter can convert to the provided type, false if not.</returns>
			<param name="context">The ITypeDescriptorContext for this call.</param>
			<param name="destinationType">The Type being queried for support.</param>
		</member>
		<member name="M:System.Windows.Media.GeometryConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary> Attempts to convert to a Geometry from the given object. </summary>
			<returns>The Geometry which was constructed.</returns>
			<param name="culture">The CultureInfo which is respected when converting.</param>
			<param name="context">The ITypeDescriptorContext for this call.</param>
			<param name="value">The object to convert to an instance of Geometry.</param>
			<exception cref="T:System.NotSupportedException">A NotSupportedException is thrown if the example object is null or is not a valid type which can be converted to a Geometry.</exception>
		</member>
		<member name="M:System.Windows.Media.GeometryConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> ConvertTo - Attempt to convert an instance of Geometry to the given type </summary>
			<returns>The object which was constructoed.</returns>
			<param name="culture">The CultureInfo which is respected when converting.</param>
			<param name="context">The ITypeDescriptorContext for this call.</param>
			<param name="destinationType">The type to which this will convert the Geometry instance.</param>
			<param name="value">The object to convert to an instance of "destinationType".</param>
			<exception cref="T:System.NotSupportedException">An NotSupportedException is thrown if the example object is null or is not a Geometry, or if the destinationType isn't one of the valid destination types.</exception>
		</member>
		<member name="T:System.Windows.Media.GeometryDrawing">
			<summary>Draws a Geometry using the specified Brush and Pen.  </summary>
		</member>
		<member name="M:System.Windows.Media.GeometryDrawing.#ctor">
			<summary> Initializes a new instance of the GeometryDrawing class. </summary>
		</member>
		<member name="M:System.Windows.Media.GeometryDrawing.#ctor(System.Windows.Media.Brush,System.Windows.Media.Pen,System.Windows.Media.Geometry)">
			<summary> Initializes a new instance of the GeometryDrawing class with the specified Brush, Pen, and Geometry. </summary>
			<param name="brush">The brush used to fill this GeometryDrawing.</param>
			<param name="geometry">The geometry </param>
			<param name="pen">The pen used to stroke this GeometryDrawing.</param>
		</member>
		<member name="F:System.Windows.Media.GeometryDrawing.BrushProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.GeometryDrawing.Brush"></see> GTMT#dependency property. </summary>
			<returns>The <see cref="P:System.Windows.Media.GeometryDrawing.Brush"></see> GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.GeometryDrawing.GeometryProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.GeometryDrawing.Geometry"></see> GTMT#dependency property. </summary>
			<returns>The <see cref="P:System.Windows.Media.GeometryDrawing.Geometry"></see> GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.GeometryDrawing.PenProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.GeometryDrawing.Pen"></see> GTMT#dependency property.</summary>
			<returns>The <see cref="P:System.Windows.Media.GeometryDrawing.Pen"></see> GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.GeometryDrawing.CloneCurrentValue">
			<summary>Returns a non-animated version of the geometry drawing. The returned geometry drawing represents the current object's state at the time this method was called.           </summary>
			<returns>A non-animated version of this instance that represents its current value. The returned GeometryDrawing has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="P:System.Windows.Media.GeometryDrawing.Brush">
			<summary> Gets or sets the <see cref="T:System.Windows.Media.Brush"></see> used to fill the interior of the shape described by this <see cref="T:System.Windows.Media.GeometryDrawing"></see>. </summary>
			<returns>The brush used to fill this <see cref="T:System.Windows.Media.GeometryDrawing"></see>. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.GeometryDrawing.Geometry">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.Geometry"></see> that describes the shape of this <see cref="T:System.Windows.Media.GeometryDrawing"></see>. </summary>
			<returns>The shape described by this <see cref="T:System.Windows.Media.GeometryDrawing"></see>. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.GeometryDrawing.Pen">
			<summary> Gets or sets the <see cref="T:System.Windows.Media.Pen"></see> used to stroke this GeometryDrawing. </summary>
			<returns>The pen used to stroke this GeometryDrawing. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.GeometryGroup">
			<summary> Represents a collection of Geometry objects that defines a shape. </summary>
		</member>
		<member name="M:System.Windows.Media.GeometryGroup.#ctor">
			<summary> Initializes a new instance of the GeometryGroup class. </summary>
		</member>
		<member name="M:System.Windows.Media.GeometryGroup.CloneCurrentValue">
			<summary>Returns a non-animated version of the geometry group. The returned geometry group represents the current object's state at the time this method was called.           </summary>
			<returns>A non-animated version of this instance that represents its current value. The returned GeometryGroup has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="M:System.Windows.Media.GeometryGroup.IsEmpty">
			<summary> Determines whether this GeometryGroup object is empty. </summary>
			<returns>true if this GeometryGroup is empty; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Media.GeometryGroup.MayHaveCurves">
			<summary> Determines whether this GeometryGroup object may have curved segments. </summary>
			<returns>true if this GeometryGroup object may have curved segments; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.GeometryGroup.Children">
			<summary> Gets or sets the GeometryCollection that contains the objects that define this GeometryGroup. </summary>
			<returns>A collection containing the children of this GeometryGroup.</returns>
		</member>
		<member name="P:System.Windows.Media.GeometryGroup.FillRule">
			<summary> Gets or sets how the intersecting areas of the objects contained in this GeometryGroup are combined. </summary>
			<returns>Specifies how the intersecting areas are combined to form the resulting area.  The default value is EvenOdd.</returns>
		</member>
		<member name="T:System.Windows.Media.GeometryHitTestParameters">
			<summary>Specifies a <see cref="T:System.Windows.Media.Geometry"></see> as the parameter to be used for hit testing a visual object.</summary>
		</member>
		<member name="M:System.Windows.Media.GeometryHitTestParameters.#ctor(System.Windows.Media.Geometry)">
			<summary>Creates a hit testing parameter that specifies a <see cref="T:System.Windows.Media.Geometry"></see>.</summary>
			<param name="geometry">The parameter that is specified as the <see cref="T:System.Windows.Media.Geometry"></see> value.</param>
		</member>
		<member name="P:System.Windows.Media.GeometryHitTestParameters.HitGeometry">
			<summary>Gets the <see cref="T:System.Windows.Media.Geometry"></see> against which to hit test.</summary>
			<returns>The <see cref="T:System.Windows.Media.Geometry"></see> against which to hit test.</returns>
		</member>
		<member name="T:System.Windows.Media.GeometryHitTestResult">
			<summary>Returns the results of a hit test that uses a <see cref="T:System.Windows.Media.Geometry"></see> as a hit test parameter.</summary>
		</member>
		<member name="M:System.Windows.Media.GeometryHitTestResult.#ctor(System.Windows.Media.Visual,System.Windows.Media.IntersectionDetail)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.GeometryHitTestResult"></see> class by using a specified visual object and <see cref="T:System.Windows.Media.IntersectionDetail"></see> value.</summary>
			<param name="intersectionDetail">Describes the intersection between a <see cref="T:System.Windows.Media.Geometry"></see> and visualHit.</param>
			<param name="visualHit">The visual object that is hit during a hit test.</param>
		</member>
		<member name="P:System.Windows.Media.GeometryHitTestResult.IntersectionDetail">
			<summary>Gets the <see cref="T:System.Windows.Media.IntersectionDetail"></see> value of the hit test.</summary>
			<returns>The <see cref="T:System.Windows.Media.IntersectionDetail"></see> value of the hit test.</returns>
		</member>
		<member name="P:System.Windows.Media.GeometryHitTestResult.VisualHit">
			<summary>Gets the visual object that is returned from a hit test result.</summary>
			<returns>A <see cref="T:System.Windows.Media.Visual"></see> object that represents the hit test result.</returns>
		</member>
		<member name="T:System.Windows.Media.GlyphRun">
			<summary> The GlyphRun object represents a sequence of glyphs from a single face of a single font at a single size, and with a single rendering style. </summary>
		</member>
		<member name="M:System.Windows.Media.GlyphRun.BuildGeometry">
			<summary> Obtains geometry for the glyph run. </summary>
			<returns>The geometry returned contains the combined geometry of all glyphs in the glyph run. Overlapping contours are merged by performing a Boolean union operation.</returns>
		</member>
		<member name="M:System.Windows.Media.GlyphRun.ComputeAlignmentBox">
			<summary> Computes the alignment box for the glyph run. The alignment box is relative to origin. </summary>
			<returns>The alignment box for the glyph run.</returns>
		</member>
		<member name="M:System.Windows.Media.GlyphRun.ComputeInkBoundingBox">
			<summary> Computes ink bounding box for the glyph run. The rectangle is relative to the glyph run origin. </summary>
			<returns>The ink bounding box of the glyph run</returns>
		</member>
		<member name="M:System.Windows.Media.GlyphRun.GetCaretCharacterHitFromDistance(System.Double,System.Boolean@)">
			<summary> Given an offset from the leading edge of the glyph run, computes the caret character hit that contains the offset. The out bool IsInside parameter describes whether the character hit is inside the glyph run. If the hit is outside the glyph run, the character hit represents the closest caret character hit within the glyph run. </summary>
			<returns>The character hit that is closest to the input distance.</returns>
			<param name="distance">Distance to compute character hit for.</param>
			<param name="isInside">isInside is set to true when the character hit is inside the glyph run, and to false otherwise.</param>
		</member>
		<member name="M:System.Windows.Media.GlyphRun.GetDistanceFromCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit)">
			<summary> Given a character hit, computes the offset from the leading edge of the glyph run to the leading or trailing edge of a caret stop containing the character hit. If the glyph run is not hit testable, the distance of 0.0 is returned. </summary>
			<returns>The offset from the leading edge of the glyph run to the leading or trailing edge of a caret stop containing the character hit.</returns>
			<param name="characterHit">Character hit to compute the distance to.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">The input character hit is outside of the range specified by the glyph run Unicode string.</exception>
		</member>
		<member name="M:System.Windows.Media.GlyphRun.GetNextCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit)">
			<summary> Computes the next valid caret character hit in the logical direction. If no further navigation is possible, the returned hit result is the same as input value. </summary>
			<returns>The next valid caret character hit in the logical direction, or the input value if no further navigation is possible.</returns>
			<param name="characterHit">The character hit to compute next hit value for.</param>
		</member>
		<member name="M:System.Windows.Media.GlyphRun.GetPreviousCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit)">
			<summary> Computes the previous valid caret character hit in the logical direction. If no further navigation is possible, the returned hit result is the same as input value. </summary>
			<returns>The previous valid caret character hit in the logical direction, or the input value if no further navigation is possible.</returns>
			<param name="characterHit">The character hit to compute previous hit value for.</param>
		</member>
		<member name="M:System.Windows.Media.GlyphRun.System.ComponentModel.ISupportInitialize.BeginInit">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.GlyphRun.System.ComponentModel.ISupportInitialize.EndInit">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="T:System.Windows.Media.GlyphRunDrawing">
			<summary> Represents a drawing that renders a GlyphRun. </summary>
		</member>
		<member name="M:System.Windows.Media.GlyphRunDrawing.#ctor">
			<summary> Initializes a new instance of the GlyphRunDrawing class. </summary>
		</member>
		<member name="M:System.Windows.Media.GlyphRunDrawing.#ctor(System.Windows.Media.Brush,System.Windows.Media.GlyphRun)">
			<summary> Initializes a new instance of the GlyphRunDrawing class with the specified Brush and GlyphRun. </summary>
			<param name="glyphRun">The GlyphRun to use in this GlyphRunDrawing.</param>
			<param name="foregroundBrush">The foreground of the GlyphRun.</param>
		</member>
		<member name="P:System.Windows.Media.GlyphRunDrawing.ForegroundBrush">
			<summary> Gets or sets the Brush used to fill the foregournd of the GlyphRun. </summary>
			<returns>The brush used to fill the foreground of the GlyphRun.</returns>
		</member>
		<member name="P:System.Windows.Media.GlyphRunDrawing.GlyphRun">
			<summary> Gets or sets the GlyphRun of this GlyphRunDrawing. </summary>
			<returns>The GlyphRun of this GlyphRunDrawing.</returns>
		</member>
		<member name="T:System.Windows.Media.GlyphTypeface">
			<summary> Physical font face corresponds to a font file on the disk </summary>
		</member>
		<member name="M:System.Windows.Media.GlyphTypeface.#ctor">
			<summary>Constructor for <see cref="T:System.Windows.Media.GlyphTypeface"></see></summary>
		</member>
		<member name="M:System.Windows.Media.GlyphTypeface.#ctor(System.Uri)">
			<summary> Creates a new GlyphTypeface object from a .otf, .ttf or .ttc font face specified by typefaceSource. The constructed GlyphTypeface does not use style simulations. </summary>
			<param name="typefaceSource">Specifies the URI of a font file used by the newly created GlyphTypeface.</param>
		</member>
		<member name="M:System.Windows.Media.GlyphTypeface.#ctor(System.Uri,System.Windows.Media.StyleSimulations)">
			<summary> Creates a new GlyphTypeface object from a .otf, .ttf or .ttc font face specified by typefaceSource. The constructed GlyphTypeface uses style simulations specified by styleSimulations parameter. </summary>
			<param name="styleSimulations">Specifies style simulations to be applied to the newly created GlyphTypeface.</param>
			<param name="typefaceSource">Specifies the URI of a font file used by the newly created GlyphTypeface.</param>
		</member>
		<member name="M:System.Windows.Media.GlyphTypeface.ComputeSubset(System.Collections.Generic.ICollection{System.UInt16})">
			<summary>Returns the binary image of the font subset based on the glyphs collection.</summary>
			<returns>The binary image of the font subset.</returns>
			<param name="glyphs">The collection of glyph indices to be included into the subset.</param>
		</member>
		<member name="M:System.Windows.Media.GlyphTypeface.Equals(System.Object)">
			<summary> Compares this GlyphTypeface with another object. </summary>
			<returns>Whether this object is equal to the input object.</returns>
			<param name="o">Object to compare with.</param>
		</member>
		<member name="M:System.Windows.Media.GlyphTypeface.GetGlyphOutline(System.UInt16,System.Double,System.Double)">
			<summary> Returns a geometry describing the path for a single glyph in the font. The path represents the glyph without grid fitting applied for rendering at a specific resolution. </summary>
			<param name="hintingEmSize">Size to hint for in points.</param>
			<param name="glyphIndex">Index of the glyph to get outline for.</param>
			<param name="renderingEmSize">Font size in drawing surface units.</param>
		</member>
		<member name="M:System.Windows.Media.GlyphTypeface.GetHashCode">
			<summary> Return hash code for this GlyphTypeface. </summary>
			<returns>Hash code.</returns>
		</member>
		<member name="M:System.Windows.Media.GlyphTypeface.System.ComponentModel.ISupportInitialize.BeginInit">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.GlyphTypeface.System.ComponentModel.ISupportInitialize.EndInit">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="T:System.Windows.Media.GradientBrush">
			<summary> An abstract class that describes a gradient, composed of gradient stops. Classes that inherit from GradientBrush describe different ways of interpreting gradient stops. </summary>
		</member>
		<member name="M:System.Windows.Media.GradientBrush.#ctor">
			<summary> Protected constructor for GradientBrush </summary>
		</member>
		<member name="M:System.Windows.Media.GradientBrush.#ctor(System.Windows.Media.GradientStopCollection)">
			<summary> Protected constructor for GradientBrush Sets all the values of the GradientStopCollection, all other values are left as default. </summary>
		</member>
		<member name="F:System.Windows.Media.GradientBrush.ColorInterpolationModeProperty">
			<summary> Identifies the ColorInterpolationMode GTMT#dependency property. </summary>
			<returns>The ColorInterpolationMode GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.GradientBrush.GradientStopsProperty">
			<summary> Identifies the GradientStops GTMT#dependency property. </summary>
			<returns>The GradientStops GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.GradientBrush.MappingModeProperty">
			<summary> Identifies the MappingMode GTMT#dependency property. </summary>
			<returns>The MappingMode GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.GradientBrush.SpreadMethodProperty">
			<summary> Identifies the SpreadMethod GTMT#dependency property. </summary>
			<returns>The SpreadMethod GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.GradientBrush.Clone">
			<summary> Returns a modifiable clone of the gradient brush. </summary>
			<returns>A modifiable clone of the gradient brush. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.GradientBrush.CloneCurrentValue">
			<summary> Returns a non-animated version of the gradient brush. The returned gradient brush represents the current object's state at the time this method was called.           </summary>
			<returns>A non-animated version of this instance that represents its current value. The returned GradientBrush has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="P:System.Windows.Media.GradientBrush.ColorInterpolationMode">
			<summary> Gets or sets a ColorInterpolationMode enumeration that specifies how the gradient's colors are interpolated. </summary>
			<returns>Specifies how the colors in a gradient are interpolated. The default value is <see cref="F:System.Windows.Media.ColorInterpolationMode.SRgbLinearInterpolation"></see>. </returns>
		</member>
		<member name="P:System.Windows.Media.GradientBrush.GradientStops">
			<summary> Gets or sets the brush's gradient stops. </summary>
			<returns>A collection of the GradientStop objects associated with the brush, each of which specifies a color and an offset along the brush's gradient axis. The default value is an empty GradientStopCollection. </returns>
		</member>
		<member name="P:System.Windows.Media.GradientBrush.MappingMode">
			<summary> Gets or sets a BrushMappingMode enumeration that specifies whether the gradient brush's positioning coordinates are absolute or relative to the output area. </summary>
			<returns>A BrushMappingMode value that specifies how the gradient brush's positioning coordinates are interpreted. The default value is <see cref="F:System.Windows.Media.BrushMappingMode.RelativeToBoundingBox"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.GradientBrush.SpreadMethod">
			<summary> Gets or sets the type of spread method that specifies how to draw a gradient that starts or ends inside the bounds of the object to be painted. </summary>
			<returns>The type of spread method used to paint the gradient. The default value is <see cref="F:System.Windows.Media.GradientSpreadMethod.Pad"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.GradientSpreadMethod">
			<summary>Specifies how to draw the gradient outside the specified gradient vector or space.  </summary>
		</member>
		<member name="F:System.Windows.Media.GradientSpreadMethod.Pad">
			<summary>Default value. The color values at the ends of the gradient vector fill the remaining space. </summary>
		</member>
		<member name="F:System.Windows.Media.GradientSpreadMethod.Reflect">
			<summary>The gradient is repeated in the reverse direction until the space is filled. </summary>
		</member>
		<member name="F:System.Windows.Media.GradientSpreadMethod.Repeat">
			<summary>The gradient is repeated in the original direction until the space is filled. </summary>
		</member>
		<member name="T:System.Windows.Media.GradientStop">
			<summary> Describes the location and color of a transition point in a gradient. </summary>
		</member>
		<member name="M:System.Windows.Media.GradientStop.#ctor">
			<summary> Initializes a new instance of the GradientStop class. </summary>
		</member>
		<member name="M:System.Windows.Media.GradientStop.#ctor(System.Windows.Media.Color,System.Double)">
			<summary> Initializes a new instance of the GradientStop class with the specified color and offset. </summary>
			<param name="offset">The location in the gradient where the gradient stop is placed.</param>
			<param name="color">The color value of the gradient stop.</param>
		</member>
		<member name="F:System.Windows.Media.GradientStop.ColorProperty">
			<summary> Identifies the Color GTMT#dependency property. </summary>
			<returns>The Color GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.GradientStop.OffsetProperty">
			<summary> Identifies the Offset GTMT#dependency property. </summary>
			<returns>The Offset GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.GradientStop.Clone">
			<summary> Returns a modifiable clone of the gradient stop. </summary>
			<returns>A modifiable clone of the gradient stop. The returned copy is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.GradientStop.CloneCurrentValue">
			<summary> Returns a non-animated version of the gradient stop. The returned gradient stop represents the current object's state at the time this method was called.           </summary>
			<returns>Returns the current value of the gradient stop. The returned GradientStop has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="M:System.Windows.Media.GradientStop.ToString">
			<summary> Creates a string representation of this object based on the current culture. </summary>
			<returns>A string representation of this object.</returns>
		</member>
		<member name="M:System.Windows.Media.GradientStop.ToString(System.IFormatProvider)">
			<summary> Creates a string representation of this object based on the IFormatProvider passed in. If the provider is null, the CurrentCulture is used. </summary>
			<returns>A string representation of this object.</returns>
		</member>
		<member name="P:System.Windows.Media.GradientStop.Color">
			<summary> Gets or sets the color of the gradient stop. </summary>
			<returns>The color of the gradient stop. Default is Transparent.</returns>
		</member>
		<member name="P:System.Windows.Media.GradientStop.Offset">
			<summary> Gets the location of the gradient stop within the gradient vector. </summary>
			<returns>The gradient stop location within the gradient vector.</returns>
		</member>
		<member name="T:System.Windows.Media.GradientStopCollection">
			<summary> Represents a collection of GradientStop objects. </summary>
		</member>
		<member name="M:System.Windows.Media.GradientStopCollection.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.GradientStopCollection"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.GradientStopCollection.Add(System.Windows.Media.GradientStop)">
			<summary> Adds a GradientStop to the gradient stop collection. </summary>
			<param name="value">Item to add to the gradient stop list.</param>
		</member>
		<member name="M:System.Windows.Media.GradientStopCollection.Clone">
			<summary> Returns a modifiable clone of the collection and its contents. </summary>
			<returns>A modifiable clone of the collection and its contents. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.GradientStopCollection.Contains(System.Windows.Media.GradientStop)">
			<summary> Determines whether the collection contains the specified GradientStop. </summary>
			<returns>Indicates whether the collection contains the specified GradientStop.NameValueMeaningtrueThe collection contains the specified GradientStop.falseThe collection does not contain the specified GradientStop.</returns>
			<param name="value">The object to locate in the gradient stop list.</param>
		</member>
		<member name="M:System.Windows.Media.GradientStopCollection.CopyTo(System.Windows.Media.GradientStop[],System.Int32)">
			<summary> Copies the entire GradientStopCollection to a compatible one-dimensional Array, starting at the specified index of the target array. </summary>
			<param name="array">The one-dimensional array that is the destination of the gradient stops copied from the GradientStopCollection. The array must have zero-based indexing.</param>
			<param name="index">The zero-based index in array at which copying begins. </param>
		</member>
		<member name="M:System.Windows.Media.GradientStopCollection.IndexOf(System.Windows.Media.GradientStop)">
			<summary> Returns the zero-based index of the specified GradientStop. </summary>
			<returns>The index if the object was found; otherwise, -1.</returns>
		</member>
		<member name="M:System.Windows.Media.GradientStopCollection.Insert(System.Int32,System.Windows.Media.GradientStop)">
			<summary> Inserts a GradientStop at the specified position in the gradient stop list. </summary>
			<param name="value">The GradientStop to insert.</param>
			<param name="index">The zero-based index at which to insert the object.</param>
		</member>
		<member name="M:System.Windows.Media.GradientStopCollection.Parse(System.String)">
			<summary> Converts a String representation of a GradientStopCollection into the equivalent GradientStopCollection.      </summary>
			<returns>Returns the equivalent GradientStopCollection. </returns>
			<param name="source">The String representation of the GradientStopCollection. </param>
		</member>
		<member name="M:System.Windows.Media.GradientStopCollection.Remove(System.Windows.Media.GradientStop)">
			<summary> Removes the first occurrence of the specified GradientStop  from this GradientStopCollection. </summary>
			<param name="value">The GradientStop  to remove from this GradientStopCollection.</param>
		</member>
		<member name="M:System.Windows.Media.GradientStopCollection.RemoveAt(System.Int32)">
			<summary> Removes the GradientStop  at the specified index from this GradientStopCollection. </summary>
			<param name="index">The index of the GradientStop  to remove.</param>
		</member>
		<member name="M:System.Windows.Media.GradientStopCollection.ToString">
			<summary> Creates a String representation of this GradientStopCollection. </summary>
			<returns>Returns a String containing the values of this GradientStopCollection.</returns>
		</member>
		<member name="M:System.Windows.Media.GradientStopCollection.ToString(System.IFormatProvider)">
			<summary> Creates a String representation of this GradientStopCollection. </summary>
			<returns>Returns a String containing the values of this GradientStopCollection.</returns>
			<param name="provider">Culture-specific formatting information.</param>
		</member>
		<member name="P:System.Windows.Media.GradientStopCollection.Count">
			<summary> Gets the number of items contained in a GradientStopCollection. </summary>
			<returns>The number of items in a GradientStopCollection.</returns>
		</member>
		<member name="P:System.Windows.Media.GradientStopCollection.Item(System.Int32)">
			<summary> Gets or sets the GradientStop at the specified zero-based index. </summary>
			<returns>The GradientStop at the specified index.</returns>
			<param name="index">The zero-based index of the GradientStop to get or set.</param>
		</member>
		<member name="T:System.Windows.Media.GradientStopCollection.Enumerator">
			<summary>Enumerates <see cref="T:System.Windows.Media.GradientStop"></see> objects in a <see cref="T:System.Windows.Media.GradientStopCollection"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.GradientStopCollection.Enumerator.MoveNext">
			<summary> Advances the enumerator to the next element of the collection. </summary>
			<returns>true if the enumerator was successfully advanced to the next element, false if the enumerator has passed the end of the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.GradientStopCollection.Enumerator.System.IDisposable.Dispose">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="F:System.Windows.Media.GuidelineSet.GuidelinesXProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.GuidelineSet.GuidelinesX"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.GuidelineSet.GuidelinesX"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.GuidelineSet.GuidelinesYProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.GuidelineSet.GuidelinesY"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.GuidelineSet.GuidelinesY"></see> GTMT#dependency property.</returns>
		</member>
		<member name="T:System.Windows.Media.HitTestFilterBehavior">
			<summary>Specifies the return behavior of a hit test in a hit test filter callback method.</summary>
		</member>
		<member name="F:System.Windows.Media.HitTestFilterBehavior.Continue">
			<summary>Hit test against the current <see cref="T:System.Windows.Media.Visual"></see> and its descendants. </summary>
		</member>
		<member name="F:System.Windows.Media.HitTestFilterBehavior.ContinueSkipChildren">
			<summary>Hit test against the current <see cref="T:System.Windows.Media.Visual"></see>, but not its descendants. </summary>
		</member>
		<member name="F:System.Windows.Media.HitTestFilterBehavior.ContinueSkipSelf">
			<summary>Do not hit test against the current <see cref="T:System.Windows.Media.Visual"></see>, but hit test against its descendants. </summary>
		</member>
		<member name="F:System.Windows.Media.HitTestFilterBehavior.ContinueSkipSelfAndChildren">
			<summary>Do not hit test against the current <see cref="T:System.Windows.Media.Visual"></see> or its descendants. </summary>
		</member>
		<member name="F:System.Windows.Media.HitTestFilterBehavior.Stop">
			<summary>Stop hit testing at the current <see cref="T:System.Windows.Media.Visual"></see>.</summary>
		</member>
		<member name="T:System.Windows.Media.HitTestFilterCallback">
			<summary>The delegate that is used in hit testing that allows you to ignore parts of the GTMT#visual tree that you are not interested in processing in your hit test results.</summary>
		</member>
		<member name="T:System.Windows.Media.HitTestParameters">
			<summary>An abstract class for defining parameters for a hit test.</summary>
		</member>
		<member name="T:System.Windows.Media.HitTestResult">
			<summary>A base class that represents the <see cref="T:System.Windows.Media.Visual"></see> that is returned from a hit test.</summary>
		</member>
		<member name="P:System.Windows.Media.HitTestResult.VisualHit">
			<summary>Gets the visual object that was hit.</summary>
			<returns>A <see cref="T:System.Windows.DependencyObject"></see> value that represents the visual object that was hit.</returns>
		</member>
		<member name="T:System.Windows.Media.HitTestResultBehavior">
			<summary>Specifies the return behavior of a hit test in a hit test results callback method.</summary>
		</member>
		<member name="F:System.Windows.Media.HitTestResultBehavior.Continue">
			<summary>Continue hit testing against the next visual in the visual tree hierarchy.</summary>
		</member>
		<member name="F:System.Windows.Media.HitTestResultBehavior.Stop">
			<summary>Stop any further hit testing and return.</summary>
		</member>
		<member name="T:System.Windows.Media.HitTestResultCallback">
			<summary>The delegate that is used in hit testing to control the return of hit test information.</summary>
		</member>
		<member name="M:System.Windows.Media.HostVisual.#ctor">
			<summary>Constructor that creates a new <see cref="T:System.Windows.Media.HostVisual"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.HostVisual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
			<summary>Implements <see cref="M:System.Windows.Media.HostVisual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)"></see> to supply base hit testing behavior (returning <see cref="T:System.Windows.Media.GeometryHitTestParameters"></see>).</summary>
			<returns>Returns a value of type <see cref="T:System.Windows.Media.GeometryHitTestResult"></see>. The <see cref="P:System.Windows.Media.GeometryHitTestResult.VisualHit"></see> property contains the visual that was hit.</returns>
			<param name="hitTestParameters">A value of type <see cref="T:System.Windows.Media.GeometryHitTestParameters"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.HostVisual.HitTestCore(System.Windows.Media.PointHitTestParameters)">
			<summary>Implements <see cref="M:System.Windows.Media.HostVisual.HitTestCore(System.Windows.Media.PointHitTestParameters)"></see> to supply base hit testing behavior (returning <see cref="T:System.Windows.Media.PointHitTestParameters"></see>).</summary>
			<returns>Returns a value of type <see cref="T:System.Windows.Media.HitTestResult"></see>. The <see cref="P:System.Windows.Media.HitTestResult.VisualHit"></see> property contains the visual object that was hit.</returns>
			<param name="hitTestParameters">A value of type <see cref="T:System.Windows.Media.PointHitTestParameters"></see>.</param>
		</member>
		<member name="T:System.Windows.Media.ImageBrush">
			<summary>Paints an area with an image. </summary>
		</member>
		<member name="M:System.Windows.Media.ImageBrush.#ctor">
			<summary> Initializes a new instance of the ImageBrush class with no content. </summary>
		</member>
		<member name="M:System.Windows.Media.ImageBrush.#ctor(System.Windows.Media.ImageSource)">
			<summary> Initializes a new instance of the ImageBrush class that paints an area with the specified image. </summary>
			<param name="image">The image to display.</param>
		</member>
		<member name="F:System.Windows.Media.ImageBrush.ImageSourceProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.ImageBrush.ImageSource"></see> GTMT#dependency property. </summary>
			<returns>The <see cref="P:System.Windows.Media.ImageBrush.ImageSource"></see> GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.ImageBrush.Clone">
			<summary>Returns a modifiable clone of the image brush. </summary>
			<returns>A modifiable clone of the image brush. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.ImageBrush.CloneCurrentValue">
			<summary>Returns a non-animated version of the image brush. The returned image brush represents the current object's state at the time this method was called.           </summary>
			<returns>A non-animated copy of this instance that represents its current value. The returned ImageBrush has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="P:System.Windows.Media.ImageBrush.ImageSource">
			<summary>Gets or sets the image displayed by this <see cref="T:System.Windows.Media.ImageBrush"></see>.</summary>
			<returns>The image displayed by this <see cref="T:System.Windows.Media.ImageBrush"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.ImageDrawing">
			<summary> Draws an image within a region defined by a Rect. </summary>
		</member>
		<member name="M:System.Windows.Media.ImageDrawing.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.ImageDrawing"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.ImageDrawing.#ctor(System.Windows.Media.ImageSource,System.Windows.Rect)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.ImageDrawing"></see> class that has the specified target <see cref="P:System.Windows.Media.ImageDrawing.ImageSource"></see> and <see cref="P:System.Windows.Media.ImageDrawing.Rect"></see>. </summary>
			<param name="rect">Defines the rectangular area in which the image is drawn.</param>
			<param name="imageSource">Source of the image that is drawn.</param>
		</member>
		<member name="F:System.Windows.Media.ImageDrawing.ImageSourceProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.ImageDrawing.ImageSource"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.ImageDrawing.ImageSource"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.ImageDrawing.RectProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.ImageDrawing.Rect"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.ImageDrawing.Rect"></see> GTMT#dependency property.</returns>
		</member>
		<member name="P:System.Windows.Media.ImageDrawing.ImageSource">
			<summary> Gets or sets the source of the image </summary>
			<returns>The source of the image. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.ImageDrawing.Rect">
			<summary> Gets or set the region in which the image is drawn. </summary>
			<returns>The region in which the image is drawn. The default is Empty.</returns>
		</member>
		<member name="T:System.Windows.Media.ImageMetadata">
			<summary>Defines a base class for all imaging-related TLA#tla_api#plural that read or write GTMT#metadata.This is an abstract class.</summary>
		</member>
		<member name="M:System.Windows.Media.ImageMetadata.Clone">
			<summary>Creates a modifiable clone (deep copy) of an <see cref="T:System.Windows.Media.ImageMetadata"></see> object.</summary>
			<returns>A modifiable copy of the original instance of <see cref="T:System.Windows.Media.ImageMetadata"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.ImageSource">
			<summary> Interface for Bitmap Sources, included decoders and effects </summary>
		</member>
		<member name="M:System.Windows.Media.ImageSource.ToString">
			<summary> Creates a string representation of this object based on the current culture. </summary>
			<returns>A string representation of this object.</returns>
		</member>
		<member name="M:System.Windows.Media.ImageSource.ToString(System.IFormatProvider)">
			<summary> Creates a string representation of this object based on the IFormatProvider passed in. If the provider is null, the CurrentCulture is used. </summary>
			<returns>A string representation of this object.</returns>
		</member>
		<member name="T:System.Windows.Media.ImageSourceConverter">
			<summary>Converts a <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> to and from other data types. Access this class through the <see cref="T:System.ComponentModel.TypeDescriptor"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.ImageSourceConverter.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.ImageSourceConverter"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.ImageSourceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Returns a value that indicates whether this converter can convert an object of the given type to an instance of <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>. </summary>
			<returns>true if the converter can convert the provided type to an instance of <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>; otherwise, false.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="sourceType">The type of the source that is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Media.ImageSourceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether an instance of <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> can be converted to a different type. </summary>
			<returns>true if the converter can convert this instance of <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>; otherwise, false.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The desired type that that this instance of <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> is being evaluated for conversion to.</param>
		</member>
		<member name="M:System.Windows.Media.ImageSourceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary>Attempts to convert a specified object to an instance of <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>.  </summary>
			<returns>The <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> which was constructed.</returns>
			<param name="culture">Describes the CultureInfo of the type being converted.</param>
			<param name="context">Describes the context information of a type.</param>
			<param name="value">The object being converted.</param>
		</member>
		<member name="M:System.Windows.Media.ImageSourceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary>Attempts to convert an instance of <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> to a specified type.</summary>
			<returns>The object created from the converted instance of <see cref="T:System.Windows.Media.Imaging.BitmapSourc"></see>.</returns>
			<param name="culture">Describes the CultureInfo of the type being converted.</param>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The type this instance of <see cref="T:System.Windows.Media.Imaging.BitmapSourc"></see> is converted to.</param>
			<param name="value">The instance of <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> to convert.</param>
		</member>
		<member name="M:System.Windows.Media.Int32Collection.System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Int32Collection.System.Collections.IList.Insert(System.Int32,System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Int32Collection.System.Collections.IList.Remove(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Int32Collection.Enumerator.System.IDisposable.Dispose">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="T:System.Windows.Media.IntersectionDetail">
			<summary>Provides information about the results of a hit test that uses a <see cref="T:System.Windows.Media.Geometry"></see> as a hit test parameter.</summary>
		</member>
		<member name="F:System.Windows.Media.IntersectionDetail.Empty">
			<summary>The <see cref="T:System.Windows.Media.Geometry"></see> hit test parameter and the target visual, or geometry, do not intersect.</summary>
		</member>
		<member name="F:System.Windows.Media.IntersectionDetail.FullyContains">
			<summary>The <see cref="T:System.Windows.Media.Geometry"></see> hit test parameter is fully contained within the boundary of the target visual or geometry.</summary>
		</member>
		<member name="F:System.Windows.Media.IntersectionDetail.FullyInside">
			<summary>The target visual, or geometry, is fully inside the <see cref="T:System.Windows.Media.Geometry"></see> hit test parameter.</summary>
		</member>
		<member name="F:System.Windows.Media.IntersectionDetail.Intersects">
			<summary>The <see cref="T:System.Windows.Media.Geometry"></see> hit test parameter and the target visual, or geometry, intersect. This means that the two elements overlap, but neither element contains the other.</summary>
		</member>
		<member name="F:System.Windows.Media.IntersectionDetail.NotCalculated">
			<summary>The <see cref="T:System.Windows.Media.IntersectionDetail"></see> value is not calculated.</summary>
		</member>
		<member name="T:System.Windows.Media.LanguageSpecificStringDictionary">
			<summary>Collection of strings indexed by language. May be used to represent an object's name in various languages.</summary>
		</member>
		<member name="M:System.Windows.Media.LanguageSpecificStringDictionary.Add(System.Windows.Markup.XmlLanguage,System.String)">
			<summary>Adds a language and associated string to the collection.</summary>
			<param name="value">A value of type <see cref="T:System.String"></see>.</param>
			<param name="key">A value of type <see cref="T:System.Windows.Markup.XmlLanguage"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.LanguageSpecificStringDictionary.Clear">
			<summary>Removes all languages and strings from the collection.</summary>
		</member>
		<member name="M:System.Windows.Media.LanguageSpecificStringDictionary.ContainsKey(System.Windows.Markup.XmlLanguage)">
			<summary>Determines whether the collection contains the specified language.</summary>
			<returns>true if the collection contains key; otherwise, false.</returns>
			<param name="key">A value of type <see cref="T:System.Windows.Markup.XmlLanguage"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.LanguageSpecificStringDictionary.GetEnumerator">
			<summary>Returns an enumerator that iterates through the collection.</summary>
			<returns>A reference to an enumerator object, which is used to iterate over the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.LanguageSpecificStringDictionary.Remove(System.Collections.Generic.KeyValuePair{System.Windows.Markup.XmlLanguage,System.String})">
			<summary>Removes the element with the specified key/value pair from the collection.</summary>
			<returns>true if the element is successfully removed; otherwise, false. This method also returns false if item was not found in the original collection.</returns>
			<param name="item">The key/value pair of the element to remove.</param>
		</member>
		<member name="M:System.Windows.Media.LanguageSpecificStringDictionary.Remove(System.Windows.Markup.XmlLanguage)">
			<summary>Removes the specified language and associated string.</summary>
			<returns>A value of type <see cref="T:System.Boolean"></see>.</returns>
			<param name="key">A value of type <see cref="T:System.Windows.Markup.XmlLanguage"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.LanguageSpecificStringDictionary.System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.LanguageSpecificStringDictionary.System.Collections.IDictionary.Add(System.Object,System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.LanguageSpecificStringDictionary.System.Collections.IDictionary.Remove(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.LanguageSpecificStringDictionary.TryGetValue(System.Windows.Markup.XmlLanguage,System.String@)">
			<summary>If the dictionary contains an entry for the specified language, returns true and stores the string in the value parameter; otherwise returns false and sets value to null.</summary>
			<returns>A value of type <see cref="T:System.Boolean"></see>.</returns>
			<param name="value">A value of type <see cref="T:System.String"></see>.</param>
			<param name="key">A value of type <see cref="T:System.Windows.Markup.XmlLanguage"></see>.</param>
		</member>
		<member name="P:System.Windows.Media.LanguageSpecificStringDictionary.Count">
			<summary>Gets the number of strings in the colection.</summary>
			<returns>A value of type <see cref="T:System.Int32"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.LanguageSpecificStringDictionary.IsReadOnly">
			<summary>Gets a value indicating whether the collection is read-only.</summary>
			<returns>A value of type <see cref="T:System.Boolean"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.LanguageSpecificStringDictionary.Item(System.Windows.Markup.XmlLanguage)">
			<summary>Gets or sets the string associated with the specified language.</summary>
			<returns>A value of type <see cref="T:System.String"></see>.</returns>
			<param name="key">A value of type <see cref="T:System.Windows.Markup.XmlLanguage"></see>.</param>
		</member>
		<member name="P:System.Windows.Media.LanguageSpecificStringDictionary.Keys">
			<summary>Gets a collection containing the keys (languages) in the dictionary.</summary>
			<returns>A generic collection of <see cref="T:System.Windows.Markup.XmlLanguage"></see> objects.</returns>
		</member>
		<member name="P:System.Windows.Media.LanguageSpecificStringDictionary.Values">
			<summary>Gets a collection containing the values (strings) in the dictionary.</summary>
			<returns>A collection containing the values in the dictionary.</returns>
		</member>
		<member name="T:System.Windows.Media.LinearGradientBrush">
			<summary>Paints an area with a linear gradient. This class cannot be inherited. </summary>
		</member>
		<member name="M:System.Windows.Media.LinearGradientBrush.#ctor">
			<summary>Initializes a new instance of the LinearGradientBrush class. </summary>
		</member>
		<member name="M:System.Windows.Media.LinearGradientBrush.#ctor(System.Windows.Media.GradientStopCollection)">
			<summary>Initializes a new instance of the LinearGradientBrush class that has the specified gradient stops. </summary>
			<param name="gradientStopCollection">The <see cref="T:System.Windows.Media.GradientStopCollection"></see> to set on this brush.</param>
		</member>
		<member name="M:System.Windows.Media.LinearGradientBrush.#ctor(System.Windows.Media.GradientStopCollection,System.Double)">
			<summary>Initializes a new instance of the LinearGradientBrush class that has the specified <see cref="T:System.Windows.Media.GradientStopCollection"></see> and angle. </summary>
			<param name="angle">A <see cref="T:System.Double"></see> that represents the angle, in degrees, of the gradient. A value of 0.0 creates a horizontal gradient, and a value of 90.0 creates a vertical gradient.</param>
			<param name="gradientStopCollection">The <see cref="T:System.Windows.Media.GradientStopCollection"></see> to set on this brush.</param>
		</member>
		<member name="M:System.Windows.Media.LinearGradientBrush.#ctor(System.Windows.Media.Color,System.Windows.Media.Color,System.Double)">
			<summary>Initializes a new instance of the LinearGradientBrush class that has the specified start <see cref="T:System.Windows.Media.Color"></see>, end <see cref="T:System.Windows.Media.Color"></see>, and angle. </summary>
			<param name="startColor">The <see cref="T:System.Windows.Media.Color"></see> at offset 0.0.</param>
			<param name="angle">A <see cref="T:System.Double"></see> that represents the angle, in degrees, of the gradient. A value of 0.0 creates a horizontal gradient, and a value of 90.0 creates a vertical gradient.</param>
			<param name="endColor">The <see cref="T:System.Windows.Media.Color"></see> at offset 1.0.  </param>
		</member>
		<member name="M:System.Windows.Media.LinearGradientBrush.#ctor(System.Windows.Media.GradientStopCollection,System.Windows.Point,System.Windows.Point)">
			<summary>Initializes a new instance of the LinearGradientBrush class that has the specified gradient stops, <see cref="P:System.Windows.Media.LinearGradientBrush.StartPoint"></see>, and <see cref="P:System.Windows.Media.LinearGradientBrush.EndPoint"></see>. </summary>
			<param name="gradientStopCollection">The <see cref="T:System.Windows.Media.GradientStopCollection"></see> to set on this brush.</param>
			<param name="endPoint">The <see cref="P:System.Windows.Media.LinearGradientBrush.EndPoint"></see> of the gradient.</param>
			<param name="startPoint">The <see cref="P:System.Windows.Media.LinearGradientBrush.StartPoint"></see> of the gradient.</param>
		</member>
		<member name="M:System.Windows.Media.LinearGradientBrush.#ctor(System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Point,System.Windows.Point)">
			<summary>Initializes a new instance of the LinearGradientBrush class that has the specified start <see cref="T:System.Windows.Media.Color"></see>, end <see cref="T:System.Windows.Media.Color"></see>, <see cref="P:System.Windows.Media.LinearGradientBrush.StartPoint"></see>, and <see cref="P:System.Windows.Media.LinearGradientBrush.EndPoint"></see>. </summary>
			<param name="startColor">The <see cref="T:System.Windows.Media.Color"></see> at offset 0.0.</param>
			<param name="endColor">The <see cref="T:System.Windows.Media.Color"></see> at offset 1.0. </param>
			<param name="endPoint">The <see cref="P:System.Windows.Media.LinearGradientBrush.EndPoint"></see> of the gradient.</param>
			<param name="startPoint">The <see cref="P:System.Windows.Media.LinearGradientBrush.StartPoint"></see> of the gradient.</param>
		</member>
		<member name="F:System.Windows.Media.LinearGradientBrush.EndPointProperty">
			<summary>Identifies the EndPoint GTMT#dependency property. This field is read-only. </summary>
			<returns>The identifier for the EndPoint GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.LinearGradientBrush.StartPointProperty">
			<summary>Identifies the StartPoint GTMT#dependency property. This field is read-only.</summary>
			<returns>The identifier for the StartPoint GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.LinearGradientBrush.Clone">
			<summary>Returns a modifiable copy of the <see cref="T:System.Windows.Media.LinearGradientBrush"></see>.</summary>
			<returns>A modifiable copy of the linear gradient brush. </returns>
		</member>
		<member name="M:System.Windows.Media.LinearGradientBrush.CloneCurrentValue">
			<summary>Returns a non-animated version of the linear gradient brush. </summary>
			<returns>The current value of the linear gradient brush. </returns>
		</member>
		<member name="P:System.Windows.Media.LinearGradientBrush.EndPoint">
			<summary>Gets or sets the ending two-dimensional coordinates of the linear gradient. </summary>
			<returns>The ending two-dimensional coordinates of the linear gradient. The default is (1,1).  </returns>
		</member>
		<member name="P:System.Windows.Media.LinearGradientBrush.StartPoint">
			<summary>Gets or sets the starting two-dimensional coordinates of the linear gradient. </summary>
			<returns>The starting two-dimensional coordinates for the linear gradient. The default is (0, 0).</returns>
		</member>
		<member name="T:System.Windows.Media.LineGeometry">
			<summary>Represents the geometry of a line. This class cannot be inherited. </summary>
		</member>
		<member name="M:System.Windows.Media.LineGeometry.#ctor">
			<summary>Initializes a new instance of the LineGeometry class that has no length. </summary>
		</member>
		<member name="M:System.Windows.Media.LineGeometry.#ctor(System.Windows.Point,System.Windows.Point)">
			<summary>Initializes a new instance of the LineGeometry class that has the specified start and end points.  </summary>
			<param name="endPoint">The end point. </param>
			<param name="startPoint">The start point. </param>
		</member>
		<member name="M:System.Windows.Media.LineGeometry.#ctor(System.Windows.Point,System.Windows.Point,System.Windows.Media.Transform)">
			<summary>Initializes a new instance of the LineGeometry class. </summary>
			<param name="endPoint">The end point. </param>
			<param name="transform">The transformation to apply to the line.</param>
			<param name="startPoint">The start point. </param>
		</member>
		<member name="F:System.Windows.Media.LineGeometry.EndPointProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.LineGeometry.EndPoint"></see> GTMT#dependency property. This field is read-only.</summary>
			<returns>The identifier for the EndPoint GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.LineGeometry.StartPointProperty">
			<summary>Identifies the StartPoint GTMT#dependency property. This field is read-only.</summary>
			<returns>The identifier for the StartPoint GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.LineGeometry.Clone">
			<summary>Returns a modifiable copy of the geometry. </summary>
			<returns>A modifiable copy of the geometry. </returns>
		</member>
		<member name="M:System.Windows.Media.LineGeometry.CloneCurrentValue">
			<summary>Returns a non-animated version of the line geometry. </summary>
			<returns>Returns the current value of the line geometry. </returns>
		</member>
		<member name="M:System.Windows.Media.LineGeometry.GetArea(System.Double,System.Windows.Media.ToleranceType)">
			<summary>Gets the area of the filled region of this LineGeometry object. </summary>
			<returns>The area of the filled region of this LineGeometry object.</returns>
			<param name="type">The specified type for interpreting the error tolerance.</param>
			<param name="tolerance">The computational tolerance of error.</param>
		</member>
		<member name="M:System.Windows.Media.LineGeometry.IsEmpty">
			<summary>Determines whether this LineGeometry object is empty. </summary>
			<returns>true if this LineGeometry is empty; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Media.LineGeometry.MayHaveCurves">
			<summary>Determines whether this LineGeometry object can have curved segments. </summary>
			<returns>true if this LineGeometry object can have curved segments; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.LineGeometry.Bounds">
			<summary>Gets a Rect that specifies the bounding box of a LineGeometry. </summary>
			<returns>The bounding box of the LineGeometry. </returns>
		</member>
		<member name="P:System.Windows.Media.LineGeometry.EndPoint">
			<summary>Gets or sets the end point of a line. </summary>
			<returns>The end point of the line. The default is (0,0). </returns>
		</member>
		<member name="P:System.Windows.Media.LineGeometry.StartPoint">
			<summary>Gets or sets the start point of the line. </summary>
			<returns>The start point of the line. The default is (0,0).</returns>
		</member>
		<member name="T:System.Windows.Media.LineSegment">
			<summary> Represents a line between two points. Unlike LineGeometry objects, a LineSegment must be contained within a PathFigure. </summary>
		</member>
		<member name="M:System.Windows.Media.LineSegment.#ctor">
			<summary> Initializes a new instance of the LineSegment class. </summary>
		</member>
		<member name="M:System.Windows.Media.LineSegment.#ctor(System.Windows.Point,System.Boolean)">
			<summary> Initializes a new instance of the LineSegment class with the specified end Point and boolean that determines whether this LineSegment will be stroked. </summary>
			<param name="point">The end point of this LineSegment.</param>
			<param name="isStroked">Set to true if this LineSegment should be stroked; otherwise, false.</param>
		</member>
		<member name="F:System.Windows.Media.LineSegment.PointProperty">
			<summary> Identifies the Point GTMT#dependency property. </summary>
			<returns>The Point GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.LineSegment.Clone">
			<summary> Returns a modifiable copy of the segment. </summary>
			<returns>A modifiable copy of the segment. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.LineSegment.CloneCurrentValue">
			<summary> Returns a non-animated version of the line segment. The returned line segment represents the current object's state at the time this method was called.           </summary>
			<returns>Returns the current value of the line segment. The returned LineSegment has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="P:System.Windows.Media.LineSegment.Point">
			<summary> Gets or sets the end point of the line segment. </summary>
			<returns>The end point of the line segment.</returns>
		</member>
		<member name="T:System.Windows.Media.MatrixTransform">
			<summary> Creates an arbitrary GTMT#affine matrix transformation used to manipulate objects or coordinate systems in a two-dimensional plane. </summary>
		</member>
		<member name="M:System.Windows.Media.MatrixTransform.#ctor">
			<summary> Initializes a new instance of the MatrixTransform class. </summary>
		</member>
		<member name="M:System.Windows.Media.MatrixTransform.#ctor(System.Windows.Media.Matrix)">
			<summary> Initializes a new instance of the MatrixTransform class with the specified transformation matrix. </summary>
			<param name="matrix">The transformation matrix of the new MatrixTransform.</param>
		</member>
		<member name="M:System.Windows.Media.MatrixTransform.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
			<summary> Initializes a new instance of the MatrixTransform class with the specified transformation matrix values. </summary>
			<param name="m12">Value at position (1, 2) in the transformation matrix.</param>
			<param name="m11">Value at position (1, 1) in the transformation matrix.</param>
			<param name="m21">Value at position (2, 1) in the transformation matrix.</param>
			<param name="offsetX">The X-axis translation factor of the transformation matrix, located at position (3,1) in the transformation matrix.</param>
			<param name="m22">Value at position (2, 2) in the transformation matrix.</param>
			<param name="offsetY">The Y-axis translation factor of the transformation matrix, located at position (3,2) in the transformation matrix.</param>
		</member>
		<member name="F:System.Windows.Media.MatrixTransform.MatrixProperty">
			<summary> Identifies the Matrix GTMT#dependency property. </summary>
			<returns>The Matrix GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.MatrixTransform.Clone">
			<summary> Returns a modifiable copy of the transform. </summary>
			<returns>A modifiable copy of the transform. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.MatrixTransform.CloneCurrentValue">
			<summary> Returns a non-animated version of the matrix transform. The returned matrix transform represents the current object's state at the time this method was called.           </summary>
			<returns>Returns the current value of the matrix transform. The returned MatrixTransform has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="P:System.Windows.Media.MatrixTransform.Matrix">
			<summary> Gets or sets the Matrix structure that defines this transformation. </summary>
			<returns>The Matrix structure that defines this transformation. The default value is an identity <see cref="T:System.Windows.Media.Matrix"></see>. An identity matrix has a value of 1 in coefficients [1,1], [2,2], [3,3] and a value of 0 in the rest of the coefficients.</returns>
		</member>
		<member name="P:System.Windows.Media.MatrixTransform.Value">
			<summary> Gets the current matrix transformation as a Matrix object. </summary>
			<returns>The current matrix transformation.</returns>
		</member>
		<member name="T:System.Windows.Media.MediaClock">
			<summary>Maintains the timing state for media through a <see cref="T:System.Windows.Media.MediaTimeline"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.MediaClock.#ctor(System.Windows.Media.MediaTimeline)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.MediaClock"></see> class. </summary>
			<param name="media">The timeline to use as a template for the media clock.</param>
		</member>
		<member name="M:System.Windows.Media.MediaClock.DiscontinuousTimeMovement">
			<summary>Invoked when movement is discontinues.</summary>
		</member>
		<member name="M:System.Windows.Media.MediaClock.SpeedChanged">
			<summary>Invoked when the clock speed has changed.</summary>
		</member>
		<member name="M:System.Windows.Media.MediaClock.Stopped">
			<summary>Invoked when the clock is stopped.</summary>
		</member>
		<member name="P:System.Windows.Media.MediaClock.Timeline">
			<summary>Gets the <see cref="T:System.Windows.Media.MediaTimeline"></see> that describes the controlling behavior of the clock. </summary>
			<returns>The <see cref="T:System.Windows.Media.MediaTimeline"></see> that describes the controlling behavior of the clock.</returns>
		</member>
		<member name="T:System.Windows.Media.MediaPlayer">
			<summary>Provides media playback for drawings. </summary>
		</member>
		<member name="M:System.Windows.Media.MediaPlayer.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.MediaPlayer"></see> class.</summary>
		</member>
		<member name="E:System.Windows.Media.MediaPlayer.BufferingEnded">
			<summary>Occurs when buffering has finished.</summary>
		</member>
		<member name="E:System.Windows.Media.MediaPlayer.BufferingStarted">
			<summary>Occurs when buffering has started.</summary>
		</member>
		<member name="E:System.Windows.Media.MediaPlayer.MediaEnded">
			<summary>Occurs when the media has finished playback.</summary>
		</member>
		<member name="E:System.Windows.Media.MediaPlayer.MediaFailed">
			<summary>Occurs when an error is encountered </summary>
		</member>
		<member name="E:System.Windows.Media.MediaPlayer.MediaOpened">
			<summary>Occurs when the media is opened.</summary>
		</member>
		<member name="E:System.Windows.Media.MediaPlayer.ScriptCommand">
			<summary>Occurs when a script command has been encountered within the media.</summary>
		</member>
		<member name="M:System.Windows.Media.MediaPlayer.Open(System.Uri)">
			<summary>Opens the given <see cref="T:System.Uri"></see> for media playback.</summary>
			<param name="source">The media source <see cref="T:System.Uri"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.MediaPlayer.Pause">
			<summary>Pauses media playback.</summary>
		</member>
		<member name="M:System.Windows.Media.MediaPlayer.Play">
			<summary>Plays media from the current <see cref="P:System.Windows.Media.MediaPlayer.Position"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.MediaPlayer.Stop">
			<summary>Stops media playback.</summary>
		</member>
		<member name="P:System.Windows.Media.MediaPlayer.Balance">
			<summary>Gets or sets the balance between the left and right speaker volumes.</summary>
			<returns>The ratio of volume across the left and right speakers in a range between -1 and 1. The default is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.MediaPlayer.BufferingProgress">
			<summary>Gets the percentage of buffering completed for streaming content.</summary>
			<returns>The percentage of buffering completed for streaming content represented in a value between 0 and 1.</returns>
		</member>
		<member name="P:System.Windows.Media.MediaPlayer.CanPause">
			<summary>Gets a value indicating whether the media can be paused.</summary>
			<returns>true if the media can be paused; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.MediaPlayer.Clock">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.MediaClock"></see> associated with the <see cref="T:System.Windows.Media.MediaTimeline"></see> to be played.</summary>
			<returns>The clock associated with the <see cref="T:System.Windows.Media.MediaTimeline"></see> to be played. The default is null.</returns>
		</member>
		<member name="P:System.Windows.Media.MediaPlayer.DownloadProgress">
			<summary>Gets the percentage of download progress for content located at a remote server.</summary>
			<returns>The percentage of download progress for content located at a remote server represented by a value between 0 and 1. The default is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.MediaPlayer.HasAudio">
			<summary>Gets a value that indicating whether the media has audio output.</summary>
			<returns>true if the media has audio output; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.MediaPlayer.HasVideo">
			<summary>Gets a value that indicates whether the media has video output.</summary>
			<returns>true if the media has video output; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.MediaPlayer.IsBuffering">
			<summary>Gets a value that indicates whether the media is buffering.</summary>
			<returns>true if the media is buffering; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.MediaPlayer.IsMuted">
			<summary>Gets a value that indicates whether the media is muted.</summary>
			<returns>true if the media is muted; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.MediaPlayer.NaturalDuration">
			<summary>Gets the natural duration of the media.</summary>
			<returns>The natural duration of the media. The default is <see cref="P:System.Windows.Duration.Automatic"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.MediaPlayer.NaturalVideoHeight">
			<summary>Gets the pixel height of the video. </summary>
			<returns>The pixel height of the video. </returns>
		</member>
		<member name="P:System.Windows.Media.MediaPlayer.NaturalVideoWidth">
			<summary>Gets the pixel width of the video.</summary>
			<returns>The pixel width of the video.</returns>
		</member>
		<member name="P:System.Windows.Media.MediaPlayer.Position">
			<summary>Gets or sets the current position of the media.</summary>
			<returns>The current position of the media.</returns>
		</member>
		<member name="P:System.Windows.Media.MediaPlayer.Source">
			<summary>Gets the media <see cref="T:System.Uri"></see>.</summary>
			<returns>The current media <see cref="T:System.Uri"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.MediaPlayer.SpeedRatio">
			<summary>Gets or sets the ratio of speed that media is played at.</summary>
			<returns>The ratio of speed that media is played back represented by a value between 0 and the largest double value. The default is 1.0.</returns>
		</member>
		<member name="P:System.Windows.Media.MediaPlayer.Volume">
			<summary>Gets or sets the media's volume.</summary>
			<returns>The media's volume represented on a linear scale between 0 and 1. The default is 0.5.</returns>
		</member>
		<member name="T:System.Windows.Media.MediaScriptCommandEventArgs">
			<summary>Provides data for the <see cref="E:System.Windows.Controls.MediaElement.ScriptCommand"></see> and <see cref="E:System.Windows.Media.MediaPlayer.ScriptCommand"></see> events.</summary>
		</member>
		<member name="T:System.Windows.Media.MediaTimeline">
			<summary>Provides a <see cref="T:System.Windows.Media.Animation.Timeline"></see> for media content.</summary>
		</member>
		<member name="M:System.Windows.Media.MediaTimeline.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.MediaTimeline"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.MediaTimeline.#ctor(System.Nullable{System.TimeSpan})">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.MediaTimeline"></see> that begins at the specified time.</summary>
			<param name="beginTime">The time to begin the timeline.</param>
		</member>
		<member name="M:System.Windows.Media.MediaTimeline.#ctor(System.Uri)">
			<summary>Initializes a new instance of a <see cref="T:System.Windows.Media.MediaTimeline"></see> class using the supplied Uri as the media source.</summary>
			<param name="source">The media source for the timeline.</param>
		</member>
		<member name="M:System.Windows.Media.MediaTimeline.#ctor(System.Nullable{System.TimeSpan},System.Windows.Duration)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.MediaTimeline"></see> that begins at the specified time and lasts for the specified duration.</summary>
			<param name="beginTime">The time to begin media playback.</param>
			<param name="duration">The length of time for media playback.</param>
		</member>
		<member name="M:System.Windows.Media.MediaTimeline.#ctor(System.Nullable{System.TimeSpan},System.Windows.Duration,System.Windows.Media.Animation.RepeatBehavior)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.MediaTimeline"></see> class that begins at the specified time over the specified time and has the specified repeat behavior.</summary>
			<param name="repeatBehavior">The repeat behavior to use when the playback duration has been reached.</param>
			<param name="beginTime">The time to begin media playback.</param>
			<param name="duration">The length of time for media playback.</param>
		</member>
		<member name="F:System.Windows.Media.MediaTimeline.SourceProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.MediaTimeline.Source"></see> GTMT#dependency property.</summary>
			<returns>The <see cref="P:System.Windows.Media.MediaTimeline.Source"></see> dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.MediaTimeline.Clone">
			<summary>Creates a modifiable clone (deep copy) of the <see cref="T:System.Windows.Media.MediaTimeline"></see>.</summary>
			<returns>A copy of the timeline.</returns>
		</member>
		<member name="M:System.Windows.Media.MediaTimeline.CloneCurrentValue">
			<returns>A copy of the timeline.</returns>
		</member>
		<member name="M:System.Windows.Media.MediaTimeline.CreateClock">
			<summary>Creates a new <see cref="T:System.Windows.Media.MediaClock"></see> associated with the <see cref="T:System.Windows.Media.MediaTimeline"></see>.</summary>
			<returns>The new <see cref="T:System.Windows.Media.MediaClock"></see>.</returns>
		</member>
		<member name="M:System.Windows.Media.MediaTimeline.ToString">
			<summary>Returns the string that represents the media source.</summary>
			<returns>The string that represents the media source.</returns>
		</member>
		<member name="P:System.Windows.Media.MediaTimeline.Source">
			<summary>Gets or sets the media source associated with the timeline.</summary>
			<returns>The media source associated with the timeline. The default is null. </returns>
		</member>
		<member name="T:System.Windows.Media.NumberCultureSource">
			<summary> Used with the NumberSubstitution class, specifies how the culture for numbers in a text run is determined. </summary>
		</member>
		<member name="F:System.Windows.Media.NumberCultureSource.Override">
			<summary> Number culture is NumberSubstitution.CultureOverride. </summary>
		</member>
		<member name="F:System.Windows.Media.NumberCultureSource.Text">
			<summary> Number culture is TextRunProperties.CultureInfo, i.e., the culture of the text run. In markup, this is the xml:lang attribute. </summary>
		</member>
		<member name="F:System.Windows.Media.NumberCultureSource.User">
			<summary> Number culture is the culture of the current thread, which by default is the user default culture. </summary>
		</member>
		<member name="T:System.Windows.Media.NumberSubstitution">
			<summary> The NumberSubstitution class specifies how numbers in text are to be displayed. </summary>
		</member>
		<member name="M:System.Windows.Media.NumberSubstitution.#ctor">
			<summary> Initializes a NumberSubstitution object with default values. </summary>
		</member>
		<member name="M:System.Windows.Media.NumberSubstitution.#ctor(System.Windows.Media.NumberCultureSource,System.Globalization.CultureInfo,System.Windows.Media.NumberSubstitutionMethod)">
			<summary> Initializes a NumberSubstitution object with explicit values. </summary>
			<param name="source">Specifies how the number culture is determined.</param>
			<param name="cultureOverride">Number culture if NumberCultureSource.Override is specified.</param>
			<param name="substitution">Type of number substitution to perform.</param>
		</member>
		<member name="M:System.Windows.Media.NumberSubstitution.Equals(System.Object)">
			<summary> Checks whether this object is equal to another NumberSubstitution object. </summary>
			<returns>Returns true if the specified object is a NumberSubstitution object with the same properties as this object, and false otherwise.</returns>
			<param name="obj">Object to compare with.</param>
		</member>
		<member name="M:System.Windows.Media.NumberSubstitution.GetCultureOverride(System.Windows.DependencyObject)">
			<summary> Getter for NumberSubstitution DependencyProperty </summary>
			<returns>A value of type <see cref="T:System.Globalization.CultureInfo"></see>.</returns>
			<param name="target">A value of type <see cref="T:System.Windows.DependencyObject"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.NumberSubstitution.GetCultureSource(System.Windows.DependencyObject)">
			<summary> Getter for NumberSubstitution DependencyProperty </summary>
			<returns>A value of type <see cref="T:System.Windows.Media.NumberCultureSource"></see>.</returns>
			<param name="target">A value of type <see cref="T:System.Windows.DependencyObject"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.NumberSubstitution.GetHashCode">
			<summary> Computes hash code for this object. </summary>
			<returns>A 32-bit signed integer hash code.</returns>
		</member>
		<member name="M:System.Windows.Media.NumberSubstitution.GetSubstitution(System.Windows.DependencyObject)">
			<summary> Getter for NumberSubstitution DependencyProperty </summary>
			<returns>A value of type <see cref="T:System.Globalization.CultureInfo"></see>.</returns>
			<param name="target">A value of type <see cref="T:System.Windows.DependencyObject"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.NumberSubstitution.SetCultureOverride(System.Windows.DependencyObject,System.Globalization.CultureInfo)">
			<summary> Setter for NumberSubstitution DependencyProperty </summary>
			<param name="target">A value of type <see cref="T:System.Windows.DependencyObject"></see>.</param>
			<param name="value">A value of type <see cref="T:System.Globalization.CultureInfo"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.NumberSubstitution.SetCultureSource(System.Windows.DependencyObject,System.Windows.Media.NumberCultureSource)">
			<summary> Setter for NumberSubstitution DependencyProperty </summary>
			<param name="target">A value of type <see cref="T:System.Windows.DependencyObject"></see>.</param>
			<param name="value">A value of type <see cref="T:System.Windows.Media.NumberCultureSource"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.NumberSubstitution.SetSubstitution(System.Windows.DependencyObject,System.Windows.Media.NumberSubstitutionMethod)">
			<summary>Setter for NumberSubstitution DependencyProperty</summary>
			<param name="target">A value of type <see cref="T:System.Windows.DependencyObject"></see>.</param>
			<param name="value">A value of type <see cref="T:System.Windows.Media.NumberSubstitutionMethod"></see>.</param>
		</member>
		<member name="T:System.Windows.Media.NumberSubstitutionMethod">
			<summary> Value of the NumberSubstitution.Substitituion property, specifies the type of number substitution to perform, if any. </summary>
		</member>
		<member name="F:System.Windows.Media.NumberSubstitutionMethod.AsCulture">
			<summary> Specifies that the substitution method should be determined based on the number culture's NumberFormat.DigitSubstitution property. This is the default value. </summary>
		</member>
		<member name="F:System.Windows.Media.NumberSubstitutionMethod.Context">
			<summary> If the number culture is an Arabic or Farsi culture, specifies that the digits depend on the context. Either traditional or Latin digits are used depending on the nearest preceding strong character or (if there is none) the text direction of the paragraph. </summary>
		</member>
		<member name="F:System.Windows.Media.NumberSubstitutionMethod.European">
			<summary> Specifies that code points 0x30-0x39 are always rendered as European digits, i.e., no substitution is performed. </summary>
		</member>
		<member name="F:System.Windows.Media.NumberSubstitutionMethod.NativeNational">
			<summary> Specifies that numbers are rendered using the national digits for the number culture, as specified by the culture's NumberFormat property. </summary>
		</member>
		<member name="F:System.Windows.Media.NumberSubstitutionMethod.Traditional">
			<summary> Specifies that numbers are rendered using the traditional digits for the number culture. For most cultures, this is the same as NativeNational. However, NativeNational results in Latin digits for some Arabic cultures, whereas this value results in Arabic digits for all Arabic cultures. </summary>
		</member>
		<member name="T:System.Windows.Media.PathFigure">
			<summary> Represents a subsection of a geometry, a single connected series of two-dimensional geometric segments. </summary>
		</member>
		<member name="M:System.Windows.Media.PathFigure.#ctor">
			<summary> Initializes a new instance of the PathFigure class. </summary>
		</member>
		<member name="F:System.Windows.Media.PathFigure.IsClosedProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.PathFigure.IsClosed"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.PathFigure.IsClosed"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.PathFigure.IsFilledProperty">
			<summary> Identifies the IsFilled GTMT#dependency property. </summary>
			<returns>The IsFilled GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.PathFigure.SegmentsProperty">
			<summary> Identifies the Segments GTMT#dependency property. </summary>
			<returns>The Segments GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.PathFigure.StartPointProperty">
			<summary>The identifier for the <see cref="P:System.Windows.Media.PathFigure.StartPoint"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.PathFigure.StartPoint"></see> GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.PathFigure.Clone">
			<summary> Returns a modifiable copy of the figure. </summary>
			<returns>A modifiable copy of the figure. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.PathFigure.CloneCurrentValue">
			<summary> Returns a non-animated version of the path figure. The returned path figure represents the current object's state at the time this method was called.           </summary>
			<returns>Returns the current value of the path figure. The returned PathFigure has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="M:System.Windows.Media.PathFigure.GetFlattenedPathFigure">
			<summary> Gets a PathFigure object that is an polygonal approximation of this PathFigure object. </summary>
			<returns>The polygonal approximation of this PathFigure object.</returns>
		</member>
		<member name="M:System.Windows.Media.PathFigure.GetFlattenedPathFigure(System.Double,System.Windows.Media.ToleranceType)">
			<summary> Gets a PathFigure object, within the specified error of tolerance, that is an polygonal approximation of this PathFigure object. </summary>
			<returns>The polygonal approximation of this PathFigure object.</returns>
			<param name="type">Specifies how the error of tolerance is interpreted.</param>
			<param name="tolerance">The computational tolerance of error.</param>
		</member>
		<member name="M:System.Windows.Media.PathFigure.MayHaveCurves">
			<summary> Determines whether this PathFigure object may have curved segments. </summary>
			<returns>true if this PathFigure object may have curved segments; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.PathFigure.IsFilled">
			<summary> Gets or sets whether the contained area of this PathFigure is to be used for hit-testing, rendering, and clipping. </summary>
			<returns>Determines whether the contained area of this PathFigure is to be used for hit-testing, rendering, and clipping.  The default value is true.</returns>
		</member>
		<member name="P:System.Windows.Media.PathFigure.Segments">
			<summary> Gets or sets the collection of segments that define the shape of this PathFigure object. </summary>
			<returns>The collection of segments that define the shape of this PathFigure object.</returns>
		</member>
		<member name="P:System.Windows.Media.PathFigure.StartPoint">
			<summary>Gets or sets the <see cref="T:System.Windows.Point"></see> where the <see cref="T:System.Windows.Media.PathFigure"></see> begins.</summary>
			<returns>The <see cref="T:System.Windows.Point"></see> where the <see cref="T:System.Windows.Media.PathFigure"></see> begins. The default value is 0,0.</returns>
		</member>
		<member name="T:System.Windows.Media.PathFigureCollection">
			<summary> A collection of PathFigure objects. </summary>
		</member>
		<member name="M:System.Windows.Media.PathFigureCollection.Add(System.Windows.Media.PathFigure)">
			<summary> Adds a PathFigure to the end of the collection. </summary>
			<param name="value">The PathFigure to add to the collection.</param>
		</member>
		<member name="M:System.Windows.Media.PathFigureCollection.Clone">
			<summary> Returns a modifiable copy of the collection and its contents. </summary>
			<returns>Returns a modifiable copy of the collection and its contents. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.PathFigureCollection.CloneCurrentValue">
			<summary> Returns a non-animated version of the collection. The returned collection represents the current object's state at the time this method was called.           </summary>
			<returns>Returns the current value of the collection. The returned PathFigureCollection has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="M:System.Windows.Media.PathFigureCollection.CopyTo(System.Windows.Media.PathFigure[],System.Int32)">
			<summary> Copies the entire PathFigureCollection to a one-dimensional array of type PathFigure, starting at the specified index of the target array. </summary>
			<param name="array">The array into which the collection's items are to be copied.</param>
			<param name="index">The index of array at which to start copying the contents of the PathFigureCollection.</param>
		</member>
		<member name="M:System.Windows.Media.PathFigureCollection.System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.PathFigureCollection.System.Collections.IList.Insert(System.Int32,System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.PathFigureCollection.System.Collections.IList.Remove(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.PathFigureCollection.Count">
			<summary> Gets the number of path figures contained in the PathFigureCollection.  </summary>
			<returns>The number of path figures contained in the PathFigureCollection. </returns>
		</member>
		<member name="T:System.Windows.Media.PathFigureCollection.Enumerator">
			<summary>Enumerates <see cref="T:System.Windows.Media.PathFigure"></see> objects in a <see cref="T:System.Windows.Media.PathFigureCollection"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.PathFigureCollection.Enumerator.MoveNext">
			<summary> Advances the enumerator to the next element of the collection. </summary>
			<returns>true if the enumerator was successfully advanced to the next element, false if the enumerator has passed the end of the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.PathFigureCollection.Enumerator.System.IDisposable.Dispose">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="T:System.Windows.Media.PathGeometry">
			<summary>Represents a complex shape that may be composed of arcs, curves, ellipses, lines, and rectangles. </summary>
		</member>
		<member name="M:System.Windows.Media.PathGeometry.#ctor">
			<summary> Initializes a new instance of the PathGeometry class. </summary>
		</member>
		<member name="F:System.Windows.Media.PathGeometry.FiguresProperty">
			<summary> Identifies the Figures GTMT#dependency property. </summary>
			<returns>The Figures GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.PathGeometry.FillRuleProperty">
			<summary> Identifies the FillRule GTMT#dependency property. </summary>
			<returns>The FillRule GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.PathGeometry.AddGeometry(System.Windows.Media.Geometry)">
			<summary> Converts the specified Geometry into a collection of PathFigure objects and adds it to the path.   Note: If the specified Geometry is animated, the conversion from Geometry to PathFigure may result in some loss of information. </summary>
			<param name="geometry">The geometry to add to the path.</param>
		</member>
		<member name="M:System.Windows.Media.PathGeometry.Clone">
			<summary> Returns a modifiable copy of the path geometry. </summary>
			<returns>Returns a modifiable copy of the path geometry. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.PathGeometry.CloneCurrentValue">
			<summary> Returns a non-animated version of the path geometry. The returned path geometry represents the current object's state at the time this method was called.           </summary>
			<returns>Returns the current value of the path geometry. The returned PathGeometry has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="M:System.Windows.Media.PathGeometry.GetPointAtFractionLength(System.Double,System.Windows.Point@,System.Windows.Point@)">
			<summary> Gets the Point and a tangent vector on this PathGeometry at the specified fraction of its length. </summary>
			<param name="progress">The fraction of the length of this PathGeometry.</param>
			<param name="point">When this method returns, contains the location on this PathGeometry at the specified fraction of its length. This parameter is passed uninitialized.</param>
			<param name="tangent">When this method returns, contains the tangent vector. This parameter is passed uninitialized. </param>
		</member>
		<member name="M:System.Windows.Media.PathGeometry.IsEmpty">
			<summary> Determines whether this PathGeometry object is empty. </summary>
			<returns>true if this PathGeometry is empty; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Media.PathGeometry.MayHaveCurves">
			<summary> Determines whether this PathGeometry object may have curved segments. </summary>
			<returns>true if this PathGeometry object may have curved segments; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.PathGeometry.Bounds">
			<summary> Gets a Rect that specifies the bounding box of this PathGeometry object.   Note: This method does not take any pens into account.    </summary>
			<returns>The bounding box of this PathGeometry.</returns>
		</member>
		<member name="P:System.Windows.Media.PathGeometry.Figures">
			<summary> Gets or sets the collection of PathFigure objects that describe the path's contents. </summary>
			<returns>A collection of PathFigure objects that describe the path's contents. Each individual PathFigure describes a shape.</returns>
		</member>
		<member name="P:System.Windows.Media.PathGeometry.FillRule">
			<summary> Gets or sets a value that determines how the intersecting areas contained in this PathGeometry are combined. </summary>
			<returns>Indicates how the intersecting areas of this PathGeometry are combined.  The default value is EvenOdd.</returns>
		</member>
		<member name="T:System.Windows.Media.PathSegment">
			<summary>An abstract class that represents a segment of a PathFigure object. Classes that derive from PathSegment, such as ArcSegment, BezierSegment, and LineSegment, represent specific types of geometric segments. </summary>
		</member>
		<member name="F:System.Windows.Media.PathSegment.IsSmoothJoinProperty">
			<summary> Identifies the IsSmoothJoin GTMT#dependency property. </summary>
			<returns>The IsSmoothJoin GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.PathSegment.IsStrokedProperty">
			<summary> Identifies the IsStroked GTMT#dependency property. </summary>
			<returns>The IsStroked GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.PathSegment.Clone">
			<summary> Returns a modifiable copy of the segment. </summary>
			<returns>Returns a modifiable copy of the segment. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.PathSegment.CloneCurrentValue">
			<summary> Returns a non-animated version of the path segment. The returned path segment represents the current object's state at the time this method was called.           </summary>
			<returns>Returns the current value of the path segment. The returned PathSegment has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="P:System.Windows.Media.PathSegment.IsSmoothJoin">
			<summary> Gets or sets a value indicating whether the join between this PathSegment and the previous PathSegment is treated as a corner when stroked with a Pen.  </summary>
			<returns>true if the join between this PathSegment and the previous PathSegment is not to be treated as a corner; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.PathSegment.IsStroked">
			<summary> Gets or sets a Boolean that determines whether the segment is stroked. </summary>
			<returns>Indicates whether the segment is stroked when a Pen is used to render the segment.NameValueMeaningtrueThe segment is stroked when a Pen is used to render the segment.trueThe segment is not stroked.</returns>
		</member>
		<member name="T:System.Windows.Media.PathSegmentCollection">
			<summary>Represents a list of PathSegment objects.</summary>
		</member>
		<member name="M:System.Windows.Media.PathSegmentCollection.Add(System.Windows.Media.PathSegment)">
			<summary>Adds a PathSegment to the end of the collection. </summary>
			<param name="value">The segment to add to the collection.</param>
		</member>
		<member name="M:System.Windows.Media.PathSegmentCollection.Clone">
			<summary> Returns a modifiable copy of the collection and its contents. </summary>
			<returns>Returns a modifiable copy of the collection and its contents. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.PathSegmentCollection.CloneCurrentValue">
			<summary> Returns a non-animated version of the path segment collection. The returned path segment collection represents the current object's state at the time this method was called.           </summary>
			<returns>Returns the current value of the path segment collection. The returned PathSegmentCollection has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="M:System.Windows.Media.PathSegmentCollection.Contains(System.Windows.Media.PathSegment)">
			<summary> Returns a Boolean that indicates whether the specified PathSegment is contained within the collection. </summary>
			<returns>Indicates whether the specified PathSegment is contained within the collection.NameValueMeaningtrueThe specified PathSegment is contained within the collection.falseThe specified PathSegment is not contained within the collection.</returns>
			<param name="value">The PathSegment to search for.</param>
		</member>
		<member name="M:System.Windows.Media.PathSegmentCollection.CopyTo(System.Windows.Media.PathSegment[],System.Int32)">
			<summary> Copies the entire PathSegmentCollection to a one-dimensional PathSegment array, starting at the specified index of the target array. </summary>
			<param name="array">The array into which the collection's items are to be copied.</param>
			<param name="index">The index of array at which to start copying the contents of the PathSegmentCollection.</param>
		</member>
		<member name="M:System.Windows.Media.PathSegmentCollection.System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
			<summary>This member supports the TLA2#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.PathSegmentCollection.System.Collections.IList.Insert(System.Int32,System.Object)">
			<summary>This member supports the TLA2#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.PathSegmentCollection.System.Collections.IList.Remove(System.Object)">
			<summary>This member supports the TLA2#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.PathSegmentCollection.Count">
			<summary> Gets the number of path segments contained in the PathSegmentCollection.  </summary>
			<returns>The number of path segments contained in the PathSegmentCollection. </returns>
		</member>
		<member name="T:System.Windows.Media.PathSegmentCollection.Enumerator">
			<summary>Enumerates <see cref="T:System.Windows.Media.PathSegment"></see> objects in a <see cref="T:System.Windows.Media.PathSegmentCollection"></see>. </summary>
		</member>
		<member name="M:System.Windows.Media.PathSegmentCollection.Enumerator.MoveNext">
			<summary> Advances the enumerator to the next element of the collection. </summary>
			<returns>true if the enumerator was successfully advanced to the next element, false if the enumerator has passed the end of the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.Pen">
			<summary> Describes how a shape is outlined. </summary>
		</member>
		<member name="M:System.Windows.Media.Pen.#ctor">
			<summary> Initializes a new instance of the Pen class. </summary>
		</member>
		<member name="M:System.Windows.Media.Pen.#ctor(System.Windows.Media.Brush,System.Double)">
			<summary> Initializes a new instance of the Pen class with the specified Brush and thickness. </summary>
			<param name="brush">The Brush for this Pen.</param>
			<param name="thickness">The thickness of the Pen.</param>
		</member>
		<member name="F:System.Windows.Media.Pen.BrushProperty">
			<summary> Identifies the Brush GTMT#dependency property. </summary>
			<returns>The Brush GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.Pen.DashCapProperty">
			<summary> Identifies the DashCap GTMT#dependency property. </summary>
			<returns>The DashCap GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.Pen.EndLineCapProperty">
			<summary> Identifies the EndLineCap GTMT#dependency property. </summary>
			<returns>The EndLineCap GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.Pen.LineJoinProperty">
			<summary> Identifies the LineJoin GTMT#dependency property. </summary>
			<returns>The LineJoin GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.Pen.MiterLimitProperty">
			<summary> Identifies the MiterLimit GTMT#dependency property. </summary>
			<returns>The MiterLimit GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.Pen.StartLineCapProperty">
			<summary> Identifies the StartLineCap GTMT#dependency property. </summary>
			<returns>The StartLineCap GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.Pen.ThicknessProperty">
			<summary> Identifies the Thickness GTMT#dependency property. </summary>
			<returns>The Thickness GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.Pen.Clone">
			<summary> Returns a modifiable copy of the pen. </summary>
			<returns>Returns a modifiable copy of the pen. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Pen.CloneCurrentValue">
			<summary> Returns a non-animated version of the pen. The returned pen represents the current object's state at the time this method was called.           </summary>
			<returns>Returns the current value of the pen. The returned Pen has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="P:System.Windows.Media.Pen.Brush">
			<summary> Gets or sets the fill of an outline. </summary>
			<returns>The fill of an outline.</returns>
		</member>
		<member name="P:System.Windows.Media.Pen.DashCap">
			<summary> Gets or sets a value that specifies how the ends of each dash are drawn. </summary>
			<returns>Specifies how the ends of each dash are drawn.  This setting applies to both ends of each dash. The default value is <see cref="F:System.Windows.Media.PenLineCap.Flat"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Pen.EndLineCap">
			<summary> Gets or sets the type of shape to use at the end of a stroke. </summary>
			<returns>The type of shape that ends the stroke. The default value is <see cref="F:System.Windows.Media.PenLineCap.Flat"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Pen.LineJoin">
			<summary> Gets or sets the type of joint used at the vertices of a shape's outline.  </summary>
			<returns>The type of joint used at the vertices of a shape's outline. The default value is <see cref="F:System.Windows.Media.PenLineJoin.Miter"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Pen.MiterLimit">
			<summary> Gets or sets the limit on the ratio of the miter length to half the Pen's Thickness. </summary>
			<returns>This value is always a positive number greater than or equal to 1. </returns>
		</member>
		<member name="P:System.Windows.Media.Pen.StartLineCap">
			<summary> Gets or sets the type of shape to use at the beginning of a stroke. </summary>
			<returns>The type of shape that starts the stroke. The default value is <see cref="F:System.Windows.Media.PenLineCap.Flat"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Pen.Thickness">
			<summary> Gets or sets the width of the stroke. </summary>
			<returns>The width of the stroke. Default is 1.</returns>
		</member>
		<member name="T:System.Windows.Media.PenLineCap">
			<summary>Describes the shape at the end of a line or segment. </summary>
		</member>
		<member name="F:System.Windows.Media.PenLineCap.Flat">
			<summary>A line that is squared off at the last point of the line. Comparable to no line cap.</summary>
		</member>
		<member name="F:System.Windows.Media.PenLineCap.Round">
			<summary>A line capped by a semicircle that has a diameter equal to the line thickness. </summary>
		</member>
		<member name="F:System.Windows.Media.PenLineCap.Square">
			<summary>A line that is capped by a square whose side equals the line thickness. The square is centered on the end point of the line. </summary>
		</member>
		<member name="F:System.Windows.Media.PenLineCap.Triangle">
			<summary>A line that is capped with a triangle. The height of the triangle is equal to the thickness of the line. </summary>
		</member>
		<member name="T:System.Windows.Media.PenLineJoin">
			<summary>Describes the shape that joins two lines or segments. </summary>
		</member>
		<member name="F:System.Windows.Media.PenLineJoin.Bevel">
			<summary>Beveled vertices. </summary>
		</member>
		<member name="F:System.Windows.Media.PenLineJoin.Miter">
			<summary>Regular angular vertices. </summary>
		</member>
		<member name="F:System.Windows.Media.PenLineJoin.Round">
			<summary>Rounded vertices. </summary>
		</member>
		<member name="T:System.Windows.Media.PixelFormat">
			<summary>Defines a pixel format for images and pixel-based surfaces. </summary>
		</member>
		<member name="M:System.Windows.Media.PixelFormat.Equals(System.Object)">
			<summary> Determines whether the specified object is equal to the current object. </summary>
			<param name="obj">The Object to compare with the current Object.</param>
		</member>
		<member name="M:System.Windows.Media.PixelFormat.Equals(System.Windows.Media.PixelFormat,System.Windows.Media.PixelFormat)">
			<summary> Determines whether the specified <see cref="T:System.Windows.Media.PixelFormat"></see> instances are considered equal.</summary>
			<param name="right">The second <see cref="T:System.Windows.Media.PixelFormat"></see> object to compare for equality.</param>
			<param name="left">The first <see cref="T:System.Windows.Media.PixelFormat"></see> objects to compare for equality.</param>
		</member>
		<member name="M:System.Windows.Media.PixelFormat.op_Equality(System.Windows.Media.PixelFormat,System.Windows.Media.PixelFormat)">
			<summary> Compares two <see cref="T:System.Windows.Media.PixelFormat"></see> instances for equality. </summary>
			<returns>true if the two <see cref="T:System.Windows.Media.PixelFormat"></see> objects are equal; otherwise, false.</returns>
			<param name="right">The second <see cref="T:System.Windows.Media.PixelFormat"></see> to compare.</param>
			<param name="left">The first <see cref="T:System.Windows.Media.PixelFormat"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.Media.PixelFormat.op_Inequality(System.Windows.Media.PixelFormat,System.Windows.Media.PixelFormat)">
			<summary> Compares two <see cref="T:System.Windows.Media.PixelFormat"></see> instances for inequality.</summary>
			<returns>true if the <see cref="T:System.Windows.Media.PixelFormat"></see> objects are not equal; false if they are equal.</returns>
			<param name="right">The second <see cref="T:System.Windows.Media.PixelFormat"></see> to compare.</param>
			<param name="left">The first <see cref="T:System.Windows.Media.PixelFormat"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.Media.PixelFormat.ToString">
			<summary> Creates a String representation of this <see cref="T:System.Windows.Media.PixelFormat"></see>.</summary>
			<returns>A String containing a representation of the <see cref="T:System.Windows.Media.PixelFormat"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormat.BitsPerPixel">
			<summary> Gets the number of bits-per-pixel (bpp) for this <see cref="T:System.Windows.Media.PixelFormat"></see>. </summary>
			<returns>The number of bits-per-pixel (bpp) for this <see cref="T:System.Windows.Media.PixelFormat"></see>.  </returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormat.Masks">
			<summary>Gets a collection of bit masks associated with the <see cref="T:System.Windows.Media.PixelFormat"></see>.</summary>
			<returns>The collection of bit masks and shifts associated with the <see cref="T:System.Windows.Media.PixelFormat"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.PixelFormatChannelMask">
			<summary> Describes the bit mask and shift for a specific pixelformat </summary>
		</member>
		<member name="T:System.Windows.Media.PixelFormatConverter">
			<summary> PixelFormatConverter </summary>
		</member>
		<member name="M:System.Windows.Media.PixelFormatConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> TypeConverter method override. </summary>
			<returns>true if conversion is possible</returns>
			<param name="context">ITypeDescriptorContext</param>
			<param name="destinationType">Type to convert to</param>
		</member>
		<member name="M:System.Windows.Media.PixelFormatConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> TypeConverter method implementation. </summary>
			<returns>converted value</returns>
			<param name="culture">current culture (see CLR specs)</param>
			<param name="context">ITypeDescriptorContext</param>
			<param name="destinationType">Type to convert to</param>
			<param name="value">value to convert from</param>
		</member>
		<member name="T:System.Windows.Media.PixelFormats">
			<summary>Represents the collection of supported pixel formats. </summary>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Bgr101010">
			<summary>Gets the pixel format specifying an sRGB format with 32 bits per pixel (BPP). </summary>
			<returns>The pixel format specifying an SRGB format with 32 bits per pixel.</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Bgr24">
			<summary>Gets the pixel format of BGR24 which is a sRGB format with 24 bits per pixel (BPP). Each color channel (blue, green, and red) is allocated 8  BPP. </summary>
			<returns>The BGR24 pixel format.</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Bgr32">
			<summary>Gets the pixel format specifying an SRGB format with 32 bits per pixel (BPP).</summary>
			<returns>The pixel format specifying an SRGB format with 32 bits per pixel (BPP).</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Bgr555">
			<summary>Gets the pixel format specifying an sRGB format with 16 bits per pixel. </summary>
			<returns>The pixel format specifying an SRGB format with 16 bits per pixel. </returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Bgr565">
			<summary>Gets the pixel format specifying an sRGB format with 16 bits per pixel (BPP). </summary>
			<returns>The pixel format specifying an SRGB format with 16 bits per pixel. </returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Bgra32">
			<summary>Gets the pixel format specifying an extended sRGB format with 32 bits per pixel (BPP). Each channel (blue, green, red, and alpha) is allocated 8 BPP.</summary>
			<returns>The pixel format specifying an extended sRGB format with 32 bits per pixel (BPP). Each channel (blue, green, red, and alpha) is allocated 8 BPP.</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.BlackWhite">
			<summary>Gets the pixel format of Black-and-White which displays one bit of data per pixel as either black or white. </summary>
			<returns>The pixel format Black-and-White. </returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Cmyk32">
			<summary>Gets the pixel format CMYK32 (Cyan-Magenta-Yellow-Black) which displays 32 bits per pixel (BPP). Each color channel (cyan, magenta, yellow, and black) is allocated 8 BPP. </summary>
			<returns>The CMYK32 pixel format.</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Default">
			<summary>Gets the default pixel format. </summary>
			<returns>The default pixel format.</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Gray16">
			<summary>Gets the Gray16 pixel format which displays a 16 bits-per-pixel grayscale channel, allowing 65536 shades of gray. This format has a gamma of 1.0. </summary>
			<returns>The Gray16 pixel format.</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Gray2">
			<summary>Gets the Gray2 pixel format which displays a 2 bits-per-pixel grayscale channel, allowing 4 shades of gray.</summary>
			<returns>The Gray2 pixel format.</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Gray32Float">
			<summary>Gets the Gray32Float pixel format which displays a 32 bits-per-pixel grayscale channel, allowing over 4 billion shades of gray. This format has a gamma of 1.0.</summary>
			<returns>The Gray32Float pixel format.</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Gray4">
			<summary>Gets the Gray4 pixel format which displays a 4 bits-per-pixel grayscale channel, allowing 16 shades of gray. </summary>
			<returns>The Gray4 pixel format.</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Gray8">
			<summary>Gets the Gray8 pixel format which displays an 8 bits-per-pixel grayscale channel, allowing 256 shades of gray. </summary>
			<returns>The Gray8 pixel format.</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Indexed1">
			<summary>Gets the pixel format specifying a paletted GTMT#bitmap with 2 colors. </summary>
			<returns>The pixel format which specifying a paletted GTMT#bitmap with 2 colors.</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Indexed2">
			<summary>Gets the pixel format specifying a paletted GTMT#bitmap with 4 colors. </summary>
			<returns>The pixel format which specifying a paletted GTMT#bitmap with 4 colors.</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Indexed4">
			<summary>Gets the pixel format specifying a paletted GTMT#bitmap with 16 colors. </summary>
			<returns>The pixel format which specifying a paletted GTMT#bitmap with 16 colors.</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Indexed8">
			<summary>Gets the pixel format specifying a paletted GTMT#bitmap with 256 colors. </summary>
			<returns>The pixel format which specifying a paletted GTMT#bitmap with 256 colors.</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Pbgra32">
			<summary>Gets the pixel format specifying an extended sRGB format with 32 bits per pixel (BPP). Each channel (blue, green, red, and alpha) is allocated 8 BPP. These channels are premultiplied by alpha. </summary>
			<returns>The pixel format specifying an extended sRGB format with 32 bits per pixel (BPP). Each channel (blue, green, red, and alpha) is allocated 8 BPP. These channels are premultiplied by alpha.</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Prgba128Float">
			<summary>Gets the pixel format specifying an extended ScRGB format with 128 bits per pixel (BPP). Each channel (red, green, blue, and alpha) is allocated 32 BPP. These channels are premultiplied by alpha. This format has a gamma of 1.0.</summary>
			<returns>The pixel format specifying an extended ScRGB format with 128 bits per pixel (BPP). Each channel (blue, green, red, and alpha) is allocated 32 BPP. These channels are premultiplied by alpha. This format has a gamma of 1.0.</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Prgba64">
			<summary>Gets the pixel format specifying an extended sRGB format with 64 bits per pixel (BPP). Each channel (blue, green, red, and alpha) is allocated 16 BPP. These channels are premultiplied by alpha. This format has a gamma of 1.0.</summary>
			<returns>The pixel format specifying an extended sRGB format with 64 bits per pixel (BPP). Each channel (blue, green, red, and alpha) is allocated 16 BPP. These channels are premultiplied by alpha. This format has a gamma of 1.0.</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Rgb128Float">
			<summary>Gets the pixel format specifying an extended ScRGB format with 128 bits per pixel (BPP). This format has a gamma of 1.0.</summary>
			<returns>The pixel format specifying an extended ScRGB format with 128 bits per pixel (BPP). This format has a gamma of 1.0.</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Rgb24">
			<summary>Gets the pixel format of RGB24 which is a sRGB format with 24 bits per pixel (BPP). Each color channel (red, green, and blue) is allocated 8 BPP. </summary>
			<returns>The pixel format of RGB24 which is a sRGB format with 24 bits per pixel (BPP). Each color channel (red, green, and blue) is allocated 8 BPP.</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Rgb48">
			<summary>Gets the pixel format specifying an sRGB format with 48 bits per pixel (BPP). Each color channel (red, green, and blue) is allocated 16 BPP. This format has a gamma of 1.0.</summary>
			<returns>The pixel format specifying an sRGB format with 48 bits per pixel. Each color channel (red, green, and blue) is allocated 16 BPP.</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Rgba128Float">
			<summary>Gets the pixel format specifying an extended ScRGB format with 128 bits per pixel (BPP). This format has a gamma of 1.0.</summary>
			<returns>The pixel format specifying an extended ScRGB format with 128 bits per pixel (BPP). This format has a gamma of 1.0.</returns>
		</member>
		<member name="P:System.Windows.Media.PixelFormats.Rgba64">
			<summary>Gets the pixel format specifying an extended sRGB format with 64 bits per pixel (BPP). Each channel (red, green, blue, and alpha) is allocated 16 BPP. This format has a gamma of 1.0.</summary>
			<returns>The pixel format specifying an extended sRGB format with 64 bits per pixel (BPP). Each channel (red, green, blue, and alpha) is allocated 16 BPP. This format has a gamma of 1.0.</returns>
		</member>
		<member name="T:System.Windows.Media.PointCollection">
			<summary> Represents an ordered collection of Point structures. </summary>
		</member>
		<member name="M:System.Windows.Media.PointCollection.#ctor">
			<summary> Initializes a new instance of a PointCollection. </summary>
		</member>
		<member name="M:System.Windows.Media.PointCollection.Add(System.Windows.Point)">
			<summary> Adds a Point structure to the end of this PointCollection. </summary>
			<param name="value">The Point structure to add to this PointCollection.</param>
		</member>
		<member name="M:System.Windows.Media.PointCollection.Clone">
			<summary> Returns a modifiable copy of the collection and its contents. </summary>
			<returns>Returns a modifiable copy of the collection and its contents. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.PointCollection.Contains(System.Windows.Point)">
			<summary> Determines whether a Point structure is in this PointCollection. </summary>
			<returns>true if value, the specified Point structure, is in this PointCollection; otherwise, false.</returns>
			<param name="value">The Point structure to locate in this PointCollection.</param>
		</member>
		<member name="M:System.Windows.Media.PointCollection.CopyTo(System.Windows.Point[],System.Int32)">
			<summary> Copies the items of this PointCollection, starting the specified index, into an array of Points. </summary>
			<param name="array">The array that is the destination of the items copied from this PointCollection.</param>
			<param name="index">The index at which to being copying.</param>
		</member>
		<member name="M:System.Windows.Media.PointCollection.IndexOf(System.Windows.Point)">
			<summary> Gets the index of the first occurrence of the specified Point structure. </summary>
			<returns>The index of the specified Point structure.</returns>
			<param name="value">The Point structure to search for.</param>
		</member>
		<member name="M:System.Windows.Media.PointCollection.Insert(System.Int32,System.Windows.Point)">
			<summary> Inserts a Point structure into this PointCollection at the specified index. </summary>
			<param name="value">The Point structure to insert.</param>
			<param name="index">The index at which to insert value, the specified Point structure.</param>
		</member>
		<member name="M:System.Windows.Media.PointCollection.Parse(System.String)">
			<summary> Converts a String representation of a collection of points into an equivalent PointCollection.      </summary>
			<returns>Returns the equivalent PointCollection. </returns>
			<param name="source">The String representation of the collection of points. </param>
		</member>
		<member name="M:System.Windows.Media.PointCollection.Remove(System.Windows.Point)">
			<summary> Removes the first occurrence of the specified Point structure from this PointCollection. </summary>
			<param name="value">The Point structure to remove from this PointCollection.</param>
		</member>
		<member name="M:System.Windows.Media.PointCollection.RemoveAt(System.Int32)">
			<summary> Removes the Point structure at the specified index from this PointCollection. </summary>
			<param name="index">The index of the Point structure to remove.</param>
		</member>
		<member name="M:System.Windows.Media.PointCollection.ToString">
			<summary> Creates a String representation of this PointCollection. </summary>
			<returns>Returns a String containing the X and Y values of the Point structures in this PointCollection.</returns>
		</member>
		<member name="M:System.Windows.Media.PointCollection.ToString(System.IFormatProvider)">
			<summary> Creates a String representation of this PointCollection. </summary>
			<returns>Returns a String containing the X and Y values of the Point structures in this PointCollection.</returns>
			<param name="provider">Culture-specific formatting information.</param>
		</member>
		<member name="P:System.Windows.Media.PointCollection.Count">
			<summary> Gets the number of Point structures contained in a PointCollection.  </summary>
			<returns>The number of Point structures contained in a PointCollection. </returns>
		</member>
		<member name="P:System.Windows.Media.PointCollection.Item(System.Int32)">
			<summary> Gets or sets the Point at the specified zero-based index. </summary>
			<returns>The Point at the specified index.</returns>
			<param name="index">The zero-based index of the Point to get or set.</param>
		</member>
		<member name="T:System.Windows.Media.PointCollection.Enumerator">
			<summary>Enumerates items in a <see cref="T:System.Windows.Media.PointCollection.Enumerator"></see>. </summary>
		</member>
		<member name="M:System.Windows.Media.PointCollection.Enumerator.MoveNext">
			<summary> Advances the enumerator to the next element of the collection. </summary>
			<returns>true if the enumerator was successfully advanced to the next element, false if the enumerator has passed the end of the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.PointCollectionConverter">
			<summary>Converts instances of other types to and from a PointCollection. </summary>
		</member>
		<member name="M:System.Windows.Media.PointCollectionConverter.#ctor">
			<summary>Initializes a new instance of PointCollectionConverter. </summary>
		</member>
		<member name="M:System.Windows.Media.PointCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether an object can be converted from a given type to an instance of a PointCollection.  </summary>
			<returns>true if the type can be converted to a PointCollection; otherwise, false.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="sourceType">The Type being queried for support.</param>
		</member>
		<member name="M:System.Windows.Media.PointCollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether an instance of a PointCollection can be converted to a different type. </summary>
			<returns>true if this PointCollection can be converted to destinationType; otherwise, false.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The desired type this PointCollection is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Media.PointCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary>Attempts to convert the specified object to a PointCollection. </summary>
			<returns>The PointCollection created from converting value.</returns>
			<param name="culture">Describes the CultureInfo of the type being converted.</param>
			<param name="context">Describes the context information of a type.</param>
			<param name="value">The object being converted.</param>
			<exception cref="T:System.NotSupportedException">Thrown if the specified object is NULL or is a type that cannot be converted to a PointCollection.</exception>
		</member>
		<member name="M:System.Windows.Media.PointCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary>Attempts to convert a PointCollection to a specified type. </summary>
			<returns>The object created from converting this PointCollection.</returns>
			<param name="culture">Describes the CultureInfo of the type being converted.</param>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The type to convert this PointCollection to.</param>
			<param name="value">The PointCollection to convert.</param>
			<exception cref="T:System.NotSupportedException">Thrown if value is NULL or is not a PointCollection, or if the destinationType is not one of the valid types for conversion.</exception>
		</member>
		<member name="T:System.Windows.Media.PointHitTestParameters">
			<summary>Specifies a <see cref="T:System.Windows.Point"></see> as the parameter to be used for hit testing of a visual object.</summary>
		</member>
		<member name="M:System.Windows.Media.PointHitTestParameters.#ctor(System.Windows.Point)">
			<summary>Creates a hit testing parameter that specifies a <see cref="T:System.Windows.Point"></see>.</summary>
			<param name="point">The parameter that is specified as the <see cref="T:System.Windows.Point"></see> value.</param>
		</member>
		<member name="P:System.Windows.Media.PointHitTestParameters.HitPoint">
			<summary>Gets the <see cref="T:System.Windows.Point"></see> against which to hit test. </summary>
			<returns>The <see cref="T:System.Windows.Point"></see> against which to hit test.</returns>
		</member>
		<member name="T:System.Windows.Media.PointHitTestResult">
			<summary>Returns the results of a hit test that uses a <see cref="T:System.Windows.Point"></see> as a hit test parameter.</summary>
		</member>
		<member name="M:System.Windows.Media.PointHitTestResult.#ctor(System.Windows.Media.Visual,System.Windows.Point)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.PointHitTestResult"></see> class.</summary>
			<param name="pointHit">The <see cref="T:System.Windows.Point"></see> object that represents the hit test result.</param>
			<param name="visualHit">The <see cref="T:System.Windows.Media.Visual"></see> object that represents the hit test result.</param>
		</member>
		<member name="P:System.Windows.Media.PointHitTestResult.PointHit">
			<summary>Gets the point value that is returned from a hit test result.</summary>
			<returns>A <see cref="T:System.Windows.Point"></see> object that represents the hit test result.</returns>
		</member>
		<member name="P:System.Windows.Media.PointHitTestResult.VisualHit">
			<summary>Gets the visual object that is returned from a hit test result.</summary>
			<returns>A <see cref="T:System.Windows.Media.Visual"></see> object that represents the hit test result.</returns>
		</member>
		<member name="T:System.Windows.Media.PolyBezierSegment">
			<summary> Represents a set of Bezier operations. </summary>
		</member>
		<member name="M:System.Windows.Media.PolyBezierSegment.#ctor">
			<summary> Initializes a new instance of the PolyBezierSegment class. </summary>
		</member>
		<member name="F:System.Windows.Media.PolyBezierSegment.PointsProperty">
			<summary> Identifies the Points GTMT#dependency property. </summary>
			<returns>The Points GTMT#dependency property identifier.</returns>
		</member>
		<member name="P:System.Windows.Media.PolyBezierSegment.Points">
			<summary> Gets or sets the PointCollection that define this PolyBezierSegment object. </summary>
			<returns>Collection that define this PolyBezierSegment object.</returns>
		</member>
		<member name="T:System.Windows.Media.PolyLineSegment">
			<summary> Represents a set of line segments defined by a PointCollection with each Point specifying the end point of each LineTo operation. </summary>
		</member>
		<member name="M:System.Windows.Media.PolyLineSegment.#ctor">
			<summary> Initializes a new instance of the PolyLineSegment class. </summary>
		</member>
		<member name="F:System.Windows.Media.PolyLineSegment.PointsProperty">
			<summary> Identifies the Points GTMT#dependency property. </summary>
			<returns>The Points GTMT#dependency property identifier.</returns>
		</member>
		<member name="P:System.Windows.Media.PolyLineSegment.Points">
			<summary> Gets or sets the PointCollection that defines this PolyLineSegment object. </summary>
			<returns>Defines the shape of this PolyLineSegment object.</returns>
		</member>
		<member name="T:System.Windows.Media.PolyQuadraticBezierSegment">
			<summary> Represents a set of QuadraticBezier operations. </summary>
		</member>
		<member name="M:System.Windows.Media.PolyQuadraticBezierSegment.#ctor">
			<summary> Initializes a new instance of the PolyQuadraticBezierSegment class. </summary>
		</member>
		<member name="F:System.Windows.Media.PolyQuadraticBezierSegment.PointsProperty">
			<summary> Identifies the Points GTMT#dependency property. </summary>
			<returns>The Points GTMT#dependency property identifier.</returns>
		</member>
		<member name="P:System.Windows.Media.PolyQuadraticBezierSegment.Points">
			<summary> Gets or sets the PointCollection that define this PolyQuadraticBezierSegment object. </summary>
			<returns>Defines the shape of this PolyQuadraticBezierSegment object.</returns>
		</member>
		<member name="T:System.Windows.Media.QuadraticBezierSegment">
			<summary> Represents a quadratic Bezier curve drawn between two points. </summary>
		</member>
		<member name="M:System.Windows.Media.QuadraticBezierSegment.#ctor">
			<summary> Initializes a new instance of the QuadraticBezierSegment class. </summary>
		</member>
		<member name="M:System.Windows.Media.QuadraticBezierSegment.#ctor(System.Windows.Point,System.Windows.Point,System.Boolean)">
			<summary> Initializes a new instance of the QuadraticBezierSegment class with the specified control point, end point, and boolean indicating whether to stroke this QuadraticBezierSegment.  </summary>
			<param name="point2">The end point of this QuadraticBezierSegment.</param>
			<param name="point1">The control point of this QuadraticBezierSegment.</param>
			<param name="isStroked">true if this QuadraticBezierSegment is to be stroked; otherwise, false.</param>
		</member>
		<member name="F:System.Windows.Media.QuadraticBezierSegment.Point1Property">
			<summary> Identifies the Point1 GTMT#dependency property. </summary>
			<returns>The Point1 GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.QuadraticBezierSegment.Point2Property">
			<summary> Identifies the Point2 GTMT#dependency property. </summary>
			<returns>The Point2 GTMT#dependency property identifier.</returns>
		</member>
		<member name="P:System.Windows.Media.QuadraticBezierSegment.Point1">
			<summary> Gets or sets the control Point of the curve. </summary>
			<returns>The control point of this QuadraticBezierSegment.</returns>
		</member>
		<member name="P:System.Windows.Media.QuadraticBezierSegment.Point2">
			<summary> Gets or sets the end Point of this QuadraticBezierSegment. </summary>
			<returns>The end point of this QuadraticBezierSegment.</returns>
		</member>
		<member name="T:System.Windows.Media.RadialGradientBrush">
			<summary> Paints an area with a radial gradient. A focal point defines the beginning of the gradient, and a circle defines the end point of the gradient. </summary>
		</member>
		<member name="M:System.Windows.Media.RadialGradientBrush.#ctor">
			<summary> Initializes a new instance of the RadialGradientBrush class. </summary>
		</member>
		<member name="M:System.Windows.Media.RadialGradientBrush.#ctor(System.Windows.Media.GradientStopCollection)">
			<summary> Initializes a new instance of the RadialGradientBrush class that has the specified gradient stops. </summary>
			<param name="gradientStopCollection">GradientStopCollection to set on this brush.</param>
		</member>
		<member name="M:System.Windows.Media.RadialGradientBrush.#ctor(System.Windows.Media.Color,System.Windows.Media.Color)">
			<summary> Initializes a new instance of the RadialGradientBrush class with the specified start and stop colors. </summary>
			<param name="startColor">Color value at the focus (GradientOrigin) of the radial gradient.</param>
			<param name="endColor">Color value at the outer edge of the radial gradient.</param>
		</member>
		<member name="F:System.Windows.Media.RadialGradientBrush.CenterProperty">
			<summary> Identifies the Center GTMT#dependency property. </summary>
			<returns>The Center GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.RadialGradientBrush.RadiusXProperty">
			<summary> Identifies the RadiusX GTMT#dependency property. </summary>
			<returns>The RadiusX GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.RadialGradientBrush.RadiusYProperty">
			<summary> Identifies the RadiusY GTMT#dependency property. </summary>
			<returns>The RadiusY GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.RadialGradientBrush.Clone">
			<summary> Returns a modifiable copy of the radial gradient brush. </summary>
			<returns>Returns a modifiable copy of the radial gradient brush. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.RadialGradientBrush.CloneCurrentValue">
			<summary> Returns a non-animated version of the radial gradient brush. The returned radial gradient brush represents the current object's state at the time this method was called.           </summary>
			<returns>Returns the current value of the radial gradient brush. The returned RadialGradientBrush has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="P:System.Windows.Media.RadialGradientBrush.Center">
			<summary> Gets or sets the center of the outermost circle of the radial gradient. </summary>
			<returns>The two-dimensional point located at the center of the radial gradient.</returns>
		</member>
		<member name="P:System.Windows.Media.RadialGradientBrush.GradientOrigin">
			<summary> Gets or sets the location of the two-dimensional focal point that defines the beginning of the gradient. </summary>
			<returns>The location of the two-dimensional focal point of the gradient. The default is (0.5, 0.5).</returns>
		</member>
		<member name="P:System.Windows.Media.RadialGradientBrush.RadiusX">
			<summary> Gets or sets the horizontal radius of the outermost circle of the radial gradient. </summary>
			<returns>The horizontal radius of the outermost circle of the radial gradient. The default is 0.5.</returns>
		</member>
		<member name="P:System.Windows.Media.RadialGradientBrush.RadiusY">
			<summary> Gets or sets the vertical radius of the outermost circle of a radial gradient. </summary>
			<returns>The vertical radius of the outermost circle of a radial gradient. The default is 0.5.</returns>
		</member>
		<member name="T:System.Windows.Media.RectangleGeometry">
			<summary> Describes a two-dimensional rectangle. </summary>
		</member>
		<member name="M:System.Windows.Media.RectangleGeometry.#ctor">
			<summary> Initializes a new instance of the RectangleGeometry class, and creates a rectangle with zero area. </summary>
		</member>
		<member name="M:System.Windows.Media.RectangleGeometry.#ctor(System.Windows.Rect)">
			<summary> Initializes a new instance of the RectangleGeometry class and specifies its dimensions. </summary>
			<param name="rect">A Rect structure with the rectangle's dimensions.</param>
		</member>
		<member name="M:System.Windows.Media.RectangleGeometry.#ctor(System.Windows.Rect,System.Double,System.Double)">
			<summary> Initializes a new instance of the RectangleGeometry class. </summary>
			<param name="rect">A Rect structure with the rectangle's dimensions.</param>
			<param name="radiusX">The radius of the rounded corner where it connects with the upper and lower edges of the rectangle.</param>
			<param name="radiusY">The radius of the rounded corner where it connects with the left and right edges of the rectangle.</param>
		</member>
		<member name="M:System.Windows.Media.RectangleGeometry.#ctor(System.Windows.Rect,System.Double,System.Double,System.Windows.Media.Transform)">
			<summary> Initializes a new instance of the RectangleGeometry class. </summary>
			<param name="rect">A Rect structure with the rectangle's dimensions.</param>
			<param name="transform">The transformation to apply to the geometry.</param>
			<param name="radiusX">The radius of the rounded corner where it connects with the upper and lower edges of the rectangle.</param>
			<param name="radiusY">The radius of the rounded corner where it connects with the left and right edges of the rectangle.</param>
		</member>
		<member name="F:System.Windows.Media.RectangleGeometry.RadiusXProperty">
			<summary> Identifies the RadiusX GTMT#dependency property. </summary>
			<returns>The RadiusX GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.RectangleGeometry.RadiusYProperty">
			<summary> Identifies the RadiusY GTMT#dependency property. </summary>
			<returns>The RadiusY GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.RectangleGeometry.RectProperty">
			<summary> Identifies the Rect GTMT#dependency property. </summary>
			<returns>The Rect GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.RectangleGeometry.Clone">
			<summary> Returns a modifiable copy of the rectangle geometry. </summary>
			<returns>Returns a modifiable copy of the rectangle geometry. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.RectangleGeometry.CloneCurrentValue">
			<summary> Returns a non-animated version of the rectangle geometry. The returned rectangle geometry represents the current object's state at the time this method was called.           </summary>
			<returns>Returns the current value of the rectangle geometry. The returned RectangleGeometry has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="M:System.Windows.Media.RectangleGeometry.GetArea(System.Double,System.Windows.Media.ToleranceType)">
			<summary> Gets the area of the filled region of this RectangleGeometry object. </summary>
			<returns>The area of the filled region of this RectangleGeometry object.</returns>
			<param name="type">Specifies how the error tolerance will be interpreted.</param>
			<param name="tolerance">The computational tolerance of error.</param>
		</member>
		<member name="M:System.Windows.Media.RectangleGeometry.IsEmpty">
			<summary> Determines whether this RectangleGeometry object is empty. </summary>
			<returns>true if this RectangleGeometry is empty; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Media.RectangleGeometry.MayHaveCurves">
			<summary> Determines whether this RectangleGeometry object may have curved segments. </summary>
			<returns>true if this RectangleGeometry object may have curved segments; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.RectangleGeometry.Bounds">
			<summary> Gets a Rect that specifies the bounding box of a RectangleGeometry. This method does not take any pens into account. </summary>
			<returns>The bounding box of the RectangleGeometry. </returns>
		</member>
		<member name="P:System.Windows.Media.RectangleGeometry.RadiusX">
			<summary>Gets or sets the x-radius of the ellipse use to round the corners of the rectangle. </summary>
			<returns>A value greater than or equal to zero and less than or equal to half the rectangle's width that describes the x-radius of the ellipse use to round the corners of the rectangle. Values greater than half the rectangle's width are treated as though equal to half the rectangle's width. Negative values are treated as positive values. The default is 0.0. </returns>
		</member>
		<member name="P:System.Windows.Media.RectangleGeometry.RadiusY">
			<summary>Gets or sets the y-radius of the ellipse use to round the corners of the rectangle. </summary>
			<returns>A value greater than or equal to zero and less than or equal to half the rectangle's width that describes the y-radius of the ellipse use to round the corners of the rectangle. Values greater than half the rectangle's width are treated as though equal to half the rectangle's width. Negative values are treated as positive values. The default is 0.0. </returns>
		</member>
		<member name="P:System.Windows.Media.RectangleGeometry.Rect">
			<summary>Gets or sets the dimensions of the rectangle. </summary>
			<returns>The position and size of the rectangle. The default is <see cref="P:System.Windows.Rect.Empty"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.RenderCapability">
			<summary>Enables TLA2#tla_winclient applications to query for the current rendering tier for their associated <see cref="T:System.Windows.Threading.Dispatcher"></see> object and to register for notification of changes. This is an abstract class.</summary>
		</member>
		<member name="E:System.Windows.Media.RenderCapability.TierChanged">
			<summary>Occurs when the rendering tier has changed for the <see cref="T:System.Windows.Threading.Dispatcher"></see> object of the current thread.</summary>
		</member>
		<member name="P:System.Windows.Media.RenderCapability.Tier">
			<summary>Gets a value that represents the rendering tier for the current thread.</summary>
			<returns>An <see cref="T:System.Int32"></see> value that represents the rendering tier for the current thread.</returns>
		</member>
		<member name="T:System.Windows.Media.RenderOptions">
			<summary>Provides the definitions of attached properties that control the rendering of a non-text drawing primitive. This class cannot be inherited.</summary>
		</member>
		<member name="F:System.Windows.Media.RenderOptions.BitmapScalingModeProperty">
			<summary>Identifies the <see cref="T:System.Windows.Media.BitmapScalingMode"></see>GTMT#dependency property.</summary>
		</member>
		<member name="F:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMaximumProperty">
			<summary>Identifies the <see cref="T:System.Double"></see>GTMT#dependency property that represents the cache invalidation threshold maximum property.</summary>
		</member>
		<member name="F:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMinimumProperty">
			<summary>Identifies the <see cref="T:System.Double"></see>GTMT#dependency property that represents the cache invalidation threshold minimum property.</summary>
		</member>
		<member name="F:System.Windows.Media.RenderOptions.CachingHintProperty">
			<summary>Identifies the <see cref="T:System.Windows.Media.CachingHint"></see>GTMT#dependency property.</summary>
		</member>
		<member name="F:System.Windows.Media.RenderOptions.EdgeModeProperty">
			<summary>Gets the <see cref="T:System.Windows.Media.EdgeMode"></see> enumeration value of the attached property from the given object. This field is read-only.</summary>
		</member>
		<member name="M:System.Windows.Media.RenderOptions.GetBitmapScalingMode(System.Windows.DependencyObject)">
			<summary>Gets the <see cref="T:System.Windows.Media.BitmapScalingMode"></see> for the object.</summary>
			<returns>The <see cref="T:System.Windows.Media.BitmapScalingMode"></see> value for the object.</returns>
			<param name="target">The <see cref="T:System.Windows.DependencyObject"></see> that contains the <see cref="T:System.Windows.Media.BitmapScalingMode"></see> value.</param>
		</member>
		<member name="M:System.Windows.Media.RenderOptions.GetCacheInvalidationThresholdMaximum(System.Windows.DependencyObject)">
			<summary>Gets the cache invalidation threshold maximum for the object.</summary>
			<returns>A <see cref="T:System.Double"></see> value that represents the cache invalidation threshold maximum.</returns>
			<param name="target">The <see cref="T:System.Windows.DependencyObject"></see> that contains the cache invalidation threshold maximum.</param>
		</member>
		<member name="M:System.Windows.Media.RenderOptions.GetCacheInvalidationThresholdMinimum(System.Windows.DependencyObject)">
			<summary>Gets the cache invalidation threshold minimum for the object.</summary>
			<returns>A <see cref="T:System.Double"></see> value that represents the cache invalidation threshold minimum.</returns>
			<param name="target">The <see cref="T:System.Windows.DependencyObject"></see> that contains the cache invalidation threshold minimum.</param>
		</member>
		<member name="M:System.Windows.Media.RenderOptions.GetCachingHint(System.Windows.DependencyObject)">
			<summary>Gets the <see cref="T:System.Windows.Media.CachingHint"></see> for the object.</summary>
			<returns>The <see cref="T:System.Windows.Media.CachingHint"></see> value for the object.</returns>
			<param name="target">The <see cref="T:System.Windows.DependencyObject"></see> that contains the <see cref="T:System.Windows.Media.CachingHint"></see> value.</param>
		</member>
		<member name="M:System.Windows.Media.RenderOptions.GetEdgeMode(System.Windows.DependencyObject)">
			<summary>Returns an <see cref="T:System.Windows.Media.EdgeMode"></see> enumeration value that determines how the edges of non-text drawing primitives are rendered.</summary>
			<returns>The <see cref="T:System.Windows.Media.EdgeMode"></see> enumeration value.</returns>
			<param name="target">The non-text drawing primitive object.</param>
		</member>
		<member name="M:System.Windows.Media.RenderOptions.SetBitmapScalingMode(System.Windows.DependencyObject,System.Windows.Media.BitmapScalingMode)">
			<summary>Sets the GTMT#attached property<see cref="T:System.Windows.Media.BitmapScalingMode"></see> for the <see cref="T:System.Windows.DependencyObject"></see>.</summary>
			<param name="target">The <see cref="T:System.Windows.DependencyObject"></see> to set.</param>
			<param name="bitmapScalingMode">The <see cref="T:System.Windows.Media.BitmapScalingMode"></see> value.</param>
		</member>
		<member name="M:System.Windows.Media.RenderOptions.SetCacheInvalidationThresholdMaximum(System.Windows.DependencyObject,System.Double)">
			<summary>Sets the cache invalidation threshold maximum for the <see cref="T:System.Windows.DependencyObject"></see>.</summary>
			<param name="cacheInvalidationThresholdMaximum">A <see cref="T:System.Double"></see> value that represents the cache invalidation threshold maximum.</param>
			<param name="target">The <see cref="T:System.Windows.DependencyObject"></see> to set.</param>
		</member>
		<member name="M:System.Windows.Media.RenderOptions.SetCacheInvalidationThresholdMinimum(System.Windows.DependencyObject,System.Double)">
			<summary>Sets the cache invalidation threshold minimum for the <see cref="T:System.Windows.DependencyObject"></see>.</summary>
			<param name="target">The <see cref="T:System.Windows.DependencyObject"></see> to set.</param>
			<param name="cacheInvalidationThresholdMinimum">A <see cref="T:System.Double"></see> value that represents the cache invalidation threshold minimum.</param>
		</member>
		<member name="M:System.Windows.Media.RenderOptions.SetCachingHint(System.Windows.DependencyObject,System.Windows.Media.CachingHint)">
			<summary>Sets the GTMT#attached property<see cref="T:System.Windows.Media.CachingHint"></see> for the <see cref="T:System.Windows.DependencyObject"></see>.</summary>
			<param name="cachingHint">The <see cref="T:System.Windows.Media.CachingHint"></see> value for the object.</param>
			<param name="target">The <see cref="T:System.Windows.DependencyObject"></see> to set.</param>
		</member>
		<member name="M:System.Windows.Media.RenderOptions.SetEdgeMode(System.Windows.DependencyObject,System.Windows.Media.EdgeMode)">
			<summary>Sets the <see cref="T:System.Windows.Media.EdgeMode"></see> enumeration value for a non-text primitive that determines how its edges are rendered.</summary>
			<param name="target">The target object that contains the drawing primitives.</param>
			<param name="edgeMode">The <see cref="T:System.Windows.Media.EdgeMode"></see> enumeration value.</param>
		</member>
		<member name="T:System.Windows.Media.RotateTransform">
			<summary>Rotates an object about a specified point in the two-dimensional x-y plane. </summary>
		</member>
		<member name="M:System.Windows.Media.RotateTransform.#ctor">
			<summary> Initializes a new instance of the RotateTransform class. The rotation angle is measured in degrees clockwise. The default center of rotation is the origin. </summary>
		</member>
		<member name="M:System.Windows.Media.RotateTransform.#ctor(System.Double)">
			<summary> Initializes a new instance of the RotateTransform class with the specified angle, measured in degrees clockwise. The default center of rotation is the origin. </summary>
			<param name="angle">Rotation angle, measured in degrees clockwise.</param>
		</member>
		<member name="M:System.Windows.Media.RotateTransform.#ctor(System.Double,System.Double,System.Double)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.RotateTransform"></see> class that has the specified angle and center point.</summary>
			<param name="angle">The rotation <see cref="P:System.Windows.Media.RotateTransform.Angle"></see>, in degrees. For more information, see the Angle property.</param>
			<param name="centerY">The y-coordinate of the transform's center point. For more information, see the <see cref="P:System.Windows.Media.RotateTransform.CenterY"></see> property.</param>
			<param name="centerX">The x-coordinate of the transform's center point. For more information, see the <see cref="P:System.Windows.Media.RotateTransform.CenterX"></see> property.</param>
		</member>
		<member name="F:System.Windows.Media.RotateTransform.AngleProperty">
			<summary> Identifies the Angle GTMT#dependency property. </summary>
			<returns>The Angle GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.RotateTransform.CenterXProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.RotateTransform.CenterX"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.RotateTransform.CenterX"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.RotateTransform.CenterYProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.RotateTransform.CenterY"></see> GTMT#dependency property.</summary>
		</member>
		<member name="M:System.Windows.Media.RotateTransform.Clone">
			<summary> Returns a modifiable copy of the rotate transform. </summary>
			<returns>A modifiable copy of the rotate transform. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.RotateTransform.CloneCurrentValue">
			<summary> Returns a non-animated version of the rotate transform. The returned rotate transform represents the current object's state at the time this method was called.           </summary>
			<returns>Returns the current value of the rotate transform. The returned RotateTransform has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="P:System.Windows.Media.RotateTransform.Angle">
			<summary> Gets or sets the angle of rotation, measured in degrees clockwise. </summary>
			<returns>Angle of rotation, measured in degrees clockwise.</returns>
		</member>
		<member name="P:System.Windows.Media.RotateTransform.CenterX">
			<summary>Gets or sets the x-coordinate of the rotation's center point.</summary>
			<returns>The x-coordinate of the rotation's center point. The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.RotateTransform.CenterY">
			<summary>Gets or sets the y-coordinate of the rotation's center point.</summary>
			<returns>The y-coordinate of the rotation's center point. The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.RotateTransform.Value">
			<summary> Gets the current rotation transformation as a Matrix object. </summary>
			<returns>The current rotation transformation.</returns>
		</member>
		<member name="T:System.Windows.Media.ScaleTransform">
			<summary> Scales an object in the two-dimensional x-y plane, starting from a defined center point. Scale factors are defined in x- and y-directions from this center point. </summary>
		</member>
		<member name="M:System.Windows.Media.ScaleTransform.#ctor">
			<summary> Initializes a new instance of the ScaleTransform class. </summary>
		</member>
		<member name="M:System.Windows.Media.ScaleTransform.#ctor(System.Double,System.Double)">
			<summary> Initializes a new instance of the ScaleTransform class. Scale factors are defined in x- and y-directions from the origin, (0, 0). </summary>
			<param name="scaleX">Scale factor in the x-direction.</param>
			<param name="scaleY">Scale factor in the y-direction.</param>
		</member>
		<member name="M:System.Windows.Media.ScaleTransform.#ctor(System.Double,System.Double,System.Double,System.Double)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.ScaleTransform"></see> class that has the specified scale factors and center point.</summary>
			<param name="scaleX">The x-axis scale factor. For more information, see the <see cref="P:System.Windows.Media.ScaleTransform.ScaleX"></see> property.</param>
			<param name="scaleY">The y-axis scale factor. For more information, see the <see cref="P:System.Windows.Media.ScaleTransform.ScaleY"></see> property.</param>
			<param name="centerY">The y-coordinate of the transformation's center. For more information, see the <see cref="P:System.Windows.Media.ScaleTransform.CenterY"></see> property.</param>
			<param name="centerX">The x-coordinate of the transformation's center. For more information, see the <see cref="P:System.Windows.Media.ScaleTransform.CenterX"></see> property.</param>
		</member>
		<member name="F:System.Windows.Media.ScaleTransform.CenterXProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.ScaleTransform.CenterX"></see>  GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.ScaleTransform.CenterX"></see>  GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.ScaleTransform.CenterYProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.ScaleTransform.CenterY"></see>  GTMT#dependency property.</summary>
			<returns>Identifier for the <see cref="P:System.Windows.Media.ScaleTransform.CenterY"></see>  GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.ScaleTransform.ScaleXProperty">
			<summary> Identifies the ScaleX GTMT#dependency property. </summary>
			<returns>The ScaleX GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.ScaleTransform.ScaleYProperty">
			<summary> Identifies the ScaleY GTMT#dependency property. </summary>
			<returns>The ScaleY GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.ScaleTransform.Clone">
			<summary> Returns a modifiable copy of the scale transform. </summary>
			<returns>A modifiable copy of the scale transform. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.ScaleTransform.CloneCurrentValue">
			<summary> Returns a non-animated version of the scale transform. The returned scale transform represents the current object's state at the time this method was called.           </summary>
			<returns>Returns the current value of the scale transform. The returned ScaleTransform has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="P:System.Windows.Media.ScaleTransform.CenterX">
			<summary>Gets or sets the x-coordinate of the transform's center point.</summary>
			<returns>The x-coordinate of the transform's center point. The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.ScaleTransform.CenterY">
			<summary>Gets or sets the y-coordinate of the transform's center point.</summary>
			<returns>The y-coordinate of the transform's center point. The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.ScaleTransform.ScaleX">
			<summary> Gets or sets the scale factor in the x-direction. </summary>
			<returns>Scale factor in the x-direction.</returns>
		</member>
		<member name="P:System.Windows.Media.ScaleTransform.ScaleY">
			<summary> Gets or sets the scale factor in the y-direction. </summary>
			<returns>Scale factor in the y-direction.</returns>
		</member>
		<member name="P:System.Windows.Media.ScaleTransform.Value">
			<summary> Gets the current scaling transformation as a Matrix object. </summary>
			<returns>The current scaling transformation returned as a Matrix object.</returns>
		</member>
		<member name="T:System.Windows.Media.SkewTransform">
			<summary> Represents a two-dimensional skew. </summary>
		</member>
		<member name="M:System.Windows.Media.SkewTransform.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.SkewTransform"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.SkewTransform.#ctor(System.Double,System.Double)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.SkewTransform"></see> class that has the specified x- and y-axis angles and is centered on the origin.</summary>
			<param name="angleY">The y-axis skew angle, measured in degrees counterclockwise from the x-axis. For more information, see the <see cref="P:System.Windows.Media.SkewTransform.AngleY"></see> property.</param>
			<param name="angleX">The x-axis skew angle, measured in degrees counterclockwise from the y-axis. For more information, see the <see cref="P:System.Windows.Media.SkewTransform.AngleX"></see> property.</param>
		</member>
		<member name="M:System.Windows.Media.SkewTransform.#ctor(System.Double,System.Double,System.Double,System.Double)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.SkewTransform"></see> class with the specified x- and y-axis angles and center.</summary>
			<param name="angleY">The y-axis skew angle, measured in degrees counterclockwise from the x-axis. For more information, see the <see cref="P:System.Windows.Media.SkewTransform.AngleY"></see> property.</param>
			<param name="angleX">The x-axis skew angle, measured in degrees counterclockwise from the y-axis. For more information, see the <see cref="P:System.Windows.Media.SkewTransform.AngleX"></see> property.</param>
			<param name="centerY">The y-coordinate of the transform's center. For more information, see the <see cref="P:System.Windows.Media.SkewTransform.CenterY"></see> property.</param>
			<param name="centerX">The x-coordinate of the transform's center. For more information, see the <see cref="P:System.Windows.Media.SkewTransform.CenterX"></see> property.</param>
		</member>
		<member name="F:System.Windows.Media.SkewTransform.AngleXProperty">
			<summary> Identifies the AngleX GTMT#dependency property. </summary>
			<returns>The AngleX GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.SkewTransform.AngleYProperty">
			<summary> Identifies the AngleY GTMT#dependency property. </summary>
			<returns>The AngleY GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.SkewTransform.CenterXProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.SkewTransform.CenterX"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.SkewTransform.CenterX"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.SkewTransform.CenterYProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.SkewTransform.CenterY"></see> GTMT#dependency property.</summary>
			<returns>Identifies the <see cref="P:System.Windows.Media.SkewTransform.CenterY"></see> GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.SkewTransform.Clone">
			<summary> Returns a modifiable copy of the skew transform. </summary>
			<returns>A modifiable copy of the skew transform. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.SkewTransform.CloneCurrentValue">
			<summary> Returns a non-animated version of the skew transform. The returned skew transform represents the current object's state at the time this method was called.           </summary>
			<returns>Returns the current value of the skew transform. The returned SkewTransform has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="P:System.Windows.Media.SkewTransform.AngleX">
			<summary> Gets or sets the x-axis skew angle, measured in degrees counterclockwise from the y-axis. </summary>
			<returns>The skew angle, measured in degrees counterclockwise from the y-axis.</returns>
		</member>
		<member name="P:System.Windows.Media.SkewTransform.AngleY">
			<summary> Gets or sets the y-axis skew angle, measured in degrees counterclockwise from the x-axis. </summary>
			<returns>The skew angle, measured in degrees counterclockwise from the x-axis.</returns>
		</member>
		<member name="P:System.Windows.Media.SkewTransform.CenterX">
			<summary>Gets or sets the x-coordinate of the transform's center.</summary>
			<returns>The x-coordinate of the transform's center. The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.SkewTransform.CenterY">
			<summary>Gets or sets the y-coordinate of the transform's center.</summary>
			<returns>The y-coordinate of the transform's center. The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.SkewTransform.Value">
			<summary> Gets the current skewing transformation value as a Matrix. </summary>
			<returns>The current skewing transformation value as a Matrix.</returns>
		</member>
		<member name="T:System.Windows.Media.SolidColorBrush">
			<summary> Paints an area with a solid color. </summary>
		</member>
		<member name="M:System.Windows.Media.SolidColorBrush.#ctor">
			<summary> Initializes a new instance of the SolidColorBrush class with no color or animations. </summary>
		</member>
		<member name="M:System.Windows.Media.SolidColorBrush.#ctor(System.Windows.Media.Color)">
			<summary> Initializes a new instance of the SolidColorBrush class with the specified Color. </summary>
			<param name="color">Color to apply to the fill.</param>
		</member>
		<member name="F:System.Windows.Media.SolidColorBrush.ColorProperty">
			<summary> Identifies the Color GTMT#dependency property. </summary>
			<returns>The Color GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.SolidColorBrush.Clone">
			<summary> Returns a modifiable copy of the solid color brush. </summary>
			<returns>A modifiable copy of the solid color brush. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.SolidColorBrush.CloneCurrentValue">
			<summary> Returns a non-animated version of the solid color brush. The returned solid color brush represents the current object's state at the time this method was called.           </summary>
			<returns>Returns the current value of the solid color brush. The returned SolidColorBrush has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="P:System.Windows.Media.SolidColorBrush.Color">
			<summary> Gets or sets the brush's color. </summary>
			<returns>The brush's color. The default value is Transparent.</returns>
		</member>
		<member name="T:System.Windows.Media.StreamGeometry">
			<summary>Defines a geometric shape, described using a <see cref="T:System.Windows.Media.StreamGeometryContext"></see>. This geometry is light-weight alternative to <see cref="T:System.Windows.Media.PathGeometry"></see>: it does not support databinding, animation, or modification.</summary>
		</member>
		<member name="M:System.Windows.Media.StreamGeometry.#ctor">
			<summary>Initializes a new, empty instance of the <see cref="T:System.Windows.Media.StreamGeometry"></see> class.</summary>
		</member>
		<member name="F:System.Windows.Media.StreamGeometry.FillRuleProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.StreamGeometry.FillRule"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.StreamGeometry.FillRule"></see> GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.StreamGeometry.Clear">
			<summary>Removes all geometric information from this <see cref="T:System.Windows.Media.StreamGeometry"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.StreamGeometry.Clone">
			<summary>Returns a modifiable version of this StreamGeometry.</summary>
			<returns>A modifiable clone of this <see cref="T:System.Windows.Media.Geometry"></see>. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.StreamGeometry.CloneCurrentValue">
			<summary>Returns a non-animated version of this <see cref="T:System.Windows.Media.StreamGeometry"></see>. The returned <see cref="T:System.Windows.Media.StreamGeometry"></see> represents the current object's state at the time this method was called.</summary>
			<returns>The current value of this <see cref="T:System.Windows.Media.StreamGeometry"></see>. The returned <see cref="T:System.Windows.Media.StreamGeometry"></see> has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="M:System.Windows.Media.StreamGeometry.IsEmpty">
			<summary>Determines whether this <see cref="T:System.Windows.Media.StreamGeometry"></see> describes a geometric shape.</summary>
			<returns>true if this <see cref="T:System.Windows.Media.StreamGeometry"></see> describes a geometry shape; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Media.StreamGeometry.MayHaveCurves">
			<summary>Determines whether this <see cref="T:System.Windows.Media.StreamGeometry"></see> contains a curved segment.</summary>
			<returns>true if this <see cref="T:System.Windows.Media.StreamGeometry"></see> object has a curved segment; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Media.StreamGeometry.Open">
			<summary>Opens a <see cref="T:System.Windows.Media.StreamGeometryContext"></see> that can be used to describe this <see cref="T:System.Windows.Media.StreamGeometry"></see> object's contents.</summary>
			<returns>A <see cref="T:System.Windows.Media.StreamGeometryContext"></see> that can be used to describe this <see cref="T:System.Windows.Media.StreamGeometry"></see> object's contents.</returns>
		</member>
		<member name="P:System.Windows.Media.StreamGeometry.Bounds">
			<summary>Gets a <see cref="T:System.Windows.Rect"></see> that is exactly large enough to contain this <see cref="T:System.Windows.Media.StreamGeometry"></see>.</summary>
			<returns>The bounding box of this <see cref="T:System.Windows.Media.StreamGeometry"></see>. </returns>
		</member>
		<member name="P:System.Windows.Media.StreamGeometry.FillRule">
			<summary>Gets or sets a value that determines how the intersecting areas contained in this <see cref="T:System.Windows.Media.StreamGeometry"></see> are combined.</summary>
			<returns>Indicates how the intersecting areas of this <see cref="T:System.Windows.Media.StreamGeometry"></see> are combined.  The default value is EvenOdd.</returns>
		</member>
		<member name="T:System.Windows.Media.StreamGeometryContext">
			<summary>Describes a geometry using drawing commands. This class is used with the <see cref="T:System.Windows.Media.StreamGeometry"></see> class to create a light-weight geometry that does not support databinding, animation, or modification.</summary>
		</member>
		<member name="M:System.Windows.Media.StreamGeometryContext.ArcTo(System.Windows.Point,System.Windows.Size,System.Double,System.Boolean,System.Windows.Media.SweepDirection,System.Boolean,System.Boolean)">
			<summary>Draws an arc to the specified point.</summary>
			<param name="rotationAngle">Rotation angle of the oval that specifies the curve. The curvature of the arc can be rotated with this parameter.</param>
			<param name="sweepDirection">Declares whether the arc is drawn in the <see cref="F:System.Windows.Media.SweepDirection.Clockwise"></see> or <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise"></see> direction.</param>
			<param name="size">The width and height of an oval whose perimeter is used to draw the angle. If the oval is very rounded in all directions, the arc will be rounded, if it is nearly flat, so will the arc. For example, a very large width and height would represent a very large oval which would give a slight curvature for the angle.</param>
			<param name="isSmoothJoin">Declares whether the join between this segment and the previous segment is treated as a corner when stroked with a <see cref="T:System.Windows.Media.Pen"></see>.</param>
			<param name="isLargeArc">Declares whether the arc should be greater than 180 degrees.</param>
			<param name="point">The destination point for the end of the arc.</param>
			<param name="isStroked">Declares whether the segment is stroked when a <see cref="T:System.Windows.Media.Pen"></see> is used to render the segment.</param>
		</member>
		<member name="M:System.Windows.Media.StreamGeometryContext.BeginFigure(System.Windows.Point,System.Boolean,System.Boolean)">
			<summary>Specifies the <see cref="T:System.Windows.Point"></see> where a figure begins.</summary>
			<param name="isClosed">Declares whether the shape is closed. For example, if two connecting lines are drawn, and isClosed is set to false, the drawing will just be of two lines but if isClosed is set to true, the two lines will be closed to create a triangle.</param>
			<param name="isFilled">Declares whether the contained area of this figure is to be used for hit-testing, rendering, and clipping.</param>
			<param name="startPoint">The <see cref="T:System.Windows.Point"></see> where the figure begins.</param>
		</member>
		<member name="M:System.Windows.Media.StreamGeometryContext.BezierTo(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Boolean,System.Boolean)">
			<summary>Draws a Bezier curve to the specified point.</summary>
			<param name="isSmoothJoin">Declares whether the join between this segment and the previous segment is treated as a corner when stroked with a <see cref="T:System.Windows.Media.Pen"></see>.</param>
			<param name="point2">The second control point used to specify the shape of the curve.</param>
			<param name="point3">The destination point for the end of the curve.</param>
			<param name="point1">The first control point used to specify the shape of the curve.</param>
			<param name="isStroked">Declares whether the segment is stroked when a <see cref="T:System.Windows.Media.Pen"></see> is used to render the segment.</param>
		</member>
		<member name="M:System.Windows.Media.StreamGeometryContext.LineTo(System.Windows.Point,System.Boolean,System.Boolean)">
			<summary>Draws a straight line to the specified <see cref="T:System.Windows.Point"></see>.</summary>
			<param name="isSmoothJoin">Declares whether the join between this segment and the previous segment is treated as a corner when stroked with a <see cref="T:System.Windows.Media.Pen"></see>.</param>
			<param name="point">The destination point for the end of the line.</param>
			<param name="isStroked">Declares whether the segment is stroked when a <see cref="T:System.Windows.Media.Pen"></see> is used to render the segment.</param>
		</member>
		<member name="M:System.Windows.Media.StreamGeometryContext.PolyBezierTo(System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Boolean)">
			<summary>Draws one or more connected Bezier curves.</summary>
			<param name="isSmoothJoin">Declares whether the join between this segment and the previous segment is treated as a corner when stroked with a <see cref="T:System.Windows.Media.Pen"></see>.</param>
			<param name="points">The collection of points that specify control points and destination points for one or more Bezier curves.</param>
			<param name="isStroked">Declares whether the segment is stroked when a <see cref="T:System.Windows.Media.Pen"></see> is used to render the segment.</param>
		</member>
		<member name="M:System.Windows.Media.StreamGeometryContext.PolyLineTo(System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Boolean)">
			<summary>Draws one or more connected straight lines.</summary>
			<param name="isSmoothJoin">Declares whether the join between this segment and the previous segment is treated as a corner when stroked with a <see cref="T:System.Windows.Media.Pen"></see>.</param>
			<param name="points">The collection of points that specify destination points for one or more connected straight lines.</param>
			<param name="isStroked">Declares whether the segment is stroked when a <see cref="T:System.Windows.Media.Pen"></see> is used to render the segment.</param>
		</member>
		<member name="M:System.Windows.Media.StreamGeometryContext.PolyQuadraticBezierTo(System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Boolean)">
			<summary>Draws one or more connected quadratic Bezier curves.</summary>
			<param name="isSmoothJoin">Declares whether the join between this segment and the previous segment is treated as a corner when stroked with a <see cref="T:System.Windows.Media.Pen"></see>.</param>
			<param name="points">The collection of points that specify control points and destination points for one or more quadratic Bezier curves.</param>
			<param name="isStroked">Declares whether the segment is stroked when a <see cref="T:System.Windows.Media.Pen"></see> is used to render the segment.</param>
		</member>
		<member name="M:System.Windows.Media.StreamGeometryContext.QuadraticBezierTo(System.Windows.Point,System.Windows.Point,System.Boolean,System.Boolean)">
			<summary>Draws a quadratic Bezier curve.</summary>
			<param name="isSmoothJoin">Declares whether the join between this segment and the previous segment is treated as a corner when stroked with a <see cref="T:System.Windows.Media.Pen"></see>.</param>
			<param name="point2">The destination point for the end of the curve.</param>
			<param name="point1">The control point used to specify the shape of the curve.</param>
			<param name="isStroked">Declares whether the segment is stroked when a <see cref="T:System.Windows.Media.Pen"></see> is used to render the segment.</param>
		</member>
		<member name="M:System.Windows.Media.StreamGeometryContext.System.IDisposable.Dispose">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="T:System.Windows.Media.Stretch">
			<summary>Describes how content should be resized to fill its allocated space.</summary>
		</member>
		<member name="F:System.Windows.Media.Stretch.Fill">
			<summary>Resizes the content to fill the destination dimensions. GTMT#Aspect ratio is not preserved. </summary>
		</member>
		<member name="F:System.Windows.Media.Stretch.None">
			<summary>Preserves the original size. </summary>
		</member>
		<member name="F:System.Windows.Media.Stretch.Uniform">
			<summary>Resizes the content to fit in the destination dimensions, preserving the native GTMT#aspect ratio. </summary>
		</member>
		<member name="F:System.Windows.Media.Stretch.UniformToFill">
			<summary>Resizes the content to fill the destination dimensions, preserving the native GTMT#aspect ratio. If the aspect ratio of the destination rectangle is different from the source, the source content will be clipped to fit in the destination dimensions.</summary>
		</member>
		<member name="T:System.Windows.Media.StyleSimulations">
			<summary>Defines an enumerator class that describes the simulation style of a font.</summary>
		</member>
		<member name="F:System.Windows.Media.StyleSimulations.BoldItalicSimulation">
			<summary>Bold and Italic style simulation.</summary>
		</member>
		<member name="F:System.Windows.Media.StyleSimulations.BoldSimulation">
			<summary>Bold style simulation.</summary>
		</member>
		<member name="F:System.Windows.Media.StyleSimulations.ItalicSimulation">
			<summary>Italic style simulation.</summary>
		</member>
		<member name="F:System.Windows.Media.StyleSimulations.None">
			<summary>No font style simulation.</summary>
		</member>
		<member name="T:System.Windows.Media.SweepDirection">
			<summary>Defines the direction an elliptical arc is drawn.</summary>
		</member>
		<member name="F:System.Windows.Media.SweepDirection.Counterclockwise">
			<summary>Specifies that arcs are drawn in a negative-angle direction.</summary>
		</member>
		<member name="T:System.Windows.Media.TextEffect">
			<summary>Represents a text effect that can be applied to text objects.</summary>
		</member>
		<member name="M:System.Windows.Media.TextEffect.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextEffect"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.TextEffect.#ctor(System.Windows.Media.Transform,System.Windows.Media.Brush,System.Windows.Media.Geometry,System.Int32,System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextEffect"></see> class.</summary>
			<param name="positionStart">The starting position in the text that the <see cref="T:System.Windows.Media.TextEffect"></see> applies to.</param>
			<param name="transform">The <see cref="T:System.Windows.Media.Transform"></see> that is applied to the <see cref="T:System.Windows.Media.TextEffect"></see>.</param>
			<param name="foreground">The <see cref="T:System.Windows.Media.Brush"></see> to apply to the content of the <see cref="T:System.Windows.Media.TextEffect"></see>.</param>
			<param name="clip">The clipping region of the <see cref="T:System.Windows.Media.TextEffect"></see>.</param>
			<param name="positionCount">The number of positions in the text that the <see cref="T:System.Windows.Media.TextEffect"></see> applies to.</param>
		</member>
		<member name="F:System.Windows.Media.TextEffect.ClipProperty">
			<summary>Identifies the Clip GTMT#dependency property. </summary>
			<returns>The Clip GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.TextEffect.ForegroundProperty">
			<summary>Identifies the Foreground GTMT#dependency property. </summary>
			<returns>The Foreground GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.TextEffect.TransformProperty">
			<summary> Identifies the Transform GTMT#dependency property. </summary>
			<returns>The Transform GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.TextEffect.Clone">
			<summary>Returns a modifiable clone of this instance.</summary>
			<returns>A modifiable clone of this instance. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The copy's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.TextEffect.CloneCurrentValue">
			<summary>Returns a mutable clone of this <see cref="T:System.Windows.Freezable"></see>, with values at existing <see cref="T:System.Windows.Freezable"></see>'s current values rather than reverting to metadata defaults.</summary>
			<returns>The returned clone object.</returns>
		</member>
		<member name="P:System.Windows.Media.TextEffect.Clip">
			<summary>Gets or sets the clipping region of the <see cref="T:System.Windows.Media.TextEffect"></see>.</summary>
			<returns>The <see cref="T:System.Windows.Media.Geometry"></see> that defines the clipping region.</returns>
		</member>
		<member name="P:System.Windows.Media.TextEffect.Foreground">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.Brush"></see> to apply to the content of the <see cref="T:System.Windows.Media.TextEffect"></see>.</summary>
			<returns>The brush used to apply to the <see cref="T:System.Windows.Media.TextEffect"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.TextEffect.PositionCount">
			<summary>Gets or sets the position in the text that the <see cref="T:System.Windows.Media.TextEffect"></see> applies to.</summary>
			<returns>The <see cref="T:System.Int32"></see> value representing the position in the text that the <see cref="T:System.Windows.Media.TextEffect"></see> applies to.</returns>
		</member>
		<member name="P:System.Windows.Media.TextEffect.PositionStart">
			<summary>Gets or sets the starting position in the text that the <see cref="T:System.Windows.Media.TextEffect"></see> applies to.</summary>
			<returns>The <see cref="T:System.Int32"></see> value representing the starting position in the text that the <see cref="T:System.Windows.Media.TextEffect"></see> applies to.</returns>
		</member>
		<member name="P:System.Windows.Media.TextEffect.Transform">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.Transform"></see> that is applied to the <see cref="T:System.Windows.Media.TextEffect"></see>.</summary>
			<returns>The <see cref="T:System.Windows.Media.Transform"></see> value of the <see cref="T:System.Windows.Media.TextEffect"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.TextEffectCollection">
			<summary>A collection of <see cref="T:System.Windows.Media.TextEffect"></see> objects.</summary>
		</member>
		<member name="M:System.Windows.Media.TextEffectCollection.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextEffectCollection"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.TextEffectCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.TextEffect})">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextEffectCollection"></see> class.</summary>
			<param name="collection">An enumerator of type <see cref="T:System.Collections.IEnumerable"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.TextEffectCollection.#ctor(System.Int32)">
			<summary>Initializes a new <see cref="T:System.Windows.Media.TextEffectCollection"></see> instance that is empty and has the specified initial capacity. </summary>
			<param name="capacity">The number of elements that the new collection is initially capable of storing.</param>
		</member>
		<member name="M:System.Windows.Media.TextEffectCollection.Add(System.Windows.Media.TextEffect)">
			<summary>Adds a <see cref="T:System.Windows.Media.TextEffect"></see> to the end of the collection.</summary>
			<param name="value">The <see cref="T:System.Windows.Media.TextEffect"></see> to add to the collection.</param>
		</member>
		<member name="M:System.Windows.Media.TextEffectCollection.Clone">
			<summary>Returns a modifiable copy of the collection and its contents.</summary>
			<returns>Returns a modifiable copy of the collection and its contents. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.TextEffectCollection.CloneCurrentValue">
			<summary>Returns a modifiable copy of this <see cref="T:System.Windows.Media.TextEffectCollection"></see>. The copy has the current values for an existing <see cref="T:System.Windows."></see><see cref="Freezable"></see> object instead of its metadata default values.</summary>
			<returns>The returned modifiable copy.</returns>
		</member>
		<member name="M:System.Windows.Media.TextEffectCollection.Contains(System.Windows.Media.TextEffect)">
			<summary>Determines if the specified item is in the collection.</summary>
			<returns>true if the collection contains value; otherwise, false.</returns>
			<param name="value">The <see cref="T:System.Windows.Media.TextEffect"></see> to locate in the collection</param>
		</member>
		<member name="M:System.Windows.Media.TextEffectCollection.CopyTo(System.Windows.Media.TextEffect[],System.Int32)">
			<summary>Copies the entire <see cref="T:System.Windows.Media.TextEffectCollection"></see> to a one-dimensional array of type <see cref="T:System.Windows.Media.TextEffect"></see>, starting at the specified index of the target array.</summary>
			<param name="array">The array into which the collection's items are to be copied.</param>
			<param name="index">The index of array at which to start copying the contents of the <see cref="T:System.Windows.Media.TextEffectCollection"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.TextEffectCollection.GetEnumerator">
			<summary>Returns an enumerator that can iterate through the collection.</summary>
			<returns>An <see cref="T:System.Collections.IEnumerator"></see> that can iterate through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.TextEffectCollection.IndexOf(System.Windows.Media.TextEffect)">
			<summary>Searches for the specified <see cref="T:System.Windows.Media.TextEffect"></see> and returns the zero-based index of the first occurrence within the entire collection.</summary>
			<returns>The zero-based index of the first occurrence of value within the entire collection, if found; otherwise, -1.</returns>
			<param name="value">The <see cref="T:System.Windows.Media.TextEffect"></see> to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.TextEffectCollection.Insert(System.Int32,System.Windows.Media.TextEffect)">
			<summary>Inserts a <see cref="T:System.Windows.Media.TextEffect"></see> into a specific location in the collection.</summary>
			<param name="value">The <see cref="T:System.Windows.Media.TextEffect"></see> to insert into the collection.</param>
			<param name="index">The zero-based index at which the value <see cref="T:System.Windows.Media.TextEffect"></see> be inserted.</param>
		</member>
		<member name="M:System.Windows.Media.TextEffectCollection.Remove(System.Windows.Media.TextEffect)">
			<summary>Removes the specified <see cref="T:System.Windows.Media.TextEffect"></see> object from the collection.</summary>
			<param name="value">The <see cref="T:System.Windows.Media.TextEffect"></see> to remove from the collection.</param>
		</member>
		<member name="M:System.Windows.Media.TextEffectCollection.RemoveAt(System.Int32)">
			<summary>Removes the <see cref="T:System.Windows.Media.TextEffect"></see> at the specified index in the collection.</summary>
			<param name="index">The zero-based index of the <see cref="T:System.Windows.Media.TextEffect"></see> to remove.</param>
		</member>
		<member name="M:System.Windows.Media.TextEffectCollection.System.Collections.IEnumerable.GetEnumerator">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.TextEffectCollection.Count">
			<summary>Gets the number of elements in the collection.</summary>
			<returns>The number of elements that the collection actually contains.</returns>
		</member>
		<member name="P:System.Windows.Media.TextEffectCollection.Item(System.Int32)">
			<summary>Gets or sets the item that is stored at the zero-based index of the collection.</summary>
			<param name="index">The zero-based index of the collection from which to get or set the item.</param>
		</member>
		<member name="T:System.Windows.Media.TextEffectCollection.Enumerator">
			<summary> Enumerates items in a collection. </summary>
		</member>
		<member name="M:System.Windows.Media.TextEffectCollection.Enumerator.MoveNext">
			<summary> Advances the enumerator to the next element of the collection. </summary>
			<returns>true if the enumerator was successfully advanced to the next element, false if the enumerator has passed the end of the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.TextEffectCollection.Enumerator.System.IDisposable.Dispose">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="T:System.Windows.Media.TileBrush">
			<summary> Abstract class that describes a way to fill a region with one or more tiles. Derived classes define the different types of tiles that can be used; for example, the ImageBrush enables you to fill an area with an image. </summary>
		</member>
		<member name="M:System.Windows.Media.TileBrush.#ctor">
			<summary> Protected constructor that initalizes a new instance of the TileBrush class with default values.  </summary>
		</member>
		<member name="F:System.Windows.Media.TileBrush.StretchProperty">
			<summary> Identifies the Stretch GTMT#dependency property. </summary>
			<returns>The Stretch GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.TileBrush.TileModeProperty">
			<summary> Identifies the TileMode GTMT#dependency property. </summary>
			<returns>The TileMode GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.TileBrush.ViewboxProperty">
			<summary> Identifies the Viewbox GTMT#dependency property. </summary>
			<returns>The Viewbox GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.TileBrush.ViewportProperty">
			<summary> Identifies the Viewport GTMT#dependency property. </summary>
			<returns>The Viewport GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.TileBrush.ViewportUnitsProperty">
			<summary> Identifies the ViewportUnits GTMT#dependency property. </summary>
			<returns>The ViewportUnits GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.TileBrush.Clone">
			<summary> Returns a modifiable copy of the tile brush. </summary>
			<returns>A modifiable copy of the tile brush. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.TileBrush.CloneCurrentValue">
			<summary> Returns a non-animated version of the tile brush. The returned tile brush represents the current object's state at the time this method was called.           </summary>
			<returns>Returns the current value of the tile brush. The returned TileBrush has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="M:System.Windows.Media.TileBrush.GetContentBounds(System.Windows.Rect@)">
			<summary> Obtains the current bounds of the brush's content </summary>
			<param name="contentBounds">Output bounds of content</param>
		</member>
		<member name="P:System.Windows.Media.TileBrush.Stretch">
			<summary> Gets or sets a Stretch enumeration that specifies how the brush's selected content (Viewbox) is displayed in the brush's tiles (Viewport). </summary>
			<returns>Indicates how the brush's content is projected onto the brush's tiles. The default value is <see cref="F:System.Windows.Media.Stretch.Fill"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.TileBrush.TileMode">
			<summary> Gets or sets a value that specifies how the brush's tiles fill the area being painted when the base tile is smaller than the output area. </summary>
			<returns>How the brush's tiles fill the output area when the base tile (specified by the <see cref="P:System.Windows.Media.TileBrush.Viewport"></see> property)  is smaller than the output area.</returns>
		</member>
		<member name="P:System.Windows.Media.TileBrush.Viewbox">
			<summary> Gets or sets the position and dimensions of the brush's content within its tiles. </summary>
			<returns>The position and dimensions of the brush's content. The default value is a Rect with a TopLeft of (0,0) and a Width and Height of 1.</returns>
		</member>
		<member name="P:System.Windows.Media.TileBrush.ViewboxUnits">
			<summary>Gets or sets a <see cref="T:System.Windows.Media.BrushMappingMode"></see> enumeration value that specifies whether the brush's <see cref="P:System.Windows.Media.TileBrush.Viewbox"></see> value is relative or absolute. </summary>
			<returns>A value that indicates whether this brush's <see cref="P:System.Windows.Media.TileBrush.Viewbox"></see> value is relative to the brush's content or is an absolute value. The default value is <see cref="F:System.Windows.Media.BrushMappingMode.RelativeToBoundingBox"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.TileBrush.Viewport">
			<summary> Gets or sets the position and dimensions of the brush's base tile. </summary>
			<returns>The position and dimensions of the brush's base tile.  The default value is a Rect with a TopLeft of (0,0) and a Width and Height of 1. </returns>
		</member>
		<member name="P:System.Windows.Media.TileBrush.ViewportUnits">
			<summary>Gets or sets a BrushMappingMode enumeration that specifies whether the value of the brush's <see cref="P:System.Windows.Media.TileBrush.Viewport"></see>—the size and position of the brush's base tile—is relative to the size of the output area. </summary>
			<returns>Indicates whether the value of the brush's <see cref="P:System.Windows.Media.TileBrush.Viewport"></see>—the size and position of the brush's tiles—is relative to the size of the output area.</returns>
		</member>
		<member name="T:System.Windows.Media.TileMode">
			<summary>Describes the method by which a <see cref="T:System.Windows.Media.TileBrush"></see> tiles an output area. </summary>
		</member>
		<member name="F:System.Windows.Media.TileMode.FlipX">
			<summary> The same as <see cref="F:System.Windows.Media.TileMode.Tile"></see>, but alternate columns of tiles are flipped horizontally. The base tile is drawn untransformed. </summary>
		</member>
		<member name="F:System.Windows.Media.TileMode.FlipXY">
			<summary> The combination of <see cref="F:System.Windows.Media.TileMode.FlipX"></see> and <see cref="F:System.Windows.Media.TileMode.FlipY"></see>. The base tile is drawn untransformed. </summary>
		</member>
		<member name="F:System.Windows.Media.TileMode.FlipY">
			<summary> The same as <see cref="F:System.Windows.Media.TileMode.Tile"></see>, but alternate rows of tiles are flipped vertically. The base tile is drawn untransformed. </summary>
		</member>
		<member name="F:System.Windows.Media.TileMode.None">
			<summary>  Do not tile. Only the base tile is drawn, the remaining area is left as transparent </summary>
		</member>
		<member name="F:System.Windows.Media.TileMode.Tile">
			<summary> The basic tile mode. The base tile is drawn and the remaining area is filled by repeating the base tile such that the right edge of one tile butts the left edge of the next, and similarly for bottom and top </summary>
		</member>
		<member name="T:System.Windows.Media.ToleranceType">
			<summary> ToleranceType - Determines how an error tolerance number will be interpreted. </summary>
		</member>
		<member name="F:System.Windows.Media.ToleranceType.Absolute">
			<summary> Absolute - </summary>
		</member>
		<member name="F:System.Windows.Media.ToleranceType.Relative">
			<summary> Relative - </summary>
		</member>
		<member name="T:System.Windows.Media.Transform">
			<summary> An abstract class that you use as the parent class of all types of transformations in a two-dimensional plane, including rotation (RotateTransform), scale (ScaleTransform), skew (SkewTransform), and translation (TranslateTransform). This class hierarchy differs from the Matrix structure both because it is a class and because it supports animation and enumeration semantics. </summary>
		</member>
		<member name="M:System.Windows.Media.Transform.Clone">
			<summary> Returns a modifiable copy of the transform. </summary>
			<returns>A modifiable copy of the transform. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Transform.CloneCurrentValue">
			<summary> Returns a non-animated version of the transform. The returned transform represents the current object's state at the time this method was called.           </summary>
			<returns>Returns the current value of the transform. The returned Transform has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="M:System.Windows.Media.Transform.TransformBounds(System.Windows.Rect)">
			<summary>Transforms the specified bounding box and returns an axis-aligned bounding box that is exactly large enough to contain it.</summary>
			<returns>The smallest axis-aligned bounding box possible that contains the transformed rect.</returns>
			<param name="rect">The bounding box to transform.</param>
		</member>
		<member name="M:System.Windows.Media.Transform.TryTransform(System.Windows.Point,System.Windows.Point@)">
			<summary>Attempts to transform the specified point and returns a value that indicates whether the transformation was successful. </summary>
			<returns>true if inPoint was transformed; otherwise, false.</returns>
			<param name="inPoint">The point to transform.</param>
			<param name="result">The result of transforming inPoint.</param>
		</member>
		<member name="P:System.Windows.Media.Transform.Identity">
			<summary> Gets an identity transform. </summary>
			<returns>An identity transform.</returns>
		</member>
		<member name="P:System.Windows.Media.Transform.Inverse">
			<summary>Returns the inverse of this transform, if it exists.</summary>
			<returns>The inverse of this transform, if it exists; otherwise, null.</returns>
		</member>
		<member name="P:System.Windows.Media.Transform.Value">
			<summary> Gets the current transformation as a Matrix object. </summary>
			<returns>The current matrix transformation.</returns>
		</member>
		<member name="T:System.Windows.Media.TransformCollection">
			<summary> Represents a collection of Transform objects. </summary>
		</member>
		<member name="M:System.Windows.Media.TransformCollection.#ctor">
			<summary> Initializes a new instance of the TransformCollection class. </summary>
		</member>
		<member name="M:System.Windows.Media.TransformCollection.Add(System.Windows.Media.Transform)">
			<summary> Adds a Transform to the end of the collection. </summary>
			<param name="value">The Transform to add to the end of the collection.</param>
		</member>
		<member name="M:System.Windows.Media.TransformCollection.Clone">
			<summary> Returns a modifiable copy of the collection and its contents. </summary>
			<returns>A modifiable copy of the collection and its contents. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.TransformCollection.CloneCurrentValue">
			<summary> Returns a non-animated version of the collection. The returned collection represents the current object's state at the time this method was called.           </summary>
			<returns>Returns the current value of the collection. The returned TransformCollection has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="M:System.Windows.Media.TransformCollection.Contains(System.Windows.Media.Transform)">
			<summary> Retrieves a Boolean that indicates whether the specified transformation is contained within the collection. </summary>
			<returns>Indicates whether the transformation is contained within the collection.NameValueMeaningtrueThe transformation is contained within the collection.falseThe transformation is not contained within the collection.</returns>
			<param name="value">The transformation to search for.</param>
		</member>
		<member name="M:System.Windows.Media.TransformCollection.CopyTo(System.Windows.Media.Transform[],System.Int32)">
			<summary> Copies the entire TransformCollection to a one-dimensional Transform array, starting at the specified index of the target array. </summary>
			<param name="array">The array into which the collection's items are to be copied.</param>
			<param name="index">The index of array at which to start copying the contents of the TransformCollection.</param>
		</member>
		<member name="M:System.Windows.Media.TransformCollection.IndexOf(System.Windows.Media.Transform)">
			<summary> Returns the index of the specified Transform if it exists in the collection or part of the collection. If the Transform isn't in the collection, this method returns -1. </summary>
			<returns>The location of the specified Transform, if it exists; otherwise, -1.</returns>
			<param name="value">The Transform to locate.</param>
		</member>
		<member name="M:System.Windows.Media.TransformCollection.Insert(System.Int32,System.Windows.Media.Transform)">
			<summary> Inserts a Transform object into the collection at the specified index. </summary>
			<param name="value">The Transform to add.</param>
			<param name="index">The location to insert the Transform object.</param>
		</member>
		<member name="M:System.Windows.Media.TransformCollection.Remove(System.Windows.Media.Transform)">
			<summary> Removes the specified Transform object from the collection, if it exists. </summary>
			<returns>true if value was found and removed from the collection; otherwise, false.</returns>
			<param name="value">The Transform to remove.</param>
		</member>
		<member name="M:System.Windows.Media.TransformCollection.RemoveAt(System.Int32)">
			<summary> Removes the Transform object at the specified index from the collection. </summary>
			<param name="index">The zero-based index of the object to remove.</param>
		</member>
		<member name="P:System.Windows.Media.TransformCollection.Count">
			<summary> Gets the number of transformations contained in the Count. </summary>
			<returns>The number of transformations in the collection.</returns>
		</member>
		<member name="P:System.Windows.Media.TransformCollection.Item(System.Int32)">
			<summary> Gets or sets the transformation at the specified index in the transformation list. </summary>
			<returns>The item at the specified index.</returns>
			<param name="index">The zero-based index of the item to get or set.</param>
		</member>
		<member name="T:System.Windows.Media.TransformCollection.Enumerator">
			<summary>Enumerates <see cref="T:System.Windows.Media.Transform"></see> objects in a <see cref="T:System.Windows.Media.TransformCollection"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.TransformCollection.Enumerator.MoveNext">
			<summary> Advances the enumerator to the next element of the collection. </summary>
			<returns>true if the enumerator was successfully advanced to the next element, false if the enumerator has passed the end of the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.TransformConverter">
			<summary> Used to convert a Transform object to or from another object type. </summary>
		</member>
		<member name="M:System.Windows.Media.TransformConverter.#ctor">
			<summary> Initializes a new instance of the TransformConverter class as a TypeConverter object. </summary>
		</member>
		<member name="M:System.Windows.Media.TransformConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines whether this class can convert an object of a given type to a Transform type. Currently, only string objects can be converted. </summary>
			<returns>Returns true if conversion is possible; otherwise, false.</returns>
			<param name="context">The conversion context.</param>
			<param name="sourceType">The type from which to convert.</param>
		</member>
		<member name="M:System.Windows.Media.TransformConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines whether this class can convert an object of a given type to the specified destination type. </summary>
			<returns>Returns true if conversion is possible, otherwise false.</returns>
			<param name="context">The conversion context.</param>
			<param name="destinationType">The destination type.</param>
		</member>
		<member name="M:System.Windows.Media.TransformConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary> Converts from an object of a given type to a Transform object. </summary>
			<returns>Returns a new Transform object.</returns>
			<param name="culture">The culture information that applies to the conversion.</param>
			<param name="context">The conversion context.</param>
			<param name="value">The object to convert.</param>
			<exception cref="T:System.NotSupportedException">value is NULL or cannot be converted to a Transform.</exception>
		</member>
		<member name="M:System.Windows.Media.TransformConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> Converts the specified Transform to the specified type, using the specified context and culture information. </summary>
			<returns>An object that represents the converted value.</returns>
			<param name="culture">The culture information that applies to the conversion.</param>
			<param name="context">The conversion context.</param>
			<param name="destinationType">The destination type that the value object is converted to.</param>
			<param name="value">The Transform to convert.</param>
			<exception cref="T:System.NotSupportedException">value is NULL or it is not a Transform-or-destinationType is not a valid destination type.</exception>
		</member>
		<member name="T:System.Windows.Media.TransformGroup">
			<summary> Represents a transform that is a composite of the Transforms in its TransformCollection. </summary>
		</member>
		<member name="M:System.Windows.Media.TransformGroup.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TransformGroup"></see> class.</summary>
		</member>
		<member name="F:System.Windows.Media.TransformGroup.ChildrenProperty">
			<summary>Identifies for the <see cref="P:System.Windows.Media.TransformGroup.Children"></see> GTMT#dependency property. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.TransformGroup.Children"></see> GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.TransformGroup.CloneCurrentValue">
			<summary> Returns a non-animated version of the transform group. The returned transform group represents the current object's state at the time this method was called.           </summary>
			<returns>Returns the current value of the transform group. The returned TransformGroup has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="P:System.Windows.Media.TransformGroup.Children">
			<summary> Gets or sets the TransformCollection that defines this TransformGroup. </summary>
			<returns>A collection of transforms that define this TransformGroup.</returns>
		</member>
		<member name="P:System.Windows.Media.TransformGroup.Value">
			<summary> Gets a Matrix structure which is the value of the transform that this TransformGroup represents. </summary>
			<returns>A composite of the transforms in this TransformGroup.</returns>
		</member>
		<member name="T:System.Windows.Media.TranslateTransform">
			<summary>Translates an object in the two-dimensional x-y plane. </summary>
		</member>
		<member name="M:System.Windows.Media.TranslateTransform.#ctor">
			<summary>Initializes a new instance of the TranslateTransform class. </summary>
		</member>
		<member name="M:System.Windows.Media.TranslateTransform.#ctor(System.Double,System.Double)">
			<summary>Initializes a new instance of the TranslateTransform class and specifies displacements in the x- and y-directions. </summary>
			<param name="offsetY">Displacement amount in y direction.</param>
			<param name="offsetX">Displacement in the x-direction.</param>
		</member>
		<member name="F:System.Windows.Media.TranslateTransform.XProperty">
			<summary>Identifies the X GTMT#dependency property. </summary>
			<returns>The X GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.TranslateTransform.YProperty">
			<summary>Identifies the Y GTMT#dependency property. </summary>
			<returns>The Y GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.TranslateTransform.Clone">
			<summary>Returns a modifiable copy of the translate transform. </summary>
			<returns>A modifiable copy of the translate transform. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.TranslateTransform.CloneCurrentValue">
			<summary>Returns a non-animated version of the translate transform. The returned translate transform represents the current object's state at the time this method was called.           </summary>
			<returns>The current value of the translate transform. The returned TranslateTransform has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="P:System.Windows.Media.TranslateTransform.Value">
			<summary>Gets the current translation transformation as a Matrix object. </summary>
			<returns>The current translation transformation.</returns>
		</member>
		<member name="P:System.Windows.Media.TranslateTransform.X">
			<summary>Gets or sets the x-direction component of the translation. </summary>
			<returns>The x-direction component of the translation—that is, the distance to translate, or move, an object along the x-axis.</returns>
		</member>
		<member name="P:System.Windows.Media.TranslateTransform.Y">
			<summary>Gets or sets the y-direction component of the translation. </summary>
			<returns>The y-direction component of the translation—that is, the distance to translate, or move, an object along the y-axis.</returns>
		</member>
		<member name="T:System.Windows.Media.Typeface">
			<summary>Represents a combination of FontFamily, FontWeight, FontStyle, and FontStretch.</summary>
		</member>
		<member name="M:System.Windows.Media.Typeface.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Typeface"></see> class for the specified font family typeface name.</summary>
			<param name="typefaceName">The typeface name for the specified font family.</param>
		</member>
		<member name="M:System.Windows.Media.Typeface.#ctor(System.Windows.Media.FontFamily,System.Windows.FontStyle,System.Windows.FontWeight,System.Windows.FontStretch)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Typeface"></see> class for the specified font family name, Style, Weight, and Stretch values.</summary>
			<param name="stretch">The degree to which the typeface is stretched.</param>
			<param name="style">The style of the typeface.</param>
			<param name="weight">The relative weight of the typeface.</param>
			<param name="fontFamily">The font family of the typeface.</param>
		</member>
		<member name="M:System.Windows.Media.Typeface.#ctor(System.Windows.Media.FontFamily,System.Windows.FontStyle,System.Windows.FontWeight,System.Windows.FontStretch,System.Windows.Media.FontFamily)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Typeface"></see> class for the specified font family name, Style, Weight, and Stretch values. In addition, a fallback font family is specifed. </summary>
			<param name="fallbackFontFamily">The font family that is used when a character is encountered that the primary font family (specified by the fontFamily parameter) cannot display.</param>
			<param name="stretch">The degree to which the typeface is stretched.</param>
			<param name="style">The style of the typeface.</param>
			<param name="weight">The relative weight of the typeface.</param>
			<param name="fontFamily">The font family of the typeface.</param>
		</member>
		<member name="M:System.Windows.Media.Typeface.Equals(System.Object)">
			<summary>Gets a value that indicates whether the current typeface and the specified typeface have the same FontFamily, Style, Weight, Stretch, and fallback font values. </summary>
			<returns>true if o is equal to the current <see cref="T:System.Windows.Media.Typeface"></see> object; otherwise, false. If o is not a <see cref="T:System.Windows.Media.Typeface"></see> object, false is returned.</returns>
			<param name="o">The Typeface to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Typeface.GetHashCode">
			<summary>Serves as a hash function for <see cref="T:System.Windows.Media.Typeface"></see>. It is suitable for use in hashing algorithms and data structures such as a hash table.</summary>
			<returns>An <see cref="T:System.Int32"></see> value that represents the GTMT#hash code for the current object.</returns>
		</member>
		<member name="M:System.Windows.Media.Typeface.TryGetGlyphTypeface(System.Windows.Media.GlyphTypeface@)">
			<summary>Retrieves the <see cref="T:System.Windows.Media.GlyphTypeface"></see> that corresponds to the <see cref="T:System.Windows.Media.Typeface"></see>.</summary>
			<returns>true if the out parameter is set to a <see cref="T:System.Windows.Media.GlyphTypeface"></see> value; otherwise, false.</returns>
			<param name="glyphTypeface"><see cref="T:System.Windows.Media.GlyphTypeface"></see> object that corresponds to this typeface, or null if the typeface was constructed from a composite font.</param>
		</member>
		<member name="P:System.Windows.Media.Typeface.CapsHeight">
			<summary>Gets the distance from the baseline to the top of an English capital letter for the typeface.</summary>
			<returns>A Double that indicates the distance from the baseline to the top of an English capital letter, expressed as a fraction of the font em size.</returns>
		</member>
		<member name="P:System.Windows.Media.Typeface.FaceNames">
			<summary>Gets a collection of culture-specific names for the <see cref="T:System.Windows.Media.Typeface"></see>.</summary>
			<returns>A <see cref="T:System.Windows.Media.LanguageSpecificStringDictionary"></see> value that represents the culture-specific names for the typeface.</returns>
		</member>
		<member name="P:System.Windows.Media.Typeface.FontFamily">
			<summary>Gets the name of the font family from which the typeface was constructed. </summary>
			<returns>The FontFamily from which the typeface was constructed.</returns>
		</member>
		<member name="P:System.Windows.Media.Typeface.IsBoldSimulated">
			<summary>Determines whether to simulate a bold weight for the glyphs represented by the <see cref="T:System.Windows.Media.Typeface"></see>.</summary>
			<returns>true if bold simulation is used for glyphs; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Typeface.IsObliqueSimulated">
			<summary>Determines whether to simulate an italic style for the glyphs represented by the <see cref="T:System.Windows.Media.Typeface"></see>.</summary>
			<returns>true if italic simulation is used for glyphs; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Typeface.Stretch">
			<summary>Gets the stretch value for the <see cref="T:System.Windows.Media.Typeface"></see>. The stretch value determines whether a typeface is expanded or condensed when it is displayed.</summary>
			<returns>A <see cref="T:System.Windows.FontStretch"></see> value that represents the stretch value for the typeface.</returns>
		</member>
		<member name="P:System.Windows.Media.Typeface.StrikethroughPosition">
			<summary>Gets a value that indicates the distance from the baseline to the strikethrough for the typeface.</summary>
			<returns>A Double that indicates the strikethrough position, measured from the baseline and expressed as a fraction of the font em size.</returns>
		</member>
		<member name="P:System.Windows.Media.Typeface.StrikethroughThickness">
			<summary>Gets a value that indicates the thickness of the strikethrough relative to the font em size.</summary>
			<returns>A Double that indicates the strikethrough thickness, expressed as a fraction of the font em size.</returns>
		</member>
		<member name="P:System.Windows.Media.Typeface.Style">
			<summary>Gets the style of the <see cref="T:System.Windows.Media.Typeface"></see>.</summary>
			<returns>A <see cref="T:System.Windows.FontStyle"></see> value that represents the style value for the typeface.</returns>
		</member>
		<member name="P:System.Windows.Media.Typeface.UnderlinePosition">
			<summary>Gets a value that indicates the distance of the underline from the baseline for the typeface.</summary>
			<returns>A Double that indicates the underline position, measured from the baseline and expressed as a fraction of the font em size.</returns>
		</member>
		<member name="P:System.Windows.Media.Typeface.UnderlineThickness">
			<summary>Gets a value that indicates the thickness of the underline relative to the font em size for the typeface.</summary>
			<returns>A Double that indicates the underline thickness, expressed as a fraction of the font em size.</returns>
		</member>
		<member name="P:System.Windows.Media.Typeface.Weight">
			<summary>Gets the relative weight of the typeface.</summary>
			<returns>A <see cref="T:System.Windows.FontWeight"></see> value that represents the relative weight of the typeface.</returns>
		</member>
		<member name="P:System.Windows.Media.Typeface.XHeight">
			<summary>Gets the distance from the baseline to the top of an English lowercase letter for a typeface. The distance excludes ascenders.</summary>
			<returns>A Double that indicates the distance from the baseline to the top of an English lowercase letter (excluding ascenders), expressed as a fraction of the font em size.</returns>
		</member>
		<member name="T:System.Windows.Media.VectorCollection">
			<summary> Represents an ordered collection of Vector structures. </summary>
		</member>
		<member name="M:System.Windows.Media.VectorCollection.#ctor">
			<summary> Initializes a new instance of a VectorCollection. </summary>
		</member>
		<member name="M:System.Windows.Media.VectorCollection.Add(System.Windows.Vector)">
			<summary> Adds a Vector structure to the end of this VectorCollection. </summary>
			<param name="value">The Vector structure to add to this VectorCollection.</param>
		</member>
		<member name="M:System.Windows.Media.VectorCollection.Clone">
			<summary> Returns a modifiable copy of the collection and its contents. </summary>
			<returns>A modifiable copy of the collection and its contents. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.VectorCollection.Contains(System.Windows.Vector)">
			<summary> Determines whether a Vector structure is in this VectorCollection. </summary>
			<returns>true if value, the specified Vector structure, is in this VectorCollection; otherwise, false.</returns>
			<param name="value">The Vector structure to locate in this VectorCollection.</param>
		</member>
		<member name="M:System.Windows.Media.VectorCollection.CopyTo(System.Windows.Vector[],System.Int32)">
			<summary> Copies the items of this VectorCollection, starting the specified index, into an array of Vectors. </summary>
			<param name="array">The array that is the destination of the items copied from this VectorCollection.</param>
			<param name="index">The index at which to being copying.</param>
		</member>
		<member name="M:System.Windows.Media.VectorCollection.IndexOf(System.Windows.Vector)">
			<summary> Gets the index of the first occurrence of the specified Vector structure. </summary>
			<returns>The index of the specified Vector structure.</returns>
			<param name="value">The Vector structure to search for.</param>
		</member>
		<member name="M:System.Windows.Media.VectorCollection.Insert(System.Int32,System.Windows.Vector)">
			<summary> Inserts a Vector structure into this VectorCollection at the specified index. </summary>
			<param name="value">The Vector structure to insert.</param>
			<param name="index">The index at which to insert value, the specified Vector structure.</param>
		</member>
		<member name="M:System.Windows.Media.VectorCollection.Parse(System.String)">
			<summary> Converts a String representation of a collection of vectors into an equivalent VectorCollection.      </summary>
			<returns>Returns the equivalent VectorCollection. </returns>
			<param name="source">The String representation of the collection of vectors. </param>
		</member>
		<member name="M:System.Windows.Media.VectorCollection.Remove(System.Windows.Vector)">
			<summary> Removes the first occurrence of the specified Vector structure from this VectorCollection. </summary>
			<param name="value">The Vector structure to remove from this VectorCollection.</param>
		</member>
		<member name="M:System.Windows.Media.VectorCollection.RemoveAt(System.Int32)">
			<summary> Removes the Vector structure at the specified index from this VectorCollection. </summary>
			<param name="index">The index of the Vector structure to remove.</param>
		</member>
		<member name="M:System.Windows.Media.VectorCollection.ToString">
			<summary> Creates a String representation of this VectorCollection. </summary>
			<returns>Returns a String containing the X and Y values of the Vector structures in this VectorCollection.</returns>
		</member>
		<member name="M:System.Windows.Media.VectorCollection.ToString(System.IFormatProvider)">
			<summary> Creates a String representation of this VectorCollection. </summary>
			<returns>Returns a String containing the X and Y values of the Vector structures in this VectorCollection.</returns>
			<param name="provider">Culture-specific formatting information.</param>
		</member>
		<member name="P:System.Windows.Media.VectorCollection.Count">
			<summary> Gets the number of items contained in a VectorCollection.    </summary>
			<returns>The number of items contained in a VectorCollection. </returns>
		</member>
		<member name="P:System.Windows.Media.VectorCollection.Item(System.Int32)">
			<summary> Gets or sets the Vector at the specified zero-based index. </summary>
			<returns>The Vector at the specified index.</returns>
			<param name="index">The zero-based index of the Vector to get or set.</param>
		</member>
		<member name="T:System.Windows.Media.VectorCollection.Enumerator">
			<summary> Enumerates <see cref="T:System.Windows.Vector"></see> structures in a <see cref="T:System.Windows.Media.VectorCollection"></see>. </summary>
		</member>
		<member name="M:System.Windows.Media.VectorCollection.Enumerator.MoveNext">
			<summary> Advances the enumerator to the next element of the collection. </summary>
			<returns>true if the enumerator was successfully advanced to the next element, false if the enumerator has passed the end of the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.VectorCollectionConverter">
			<summary>Converts instances of other types to and from a VectorCollection. </summary>
		</member>
		<member name="M:System.Windows.Media.VectorCollectionConverter.#ctor">
			<summary>Initializes a new instance of VectorCollection. </summary>
		</member>
		<member name="M:System.Windows.Media.VectorCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether an object can be converted from a given type to an instance of a VectorCollection.  </summary>
			<returns>true if the type can be converted to a VectorCollection; otherwise, false.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="sourceType">The type of the source that is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Media.VectorCollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether an instance of a VectorCollection can be converted to a different type. </summary>
			<returns>true if this VectorCollection can be converted to destinationType; otherwise, false.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The desired type this VectorCollection is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Media.VectorCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary>Attempts to convert the specified object to a VectorCollection. </summary>
			<returns>The VectorCollection created from converting value.</returns>
			<param name="td">Describes the context information of a type.</param>
			<param name="cultureInfo">Describes the CultureInfo of the type being converted.</param>
			<param name="value">The object being converted.</param>
		</member>
		<member name="M:System.Windows.Media.VectorCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary>Attempts to convert a VectorCollection to a specified type. </summary>
			<returns>The object created from converting this VectorCollection.</returns>
			<param name="culture">Describes the CultureInfo of the type being converted.</param>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The type to convert this VectorCollection to.</param>
			<param name="value">The VectorCollection to convert.</param>
		</member>
		<member name="T:System.Windows.Media.VideoDrawing">
			<summary>Draws video to a specified rectangle.</summary>
		</member>
		<member name="M:System.Windows.Media.VideoDrawing.#ctor">
			<summary>Initializes a new instance of the VideoDrawing class.</summary>
		</member>
		<member name="F:System.Windows.Media.VideoDrawing.PlayerProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.VideoDrawing.Player"></see> GTMT#dependency property.</summary>
		</member>
		<member name="P:System.Windows.Media.VideoDrawing.Player">
			<summary>Gets or sets the media player associated with the drawing.</summary>
			<returns>The media player associated with the drawing.</returns>
		</member>
		<member name="P:System.Windows.Media.VideoDrawing.Rect">
			<summary>Gets or sets the rectangular area in which the video is drawn.</summary>
			<returns>The rectangle in which the video is drawn.</returns>
		</member>
		<member name="T:System.Windows.Media.Visual">
			<summary>Provides services and properties, which include hit testing, coordinate transformation, and bounding box calculations, that are common to all visual objects. This is the base class for all types that are derived from the <see cref="T:System.Windows.Media.Visual"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Visual.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Visual"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Visual.AddVisualChild(System.Windows.Media.Visual)">
			<summary>Adds a visual object to the visual collection of a parent.</summary>
			<param name="child">The visual object to add to the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Visual.FindCommonVisualAncestor(System.Windows.DependencyObject)">
			<summary>Finds the common ancestor of two visuals objects.</summary>
			<returns>Returns the common ancestor of the visual object and otherVisual; otherwise null.</returns>
			<param name="otherVisual">A value of type <see cref="T:System.Windows.DependencyObject"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)">
			<summary>Returns the specified <see cref="T:System.Windows.Media.Visual"></see> in the parent <see cref="T:System.Windows.Media.VisualCollection"></see>. </summary>
			<returns>The child in the <see cref="T:System.Windows.Media.VisualCollection"></see> at the specified index value.</returns>
			<param name="index">The index of the visual object in the <see cref="T:System.Windows.Media.VisualCollection"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
			<summary>Determines whether a geometry value is within the bounds of the visual object.</summary>
			<returns>Returns a value of type <see cref="T:System.Windows.Media.GeometryHitTestResult"></see>.</returns>
			<param name="hitTestParameters">A value of type <see cref="T:System.Windows.Media.GeometryHitTestParameters"></see> that specifies the <see cref="T:System.Windows.Media.Geometry"></see> to hit test against.</param>
		</member>
		<member name="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)">
			<summary>Determines whether a point coordinate value is within the bounds of the visual object.</summary>
			<returns>Returns a value of type <see cref="T:System.Windows.Media.HitTestResult"></see> that represents the <see cref="T:System.Windows.Media.Visual"></see> that is returned from a hit test.</returns>
			<param name="hitTestParameters">A value of type <see cref="T:System.Windows.Media.PointHitTestParameters"></see> that specifies the <see cref="T:System.Windows.Point"></see> to hit test against.</param>
		</member>
		<member name="M:System.Windows.Media.Visual.IsAncestorOf(System.Windows.DependencyObject)">
			<summary>Determines whether the visual object is an ancestor of the descendant visual object.</summary>
			<returns>true if the visual object is an ancestor of descendant; otherwise, false.</returns>
			<param name="descendant">A value of type <see cref="T:System.Windows.DependencyObject"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.Visual.IsDescendantOf(System.Windows.DependencyObject)">
			<summary>Determines whether the visual object is a descendant of the ancestor visual object.</summary>
			<returns>true if the visual object is a descendant of ancestor; otherwise, false.</returns>
			<param name="ancestor">A value of type <see cref="T:System.Windows.DependencyObject"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.Visual.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
			<summary>Called when the <see cref="T:System.Windows.Media.VisualCollection"></see> of the visual object is modified.</summary>
			<param name="visualRemoved">The <see cref="T:System.Windows.Media.Visual"></see> that was removed from the collection</param>
			<param name="visualAdded">The <see cref="T:System.Windows.Media.Visual"></see> that was added to the collection</param>
		</member>
		<member name="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)">
			<summary>Called when the parent of the visual object is changed.</summary>
			<param name="oldParent">A value of type <see cref="T:System.Windows.DependencyObject"></see> that represents the previous parent of the <see cref="T:System.Windows.Media.Visual"></see> object. If the <see cref="T:System.Windows.Media.Visual"></see> object did not have a previous parent, the value of the parameter is null.</param>
		</member>
		<member name="M:System.Windows.Media.Visual.RemoveVisualChild(System.Windows.Media.Visual)">
			<summary>Removes the specified visual object from the <see cref="T:System.Windows.Media.VisualCollection"></see> of the parent visual.</summary>
			<param name="child">The <see cref="T:System.Windows.Media.Visual"></see> to remove from the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Visual)">
			<summary>Returns a transform that can be used to transform coordinates from the <see cref="T:System.Windows.Media.Visual"></see> to the specified ancestor of the visual object.</summary>
			<returns>A value of type <see cref="T:System.Windows.Media.GeneralTransform"></see>.</returns>
			<param name="ancestor">The <see cref="T:System.Windows.Media.Visual"></see> to which the coordinates are transformed.</param>
			<exception cref="T:System.ArgumentNullException">ancestor is null.</exception>
			<exception cref="T:System.ArgumentException">ancestor is not an ancestor of the visual.</exception>
			<exception cref="T:System.InvalidOperationException">The visual objects are not related.</exception>
		</member>
		<member name="M:System.Windows.Media.Visual.TransformToDescendant(System.Windows.Media.Visual)">
			<summary>Returns a transform that can be used to transform coordinates from the <see cref="T:System.Windows.Media.Visual"></see> to the specified visual object descendant.</summary>
			<returns>A value of type <see cref="T:System.Windows.Media.GeneralTransform"></see>.</returns>
			<param name="descendant">The <see cref="T:System.Windows.Media.Visual"></see> to which the coordinates are transformed.</param>
			<exception cref="T:System.InvalidOperationException">The visual objects are not related.</exception>
			<exception cref="T:System.ArgumentNullException">descendant is null.</exception>
			<exception cref="T:System.ArgumentException">The visual is not an ancestor of the descendant visual.</exception>
		</member>
		<member name="M:System.Windows.Media.Visual.TransformToVisual(System.Windows.Media.Visual)">
			<summary>Returns a transform that can be used to transform coordinates from the <see cref="T:System.Windows.Media.Visual"></see> to the specified visual object.</summary>
			<returns>A value of type <see cref="T:System.Windows.Media.GeneralTransform"></see>.</returns>
			<param name="visual">The <see cref="T:System.Windows.Media.Visual"></see> to which the coordinates are transformed.</param>
			<exception cref="T:System.InvalidOperationException">The visual objects are not related.</exception>
			<exception cref="T:System.ArgumentNullException">visual is null.</exception>
		</member>
		<member name="P:System.Windows.Media.Visual.VisualBitmapEffect">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.Effects.BitmapEffect"></see> value for the <see cref="T:System.Windows.Media.Visual"></see>.</summary>
			<returns>The bitmap effect for this visual object.</returns>
		</member>
		<member name="P:System.Windows.Media.Visual.VisualBitmapEffectInput">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.Effects.BitmapEffectInput"></see> value for the <see cref="T:System.Windows.Media.Visual"></see>.</summary>
			<returns>The bitmap effect input value for this visual object.</returns>
		</member>
		<member name="P:System.Windows.Media.Visual.VisualChildrenCount">
			<summary>Gets the number of child elements for the <see cref="T:System.Windows.Media.Visual"></see>.</summary>
			<returns>An <see cref="T:System.Int32"></see> value that represents the number of child elements.</returns>
		</member>
		<member name="P:System.Windows.Media.Visual.VisualClip">
			<summary>Gets or sets the clip region of the <see cref="T:System.Windows.Media.Visual"></see> as a <see cref="T:System.Windows.Media.Geometry"></see> value.</summary>
			<returns>The clip region value of the visual as a <see cref="T:System.Windows.Media.Geometry"></see> type.</returns>
		</member>
		<member name="P:System.Windows.Media.Visual.VisualOffset">
			<summary>Gets or sets the offset value of the visual object.</summary>
			<returns>A value of type <see cref="T:System.Windows.Vector"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Visual.VisualOpacity">
			<summary>Gets or sets the opacity of the <see cref="T:System.Windows.Media.Visual"></see>.</summary>
			<returns>A value of type <see cref="T:System.Double"></see> that represents the opacity value of the visual.</returns>
		</member>
		<member name="P:System.Windows.Media.Visual.VisualOpacityMask">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.Brush"></see> value that represents the opacity mask of the <see cref="T:System.Windows.Media.Visual"></see>.</summary>
			<returns>A value of type <see cref="T:System.Windows.Media.Brush"></see> that represents the opacity mask value of the visual.</returns>
		</member>
		<member name="P:System.Windows.Media.Visual.VisualParent">
			<summary>Gets the parent of the visual object.</summary>
			<returns>Returns the <see cref="T:System.Windows.Media.Visual"></see> parent.</returns>
		</member>
		<member name="P:System.Windows.Media.Visual.VisualTransform">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.Transform"></see> value for the <see cref="T:System.Windows.Media.Visual"></see>.</summary>
			<returns>The transform value of the visual.</returns>
		</member>
		<member name="P:System.Windows.Media.Visual.VisualXSnappingGuidelines">
			<summary>Gets or sets the x-coordinate (vertical) guideline collection.</summary>
			<returns>The x-coordinate guideline collection of the visual.</returns>
		</member>
		<member name="P:System.Windows.Media.Visual.VisualYSnappingGuidelines">
			<summary>Gets or sets the y-coordinate (horizontal) guideline collection.</summary>
			<returns>The y-coordinate guideline collection of the visual.</returns>
		</member>
		<member name="T:System.Windows.Media.VisualBrush">
			<summary> Paints an area with a Visual. </summary>
		</member>
		<member name="M:System.Windows.Media.VisualBrush.#ctor">
			<summary> Default constructor for VisualBrush. The resulting Brush has no content. </summary>
		</member>
		<member name="M:System.Windows.Media.VisualBrush.#ctor(System.Windows.Media.Visual)">
			<summary> VisualBrush Constructor where the image is set to the parameter's value </summary>
			<param name="visual">The Visual representing the contents of this Brush.</param>
		</member>
		<member name="M:System.Windows.Media.VisualBrush.Clone">
			<summary>Returns a modifiable clone of this instance.</summary>
			<returns>A modifiable clone of this instance. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The copy's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property is false.</returns>
		</member>
		<member name="P:System.Windows.Media.VisualBrush.Visual">
			<summary> Gets or sets the brush's content. </summary>
			<returns>The brush's content. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.VisualCollection">
			<summary>An ordered collection of Visual objects. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.Media.VisualCollection.#ctor(System.Windows.Media.Visual)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.VisualCollection"></see> class.</summary>
			<param name="parent">The parent visual object whose <see cref="T:System.Windows.Media.VisualCollection"></see> is returned.</param>
		</member>
		<member name="M:System.Windows.Media.VisualCollection.Add(System.Windows.Media.Visual)">
			<summary>Appends a <see cref="T:System.Windows.Media.Visual"></see> to the end of the VisualCollection. </summary>
			<param name="visual">The <see cref="T:System.Windows.Media.Visual"></see> to append to the <see cref="T:System.Windows.Media.VisualCollection"></see>.</param>
			<exception cref="T:System.ArgumentException">An <see cref="T:System.ArgumentException"></see> is thrown if the <see cref="T:System.Windows.Media.Visual"></see> is a root element.</exception>
		</member>
		<member name="M:System.Windows.Media.VisualCollection.Contains(System.Windows.Media.Visual)">
			<summary>Returns a Boolean value that indicates whether the specified Visual is contained in the collection.</summary>
			<returns>true if visual is contained in the collection; otherwise, false.</returns>
			<param name="visual">The <see cref="T:System.Windows.Media.Visual"></see> to search for in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.VisualCollection.CopyTo(System.Array,System.Int32)">
			<summary>Copies the items in the collection to an array, starting at a specific array index.</summary>
			<param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements that are copied from the <see cref="T:System.Windows.Media.VisualCollection"></see>.</param>
			<param name="index">The zero-based index in array at which copying begins.</param>
		</member>
		<member name="M:System.Windows.Media.VisualCollection.CopyTo(System.Windows.Media.Visual[],System.Int32)">
			<summary>Copies the current collection into the passed <see cref="T:System.Windows.Media.Visual"></see> array.</summary>
			<param name="array">An array of <see cref="T:System.Windows.Media.Visual"></see> objects (which must have zero-based indexing).</param>
			<param name="index">The index to start copying from within array.</param>
		</member>
		<member name="M:System.Windows.Media.VisualCollection.GetEnumerator">
			<summary>Retrieves an enumerator that can iterate through the <see cref="T:System.Windows.Media.VisualCollection"></see>.</summary>
			<returns>An Enumerator that can be used to iterate through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.VisualCollection.IndexOf(System.Windows.Media.Visual)">
			<summary>Returns the zero-based index of the <see cref="T:System.Windows.Media.Visual"></see>. If the <see cref="T:System.Windows.Media.Visual"></see> is not in the <see cref="T:System.Windows.Media.VisualCollection"></see>, -1 is returned. If null is passed to the method, the index of the first entry that has null is returned. If there is no null entry, -1 is returned.</summary>
			<param name="visual">The <see cref="T:System.Windows.Media.Visual"></see> to locate in the <see cref="T:System.Windows.Media.VisualCollection"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.VisualCollection.Insert(System.Int32,System.Windows.Media.Visual)">
			<summary>Inserts an element into the <see cref="T:System.Windows.Media.VisualCollection"></see> at the specified index.</summary>
			<param name="visual">The <see cref="T:System.Windows.Media.Visual"></see> to insert into the <see cref="T:System.Windows.Media.VisualCollection"></see>.</param>
			<param name="index">The zero-based index at which the value should be inserted.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">index is less than zero or greater than <see cref="P:System.Windows.Media.VisualCollection.Count"></see>.</exception>
		</member>
		<member name="M:System.Windows.Media.VisualCollection.Remove(System.Windows.Media.Visual)">
			<summary>Removes the specified <see cref="T:System.Windows.Media.Visual"></see> object from the <see cref="T:System.Windows.Media.VisualCollection"></see>.</summary>
			<param name="visual">The <see cref="T:System.Windows.Media.Visual"></see> to remove from the <see cref="T:System.Windows.Media.VisualCollection"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.VisualCollection.RemoveAt(System.Int32)">
			<summary>Removes the visual object at the specified index in the <see cref="T:System.Windows.Media.VisualCollection"></see>.</summary>
			<param name="index">The zero-based index of the visual to remove.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">index is less than zero, or index is equal to or greater than <see cref="P:System.Windows.Media.VisualCollection.Count"></see>.</exception>
		</member>
		<member name="M:System.Windows.Media.VisualCollection.RemoveRange(System.Int32,System.Int32)">
			<summary>Removes a range of visual objects from the <see cref="T:System.Windows.Media.VisualCollection"></see>.</summary>
			<param name="count">The number of elements to remove.</param>
			<param name="index">The zero-based index of the range of elements to remove.</param>
			<exception cref="T:System.ArgumentException">index and count do not refer to a valid range of elements in the <see cref="T:System.Windows.Media.VisualCollection"></see>.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">index is less than zero or count is less than zero.</exception>
		</member>
		<member name="P:System.Windows.Media.VisualCollection.Capacity">
			<summary>Gets or sets the number of elements that the <see cref="T:System.Windows.Media.VisualCollection"></see> can contain.</summary>
			<exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Windows.Media.VisualCollection.Capacity"></see> is set to a value that is less than <see cref="P:System.Windows.Media.VisualCollection.Count"></see>.</exception>
		</member>
		<member name="P:System.Windows.Media.VisualCollection.Count">
			<summary>Gets the number of elements in the collection.</summary>
			<returns>The number of elements that the <see cref="T:System.Windows.Media.VisualCollection"></see> actually contains.</returns>
		</member>
		<member name="P:System.Windows.Media.VisualCollection.IsReadOnly">
			<summary>Gets a value that indicates whether the <see cref="T:System.Windows.Media.VisualCollection"></see> is read-only.</summary>
			<returns>This property is always false for all <see cref="T:System.Windows.Media.VisualCollection"></see> objects.</returns>
		</member>
		<member name="P:System.Windows.Media.VisualCollection.IsSynchronized">
			<summary>Gets a value that indicates whether access to the <see cref="T:System.Windows.Media.VisualCollection"></see> is synchronized (thread-safe). </summary>
			<returns>This property is always false for all <see cref="T:System.Windows.Media.VisualCollection"></see> objects.</returns>
		</member>
		<member name="P:System.Windows.Media.VisualCollection.Item(System.Int32)">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.Visual"></see> that is stored at the zero-based index of the <see cref="T:System.Windows.Media.VisualCollection"></see>. </summary>
			<param name="index">The zero-based index of the <see cref="T:System.Windows.Media.VisualCollection"></see> from which to get or set the <see cref="T:System.Windows.Media.Visual"></see>.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">index is less than zero, or index is equal to or greater than <see cref="P:System.Windows.Media.VisualCollection.Count"></see>.</exception>
			<exception cref="T:System.ArgumentException">The new child element already has a parent, or the value at the specified index is not null.</exception>
		</member>
		<member name="P:System.Windows.Media.VisualCollection.SyncRoot">
			<summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Windows.Media.VisualCollection"></see>.</summary>
			<returns>A value of type <see cref="T:System.Object"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.VisualCollection.Enumerator">
			<summary>Enumerates items in a collection.</summary>
		</member>
		<member name="M:System.Windows.Media.VisualCollection.Enumerator.MoveNext">
			<summary>Advances the enumerator to the next element of the collection.</summary>
			<returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
		</member>
		<member name="P:System.Windows.Media.VisualCollection.Enumerator.Current">
			<summary>Gets the current element in the collection.</summary>
			<returns>The <see cref="T:System.Windows.Media.Visual"></see> that represents the current element in the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.VisualTarget.#ctor(System.Windows.Media.HostVisual)">
			<summary>Constructor that creates a new <see cref="T:System.Windows.Media.VisualTarget"></see>.</summary>
			<param name="hostVisual">A value of type <see cref="T:System.Windows.Media.HostVisual"></see>.</param>
		</member>
		<member name="P:System.Windows.Media.VisualTarget.TransformFromDevice">
			<summary>Returns a matrix that can be used to transform coordinates from the rendering destination device to the <see cref="T:System.Windows.Media.VisualTarget"></see>.</summary>
			<returns>Gets a value of type <see cref="T:System.Windows.Media.Matrix"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.VisualTarget.TransformToDevice">
			<summary>Returns a matrix that can be used to transform coordinates from the <see cref="T:System.Windows.Media.VisualTarget"></see> to the rendering destination device.</summary>
			<returns>Gets a value of type <see cref="T:System.Windows.Media.Matrix"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.VisualTreeHelper">
			<summary>Contains static methods that are useful for performing common tasks with nodes in a GTMT#visual tree. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.Media.VisualTreeHelper.GetBitmapEffect(System.Windows.Media.Visual)">
			<summary>Gets the <see cref="T:System.Windows.Media.Effects.BitmapEffect"></see> value for the <see cref="T:System.Windows.Media.Visual"></see>.</summary>
			<returns>The bitmap effect for this instance.</returns>
			<param name="reference">The visual that contains the bitmap effect.</param>
		</member>
		<member name="M:System.Windows.Media.VisualTreeHelper.GetBitmapEffectInput(System.Windows.Media.Visual)">
			<summary>Gets the <see cref="T:System.Windows.Media.Effects.BitmapEffectInput"></see> value for the <see cref="T:System.Windows.Media.Visual"></see>.</summary>
			<returns>The bitmap effect input value for this instance.</returns>
			<param name="reference">The visual that contains the bitmap effect input value.</param>
		</member>
		<member name="M:System.Windows.Media.VisualTreeHelper.GetChild(System.Windows.DependencyObject,System.Int32)">
			<summary>Returns the child <see cref="T:System.Windows.Media.Visual"></see> of a parent at the specified index.</summary>
			<returns>The index value of the child visual.</returns>
			<param name="childIndex">The index that represents the child visual that is contained by reference.</param>
			<param name="reference">The parent visual that is referenced as a <see cref="T:System.Windows.DependencyObject"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.VisualTreeHelper.GetChildrenCount(System.Windows.DependencyObject)">
			<summary>Returns the number of children that a parent visual contains.</summary>
			<returns>The number of child visuals that the parent visual contains.</returns>
			<param name="reference">The parent visual that is referenced as a <see cref="T:System.Windows.DependencyObject"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.VisualTreeHelper.GetClip(System.Windows.Media.Visual)">
			<summary>Return the clip region of the <see cref="T:System.Windows.Media.Visual"></see> as a <see cref="T:System.Windows.Media.Geometry"></see> value.</summary>
			<returns>The clip region value of the visual returned as a <see cref="T:System.Windows.Media.Geometry"></see> type.</returns>
			<param name="reference">The visual whose clip region value is returned.</param>
		</member>
		<member name="M:System.Windows.Media.VisualTreeHelper.GetContentBounds(System.Windows.Media.Visual)">
			<summary>Returns the cached bounding box rectangle for the <see cref="T:System.Windows.Media.Visual"></see>.</summary>
			<returns>Returns the bounding box rectangle for the visual.</returns>
			<param name="reference">The visual whose bounding box value is computed.</param>
		</member>
		<member name="M:System.Windows.Media.VisualTreeHelper.GetContentBounds(System.Windows.Media.Media3D.Visual3D)">
			<summary>Returns the cached bounding box rectangle for the <see cref="T:System.Windows.Media.Media3D.Visual3D"></see>.</summary>
			<returns>Returns the bounding box 3D rectangle for the 3D visual.</returns>
			<param name="reference">The 3D visual whose bounding box value is computed.</param>
		</member>
		<member name="M:System.Windows.Media.VisualTreeHelper.GetDescendantBounds(System.Windows.Media.Visual)">
			<summary>Returns the union of all the content bounding boxes for all the descendants of the <see cref="T:System.Windows.Media.Visual"></see>, including the content bounding box of the <see cref="T:System.Windows.Media.Visual"></see>.</summary>
			<returns>Returns the bounding box rectangle for the visual.</returns>
			<param name="reference">The visual whose bounding box value for all descendants is computed.</param>
		</member>
		<member name="M:System.Windows.Media.VisualTreeHelper.GetDescendantBounds(System.Windows.Media.Media3D.Visual3D)">
			<summary>Returns the union of all the content bounding boxes for all the descendants of the <see cref="T:System.Windows.Media.Media3D.Visual3D"></see>, including the content bounding box of the <see cref="T:System.Windows.Media.Media3D.Visual3D"></see>.</summary>
			<returns>Returns the bounding box 3D rectangle for the 3D visual.</returns>
			<param name="reference">The 3D visual whose bounding box value for all descendants is computed.</param>
		</member>
		<member name="M:System.Windows.Media.VisualTreeHelper.GetDrawing(System.Windows.Media.Visual)">
			<summary>Returns the drawing content of the <see cref="T:System.Windows.Media.Visual"></see>.</summary>
			<returns>The drawing content of the visual returned as a <see cref="T:System.Windows.Media.DrawingGroup"></see> type.</returns>
			<param name="reference">The visual whose drawing content is returned.</param>
		</member>
		<member name="M:System.Windows.Media.VisualTreeHelper.GetEdgeMode(System.Windows.Media.Visual)">
			<summary>Return the edge mode of the <see cref="T:System.Windows.Media.Visual"></see> as an <see cref="T:System.Windows.Media.EdgeMode"></see> value.</summary>
			<returns>The <see cref="T:System.Windows.Media.EdgeMode"></see> value of the visual.</returns>
			<param name="reference">The visual whose edge mode value is returned.</param>
		</member>
		<member name="M:System.Windows.Media.VisualTreeHelper.GetOffset(System.Windows.Media.Visual)">
			<summary>Returns the offset of the <see cref="T:System.Windows.Media.Visual"></see>.</summary>
			<returns>A <see cref="T:System.Windows.Vector"></see> that represents the offset value of the visual.</returns>
			<param name="reference">The visual whose offset is returned.</param>
		</member>
		<member name="M:System.Windows.Media.VisualTreeHelper.GetOpacity(System.Windows.Media.Visual)">
			<summary>Returns the opacity of the <see cref="T:System.Windows.Media.Visual"></see>.</summary>
			<returns>A value of type <see cref="T:System.Double"></see> that represents the opacity value of the visual.</returns>
			<param name="reference">The visual whose opacity value is returned.</param>
		</member>
		<member name="M:System.Windows.Media.VisualTreeHelper.GetOpacityMask(System.Windows.Media.Visual)">
			<summary>Returns a <see cref="T:System.Windows.Media.Brush"></see> value that represents the opacity mask of the <see cref="T:System.Windows.Media.Visual"></see>.</summary>
			<returns>A value of type <see cref="T:System.Windows.Media.Brush"></see> that represents the opacity mask value of the visual.</returns>
			<param name="reference">The visual whose opacity mask value is returned.</param>
		</member>
		<member name="M:System.Windows.Media.VisualTreeHelper.GetParent(System.Windows.DependencyObject)">
			<summary>Returns a <see cref="T:System.Windows.DependencyObject"></see> value that represents the GTMT#parent of the visual object.</summary>
			<returns>The parent of the visual.</returns>
			<param name="reference">The visual whose parent is returned.</param>
		</member>
		<member name="M:System.Windows.Media.VisualTreeHelper.GetTransform(System.Windows.Media.Visual)">
			<summary>Returns a <see cref="T:System.Windows.Media.Transform"></see> value for the <see cref="T:System.Windows.Media.Visual"></see>.</summary>
			<returns>The transform value of the visual, or null if reference does not have a transform defined.</returns>
			<param name="reference">The visual whose transform value is returned.</param>
		</member>
		<member name="M:System.Windows.Media.VisualTreeHelper.GetXSnappingGuidelines(System.Windows.Media.Visual)">
			<summary>Returns an X-coordinate (vertical) guideline collection.</summary>
			<returns>The X-coordinate guideline collection of the visual.</returns>
			<param name="reference">The visual whose X-coordinate guideline collection is returned.</param>
		</member>
		<member name="M:System.Windows.Media.VisualTreeHelper.GetYSnappingGuidelines(System.Windows.Media.Visual)">
			<summary>Returns a Y-coordinate (horizontal) guideline collection.</summary>
			<returns>The Y-coordinate guideline collection of the visual.</returns>
			<param name="reference">The visual whose Y-coordinate guideline collection is returned.</param>
		</member>
		<member name="M:System.Windows.Media.VisualTreeHelper.HitTest(System.Windows.Media.Visual,System.Windows.Point)">
			<summary>Returns the top-most visual object of a hit test by specifying a <see cref="T:System.Windows.Point"></see>.</summary>
			<returns>The hit test result of the visual returned as a <see cref="T:System.Windows.Media.HitTestResult"></see> type.</returns>
			<param name="reference">The visual to hit test.</param>
			<param name="point">The point value to hit test against.</param>
		</member>
		<member name="M:System.Windows.Media.VisualTreeHelper.HitTest(System.Windows.Media.Visual,System.Windows.Media.HitTestFilterCallback,System.Windows.Media.HitTestResultCallback,System.Windows.Media.HitTestParameters)">
			<summary>Initiate a hit test on the <see cref="T:System.Windows.Media.Visual"></see> by using the <see cref="T:System.Windows.Media.HitTestFilterCallback"></see> and <see cref="T:System.Windows.Media.HitTestResultCallback"></see> objects.</summary>
			<param name="hitTestParameters">The parameter value to hit test against.</param>
			<param name="reference">The visual to hit test.</param>
			<param name="resultCallback">The method that represents the hit test result callback value.</param>
			<param name="filterCallback">The method that represents the hit test filter callback value.</param>
		</member>
		<member name="M:System.Windows.Media.VisualTreeHelper.HitTest(System.Windows.Media.Media3D.Visual3D,System.Windows.Media.HitTestFilterCallback,System.Windows.Media.HitTestResultCallback,System.Windows.Media.Media3D.HitTestParameters3D)">
			<summary>Initiate a hit test on the <see cref="T:System.Windows.Media.Media3D.Visual3D"></see> by using the <see cref="T:System.Windows.Media.HitTestFilterCallback"></see> and <see cref="T:System.Windows.Media.HitTestResultCallback"></see> objects.</summary>
			<param name="hitTestParameters">The 3D parameter value to hit test against.</param>
			<param name="reference">The 3D visual to hit test.</param>
			<param name="resultCallback">The method that represents the hit test result callback value.</param>
			<param name="filterCallback">The method that represents the hit test filter callback value.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.Animatable">
			<summary>Abstract class that provides animation support. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Animatable.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Animatable"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
			<summary>Applies an <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> to the specified <see cref="T:System.Windows.DependencyProperty"></see>. If the property is already animated, the <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace"></see> handoff behavior is used.</summary>
			<param name="dp">The property to animate.</param>
			<param name="clock">The clock with which to animate the specified property. If clock is null, all animations will be removed from the specified property. </param>
		</member>
		<member name="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
			<summary>Applies an <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> to the specified <see cref="T:System.Windows.DependencyProperty"></see>. If the property is already animated, the specified <see cref="T:System.Windows.Media.Animation.HandoffBehavior"></see> is used.</summary>
			<param name="handoffBehavior">A value that specifies how the new animation should interact with any current animations already affecting the property value.</param>
			<param name="dp">The property to animate.</param>
			<param name="clock">The clock with which to animate the specified property. If handoffBehavior is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace"></see> and clock is null, all animations will be removed from the specified property. If handoffBehavior is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose"></see> and clock is null, this method has no effect.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
			<summary>Applies an animation to the specified <see cref="T:System.Windows.DependencyProperty"></see>. The animation is started when the next frame is rendered. If the specified property is already animated, the <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace"></see> handoff behavior is used.</summary>
			<param name="animation">The animation used to animate the specified property.If the animation's <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime"></see> is null, any current animations will be removed and the current value of the property will be held.If animation is null, all animations will be removed from the property and the property value will revert back to its base value.</param>
			<param name="dp">The property to animate.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
			<summary>Applies an animation to the specified <see cref="T:System.Windows.DependencyProperty"></see>. The animation is started when the next frame is rendered. If the specified property is already animated, the specified <see cref="T:System.Windows.Media.Animation.HandoffBehavior"></see> is used. </summary>
			<param name="handoffBehavior">A value that specifies how the new animation should interact with any current animations already affecting the property value.</param>
			<param name="animation">The animation used to animate the specified property.If handoffBehavior is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace"></see> and the animation's <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime"></see> is null, any current animations will be removed and the current value of the property will be held. If handoffBehavior is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace"></see> and animation is a null reference, all animations will be removed from the property and the property value will revert back to its base value.If handoffBehavior is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose"></see>, this method will have no effect if the animation or its <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime"></see> is null.</param>
			<param name="dp">The property to animate.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Animatable.Clone">
			<summary>Returns a modifiable copy of this instance. </summary>
			<returns>A modifiable clone of this instance. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)">
			<summary> An Animatable will return false from this method if there are any Clocks animating any of its properties. If the Animatable has persistent animations specified, but all of the Clocks have been removed, it may still return true from this method if the Timelines themselves can be frozen. </summary>
			<returns>True if this object can be frozen; otherwise false.</returns>
			<param name="isChecking">True if the Freezable should actually Freeze itself; false if the Freezable should simply return whether it can be frozen.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)">
			<summary>Returns the non-animated value of the specified <see cref="T:System.Windows.DependencyProperty"></see>.</summary>
			<returns>The value that would be returned if the specified property were not animated. </returns>
			<param name="dp">Identifies the property whose base (non-animated) value should be retrieved. </param>
		</member>
		<member name="T:System.Windows.Media.Animation.AnimationClock">
			<summary>Maintains the run-time state of an <see cref="T:System.Windows.Media.Animation.AnimationTimeline"></see> and processes its output values. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.AnimationClock.#ctor(System.Windows.Media.Animation.AnimationTimeline)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> class. </summary>
			<param name="animation">The animation that describes this clock's output values and timing behaviors.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.AnimationClock.Timeline">
			<summary>Gets the <see cref="T:System.Windows.Media.Animation.AnimationTimeline"></see> that describes this clock's behavior.</summary>
			<returns>The animation that describes this clock's behavior.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.AnimationTimeline">
			<summary>Defines a segment of time over which output values are produced. These values are used to animate a target property.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.AnimationTimeline.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.AnimationTimeline"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.AnimationTimeline.AllocateClock">
			<summary>Creates a <see cref="T:System.Windows.Media.Animation.Clock"></see> for this <see cref="T:System.Windows.Media.Animation.AnimationTimeline"></see>.</summary>
			<returns>A clock for this <see cref="T:System.Windows.Media.Animation.AnimationTimeline"></see>.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.AnimationTimeline.Clone">
			<summary>Returns a modifiable copy of this instance.</summary>
			<returns>A modifiable copy of the animation. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.AnimationTimeline.CreateClock">
			<summary>Creates a new <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> from this <see cref="T:System.Windows.Media.Animation.AnimationTimeline"></see>. </summary>
			<returns>A new clock, created from this <see cref="T:System.Windows.Media.Animation.AnimationTimeline"></see>.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.AnimationTimeline.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.AnimationTimeline.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
			<summary> Provide a custom natural Duration when the Duration property is set to Automatic. </summary>
			<returns>A Duration quantity representing the natural duration. Default is 1 second for animations.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.AnimationTimeline.IsDestinationDefault">
			<summary>Gets a value that indicates whether this animation uses the defaultDestinationValue parameter of the <see cref="M:System.Windows.Media.Animation.AnimationTimeline.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)"></see> method as its destination value.</summary>
			<returns>true if the defaultDesintationValue parameter of the <see cref="M:System.Windows.Media.Animation.AnimationTimeline.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)"></see> method is the value of this animation when reaches the end of its simple duration (its clock has a <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> of 1); otherwise, false. The default implementation always returns false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.AnimationTimeline.TargetPropertyType">
			<summary>When overridden in a derived class, gets the <see cref="T:System.Type"></see> of property that can be animated.</summary>
			<returns>The type of property that can be animated by this animation.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.BooleanAnimationBase">
			<summary> Abstract class that, when implemented, animates a Boolean value. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.BooleanAnimationBase.Clone">
			<summary>Returns a modifiable clone of this instance. </summary>
			<returns>A modifiable clone of this instance. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The copy's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.BooleanAnimationBase.GetCurrentValue(System.Boolean,System.Boolean,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.BooleanAnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<returns>The current value of the animation.</returns>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.BooleanAnimationBase.GetCurrentValueCore(System.Boolean,System.Boolean,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames">
			<summary> Animates the value of a Boolean property along a set of KeyFrames over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames.Clone">
			<summary>Returns a modifiable clone of this instance.</summary>
			<returns>A modifiable clone of this instance. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The copy's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
			<summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames"></see> object.</summary>
			<param name="source">The <see cref="T:System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames"></see> object to be cloned.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames.GetCurrentValueCore(System.Boolean,System.Boolean,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherwise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
			<summary> Provide a custom natural Duration when the Duration property is set to Automatic. </summary>
			<returns>If the last KeyFrame of this animation is a KeyTime, then this will be used as the NaturalDuration; otherwise it will be one second.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames.KeyFrames">
			<summary> Gets or sets the collection of BooleanKeyFrame objects that define the animation. </summary>
			<returns>The collection of BooleanKeyFrame objects that define the animation. The default value is BooleanKeyFrameCollection.Empty.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.BooleanKeyFrame">
			<summary>Abstract class that, when implemented, defines a segment with its own target value and interpolation method for a BooleanAnimationUsingKeyFrames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.BooleanKeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.BooleanKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.BooleanKeyFrame.#ctor(System.Boolean)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.BooleanKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.BooleanKeyFrame.Value"></see>.  </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.BooleanKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.BooleanKeyFrame"></see> instance.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.BooleanKeyFrame.#ctor(System.Boolean,System.Windows.Media.Animation.KeyTime)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.BooleanKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.BooleanKeyFrame.Value"></see> and <see cref="P:System.Windows.Media.Animation.BooleanKeyFrame.KeyTime"></see>.  </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.BooleanKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.BooleanKeyFrame"></see> instance.</param>
			<param name="keyTime">The <see cref="P:System.Windows.Media.Animation.BooleanKeyFrame.KeyTime"></see> of the new <see cref="T:System.Windows.Media.Animation.BooleanKeyFrame"></see> instance.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.BooleanKeyFrame.KeyTime">
			<summary> Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.BooleanKeyFrame.Value"></see> should be reached. </summary>
			<returns>The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.BooleanKeyFrame.Value"></see> property. The default value is <see cref="P:System.Windows.Media.Animation.KeyTime.Uniform"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.BooleanKeyFrame.Value">
			<summary> Gets or sets the key frame's target value. </summary>
			<returns>The key frame's target value, which is the value of this key frame at its specified KeyTime. The default value is false.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.BooleanKeyFrameCollection">
			<summary>Represents a collection of BooleanKeyFrame objects. This collection is used as part of a BooleanAnimationUsingKeyFrames to animate a Boolean property value along a set of key frames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.BooleanKeyFrameCollection.Add(System.Windows.Media.Animation.BooleanKeyFrame)">
			<summary> Adds a BooleanKeyFrame to the end of the collection. </summary>
			<returns>The index at which the keyFrame was added.</returns>
			<param name="keyFrame">The BooleanKeyFrame to add to the end of the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.BooleanKeyFrameCollection.Clone">
			<summary>Returns a modifiable clone of this instance.</summary>
			<returns>A modifiable clone of this instance. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The copy's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.BooleanKeyFrameCollection.Contains(System.Windows.Media.Animation.BooleanKeyFrame)">
			<summary> Indicates whether the collection contains the specified BooleanKeyFrame. </summary>
			<returns>true if the collection contains keyFrame; otherwise, false.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.BooleanKeyFrameCollection.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.BooleanKeyFrameCollection.GetEnumerator">
			<summary> Returns an enumerator that can iterate through the collection. </summary>
			<returns>An IEnumerator that can iterate through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.BooleanKeyFrameCollection.IndexOf(System.Windows.Media.Animation.BooleanKeyFrame)">
			<summary> Searches for the specified BooleanKeyFrame and returns the zero-based index of the first occurrence within the entire collection. </summary>
			<returns>The zero-based index of the first occurrence of keyFrame within the entire collection, if found; otherwise, -1.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.BooleanKeyFrameCollection.Count">
			<summary> Gets the number of key frames contained in the BooleanKeyFrameCollection.  </summary>
			<returns>The number of key frames contained in the BooleanKeyFrameCollection. </returns>
		</member>
		<member name="P:System.Windows.Media.Animation.BooleanKeyFrameCollection.IsSynchronized">
			<summary> Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
			<returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.BooleanKeyFrameCollection.Item(System.Int32)">
			<summary> Gets or sets the BooleanKeyFrame at the specified index. </summary>
			<returns>The BooleanKeyFrame at the specified index.</returns>
			<param name="index">The zero-based index of the BooleanKeyFrame to get or set.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.BooleanKeyFrameCollection.SyncRoot">
			<summary> Gets an object that can be used to synchronize access to the collection. </summary>
			<returns>An object that can be used to synchronize access to the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.ByteAnimation">
			<summary> Animates the value of a  Byte property between two target values using      GTMT#linear interpolation over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteAnimation.#ctor">
			<summary> Initializes a new instance of the ByteAnimation class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteAnimation.#ctor(System.Byte,System.Windows.Duration)">
			<summary> Initializes a new instance of the ByteAnimation class that animates to the specified value over the specified duration. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteAnimation.#ctor(System.Byte,System.Byte,System.Windows.Duration)">
			<summary> Initializes a new instance of the ByteAnimation class that animates from the specified starting value to the specified destination value over the specified duration. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteAnimation.#ctor(System.Byte,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the ByteAnimation class that animates to the specified value over the specified duration and has the specified fill behavior. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteAnimation.#ctor(System.Byte,System.Byte,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the ByteAnimation class that animates from the specified starting value to the specified destination value over the specified duration and has the specified fill behavior. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="F:System.Windows.Media.Animation.ByteAnimation.ByProperty">
			<summary> Identifies the By GTMT#dependency property. </summary>
			<returns>The identifier for the By GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.ByteAnimation.FromProperty">
			<summary> Identifies the From GTMT#dependency property. </summary>
			<returns>The identifier for the From GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.ByteAnimation.ToProperty">
			<summary> Identifies the To GTMT#dependency property. </summary>
			<returns>The identifier for the To GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteAnimation.Clone">
			<summary> Returns a modifiable clone of the animation. </summary>
			<returns>A modifiable clone of the animation. The returned clone is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteAnimation.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteAnimation.GetCurrentValueCore(System.Byte,System.Byte,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.ByteAnimation.By">
			<summary> Gets or sets the total amount by which the animation changes its starting value. </summary>
			<returns>The total amount by which the animation changes its starting value.     The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ByteAnimation.From">
			<summary> Gets or sets the animation's starting value. </summary>
			<returns>The starting value of the animation. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ByteAnimation.IsAdditive">
			<summary> Gets or sets a value that specifies whether the animation's output value is added to the base           value of the property being animated. </summary>
			<returns>true if the animation adds its output value         to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ByteAnimation.IsCumulative">
			<summary> Gets or sets a value that specifies whether the animation's value accumulates when it repeats. </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ByteAnimation.To">
			<summary> Gets or sets the animation's ending value. </summary>
			<returns>The ending value of the animation. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.ByteAnimationBase">
			<summary> Abstract class that, when implemented, animates a Byte value. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteAnimationBase.Clone">
			<summary> Returns a modifiable clone of the animation. </summary>
			<returns>Returns a modifiable clone of the animation. The returned copy is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteAnimationBase.GetCurrentValue(System.Byte,System.Byte,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteAnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteAnimationBase.GetCurrentValueCore(System.Byte,System.Byte,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.ByteAnimationUsingKeyFrames">
			<summary> Animates the value of a Byte property along a set of KeyFrames.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteAnimationUsingKeyFrames.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteAnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
			<summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.ByteAnimationUsingKeyFrames"></see> object.</summary>
			<param name="source">The <see cref="T:System.Windows.Media.Animation.ByteAnimationUsingKeyFrames"></see> object to be cloned.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteAnimationUsingKeyFrames.GetCurrentValueCore(System.Byte,System.Byte,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
			<summary> Provide a custom natural Duration when the Duration property is set to Automatic. </summary>
			<returns>If the last KeyFrame of this animation is a KeyTime, then this will be used as the NaturalDuration; otherwise it will be one second.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.ByteAnimationUsingKeyFrames.IsAdditive">
			<summary>  Gets a value that specifies whether the animation's output value is added to the base value of the property being animated.  </summary>
			<returns>true if the animation adds its output value         to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ByteAnimationUsingKeyFrames.IsCumulative">
			<summary>   Gets or sets a value that specifies whether the animation's value accumulates when it repeats.</summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ByteAnimationUsingKeyFrames.KeyFrames">
			<summary> Gets or sets the collection of ByteKeyFrame objects that define the animation. </summary>
			<returns>The collection of ByteKeyFrame objects that define the animation. The default value is ByteKeyFrameCollection.Empty.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.ByteKeyFrame">
			<summary> Abstract class that, when implemented, defines an animation segment with its own target value and interpolation method for a <see cref="T:System.Windows.Media.Animation.ByteAnimationUsingKeyFrames"></see>. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteKeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ByteKeyFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteKeyFrame.#ctor(System.Byte)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ByteKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.ByteKeyFrame.Value"></see>.  </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.ByteKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.ByteKeyFrame"></see> instance.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteKeyFrame.#ctor(System.Byte,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ByteKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.ByteKeyFrame.Value"></see> and <see cref="P:System.Windows.Media.Animation.ByteKeyFrame.KeyTime"></see>.  </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.ByteKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.ByteKeyFrame"></see> instance.</param>
			<param name="keyTime">The <see cref="P:System.Windows.Media.Animation.ByteKeyFrame.KeyTime"></see> of the new <see cref="T:System.Windows.Media.Animation.ByteKeyFrame"></see> instance.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.ByteKeyFrame.KeyTime">
			<summary> Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.ByteKeyFrame.Value"></see> should be reached. </summary>
			<returns>The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.ByteKeyFrame.Value"></see> property. The default value is <see cref="P:System.Windows.Media.Animation.KeyTime.Uniform"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ByteKeyFrame.Value">
			<summary> Gets or sets the key frame's target value. </summary>
			<returns>The key frame's target value, which is the value of this key frame at its specified KeyTime. The default value is 0.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.ByteKeyFrameCollection">
			<summary>Represents a collection of ByteKeyFrame objects. This collection is used as part of a ByteAnimationUsingKeyFrames to animate a Byte property value along a set of key frames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteKeyFrameCollection.Add(System.Windows.Media.Animation.ByteKeyFrame)">
			<summary> Adds a ByteKeyFrame to the end of the collection. </summary>
			<returns>The index at which keyFrame was added.</returns>
			<param name="keyFrame">The ByteKeyFrame to add to the end of the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteKeyFrameCollection.Clear">
			<summary> Removes all key frames from the collection. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteKeyFrameCollection.Clone">
			<summary> Returns a modifiable clone of the collection and its contents. </summary>
			<returns>A modifiable clone of the collection and its contents. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteKeyFrameCollection.Contains(System.Windows.Media.Animation.ByteKeyFrame)">
			<summary> Indicates whether the collection contains the specified ByteKeyFrame. </summary>
			<returns>true if the collection contains keyFrame; otherwise, false.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteKeyFrameCollection.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteKeyFrameCollection.GetEnumerator">
			<summary> Returns an enumerator that can iterate through the collection. </summary>
			<returns>An IEnumerator that can iterate through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteKeyFrameCollection.IndexOf(System.Windows.Media.Animation.ByteKeyFrame)">
			<summary>Searches for the specified ByteKeyFrame and returns the zero-based index of the first occurrence within the entire collection. </summary>
			<returns>The zero-based index of the first occurrence of keyFrame within the entire collection, if found; otherwise, -1.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ByteKeyFrameCollection.System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.ByteKeyFrameCollection.Count">
			<summary> Gets the number of key frames contained in the ByteKeyFrameCollection.  </summary>
			<returns>The number of key frames contained in the ByteKeyFrameCollection. </returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ByteKeyFrameCollection.IsSynchronized">
			<summary> Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
			<returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ByteKeyFrameCollection.Item(System.Int32)">
			<summary> Gets or sets the ByteKeyFrame at the specified index. </summary>
			<returns>The ByteKeyFrame at the specified index.</returns>
			<param name="index">The zero-based index of the ByteKeyFrame to get or set.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.ByteKeyFrameCollection.SyncRoot">
			<summary> Gets an object that can be used to synchronize access to the collection. </summary>
			<returns>An object that can be used to synchronize access to the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.CharAnimationBase">
			<summary> Abstract class that, when implemented, animates a Char value. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.CharAnimationBase.Clone">
			<summary> Returns a modifiable clone of the animation. </summary>
			<returns>A modifiable clone of the animation. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.CharAnimationBase.GetCurrentValue(System.Char,System.Char,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.CharAnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.CharAnimationBase.GetCurrentValueCore(System.Char,System.Char,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.CharAnimationUsingKeyFrames">
			<summary> Animates the value of a Char property along a set of KeyFrames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.CharAnimationUsingKeyFrames.Clone">
			<summary> Creates a copy of this KeyFrameCharAnimation. </summary>
			<returns>The copy</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.CharAnimationUsingKeyFrames.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.CharAnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
			<summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.CharAnimationUsingKeyFrames"></see> object.</summary>
			<param name="source">The <see cref="T:System.Windows.Media.Animation.CharAnimationUsingKeyFrames"></see> object to be cloned</param>
		</member>
		<member name="M:System.Windows.Media.Animation.CharAnimationUsingKeyFrames.GetCurrentValueCore(System.Char,System.Char,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.CharAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
			<summary> Provide a custom natural Duration when the Duration property is set to Automatic. </summary>
			<returns>If the last KeyFrame of this animation is a KeyTime, then this will be used as the NaturalDuration; otherwise it will be one second.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.CharAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.CharAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.CharAnimationUsingKeyFrames.KeyFrames">
			<summary> Gets or sets the collection of CharKeyFrame objects that define the animation. </summary>
			<returns>The collection of CharKeyFrame objects that define the animation. The default value is CharKeyFrameCollection.Empty.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.CharKeyFrame">
			<summary> Abstract class that, when implemented, defines an animation segment with its own target value and interpolation method for a CharAnimationUsingKeyFrames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.CharKeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.CharKeyFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.CharKeyFrame.#ctor(System.Char)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.CharKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.CharKeyFrame.Value"></see>.  </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.CharKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.CharKeyFrame"></see> instance.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.CharKeyFrame.#ctor(System.Char,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.CharKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.CharKeyFrame.Value"></see> and <see cref="P:System.Windows.Media.Animation.CharKeyFrame.KeyTime"></see>.  </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.CharKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.CharKeyFrame"></see> instance.</param>
			<param name="keyTime">The <see cref="P:System.Windows.Media.Animation.CharKeyFrame.KeyTime"></see> of the new <see cref="T:System.Windows.Media.Animation.CharKeyFrame"></see> instance.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.CharKeyFrame.KeyTime">
			<summary> Gets or sets the time at which the key frame's target Value should be reached. </summary>
			<returns>The time at which the key frame's current value should be equal to its Value property. The default value is Uniform.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.CharKeyFrame.Value">
			<summary> Gets or sets the key frame's target value. </summary>
			<returns>The key frame's target value, which is the value of this key frame at its specified KeyTime. The default value is the null character, '\0'.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.CharKeyFrameCollection">
			<summary>Represents a collection of CharKeyFrame objects. This collection is used as part of a CharAnimationUsingKeyFrames to animate a Char property value along a set of key frames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.CharKeyFrameCollection.Add(System.Windows.Media.Animation.CharKeyFrame)">
			<summary> Adds a CharKeyFrame to the end of the collection. </summary>
			<returns>The index at which the keyFrame was added.</returns>
			<param name="keyFrame">The CharKeyFrame to add to the end of the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.CharKeyFrameCollection.Clear">
			<summary> Removes all key frames from the collection. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.CharKeyFrameCollection.Clone">
			<summary> Returns a modifiable clone of the collection and its contents. </summary>
			<returns>A modifiable clone of the collection and its contents. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.CharKeyFrameCollection.Contains(System.Windows.Media.Animation.CharKeyFrame)">
			<summary> Indicates whether the collection contains the specified CharKeyFrame. </summary>
			<returns>true if the collection contains keyFrame; otherwise, false.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.CharKeyFrameCollection.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.CharKeyFrameCollection.GetEnumerator">
			<summary> Returns an enumerator that can iterate through the collection. </summary>
			<returns>An IEnumerator that can iterate through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.CharKeyFrameCollection.IndexOf(System.Windows.Media.Animation.CharKeyFrame)">
			<summary> Searches for the specified CharKeyFrame and returns the zero-based index of the first occurrence within the entire collection. </summary>
			<returns>The zero-based index of the first occurrence of keyFrame within the entire collection, if found; otherwise, -1.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.CharKeyFrameCollection.System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.CharKeyFrameCollection.Count">
			<summary> Gets the number of key frames contained in the CharKeyFrameCollection.  </summary>
			<returns>The number of key frames contained in the CharKeyFrameCollection. </returns>
		</member>
		<member name="P:System.Windows.Media.Animation.CharKeyFrameCollection.IsSynchronized">
			<summary> Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
			<returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.CharKeyFrameCollection.Item(System.Int32)">
			<summary> Gets or sets the CharKeyFrame at the specified index. </summary>
			<returns>The CharKeyFrame at the specified index.</returns>
			<param name="index">The zero-based index of the CharKeyFrame to get or set.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.CharKeyFrameCollection.SyncRoot">
			<summary> Gets an object that can be used to synchronize access to the collection. </summary>
			<returns>An object that can be used to synchronize access to the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.Clock">
			<summary>Maintains run-time timing state for a <see cref="T:System.Windows.Media.Animation.Timeline"></see>. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Clock.#ctor(System.Windows.Media.Animation.Timeline)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Clock"></see> class, using the specified <see cref="P:System.Windows.Media.Animation.Clock.Timeline"></see> as a template. The new <see cref="T:System.Windows.Media.Animation.Clock"></see> object has no children. </summary>
			<param name="timeline">The <see cref="P:System.Windows.Media.Animation.Clock.Timeline"></see> from which this clock should be constructed. Clocks are not created for any child <see cref="P:System.Windows.Media.Animation.Clock.Timeline"></see> objects, if they exist.</param>
		</member>
		<member name="E:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated">
			<summary>Occurs when the clock's speed is updated.</summary>
		</member>
		<member name="E:System.Windows.Media.Animation.Clock.CurrentStateInvalidated">
			<summary>Occurs when the clock's <see cref="P:System.Windows.Media.Animation.Clock.CurrentState"></see> property is updated. </summary>
		</member>
		<member name="E:System.Windows.Media.Animation.Clock.CurrentTimeInvalidated">
			<summary> Raised by the timeline whenever its current time changes. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Clock.GetCanSlip">
			<summary>Returns whether the <see cref="T:System.Windows.Media.Animation.Clock"></see> has its own external time source, which may require synchronization with the timing system.</summary>
			<returns>Returns true if the <see cref="T:System.Windows.Media.Animation.Clock"></see> has its own external source for time, which may require synchronization with the timing system; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Clock.Controller">
			<summary>Gets a <see cref="T:System.Windows.Media.Animation.ClockController"></see> that can be used to start, pause, resume, seek, skip, stop, or remove this <see cref="T:System.Windows.Media.Animation.Clock"></see>. </summary>
			<returns>A <see cref="T:System.Windows.Media.Animation.ClockController"></see> if this is a root clock; otherwise, null. </returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed">
			<summary>Gets the rate at which the clock's time is currently progressing, compared to real-world time.</summary>
			<returns>The rate at which this clock's time is current progressing, compared to real-world time. If the clock is stopped, this property returns null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Clock.CurrentState">
			<summary>Gets a value indicating whether the clock is currently <see cref="F:System.Windows.Media.Animation.ClockState.Active"></see>, <see cref="F:System.Windows.Media.Animation.ClockState.Filling"></see>, or <see cref="F:System.Windows.Media.Animation.ClockState.Stopped"></see>. </summary>
			<returns>The current state of the clock: <see cref="F:System.Windows.Media.Animation.ClockState.Active"></see>, <see cref="F:System.Windows.Media.Animation.ClockState.Filling"></see>, or <see cref="F:System.Windows.Media.Animation.ClockState.Stopped"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Clock.Parent">
			<summary>Gets the clock that is the parent of this clock. </summary>
			<returns>The parent of this clock, or null if this clock is a root.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Clock.Timeline">
			<summary>Gets the <see cref="P:System.Windows.Media.Animation.Clock.Timeline"></see> from which this <see cref="T:System.Windows.Media.Animation.Clock"></see> was created.</summary>
			<returns>The <see cref="P:System.Windows.Media.Animation.Clock.Timeline"></see> from which this <see cref="T:System.Windows.Media.Animation.Clock"></see> was created.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.ClockCollection">
			<summary>Represents an ordered collection of <see cref="T:System.Windows.Media.Animation.Clock"></see> objects. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ClockCollection.Add(System.Windows.Media.Animation.Clock)">
			<summary>Adds a new <see cref="T:System.Windows.Media.Animation.Clock"></see> object to the end of this <see cref="T:System.Windows.Media.Animation.ClockCollection"></see>.</summary>
			<param name="item">The object to add.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ClockCollection.Clear">
			<summary>Removes all items from this <see cref="T:System.Windows.Media.Animation.ClockCollection"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ClockCollection.Contains(System.Windows.Media.Animation.Clock)">
			<summary>Indicates whether the <see cref="T:System.Windows.Media.Animation.ClockCollection"></see> contains the specified <see cref="T:System.Windows.Media.Animation.Clock"></see> object.</summary>
			<returns>true if item is found; otherwise, false.</returns>
			<param name="item">The object to locate.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ClockCollection.CopyTo(System.Windows.Media.Animation.Clock[],System.Int32)">
			<summary>Copies the <see cref="T:System.Windows.Media.Animation.Clock"></see> objects of this <see cref="T:System.Windows.Media.Animation.ClockCollection"></see> to an array of Clocks, starting at the specified index position. </summary>
			<param name="array">The destination array.</param>
			<param name="index">The zero-based index position where copying begins.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ClockCollection.Equals(System.Object)">
			<summary>Indicates whether this instance is equal to the specified object. </summary>
			<returns>true if obj is equal to this instance; otherwise false.</returns>
			<param name="obj">The object to compare with this instance.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ClockCollection.GetHashCode">
			<summary>Returns a 32-bit signed integer hash code representing this instance.</summary>
			<returns>A 32-bit signed integer.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.ClockCollection.op_Equality(System.Windows.Media.Animation.ClockCollection,System.Windows.Media.Animation.ClockCollection)">
			<summary>Indicates whether two <see cref="T:System.Windows.Media.Animation.ClockCollection"></see> objects are equal.</summary>
			<returns>true if objA and objB are equal; otherwise false.</returns>
			<param name="objB">The second object to compare.</param>
			<param name="objA">The first object to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ClockCollection.op_Inequality(System.Windows.Media.Animation.ClockCollection,System.Windows.Media.Animation.ClockCollection)">
			<summary>Indicates whether two <see cref="T:System.Windows.Media.Animation.ClockCollection"></see> objects are not equal.</summary>
			<returns>true if objA and objB are not equal; otherwise false.</returns>
			<param name="objB">The second object to compare.</param>
			<param name="objA">The first object to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ClockCollection.Remove(System.Windows.Media.Animation.Clock)">
			<summary>Removes the specified <see cref="T:System.Windows.Media.Animation.Clock"></see> from the <see cref="T:System.Windows.Media.Animation.ClockCollection"></see>.</summary>
			<returns>true if item was successfully removed; otherwise, false.</returns>
			<param name="item">The object to remove.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.ClockCollection.Count">
			<summary>Gets the number of items contained in this <see cref="T:System.Windows.Media.Animation.ClockCollection"></see>. </summary>
			<returns>The number of items contained in this instance. </returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ClockCollection.IsReadOnly">
			<summary>Gets a value indicating whether the <see cref="T:System.Windows.Media.Animation.ClockCollection"></see> is read-only.</summary>
			<returns>true if this instance is read-only; otherwise false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ClockCollection.Item(System.Int32)">
			<summary>Gets the <see cref="T:System.Windows.Media.Animation.Clock"></see> at the specified index position. </summary>
			<returns>The <see cref="T:System.Windows.Media.Animation.Clock"></see> object at the specified index position.</returns>
			<param name="index">The index position to access.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.ClockController">
			<summary>Interactively controls a <see cref="T:System.Windows.Media.Animation.Clock"></see></summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ClockController.Begin">
			<summary>Sets the target <see cref="P:System.Windows.Media.Animation.ClockController.Clock"></see> to begin at the next tick.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ClockController.Pause">
			<summary>Stops the target <see cref="T:System.Windows.Media.Animation.Clock"></see> from progressing. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ClockController.Remove">
			<summary>Removes the <see cref="T:System.Windows.Media.Animation.ClockController"></see> objects clock from the properties it animates. The clock no longer affects these properties. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ClockController.Resume">
			<summary>Enables a <see cref="T:System.Windows.Media.Animation.Clock"></see> that was previously paused to resume progressing.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ClockController.Seek(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)">
			<summary>Seeks the target <see cref="P:System.Windows.Media.Animation.ClockController.Clock"></see> by the specified amount when the next tick occurs. If the target clock is stopped, seeking makes it active again.</summary>
			<param name="offset">The seek offset, measured in the target clock's time. This offset is relative to the clock's <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime"></see> or <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration"></see>, depending on the value of the of origin parameter. </param>
			<param name="origin">A value that indicates whether the specified offset is relative to the target clock <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime"></see> or <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)">
			<summary>Seeks the target <see cref="P:System.Windows.Media.Animation.ClockController.Clock"></see> by the specified amount immediately. If the target clock is stopped, seeking makes it active again.</summary>
			<param name="offset">The seek offset, measured in the target clock's time. This offset is relative to the clock's <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime"></see> or <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration"></see>, depending on the value of the of origin parameter.</param>
			<param name="origin">A value that indicates whether the specified offset is relative to the target clock <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime"></see> or <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ClockController.Stop">
			<summary>Stops the target <see cref="T:System.Windows.Media.Animation.Clock"></see>. </summary>
		</member>
		<member name="P:System.Windows.Media.Animation.ClockController.Clock">
			<summary>Gets the <see cref="T:System.Windows.Media.Animation.Clock"></see> controlled by this <see cref="T:System.Windows.Media.Animation.ClockController"></see>.</summary>
			<returns>The <see cref="T:System.Windows.Media.Animation.Clock"></see> controlled by this <see cref="T:System.Windows.Media.Animation.ClockController"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ClockController.SpeedRatio">
			<summary>Gets or sets the interactive speed of the target <see cref="T:System.Windows.Media.Animation.Clock"></see>.</summary>
			<returns>A finite value greater than zero that describes the interactive speed of the target clock. This value is multiplied against the value of the <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio"></see> of the clock's <see cref="T:System.Windows.Media.Animation.Timeline"></see>. For example, if the timeline's <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio"></see> is 0.5 and the <see cref="T:System.Windows.Media.Animation.ClockController"></see> object's <see cref="P:System.Windows.Media.Animation.ClockController.SpeedRatio"></see> is 3.0, the timeline moves at 1.5 times normal speed (0.5 * 3.0). The default value is 1.0.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.ClockGroup">
			<summary>An assemblage of <see cref="T:System.Windows.Media.Animation.Clock"></see> types with behavior based off of a <see cref="T:System.Windows.Media.Animation.TimelineGroup"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ClockGroup.#ctor(System.Windows.Media.Animation.TimelineGroup)">
			<summary>Instantiates a new instance of the <see cref="T:System.Windows.Media.Animation.ClockGroup"></see> class.</summary>
			<param name="timelineGroup">The object defining the characteristics of the new class.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.ClockGroup.Timeline">
			<summary>Gets the <see cref="T:System.Windows.Media.Animation.TimelineGroup"></see> object that dictates the behavior of this instance.</summary>
			<returns>A <see cref="T:System.Windows.Media.Animation.TimelineGroup"></see> object.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.ClockState">
			<summary>Describes the potential states of a timeline's <see cref="T:System.Windows.Media.Animation.Clock"></see> object. </summary>
		</member>
		<member name="F:System.Windows.Media.Animation.ClockState.Active">
			<summary>The current <see cref="T:System.Windows.Media.Animation.Clock"></see> timing changes in direct relation to that of its parent. If the timeline is an animation, it is actively affecting targeted properties, so their value may change from tick to tick. If the timeline has children, they may be <see cref="F:System.Windows.Media.Animation.ClockState.Active"></see>, <see cref="F:System.Windows.Media.Animation.ClockState.Filling"></see>, or <see cref="F:System.Windows.Media.Animation.ClockState.Stopped"></see>. </summary>
		</member>
		<member name="F:System.Windows.Media.Animation.ClockState.Filling">
			<summary>The <see cref="T:System.Windows.Media.Animation.Clock"></see> timing continues, but does not change in relation to that of its parent. If the timeline is an animation, it is actively affecting targeted properties, but its values don't change from tick to tick. If the timeline has children, they may be <see cref="F:System.Windows.Media.Animation.ClockState.Active"></see>, <see cref="F:System.Windows.Media.Animation.ClockState.Filling"></see>, or <see cref="F:System.Windows.Media.Animation.ClockState.Stopped"></see>.</summary>
		</member>
		<member name="F:System.Windows.Media.Animation.ClockState.Stopped">
			<summary>The <see cref="T:System.Windows.Media.Animation.Clock"></see> timing is halted, making the clock's current time and progress values undefined. If this timeline is an animation, it no longer affects targeted properties. If this timeline has children, they are also <see cref="F:System.Windows.Media.Animation.ClockState.Stopped"></see>.</summary>
		</member>
		<member name="T:System.Windows.Media.Animation.ColorAnimation">
			<summary> Animates the value of a  Color property between two target values using      GTMT#linear interpolation over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorAnimation.#ctor">
			<summary> Initializes a new instance of the ColorAnimation class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorAnimation.#ctor(System.Windows.Media.Color,System.Windows.Duration)">
			<summary> Initializes a new instance of the ColorAnimation class that animates to the specified value over the specified duration. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorAnimation.#ctor(System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Duration)">
			<summary> Initializes a new instance of the ColorAnimation class that animates from the specified starting value to the specified destination value over the specified duration. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorAnimation.#ctor(System.Windows.Media.Color,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the ColorAnimation class that animates to the specified value over the specified duration and has the specified fill behavior. The starting value for the animation is the base value of the property being animated or the output from an another animation. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorAnimation.#ctor(System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the ColorAnimation class that animates from the specified starting value to the specified destination value over the specified duration and has the specified fill behavior. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="F:System.Windows.Media.Animation.ColorAnimation.ByProperty">
			<summary> Identifies the By GTMT#dependency property. </summary>
			<returns>The identifier for the By GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.ColorAnimation.FromProperty">
			<summary> Identifies the From GTMT#dependency property. </summary>
			<returns>The identifier for the From GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.ColorAnimation.ToProperty">
			<summary> Identifies the To GTMT#dependency property. </summary>
			<returns>The identifier for the To GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorAnimation.Clone">
			<summary> Returns a modifiable clone of the animation. </summary>
			<returns>A modifiable clone of the animation. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorAnimation.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorAnimation.GetCurrentValueCore(System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.ColorAnimation.By">
			<summary> Gets or sets the total amount by which the animation changes its starting value. </summary>
			<returns>The total amount by which the animation changes its starting value.     The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ColorAnimation.From">
			<summary> Gets or sets the animation's starting value. </summary>
			<returns>The starting value of the animation. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ColorAnimation.IsAdditive">
			<summary> Gets a value that specifies whether the animation's output value is added to the base           value of the property being animated. </summary>
			<returns>true if the animation adds its output value         to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ColorAnimation.IsCumulative">
			<summary> Gets or sets a value that specifies whether the animation's value accumulates when it repeats. </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ColorAnimation.To">
			<summary> Gets or sets the animation's ending value. </summary>
			<returns>The ending value of the animation. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.ColorAnimationBase">
			<summary> Abstract class that, when implemented, animates a Color value. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorAnimationBase.Clone">
			<summary> Returns a modifiable clone of the animation. </summary>
			<returns>A modifiable clone of the animation. The returned clone is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorAnimationBase.GetCurrentValue(System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Animation.AnimationClock)">
			<summary> Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorAnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorAnimationBase.GetCurrentValueCore(System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames">
			<summary> Animates the value of a Color property along a set of KeyFrames over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.Clone">
			<summary> Creates a copy of this KeyFrameColorAnimation. </summary>
			<returns>The copy</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
			<summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames"></see> object.</summary>
			<param name="source">The <see cref="T:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames"></see> object to be cloned.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.GetCurrentValueCore(System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
			<summary> Provide a custom natural Duration when the Duration property is set to Automatic. </summary>
			<returns>If the last KeyFrame of this animation is a KeyTime, then this will be used as the NaturalDuration; otherwise it will be one second.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.IsAdditive">
			<summary>   Gets a value that specifies whether the animation's output value is added to the base value of the property being animated.  </summary>
			<returns>true if the animation adds its output value to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.IsCumulative">
			<summary>    Gets or sets a value that specifies whether the animation's value accumulates when it repeats.</summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.KeyFrames">
			<summary> Gets or sets the collection of ColorKeyFrame objects that define the animation. </summary>
			<returns>The collection of ColorKeyFrame objects that define the animation. The default value is ColorKeyFrameCollection.Empty.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.ColorKeyFrame">
			<summary> Abstract class that, when implemented, defines an animation segment with its own target value and interpolation method for a ColorAnimationUsingKeyFrames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorKeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ColorKeyFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorKeyFrame.#ctor(System.Windows.Media.Color)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ColorKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.Value"></see>.  </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.ColorKeyFrame"></see> instance.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorKeyFrame.#ctor(System.Windows.Media.Color,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ColorKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.Value"></see> and <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.KeyTime"></see>.  </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.ColorKeyFrame"></see> instance.</param>
			<param name="keyTime">The <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.KeyTime"></see> of the new <see cref="T:System.Windows.Media.Animation.ColorKeyFrame"></see> instance.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.ColorKeyFrame.KeyTime">
			<summary> Gets or sets the time at which the key frame's target Value should be reached. </summary>
			<returns>The time at which the key frame's current value should be equal to its Value property. The default value is Uniform.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ColorKeyFrame.Value">
			<summary> Gets or sets the key frame's target value. </summary>
			<returns>The key frame's target value, which is the value of this key frame at its specified KeyTime. The default value is a Color with a hexidecimal value of #00000000.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.ColorKeyFrameCollection">
			<summary>Represents a collection of ColorKeyFrame objects. This collection is used as part of a ColorAnimationUsingKeyFrames to animate a Color property value along a set of key frames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorKeyFrameCollection.Add(System.Windows.Media.Animation.ColorKeyFrame)">
			<summary> Adds a ColorKeyFrame to the end of the collection. </summary>
			<returns>The index at which the keyFrame was added.</returns>
			<param name="keyFrame">The ColorKeyFrame to add to the end of the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorKeyFrameCollection.Clone">
			<summary> Returns a modifiable clone of the collection and its contents. </summary>
			<returns>A modifiable clone of the collection and its contents. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorKeyFrameCollection.Contains(System.Windows.Media.Animation.ColorKeyFrame)">
			<summary> Indicates whether the collection contains the specified ColorKeyFrame. </summary>
			<returns>true if the collection contains keyFrame; otherwise, false.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorKeyFrameCollection.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorKeyFrameCollection.GetEnumerator">
			<summary> Returns an enumerator that can iterate through the collection. </summary>
			<returns>An IEnumerator that can iterate through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorKeyFrameCollection.IndexOf(System.Windows.Media.Animation.ColorKeyFrame)">
			<summary> Searches for the specified ColorKeyFrame and returns the zero-based index of the first occurrence within the entire collection. </summary>
			<returns>The zero-based index of the first occurrence of keyFrame within the entire collection, if found; otherwise, -1.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ColorKeyFrameCollection.System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.ColorKeyFrameCollection.Count">
			<summary> Gets the number of key frames contained in the ColorKeyFrameCollection.  </summary>
			<returns>The number of key frames contained in the ColorKeyFrameCollection. </returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ColorKeyFrameCollection.IsSynchronized">
			<summary> Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
			<returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ColorKeyFrameCollection.Item(System.Int32)">
			<summary> Gets or sets the ColorKeyFrame at the specified index. </summary>
			<returns>The ColorKeyFrame at the specified index.</returns>
			<param name="index">The zero-based index of the ColorKeyFrame to get or set.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.ColorKeyFrameCollection.SyncRoot">
			<summary> Gets an object that can be used to synchronize access to the collection. </summary>
			<returns>An object that can be used to synchronize access to the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DecimalAnimation">
			<summary> Animates the value of a  Decimal property between two target values using      GTMT#linear interpolation over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalAnimation.#ctor">
			<summary> Initializes a new instance of the DecimalAnimation class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalAnimation.#ctor(System.Decimal,System.Windows.Duration)">
			<summary> Initializes a new instance of the DecimalAnimation class that animates to the specified value over the specified duration. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalAnimation.#ctor(System.Decimal,System.Decimal,System.Windows.Duration)">
			<summary> Initializes a new instance of the DecimalAnimation class that animates from the specified starting value to the specified destination value over the specified duration. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalAnimation.#ctor(System.Decimal,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the DecimalAnimation class that animates to the specified value over the specified duration and has the specified fill behavior. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalAnimation.#ctor(System.Decimal,System.Decimal,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the DecimalAnimation class that animates from the specified starting value to the specified destination value over the specified duration and has the specified fill behavior. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="F:System.Windows.Media.Animation.DecimalAnimation.ByProperty">
			<summary> Identifies the By GTMT#dependency property. </summary>
			<returns>The identifier for the By GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.DecimalAnimation.FromProperty">
			<summary> Identifies the From GTMT#dependency property. </summary>
			<returns>The identifier for the From GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.DecimalAnimation.ToProperty">
			<summary> Identifies the To GTMT#dependency property. </summary>
			<returns>The identifier for the To GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalAnimation.Clone">
			<summary> Returns a modifiable clone of the animation. </summary>
			<returns>A modifiable clone of the animation. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalAnimation.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalAnimation.GetCurrentValueCore(System.Decimal,System.Decimal,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.DecimalAnimation.By">
			<summary> Gets or sets the total amount by which the animation changes its starting value. </summary>
			<returns>The total amount by which the animation changes its starting value.     The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.DecimalAnimation.From">
			<summary> Gets or sets the animation's starting value. </summary>
			<returns>The starting value of the animation. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.DecimalAnimation.IsAdditive">
			<summary> Gets or sets a value that specifies whether the animation's output value is added to the base           value of the property being animated. </summary>
			<returns>true if the animation adds its output value         to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.DecimalAnimation.IsCumulative">
			<summary> Gets or sets a value that specifies whether the animation's value accumulates when it repeats. </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.DecimalAnimation.To">
			<summary> Gets or sets the animation's ending value. </summary>
			<returns>The ending value of the animation. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DecimalAnimationBase">
			<summary> Abstract class that, when implemented, animates a Decimal value. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalAnimationBase.Clone">
			<summary> Returns a modifiable clone of the animation. </summary>
			<returns>A modifiable clone of the animation. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalAnimationBase.GetCurrentValue(System.Decimal,System.Decimal,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalAnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalAnimationBase.GetCurrentValueCore(System.Decimal,System.Decimal,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames">
			<summary>Animates the value of a Decimal property along a set of KeyFrames over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames.Clone">
			<summary> Creates a copy of this KeyFrameDecimalAnimation. </summary>
			<returns>The copy</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
			<summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames"></see> object.</summary>
			<param name="source">The <see cref="T:System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames"></see> object to be cloned.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames.GetCurrentValueCore(System.Decimal,System.Decimal,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
			<summary> Provide a custom natural Duration when the Duration property is set to Automatic. </summary>
			<returns>If the last KeyFrame of this animation is a KeyTime, then this will be used as the NaturalDuration; otherwise it will be one second.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames.IsAdditive">
			<summary>    Gets a value that specifies whether the animation's output value is added to the base value of the property being animated.  </summary>
			<returns>true if the animation adds its output value to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames.IsCumulative">
			<summary>     Gets or sets a value that specifies whether the animation's value accumulates when it repeats.  </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames.KeyFrames">
			<summary> Gets or sets the collection of DecimalKeyFrame objects that define the animation. </summary>
			<returns>The collection of DecimalKeyFrame objects that define the animation. The default value is DecimalKeyFrameCollection.Empty.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DecimalKeyFrame">
			<summary> Abstract class that, when implemented, defines an animation segment with its own target value and interpolation method for a DecimalAnimationUsingKeyFrames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalKeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DecimalKeyFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalKeyFrame.#ctor(System.Decimal)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DecimalKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.DecimalKeyFrame.Value"></see>.  </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.DecimalKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.DecimalKeyFrame"></see> instance.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalKeyFrame.#ctor(System.Decimal,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DecimalKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.DecimalKeyFrame.Value"></see> and <see cref="P:System.Windows.Media.Animation.DecimalKeyFrame.KeyTime"></see>. </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.DecimalKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.DecimalKeyFrame"></see> instance.</param>
			<param name="keyTime">The <see cref="P:System.Windows.Media.Animation.DecimalKeyFrame.KeyTime"></see> of the new <see cref="T:System.Windows.Media.Animation.DecimalKeyFrame"></see> instance.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.DecimalKeyFrame.KeyTime">
			<summary> Gets or sets the time at which the key frame's target Value should be reached. </summary>
			<returns>The time at which the key frame's current value should be equal to its Value property. The default value is Uniform.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.DecimalKeyFrame.Value">
			<summary> Gets or sets the key frame's target value. </summary>
			<returns>The key frame's target value, which is the value of this key frame at its specified KeyTime. The default value is 0.0.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DecimalKeyFrameCollection">
			<summary> Represents a collection of DecimalKeyFrame objects. This collection is used as part of a DecimalAnimationUsingKeyFrames to animate a Decimal property value along a set of key frames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalKeyFrameCollection.Add(System.Windows.Media.Animation.DecimalKeyFrame)">
			<summary> Adds a DecimalKeyFrame to the end of the collection. </summary>
			<returns>The index at which the keyFrame was added.</returns>
			<param name="keyFrame">The DecimalKeyFrame to add to the end of the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalKeyFrameCollection.Clone">
			<summary> Returns a modifiable clone of the collection and its contents. </summary>
			<returns>A modifiable clone of the collection and its contents. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalKeyFrameCollection.Contains(System.Windows.Media.Animation.DecimalKeyFrame)">
			<summary> Indicates whether the collection contains the specified DecimalKeyFrame. </summary>
			<returns>true if the collection contains keyFrame; otherwise, false.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalKeyFrameCollection.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalKeyFrameCollection.GetEnumerator">
			<summary> Returns an enumerator that can iterate through the collection. </summary>
			<returns>An IEnumerator that can iterate through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalKeyFrameCollection.IndexOf(System.Windows.Media.Animation.DecimalKeyFrame)">
			<summary> Searches for the specified DecimalKeyFrame and returns the zero-based index of the first occurrence within the entire collection. </summary>
			<returns>The zero-based index of the first occurrence of keyFrame within the entire collection, if found; otherwise, -1.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DecimalKeyFrameCollection.System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.DecimalKeyFrameCollection.Count">
			<summary> Gets the number of key frames contained in the DecimalKeyFrameCollection.  </summary>
			<returns>The number of key frames contained in the DecimalKeyFrameCollection. </returns>
		</member>
		<member name="P:System.Windows.Media.Animation.DecimalKeyFrameCollection.IsSynchronized">
			<summary> Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
			<returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.DecimalKeyFrameCollection.Item(System.Int32)">
			<summary> Gets or sets the DecimalKeyFrame at the specified index. </summary>
			<returns>The DecimalKeyFrame at the specified index.</returns>
			<param name="index">The zero-based index of the DecimalKeyFrame to get or set.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.DecimalKeyFrameCollection.SyncRoot">
			<summary> Gets an object that can be used to synchronize access to the collection. </summary>
			<returns>An object that can be used to synchronize access to the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DiscreteBooleanKeyFrame">
			<summary> Animates from the Boolean value of the previous key frame to its own Value using GTMT#discrete interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteBooleanKeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteBooleanKeyFrame"></see> class.      </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteBooleanKeyFrame.#ctor(System.Boolean)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteBooleanKeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteBooleanKeyFrame.#ctor(System.Boolean,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteBooleanKeyFrame"></see> class with the specified ending value and key time.</summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteBooleanKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DiscreteByteKeyFrame">
			<summary> Animates from the Byte value of the previous key frame to its own Value using GTMT#discrete interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteByteKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteByteKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteByteKeyFrame.#ctor(System.Byte)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteByteKeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteByteKeyFrame.#ctor(System.Byte,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteByteKeyFrame"></see> class with the specified ending value and key time. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteByteKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DiscreteCharKeyFrame">
			<summary> Animates from the Char value of the previous key frame to its own Value using GTMT#discrete interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteCharKeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteCharKeyFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteCharKeyFrame.#ctor(System.Char)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteCharKeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteCharKeyFrame.#ctor(System.Char,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteCharKeyFrame"></see> class with the specified ending value and key time.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteCharKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DiscreteColorKeyFrame">
			<summary> Animates from the Color value of the previous key frame to its own Value using GTMT#discrete interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteColorKeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteColorKeyFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteColorKeyFrame.#ctor(System.Windows.Media.Color)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteColorKeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteColorKeyFrame.#ctor(System.Windows.Media.Color,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteColorKeyFrame"></see> class with the specified ending value and key time. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteColorKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DiscreteDecimalKeyFrame">
			<summary> Animates from the Decimal value of the previous key frame to its own Value using GTMT#discrete interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteDecimalKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteDecimalKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteDecimalKeyFrame.#ctor(System.Decimal)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteDecimalKeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteDecimalKeyFrame.#ctor(System.Decimal,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteDecimalKeyFrame"></see> class with the specified ending value and key time. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteDecimalKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DiscreteDoubleKeyFrame">
			<summary> Animates from the Double value of the previous key frame to its own Value using GTMT#discrete interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteDoubleKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteDoubleKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteDoubleKeyFrame.#ctor(System.Double)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteDoubleKeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteDoubleKeyFrame.#ctor(System.Double,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteDoubleKeyFrame"></see> class with the specified ending value and key time.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteDoubleKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DiscreteInt16KeyFrame">
			<summary> Animates from the Int16 value of the previous key frame to its own Value using GTMT#discrete interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteInt16KeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteInt16KeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteInt16KeyFrame.#ctor(System.Int16)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteInt16KeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteInt16KeyFrame.#ctor(System.Int16,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteInt16KeyFrame"></see> class with the specified ending value and key time.</summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteInt16KeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DiscreteInt32KeyFrame">
			<summary> Animates from the Int32 value of the previous key frame to its own Value using GTMT#discrete interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteInt32KeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteInt32KeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteInt32KeyFrame.#ctor(System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteInt32KeyFrame"></see> class with the specified ending value.</summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteInt32KeyFrame.#ctor(System.Int32,System.Windows.Media.Animation.KeyTime)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteInt32KeyFrame"></see> class with the specified ending value and key time. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteInt32KeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DiscreteInt64KeyFrame">
			<summary> Animates from the Int64 value of the previous key frame to its own Value using GTMT#discrete interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteInt64KeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteInt64KeyFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteInt64KeyFrame.#ctor(System.Int64)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteInt64KeyFrame"></see> class with the specified ending value.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteInt64KeyFrame.#ctor(System.Int64,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteInt64KeyFrame"></see> class with the specified ending value and key time.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteInt64KeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DiscreteMatrixKeyFrame">
			<summary> Animates from the Matrix value of the previous key frame to its own Value using GTMT#discrete interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteMatrixKeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteMatrixKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteMatrixKeyFrame.#ctor(System.Windows.Media.Matrix)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteMatrixKeyFrame"></see> class with the specified ending value.</summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteMatrixKeyFrame.#ctor(System.Windows.Media.Matrix,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteMatrixKeyFrame"></see> class with the specified ending value and key time. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteMatrixKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DiscreteObjectKeyFrame">
			<summary>Animates from the Object value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.Value"></see> using GTMT#discrete interpolation.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteObjectKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteObjectKeyFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteObjectKeyFrame.#ctor(System.Object)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteObjectKeyFrame"></see> class with the specified ending value.</summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteObjectKeyFrame.#ctor(System.Object,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteObjectKeyFrame"></see> class with the specified ending value and key time.</summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.DiscretePoint3DKeyFrame">
			<summary> Animates from the Point3D value of the previous key frame to its own Value using GTMT#discrete interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscretePoint3DKeyFrame.#ctor">
			<summary> Creates a new DiscretePoint3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscretePoint3DKeyFrame.#ctor(System.Windows.Media.Media3D.Point3D)">
			<summary> Creates a new DiscretePoint3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscretePoint3DKeyFrame.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Animation.KeyTime)">
			<summary> Creates a new DiscretePoint3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscretePoint3DKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DiscretePointKeyFrame">
			<summary> Animates from the Point value of the previous key frame to its own Value using GTMT#discrete interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscretePointKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscretePointKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscretePointKeyFrame.#ctor(System.Windows.Point)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscretePointKeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscretePointKeyFrame.#ctor(System.Windows.Point,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscretePointKeyFrame"></see> class with the specified ending value and key time.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscretePointKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DiscreteQuaternionKeyFrame">
			<summary>Animates from the <see cref="T:System.Windows.Media.Media3D.Quaternion"></see> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.QuaternionKeyFrame.Value"></see> using GTMT#discrete interpolation.  </summary>
		</member>
		<member name="T:System.Windows.Media.Animation.DiscreteRectKeyFrame">
			<summary> Animates from the Rect value of the previous key frame to its own Value using GTMT#discrete interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteRectKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteRectKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteRectKeyFrame.#ctor(System.Windows.Rect)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteRectKeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteRectKeyFrame.#ctor(System.Windows.Rect,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteRectKeyFrame"></see> class with the specified ending value and key time.</summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteRectKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DiscreteRotation3DKeyFrame">
			<summary> Animates from the Rotation3D value of the previous key frame to its own Value using GTMT#discrete interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteRotation3DKeyFrame.#ctor">
			<summary>Creates a new DiscreteRotation3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteRotation3DKeyFrame.#ctor(System.Windows.Media.Media3D.Rotation3D)">
			<summary>Creates a new DiscreteRotation3DKeyFrame. </summary>
			<param name="value">Rotation3D to reach in this KeyFrame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteRotation3DKeyFrame.#ctor(System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Animation.KeyTime)">
			<summary>Creates a new DiscreteRotation3DKeyFrame. </summary>
			<param name="value">Rotation3D to reach in this KeyFrame.</param>
			<param name="keyTime">Time at which to reach the specified value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteRotation3DKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>New Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteRotation3DKeyFrame.InterpolateValueCore(System.Windows.Media.Media3D.Rotation3D,System.Double)">
			<summary>Llinearly interpolates between the base and target values of this KeyFrame using the specified rate of progress. </summary>
			<param name="baseValue">Rotation3D to reach.</param>
			<param name="keyFrameProgress">Rate of progress.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.DiscreteSingleKeyFrame">
			<summary> Animates from the Single value of the previous key frame to its own Value using GTMT#discrete interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteSingleKeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteSingleKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteSingleKeyFrame.#ctor(System.Single)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteSingleKeyFrame"></see> class with the specified ending value.</summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteSingleKeyFrame.#ctor(System.Single,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteSingleKeyFrame"></see> class with the specified ending value and key time. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteSingleKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DiscreteSizeKeyFrame">
			<summary> Animates from the Size value of the previous key frame to its own Value using GTMT#discrete interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteSizeKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteSizeKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteSizeKeyFrame.#ctor(System.Windows.Size)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteSizeKeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteSizeKeyFrame.#ctor(System.Windows.Size,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteSizeKeyFrame"></see> class with the specified ending value and key time. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteSizeKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DiscreteStringKeyFrame">
			<summary> Animates from the String value of the previous key frame to its own Value using GTMT#discrete interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteStringKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteStringKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteStringKeyFrame.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteStringKeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteStringKeyFrame.#ctor(System.String,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteStringKeyFrame"></see> class with the specified ending value and key time. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteStringKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DiscreteVector3DKeyFrame">
			<summary> Animates from the Vector3D value of the previous key frame to its own Value using GTMT#discrete interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteVector3DKeyFrame.#ctor">
			<summary> Creates a new DiscreteVector3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteVector3DKeyFrame.#ctor(System.Windows.Media.Media3D.Vector3D)">
			<summary> Creates a new DiscreteVector3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteVector3DKeyFrame.#ctor(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Animation.KeyTime)">
			<summary> Creates a new DiscreteVector3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteVector3DKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DiscreteVectorKeyFrame">
			<summary> Animates from the Vector value of the previous key frame to its own Value using GTMT#discrete interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteVectorKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteVectorKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteVectorKeyFrame.#ctor(System.Windows.Vector)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteVectorKeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteVectorKeyFrame.#ctor(System.Windows.Vector,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteVectorKeyFrame"></see> class with the specified ending value and key time. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DiscreteVectorKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DoubleAnimation">
			<summary> Animates the value of a  Double property between two target values using      GTMT#linear interpolation over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimation.#ctor">
			<summary> Initializes a new instance of the DoubleAnimation class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimation.#ctor(System.Double,System.Windows.Duration)">
			<summary> Initializes a new instance of the DoubleAnimation class that animates to the specified value over the specified duration. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimation.#ctor(System.Double,System.Double,System.Windows.Duration)">
			<summary> Initializes a new instance of the DoubleAnimation class that animates from the specified starting value to the specified destination value over the specified duration. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimation.#ctor(System.Double,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the DoubleAnimation class that animates to the specified value over the specified duration and has the specified fill behavior. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimation.#ctor(System.Double,System.Double,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the DoubleAnimation class that animates from the specified starting value to the specified destination value over the specified duration and has the specified fill behavior. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="F:System.Windows.Media.Animation.DoubleAnimation.ByProperty">
			<summary> Identifies the By GTMT#dependency property. </summary>
			<returns>The identifier for the By GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.DoubleAnimation.FromProperty">
			<summary> Identifies the From GTMT#dependency property. </summary>
			<returns>The identifier for the From GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.DoubleAnimation.ToProperty">
			<summary> Identifies the To GTMT#dependency property. </summary>
			<returns>The identifier for the To GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimation.Clone">
			<summary> Returns a modifiable clone of the animation. </summary>
			<returns>A modifiable clone of the animation. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimation.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimation.GetCurrentValueCore(System.Double,System.Double,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.DoubleAnimation.By">
			<summary> Gets or sets the total amount by which the animation changes its starting value. </summary>
			<returns>The total amount by which the animation changes its starting value.     The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.DoubleAnimation.From">
			<summary> Gets or sets the animation's starting value. </summary>
			<returns>The starting value of the animation. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.DoubleAnimation.IsAdditive">
			<summary>Gets or sets a value that specifies whether the animation's output value is added to the base           value of the property being animated. </summary>
			<returns>true if the animation adds its output value         to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.DoubleAnimation.IsCumulative">
			<summary> Gets or sets a value that specifies whether the animation's value accumulates when it repeats. </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.DoubleAnimation.To">
			<summary> Gets or sets the animation's ending value. </summary>
			<returns>The ending value of the animation. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DoubleAnimationBase">
			<summary> Abstract class that, when implemented, animates a Double value. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimationBase.Clone">
			<summary> Returns a modifiable clone of the animation. </summary>
			<returns>A modifiable clone of the animation. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimationBase.GetCurrentValue(System.Double,System.Double,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimationBase.GetCurrentValueCore(System.Double,System.Double,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames">
			<summary> Animates the value of a Double property along a set of KeyFrames over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.Clone">
			<summary> Creates a copy of this KeyFrameDoubleAnimation. </summary>
			<returns>The copy</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
			<summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames"></see> object.</summary>
			<param name="source">The <see cref="T:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames"></see> object to be cloned.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.GetCurrentValueCore(System.Double,System.Double,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
			<summary> Provide a custom natural Duration when the Duration property is set to Automatic. </summary>
			<returns>If the last KeyFrame of this animation is a KeyTime, then this will be used as the NaturalDuration; otherwise it will be one second.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.IsAdditive">
			<summary>   Gets a value that specifies whether the animation's output value is added to the base value of the property being animated. </summary>
			<returns>true if the animation adds its output value         to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.IsCumulative">
			<summary>      Gets or sets a value that specifies whether the animation's value accumulates when it repeats.</summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.KeyFrames">
			<summary> Gets or sets the collection of DoubleKeyFrame objects that define the animation. </summary>
			<returns>The collection of DoubleKeyFrame objects that define the animation. The default value is DoubleKeyFrameCollection.Empty.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DoubleAnimationUsingPath">
			<summary>Animates the value of a double property between two or more target values using a <see cref="T:System.Windows.Shapes.Path"></see> to specify those values. This animation can be used to move a visual object along a path. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimationUsingPath.#ctor">
			<summary>  Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DoubleAnimationUsingPath"></see> class. </summary>
		</member>
		<member name="F:System.Windows.Media.Animation.DoubleAnimationUsingPath.PathGeometryProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Animation.DoubleAnimationUsingPath.PathGeometry"></see> GTMT#dependency property.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimationUsingPath.Clone">
			<summary>Returns a modifiable clone of the animation.</summary>
			<returns>A modifiable clone of the animation. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimationUsingPath.CreateInstanceCore">
			<summary>Implementation of CreateInstanceCore.              </summary>
			<returns>The new <see cref="T:System.Windows.Freezable"></see> created.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleAnimationUsingPath.GetCurrentValueCore(System.Double,System.Double,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherwise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.DoubleAnimationUsingPath.IsAdditive">
			<summary> Gets a value that specifies whether the animation's output value is added to the base value of the property being animated.</summary>
			<returns>true if the animation adds its output value         to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.DoubleAnimationUsingPath.IsCumulative">
			<summary> Gets or sets a value that specifies whether the animation's value accumulates when it repeats.</summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.DoubleAnimationUsingPath.PathGeometry">
			<summary>Specifies the geometry of the <see cref="T:System.Windows.Shapes.Path"></see> used to drive the animation. </summary>
			<returns>The <see cref="T:System.Windows.Shapes.Path"></see> used to drive the animation. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DoubleKeyFrame">
			<summary> Abstract class that, when implemented, defines an animation segment with its own target value and interpolation method for a DoubleAnimationUsingKeyFrames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleKeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DoubleKeyFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleKeyFrame.#ctor(System.Double)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DoubleKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.Value"></see>.  </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.DoubleKeyFrame"></see> instance.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleKeyFrame.#ctor(System.Double,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DoubleKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.Value"></see> and <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.KeyTime"></see>.  </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.DoubleKeyFrame"></see> instance.</param>
			<param name="keyTime">The <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.KeyTime"></see> of the new <see cref="T:System.Windows.Media.Animation.DoubleKeyFrame"></see> instance.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.DoubleKeyFrame.KeyTime">
			<summary> Gets or sets the time at which the key frame's target Value should be reached. </summary>
			<returns>The time at which the key frame's current value should be equal to its Value property. The default value is Uniform.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.DoubleKeyFrame.Value">
			<summary> Gets or sets the key frame's target value. </summary>
			<returns>The key frame's target value, which is the value of this key frame at its specified KeyTime. The default value is 0.0.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.DoubleKeyFrameCollection">
			<summary> Represents a collection of DoubleKeyFrame objects. This collection is used as part of a DoubleAnimationUsingKeyFrames to animate a Double property value along a set of key frames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleKeyFrameCollection.Add(System.Windows.Media.Animation.DoubleKeyFrame)">
			<summary> Adds a DoubleKeyFrame to the end of the collection. </summary>
			<returns>The index at which the keyFrame was added.</returns>
			<param name="keyFrame">The DoubleKeyFrame to add to the end of the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleKeyFrameCollection.Clone">
			<summary> Returns a modifiable clone of the collection and its contents. </summary>
			<returns>A modifiable clone of the collection and its contents. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleKeyFrameCollection.Contains(System.Windows.Media.Animation.DoubleKeyFrame)">
			<summary> Indicates whether the collection contains the specified DoubleKeyFrame. </summary>
			<returns>true if the collection contains keyFrame; otherwise, false.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleKeyFrameCollection.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleKeyFrameCollection.GetEnumerator">
			<summary> Returns an enumerator that can iterate through the collection. </summary>
			<returns>An IEnumerator that can iterate through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.DoubleKeyFrameCollection.IndexOf(System.Windows.Media.Animation.DoubleKeyFrame)">
			<summary> Searches for the specified DoubleKeyFrame and returns the zero-based index of the first occurrence within the entire collection. </summary>
			<returns>The zero-based index of the first occurrence of keyFrame within the entire collection, if found; otherwise, -1.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.DoubleKeyFrameCollection.Count">
			<summary> Gets the number of key frames contained in the DoubleKeyFrameCollection.  </summary>
			<returns>The number of key frames contained in the DoubleKeyFrameCollection. </returns>
		</member>
		<member name="P:System.Windows.Media.Animation.DoubleKeyFrameCollection.IsSynchronized">
			<summary> Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
			<returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.DoubleKeyFrameCollection.Item(System.Int32)">
			<summary> Gets or sets the DoubleKeyFrame at the specified index. </summary>
			<returns>The DoubleKeyFrame at the specified index.</returns>
			<param name="index">The zero-based index of the DoubleKeyFrame to get or set.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.DoubleKeyFrameCollection.SyncRoot">
			<summary> Gets an object that can be used to synchronize access to the collection. </summary>
			<returns>An object that can be used to synchronize access to the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.FillBehavior">
			<summary> Specifies how a Timeline behaves when it is outside of its active period but its parent is inside its active or hold period. </summary>
		</member>
		<member name="F:System.Windows.Media.Animation.FillBehavior.HoldEnd">
			<summary> After it reaches the end of its active period, the timeline holds its progress until the end of its parent's active and hold periods. </summary>
		</member>
		<member name="F:System.Windows.Media.Animation.FillBehavior.Stop">
			<summary>The timeline will stop if it is outside its active period while its parent is inside its active period.</summary>
		</member>
		<member name="T:System.Windows.Media.Animation.HandoffBehavior">
			<summary>Specifies how new animations will interact with any existing ones that are already applied to a property. </summary>
		</member>
		<member name="F:System.Windows.Media.Animation.HandoffBehavior.Compose">
			<summary>New and existing animations are combined together by appending the new animations to the end of the composition chain.</summary>
		</member>
		<member name="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace">
			<summary>Immediately replaces the current animations on a property with the new ones.</summary>
		</member>
		<member name="T:System.Windows.Media.Animation.IAnimatable">
			<summary>The <see cref="T:System.Windows.Media.Animation.IAnimatable"></see> interface is supported by <see cref="T:System.Windows.DependencyObject"></see> objects with animatable properties. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
			<summary>Initiates an animation sequence for the <see cref="T:System.Windows.DependencyProperty"></see> object, based on the specified <see cref="T:System.Windows.Media.Animation.AnimationTimeline"></see>. </summary>
			<param name="Dp">The object to animate.</param>
			<param name="Animation">The timeline with the necessary functionality to animate the property.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
			<summary>Initiates an animation sequence for the <see cref="T:System.Windows.DependencyProperty"></see>.object, based on both the specified <see cref="T:System.Windows.Media.Animation.AnimationTimeline"></see> and <see cref="T:System.Windows.Media.Animation.HandoffBehavior"></see>. </summary>
			<param name="handoffBehavior">The object specifying the manner in which to interact with all relevant animation sequences.</param>
			<param name="Dp">The object to animate.</param>
			<param name="Animation">The timeline with the necessary functionality to tailor the new animation.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)">
			<summary>Retrieves the base value of the specified <see cref="T:System.Windows.DependencyProperty"></see> object. </summary>
			<returns>The object representing the base value of Dp.</returns>
			<param name="dp">The object for which the base value is being requested.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties">
			<summary>Gets a value indicating if this instance has any animated properties. </summary>
			<returns>true if this instance has properties with either a persistent animation or at least one associated clock; otherwise false. </returns>
		</member>
		<member name="T:System.Windows.Media.Animation.IKeyFrame">
			<summary>An <see cref="T:System.Windows.Media.Animation.IKeyFrame"></see> interface implementation provides un-typed access to <see cref="T:System.Windows.Media.Animation.KeyTime"></see> properties. </summary>
		</member>
		<member name="P:System.Windows.Media.Animation.IKeyFrame.KeyTime">
			<summary>Gets or sets <see cref="P:System.Windows.Media.Animation.IKeyFrame.KeyTime"></see> values associated with a KeyFrame object. </summary>
			<returns>A <see cref="T:System.Windows.Media.Animation.KeyTime"></see> instance.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.IKeyFrame.Value">
			<summary>Gets or sets the value associated with a <see cref="T:System.Windows.Media.Animation.KeyTime"></see> instance. </summary>
			<returns>The current value for this property. </returns>
		</member>
		<member name="T:System.Windows.Media.Animation.IKeyFrameAnimation">
			<summary>An <see cref="T:System.Windows.Media.Animation.IKeyFrameAnimation"></see> interface implementation provides untyped access to key frame collection members. </summary>
		</member>
		<member name="P:System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames">
			<summary>Gets or sets an ordered collection <see cref="P:System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames"></see> associated with this animation sequence. </summary>
			<returns>An IList of <see cref="P:System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.Int16Animation">
			<summary> Animates the value of a  Int16 property between two target values using      GTMT#linear interpolation over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16Animation.#ctor">
			<summary> Initializes a new instance of the Int16Animation class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16Animation.#ctor(System.Int16,System.Windows.Duration)">
			<summary> Initializes a new instance of the Int16Animation class that animates to the specified value over the specified duration. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16Animation.#ctor(System.Int16,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the Int16Animation class that animates to the specified value over the specified duration and has the specified fill behavior. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16Animation.#ctor(System.Int16,System.Int16,System.Windows.Duration)">
			<summary> Initializes a new instance of the Int16Animation class that animates from the specified starting value to the specified destination value over the specified duration. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16Animation.#ctor(System.Int16,System.Int16,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the Int16Animation class that animates from the specified starting value to the specified destination value over the specified duration and has the specified fill behavior. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="F:System.Windows.Media.Animation.Int16Animation.ByProperty">
			<summary> Identifies the By GTMT#dependency property. </summary>
			<returns>The identifier for the By GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.Int16Animation.FromProperty">
			<summary> Identifies the From GTMT#dependency property. </summary>
			<returns>The identifier for the From GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.Int16Animation.ToProperty">
			<summary> Identifies the To GTMT#dependency property. </summary>
			<returns>The identifier for the To GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16Animation.Clone">
			<summary> Returns a modifiable clone of the animation. </summary>
			<returns>A modifiable clone of the animation. The returned clone is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16Animation.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16Animation.GetCurrentValueCore(System.Int16,System.Int16,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.Int16Animation.By">
			<summary> Gets or sets the total amount by which the animation changes its starting value. </summary>
			<returns>The total amount by which the animation changes its starting value.     The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int16Animation.From">
			<summary>  Gets or sets the animation's starting value.  </summary>
			<returns>The starting value of the animation. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int16Animation.IsAdditive">
			<summary> Gets a value that specifies whether the animation's output value is added to the base           value of the property being animated. </summary>
			<returns>true if the animation adds its output value         to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int16Animation.IsCumulative">
			<summary> Gets or sets a value that specifies whether the animation's value accumulates when it repeats. </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int16Animation.To">
			<summary> Gets or sets the animation's ending value. </summary>
			<returns>The ending value of the animation. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.Int16AnimationBase">
			<summary>Abstract class that, when implemented, animates an Int16 value. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16AnimationBase.Clone">
			<summary> Returns a modifiable clone of the animation. </summary>
			<returns>A modifiable clone of the animation. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16AnimationBase.GetCurrentValue(System.Int16,System.Int16,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16AnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.Int16AnimationUsingKeyFrames">
			<summary> Animates the value of an Int16 property along a set of KeyFrames over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16AnimationUsingKeyFrames.Clone">
			<summary> Creates a copy of this KeyFrameInt16Animation. </summary>
			<returns>The copy</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16AnimationUsingKeyFrames.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16AnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
			<summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.Int16AnimationUsingKeyFrames"></see> object.</summary>
			<param name="source">The <see cref="T:System.Windows.Media.Animation.Int16AnimationUsingKeyFrames"></see> object to be cloned.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16AnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
			<summary> Provide a custom natural Duration when the Duration property is set to Automatic. </summary>
			<returns>If the last KeyFrame of this animation is a KeyTime, then this will be used as the NaturalDuration; otherwise it will be one second.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16AnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16AnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.Int16AnimationUsingKeyFrames.IsAdditive">
			<summary>    Gets a value that specifies whether the animation's output value is added to the base value of the property being animated.  </summary>
			<returns>true if the animation adds its output value to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int16AnimationUsingKeyFrames.IsCumulative">
			<summary>     Gets or sets a value that specifies whether the animation's value accumulates when it repeats.</summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int16AnimationUsingKeyFrames.KeyFrames">
			<summary> Gets or sets the collection of Int16KeyFrame objects that define the animation. </summary>
			<returns>The collection of Int16KeyFrame objects that define the animation. The default value is Int16KeyFrameCollection.Empty.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.Int16KeyFrame">
			<summary> Abstract class that, when implemented, defines a segment with its own target value and interpolation method for an Int16AnimationUsingKeyFrames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16KeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Int16KeyFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16KeyFrame.#ctor(System.Int16)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Int16KeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.Int16KeyFrame.Value"></see>.  </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.Int16KeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.Int16KeyFrame"></see> instance.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16KeyFrame.#ctor(System.Int16,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Int16KeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.Int16KeyFrame.Value"></see> and <see cref="P:System.Windows.Media.Animation.Int16KeyFrame.KeyTime"></see>.  </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.Int16KeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.Int16KeyFrame"></see> instance.</param>
			<param name="keyTime">The <see cref="P:System.Windows.Media.Animation.Int16KeyFrame.KeyTime"></see> of the new <see cref="T:System.Windows.Media.Animation.Int16KeyFrame"></see> instance.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.Int16KeyFrame.KeyTime">
			<summary> Gets or sets the time at which the key frame's target Value should be reached. </summary>
			<returns>The time at which the key frame's current value should be equal to its Value property. The default value is Uniform.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int16KeyFrame.Value">
			<summary> Gets or sets the key frame's target value. </summary>
			<returns>The key frame's target value, which is the value of this key frame at its specified KeyTime. The default value is 0.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.Int16KeyFrameCollection">
			<summary> Represents a collection of Int16KeyFrame objects. This collection is used as part of a Int16AnimationUsingKeyFrames to animate a Int16 property value along a set of key frames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16KeyFrameCollection.Add(System.Windows.Media.Animation.Int16KeyFrame)">
			<summary> Adds an Int16KeyFrame to the end of the collection. </summary>
			<returns>The index at which the keyFrame was added.</returns>
			<param name="keyFrame">The Int16KeyFrame to add to the end of the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16KeyFrameCollection.Clone">
			<summary> Returns a modifiable copy of the collection and its contents. </summary>
			<returns>A modifiable copy of the collection and its contents. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16KeyFrameCollection.Contains(System.Windows.Media.Animation.Int16KeyFrame)">
			<summary> Indicates whether the collection contains the specified Int16KeyFrame. </summary>
			<returns>true if the collection contains keyFrame; otherwise, false.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16KeyFrameCollection.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16KeyFrameCollection.GetEnumerator">
			<summary> Returns an enumerator that can iterate through the collection. </summary>
			<returns>An IEnumerator that can iterate through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int16KeyFrameCollection.IndexOf(System.Windows.Media.Animation.Int16KeyFrame)">
			<summary> Searches for the specified Int16KeyFrame and returns the zero-based index of the first occurrence within the entire collection. </summary>
			<returns>The zero-based index of the first occurrence of keyFrame within the entire collection, if found; otherwise, -1.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.Int16KeyFrameCollection.Count">
			<summary> Gets the number of key frames contained in the Int16KeyFrameCollection.  </summary>
			<returns>The number of key frames contained in the Int16KeyFrameCollection. </returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int16KeyFrameCollection.IsSynchronized">
			<summary> Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
			<returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int16KeyFrameCollection.Item(System.Int32)">
			<summary> Gets or sets the Int16KeyFrame at the specified index. </summary>
			<returns>The Int16KeyFrame at the specified index.</returns>
			<param name="index">The zero-based index of the Int16KeyFrame to get or set.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.Int16KeyFrameCollection.SyncRoot">
			<summary> Gets an object that can be used to synchronize access to the collection. </summary>
			<returns>An object that can be used to synchronize access to the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.Int32Animation">
			<summary> Animates the value of an  Int32 property between two target values using      GTMT#linear interpolation over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32Animation.#ctor">
			<summary> Initializes a new instance of the Int32Animation class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32Animation.#ctor(System.Int32,System.Windows.Duration)">
			<summary> Initializes a new instance of the Int32Animation class that animates to the specified value over the specified duration. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32Animation.#ctor(System.Int32,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the Int32Animation class that animates to the specified value over the specified duration and has the specified fill behavior. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32Animation.#ctor(System.Int32,System.Int32,System.Windows.Duration)">
			<summary> Initializes a new instance of the Int32Animation class that animates from the specified starting value to the specified destination value over the specified duration. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32Animation.#ctor(System.Int32,System.Int32,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the Int32Animation class that animates from the specified starting value to the specified destination value over the specified duration and has the specified fill behavior. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="F:System.Windows.Media.Animation.Int32Animation.ByProperty">
			<summary> Identifies the By GTMT#dependency property. </summary>
			<returns>The identifier for the By GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.Int32Animation.FromProperty">
			<summary> Identifies the From GTMT#dependency property. </summary>
			<returns>The identifier for the From GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.Int32Animation.ToProperty">
			<summary> Identifies the To GTMT#dependency property. </summary>
			<returns>The identifier for the To GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32Animation.Clone">
			<summary> Returns a modifiable copy of the animation. </summary>
			<returns>A modifiable copy of the animation. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32Animation.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32Animation.GetCurrentValueCore(System.Int32,System.Int32,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.Int32Animation.By">
			<summary> Gets or sets the total amount by which the animation changes its starting value. </summary>
			<returns>The total amount by which the animation changes its starting value.     The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int32Animation.From">
			<summary> Gets or sets the animation's starting value. </summary>
			<returns>The starting value of the animation. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int32Animation.IsAdditive">
			<summary> Gets a value that specifies whether the animation's output value is added to the base           value of the property being animated. </summary>
			<returns>true if the animation adds its output value         to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int32Animation.IsCumulative">
			<summary> Gets or sets a value that specifies whether the animation's value accumulates when it repeats. </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int32Animation.To">
			<summary> Gets or sets the animation's ending value. </summary>
			<returns>The ending value of the animation. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.Int32AnimationBase">
			<summary> Abstract class that, when implemented, animates an Int32 value. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32AnimationBase.Clone">
			<summary> Returns a modifiable copy of the animation. </summary>
			<returns>A modifiable copy of the animation. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32AnimationBase.GetCurrentValue(System.Int32,System.Int32,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32AnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32AnimationBase.GetCurrentValueCore(System.Int32,System.Int32,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.Int32AnimationUsingKeyFrames">
			<summary> Animates the value of an Int32 property along a set of KeyFrames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32AnimationUsingKeyFrames.Clone">
			<summary> Creates a copy of this KeyFrameInt32Animation. </summary>
			<returns>The copy</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32AnimationUsingKeyFrames.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32AnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
			<summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.Int32AnimationUsingKeyFrames"></see> object.</summary>
			<param name="source">The <see cref="T:System.Windows.Media.Animation.Int32AnimationUsingKeyFrames"></see> object to be cloned.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32AnimationUsingKeyFrames.GetCurrentValueCore(System.Int32,System.Int32,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32AnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
			<summary> Provide a custom natural Duration when the Duration property is set to Automatic. </summary>
			<returns>If the last KeyFrame of this animation is a KeyTime, then this will be used as the NaturalDuration; otherwise it will be one second.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32AnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32AnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.Int32AnimationUsingKeyFrames.IsAdditive">
			<summary>   Gets a value that specifies whether the animation's output value is added to the base value of the property being animated.   </summary>
			<returns>true if the animation adds its output value to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int32AnimationUsingKeyFrames.IsCumulative">
			<summary>    Gets or sets a value that specifies whether the animation's value accumulates when it repeats. </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int32AnimationUsingKeyFrames.KeyFrames">
			<summary> Gets or sets the collection of Int32KeyFrame objects that define the animation. </summary>
			<returns>The collection of Int32KeyFrame objects that define the animation. The default value is Int32KeyFrameCollection.Empty.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.Int32KeyFrame">
			<summary>Abstract class that, when implemented, defines a segment with its own target value and interpolation method for an Int32AnimationUsingKeyFrames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32KeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Int32KeyFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32KeyFrame.#ctor(System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Int32KeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.Int32KeyFrame.Value"></see>.  </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.Int32KeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.Int32KeyFrame"></see> instance.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32KeyFrame.#ctor(System.Int32,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Int32KeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.Int32KeyFrame.Value"></see> and <see cref="P:System.Windows.Media.Animation.Int32KeyFrame.KeyTime"></see>.  </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.Int32KeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.Int32KeyFrame"></see> instance.</param>
			<param name="keyTime">The <see cref="P:System.Windows.Media.Animation.Int32KeyFrame.KeyTime"></see> of the new <see cref="T:System.Windows.Media.Animation.Int32KeyFrame"></see> instance.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.Int32KeyFrame.KeyTime">
			<summary> Gets or sets the time at which the key frame's target Value should be reached. </summary>
			<returns>The time at which the key frame's current value should be equal to its Value property. The default value is Uniform.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int32KeyFrame.Value">
			<summary> Gets or sets the key frame's target value. </summary>
			<returns>The key frame's target value, which is the value of this key frame at its specified KeyTime. The default value is 0.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.Int32KeyFrameCollection">
			<summary> Represents a collection of Int32KeyFrame objects. This collection is used as part of a Int32AnimationUsingKeyFrames to animate a Int32 property value along a set of key frames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32KeyFrameCollection.Add(System.Windows.Media.Animation.Int32KeyFrame)">
			<summary> Adds an Int32KeyFrame to the end of the collection. </summary>
			<returns>The index at which the keyFrame was added.</returns>
			<param name="keyFrame">The Int32KeyFrame to add to the end of the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32KeyFrameCollection.Clone">
			<summary> Returns a modifiable copy of the collection and its contents. </summary>
			<returns>A modifiable copy of the collection and its contents. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32KeyFrameCollection.Contains(System.Windows.Media.Animation.Int32KeyFrame)">
			<summary> Indicates whether the collection contains the specified Int32KeyFrame. </summary>
			<returns>true if the collection contains keyFrame; otherwise, false.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32KeyFrameCollection.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32KeyFrameCollection.GetEnumerator">
			<summary> Returns an enumerator that can iterate through the collection. </summary>
			<returns>An IEnumerator that can iterate through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int32KeyFrameCollection.IndexOf(System.Windows.Media.Animation.Int32KeyFrame)">
			<summary> Searches for the specified Int32KeyFrame and returns the zero-based index of the first occurrence within the entire collection. </summary>
			<returns>The zero-based index of the first occurrence of keyFrame within the entire collection, if found; otherwise, -1.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.Int32KeyFrameCollection.Count">
			<summary> Gets the number of key frames contained in the Int32KeyFrameCollection.  </summary>
			<returns>The number of key frames contained in the Int32KeyFrameCollection. </returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int32KeyFrameCollection.IsSynchronized">
			<summary> Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
			<returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int32KeyFrameCollection.Item(System.Int32)">
			<summary> Gets or sets the Int32KeyFrame at the specified index. </summary>
			<returns>The Int32KeyFrame at the specified index.</returns>
			<param name="index">The zero-based index of the Int32KeyFrame to get or set.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.Int32KeyFrameCollection.SyncRoot">
			<summary> Gets an object that can be used to synchronize access to the collection. </summary>
			<returns>An object that can be used to synchronize access to the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.Int64Animation">
			<summary> Animates the value of a  Int64 property between two target values using      GTMT#linear interpolation over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64Animation.#ctor">
			<summary> Initializes a new instance of the Int64Animation class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64Animation.#ctor(System.Int64,System.Windows.Duration)">
			<summary> Initializes a new instance of the Int64Animation class that animates to the specified value over the specified duration. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64Animation.#ctor(System.Int64,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the Int64Animation class that animates to the specified value over the specified duration and has the specified fill behavior. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64Animation.#ctor(System.Int64,System.Int64,System.Windows.Duration)">
			<summary> Initializes a new instance of the Int64Animation class that animates from the specified starting value to the specified destination value over the specified duration. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64Animation.#ctor(System.Int64,System.Int64,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the Int64Animation class that animates from the specified starting value to the specified destination value over the specified duration and has the specified fill behavior. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="F:System.Windows.Media.Animation.Int64Animation.ByProperty">
			<summary> Identifies the By GTMT#dependency property. </summary>
			<returns>The identifier for the By GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.Int64Animation.FromProperty">
			<summary> Identifies the From GTMT#dependency property. </summary>
			<returns>The identifier for the From GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.Int64Animation.ToProperty">
			<summary> Identifies the To GTMT#dependency property. </summary>
			<returns>The identifier for the To GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64Animation.Clone">
			<summary> Returns a modifiable copy of the animation. </summary>
			<returns>A modifiable copy of the animation. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64Animation.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64Animation.GetCurrentValueCore(System.Int64,System.Int64,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.Int64Animation.By">
			<summary> Gets or sets the total amount by which the animation changes its starting value. </summary>
			<returns>The total amount by which the animation changes its starting value.     The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int64Animation.From">
			<summary> Gets or sets the animation's starting value. </summary>
			<returns>The starting value of the animation. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int64Animation.IsAdditive">
			<summary> Gets a value that specifies whether the animation's output value is added to the base           value of the property being animated. </summary>
			<returns>true if the animation adds its output value         to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int64Animation.IsCumulative">
			<summary> Gets or sets a value that specifies whether the animation's value accumulates when it repeats. </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int64Animation.To">
			<summary> Gets or sets the animation's ending value. </summary>
			<returns>The ending value of the animation. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.Int64AnimationBase">
			<summary> Abstract class that, when implemented, animates an Int64 value. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64AnimationBase.Clone">
			<summary> Returns a modifiable copy of the animation. </summary>
			<returns>A modifiable copy of the animation. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64AnimationBase.GetCurrentValue(System.Int64,System.Int64,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64AnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64AnimationBase.GetCurrentValueCore(System.Int64,System.Int64,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.Int64AnimationUsingKeyFrames">
			<summary> Animates the value of an Int64 property along a set of KeyFrames over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64AnimationUsingKeyFrames.Clone">
			<summary> Creates a copy of this KeyFrameInt64Animation. </summary>
			<returns>The copy</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64AnimationUsingKeyFrames.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64AnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
			<summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.Int64AnimationUsingKeyFrames"></see> object.</summary>
			<param name="source">The <see cref="T:System.Windows.Media.Animation.Int64AnimationUsingKeyFrames"></see> object to be cloned.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64AnimationUsingKeyFrames.GetCurrentValueCore(System.Int64,System.Int64,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64AnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
			<summary> Provide a custom natural Duration when the Duration property is set to Automatic. </summary>
			<returns>If the last KeyFrame of this animation is a KeyTime, then this will be used as the NaturalDuration; otherwise it will be one second.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64AnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64AnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.Int64AnimationUsingKeyFrames.IsAdditive">
			<summary>    Gets a value that specifies whether the animation's output value is added to the base value of the property being animated.   </summary>
			<returns>true if the animation adds its output value to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int64AnimationUsingKeyFrames.IsCumulative">
			<summary>  Gets or sets a value that specifies whether the animation's value accumulates when it repeats. </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int64AnimationUsingKeyFrames.KeyFrames">
			<summary> Gets or sets the collection of Int64KeyFrame objects that define the animation. </summary>
			<returns>The collection of Int64KeyFrame objects that define the animation. The default value is Int64KeyFrameCollection.Empty.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.Int64KeyFrame">
			<summary> Abstract class that, when implemented, defines a segment with its own target value and interpolation method for an Int64AnimationUsingKeyFrames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64KeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Int64KeyFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64KeyFrame.#ctor(System.Int64)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Int64KeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.Int64KeyFrame.Value"></see>.  </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.Int64KeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.Int64KeyFrame"></see> instance.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64KeyFrame.#ctor(System.Int64,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Int64KeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.Int64KeyFrame.Value"></see> and <see cref="P:System.Windows.Media.Animation.Int64KeyFrame.KeyTime"></see>.  </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.Int64KeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.Int64KeyFrame"></see> instance.</param>
			<param name="keyTime">The <see cref="P:System.Windows.Media.Animation.Int64KeyFrame.KeyTime"></see> of the new <see cref="T:System.Windows.Media.Animation.Int64KeyFrame"></see> instance.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.Int64KeyFrame.KeyTime">
			<summary> Gets or sets the time at which the key frame's target Value should be reached. </summary>
			<returns>The time at which the key frame's current value should be equal to its Value property. The default value is Uniform.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int64KeyFrame.Value">
			<summary> Gets or sets the key frame's target value. </summary>
			<returns>The key frame's target value, which is the value of this key frame at its specified KeyTime. The default value is 0.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.Int64KeyFrameCollection">
			<summary> Represents a collection of Int64KeyFrame objects. This collection is used as part of an Int64AnimationUsingKeyFrames to animate a Int64 property value along a set of key frames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64KeyFrameCollection.Add(System.Windows.Media.Animation.Int64KeyFrame)">
			<summary> Adds an Int64KeyFrame to the end of the collection. </summary>
			<returns>The index at which the keyFrame was added.</returns>
			<param name="keyFrame">The Int64KeyFrame to add to the end of the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64KeyFrameCollection.Clone">
			<summary> Returns a modifiable copy of the collection and its contents. </summary>
			<returns>A modifiable copy of the collection and its contents. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64KeyFrameCollection.Contains(System.Windows.Media.Animation.Int64KeyFrame)">
			<summary> Indicates whether the collection contains the specified Int64KeyFrame. </summary>
			<returns>true if the collection contains keyFrame; otherwise, false.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64KeyFrameCollection.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64KeyFrameCollection.GetEnumerator">
			<summary> Returns an enumerator that can iterate through the collection. </summary>
			<returns>An IEnumerator that can iterate through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Int64KeyFrameCollection.IndexOf(System.Windows.Media.Animation.Int64KeyFrame)">
			<summary> Searches for the specified Int64KeyFrame and returns the zero-based index of the first occurrence within the entire collection. </summary>
			<returns>The zero-based index of the first occurrence of keyFrame within the entire collection, if found; otherwise, -1.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.Int64KeyFrameCollection.Count">
			<summary> Gets the number of key frames contained in the Int64KeyFrameCollection.  </summary>
			<returns>The number of key frames contained in the Int64KeyFrameCollection. </returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int64KeyFrameCollection.IsSynchronized">
			<summary> Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
			<returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Int64KeyFrameCollection.Item(System.Int32)">
			<summary> Gets or sets the Int64KeyFrame at the specified index. </summary>
			<returns>The Int64KeyFrame at the specified index.</returns>
			<param name="index">The zero-based index of the Int64KeyFrame to get or set.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.KeySpline">
			<summary> This class is used by a spline key frame to define animation progress. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.KeySpline.#ctor">
			<summary> Creates a new KeySpline. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.KeySpline.#ctor(System.Windows.Point,System.Windows.Point)">
			<summary> Point constructor </summary>
			<param name="controlPoint1">the control point for the 0,0 endpoint</param>
			<param name="controlPoint2">the control point for the 1,1 endpoint</param>
		</member>
		<member name="M:System.Windows.Media.Animation.KeySpline.#ctor(System.Double,System.Double,System.Double,System.Double)">
			<summary> Double constructor </summary>
			<param name="x1">x value for the 0,0 endpoint's control point</param>
			<param name="y2">y value for the 1,1 endpoint's control point</param>
			<param name="y1">y value for the 0,0 endpoint's control point</param>
			<param name="x2">x value for the 1,1 endpoint's control point</param>
		</member>
		<member name="M:System.Windows.Media.Animation.KeySpline.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.KeySpline.GetAsFrozenCore(System.Windows.Freezable)">
			<summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.KeySpline"></see> object.</summary>
			<param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.KeySpline"></see> object to be cloned.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.KeySpline.GetSplineProgress(System.Double)">
			<summary> Calculates spline progress from a linear progress. </summary>
			<returns>the spline progress</returns>
			<param name="linearProgress">the linear progress</param>
		</member>
		<member name="M:System.Windows.Media.Animation.KeySpline.ToString">
			<summary> Creates a string representation of this KeySpline based on the current culture. </summary>
			<returns>A string representation of this KeySpline.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.KeySpline.ToString(System.IFormatProvider)">
			<summary> Creates a string representation of this KeySpline based on the IFormatProvider passed in. </summary>
			<returns>A string representation of this KeySpline.</returns>
			<param name="formatProvider">The format provider to use. If the provider is null, the CurrentCulture is used.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.KeySpline.ControlPoint1">
			<summary>The first control point used to define a Bezier curve that describes a <see cref="T:System.Windows.Media.Animation.KeySpline"></see>.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.KeySpline.ControlPoint2">
			<summary>The second control point used to define a Bezier curve that describes a <see cref="T:System.Windows.Media.Animation.KeySpline"></see>.</summary>
		</member>
		<member name="T:System.Windows.Media.Animation.KeyTime">
			<summary>During the relative course of an animation, a <see cref="T:System.Windows.Media.Animation.KeyTime"></see> instance specifies the precise timing when a particular key frame should take place. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.KeyTime.Equals(System.Object)">
			<summary>Indicates whether this instance equals the specified object.</summary>
			<returns>true if value is a <see cref="T:System.Windows.Media.Animation.KeyTime"></see> that represents the same length of time as this instance; otherwise false.</returns>
			<param name="value">The object to compare with this instance.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.KeyTime.Equals(System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeyTime)">
			<summary>Indicates whether the two specified <see cref="T:System.Windows.Media.Animation.KeyTime"></see> structures are equal.</summary>
			<returns>true if the values of keyTime1 and keyTime2 are equal; otherwise false.</returns>
			<param name="keyTime1">The first value to compare.</param>
			<param name="keyTime2">The second value to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.KeyTime.FromPercent(System.Double)">
			<summary>Creates a new <see cref="T:System.Windows.Media.Animation.KeyTime"></see> instance, with the <see cref="T:System.Windows.Media.Animation.KeyTimeType"></see> property initialized to the value of the specified parameter. </summary>
			<returns>A new <see cref="T:System.Windows.Media.Animation.KeyTime"></see> instance, initialized to the value of percent. </returns>
			<param name="percent">The value to of the new KeyTime.</param>
			<exception cref="ArgumentOutOfRangeException">percent is less than 0.0 or greater than 1.0.</exception>
		</member>
		<member name="M:System.Windows.Media.Animation.KeyTime.FromTimeSpan(System.TimeSpan)">
			<summary>Creates a new <see cref="T:System.Windows.Media.Animation.KeyTime"></see> instance, with the <see cref="T:System.Windows.Media.Animation.KeyTimeType"></see> property initialized to the value of the specified parameter.</summary>
			<returns>A new <see cref="T:System.Windows.Media.Animation.KeyTime"></see> instance, initialized to the value of timeSpan.</returns>
			<param name="timeSpan">The value of the new <see cref="T:System.Windows.Media.Animation.KeyTime"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.KeyTime.GetHashCode">
			<summary>Returns a 32-bit signed integer hash code representing this instance.</summary>
			<returns>A 32-bit signed integer.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.KeyTime.op_Equality(System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeyTime)">
			<summary>Indicates whether the two specified <see cref="T:System.Windows.Media.Animation.KeyTime"></see> structures are equal.</summary>
			<returns>true if keyTime1 and keyTime2 are equal; otherwise false.</returns>
			<param name="keyTime1">The first value to compare.</param>
			<param name="keyTime2">The second value to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.KeyTime.op_Implicit(System.TimeSpan)~System.Windows.Media.Animation.KeyTime">
			<summary>Implicitly converts a <see cref="P:System.Windows.Media.Animation.KeyTime.TimeSpan"></see> to a <see cref="T:System.Windows.Media.Animation.KeyTime"></see>.</summary>
			<returns>The new <see cref="T:System.Windows.Media.Animation.KeyTime"></see> instance.</returns>
			<param name="timeSpan">The <see cref="P:System.Windows.Media.Animation.KeyTime.TimeSpan"></see> value to convert.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.KeyTime.op_Inequality(System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeyTime)">
			<summary>Indicates whether the two <see cref="T:System.Windows.Media.Animation.KeyTime"></see> instances are not equal.</summary>
			<returns>true if keyTime1 and keyTime2 are not equal; otherwise false.</returns>
			<param name="keyTime1">The first value to compare.</param>
			<param name="keyTime2">The second value to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.KeyTime.ToString">
			<summary>Returns a string representing this <see cref="T:System.Windows.Media.Animation.KeyTime"></see> instance. </summary>
			<returns>A string representation of this instance.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.KeyTime.Paced">
			<summary>Gets the <see cref="P:System.Windows.Media.Animation.KeyTime.Paced"></see> value which creates timing behavior resulting in an animation that interpolates at a constant rate.</summary>
			<returns>A <see cref="P:System.Windows.Media.Animation.KeyTime.Paced"></see> value.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.KeyTime.Percent">
			<summary>Gets the time when the key frame ends expressed as a percentage of the total duration of the animation. </summary>
			<returns>A <see cref="P:System.Windows.Media.Animation.KeyTime.Percent"></see> value.</returns>
			<exception cref="T:System.InvalidOperationException">If this instance is not of type <see cref="P:System.Windows.Media.Animation.KeyTime.Percent"></see>.</exception>
		</member>
		<member name="P:System.Windows.Media.Animation.KeyTime.TimeSpan">
			<summary>Gets the time when the key frame ends expressed as a time relative to the beginning of the animation.</summary>
			<returns>A <see cref="P:System.Windows.Media.Animation.KeyTime.TimeSpan"></see> value.</returns>
			<exception cref="T:System.InvalidOperationException">If this instance is not of type <see cref="P:System.Windows.Media.Animation.KeyTime.TimeSpan"></see>.</exception>
		</member>
		<member name="P:System.Windows.Media.Animation.KeyTime.Type">
			<summary>Gets the <see cref="P:System.Windows.Media.Animation.KeyTime.Type"></see> value this instance represents. </summary>
			<returns>A <see cref="P:System.Windows.Media.Animation.KeyTime.Type"></see> value.  </returns>
		</member>
		<member name="P:System.Windows.Media.Animation.KeyTime.Uniform">
			<summary>Gets the <see cref="P:System.Windows.Media.Animation.KeyTime.Uniform"></see> value which divides the allotted time of the animation evenly between key frames.</summary>
			<returns>A <see cref="P:System.Windows.Media.Animation.KeyTime.Uniform"></see> value.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.KeyTimeType">
			<summary>Represents the different types that may represent a <see cref="T:System.Windows.Media.Animation.KeyTime"></see> instance.</summary>
		</member>
		<member name="F:System.Windows.Media.Animation.KeyTimeType.Paced">
			<summary>Specifies that adjacent KeyFrames are each allotted a slice of time proportional to their length, respectively.  The overall goal is to produce a length value that keeps the pace of the animation sequence constant.</summary>
		</member>
		<member name="F:System.Windows.Media.Animation.KeyTimeType.Percent">
			<summary>Specifies that each <see cref="T:System.Windows.Media.Animation.KeyTime"></see> value is expressed as a percentage of the total time allotted for a given animation sequence. </summary>
		</member>
		<member name="F:System.Windows.Media.Animation.KeyTimeType.TimeSpan">
			<summary>Specifies that each <see cref="P:System.Windows.Media.Animation.ByteKeyFrame.KeyTime"></see> is expressed as a <see cref="P:System.Windows.Media.Animation.KeyTime.TimeSpan"></see> value relative to the <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime"></see> of an animation sequence. </summary>
		</member>
		<member name="F:System.Windows.Media.Animation.KeyTimeType.Uniform">
			<summary>Specifies that the allotted total time for an animation sequence is divided evenly amongst each of the key frames. </summary>
		</member>
		<member name="T:System.Windows.Media.Animation.LinearByteKeyFrame">
			<summary> Animates from the Byte value of the previous key frame to its own Value using GTMT#linear interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearByteKeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearByteKeyFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearByteKeyFrame.#ctor(System.Byte)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearByteKeyFrame"></see> class with the specified ending value.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearByteKeyFrame.#ctor(System.Byte,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearByteKeyFrame"></see> class with the specified ending value and key time. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearByteKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.LinearColorKeyFrame">
			<summary> Animates from the Color value of the previous key frame to its own Value using GTMT#linear interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearColorKeyFrame.#ctor">
			<summary>  Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearColorKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearColorKeyFrame.#ctor(System.Windows.Media.Color)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearColorKeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearColorKeyFrame.#ctor(System.Windows.Media.Color,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearColorKeyFrame"></see> class with the specified ending value and key time. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearColorKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.LinearDecimalKeyFrame">
			<summary> Animates from the Decimal value of the previous key frame to its own Value using GTMT#linear interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearDecimalKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearDecimalKeyFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearDecimalKeyFrame.#ctor(System.Decimal)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearDecimalKeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearDecimalKeyFrame.#ctor(System.Decimal,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearDecimalKeyFrame"></see> class with the specified ending value and key time. </summary>
			<param name="value">Target value (also known as "ending value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearDecimalKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.LinearDoubleKeyFrame">
			<summary> Animates from the Double value of the previous key frame to its own Value using GTMT#linear interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearDoubleKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearDoubleKeyFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearDoubleKeyFrame.#ctor(System.Double)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearDoubleKeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearDoubleKeyFrame.#ctor(System.Double,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearDoubleKeyFrame"></see> class with the specified ending value and key time. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearDoubleKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.LinearInt16KeyFrame">
			<summary> Animates from the Int16 value of the previous key frame to its own Value using GTMT#linear interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearInt16KeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearInt16KeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearInt16KeyFrame.#ctor(System.Int16)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearInt16KeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearInt16KeyFrame.#ctor(System.Int16,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearInt16KeyFrame"></see> class with the specified ending value and key time. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearInt16KeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.LinearInt32KeyFrame">
			<summary> Animates from the Int32 value of the previous key frame to its own Value using GTMT#linear interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearInt32KeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearInt32KeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearInt32KeyFrame.#ctor(System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearInt32KeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearInt32KeyFrame.#ctor(System.Int32,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearInt32KeyFrame"></see> class with the specified ending value and key time.</summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearInt32KeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.LinearInt64KeyFrame">
			<summary> Animates from the Int64 value of the previous key frame to its own Value using GTMT#linear interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearInt64KeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearInt64KeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearInt64KeyFrame.#ctor(System.Int64)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearInt64KeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearInt64KeyFrame.#ctor(System.Int64,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearInt64KeyFrame"></see> class with the specified ending value and key time.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearInt64KeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.LinearPoint3DKeyFrame">
			<summary> Animates from the Point3D value of the previous key frame to its own Value using GTMT#linear interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearPoint3DKeyFrame.#ctor">
			<summary> Creates a new LinearPoint3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearPoint3DKeyFrame.#ctor(System.Windows.Media.Media3D.Point3D)">
			<summary> Creates a new LinearPoint3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearPoint3DKeyFrame.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Animation.KeyTime)">
			<summary> Creates a new LinearPoint3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearPoint3DKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.LinearPointKeyFrame">
			<summary> Animates from the Point value of the previous key frame to its own Value using GTMT#linear interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearPointKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearPointKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearPointKeyFrame.#ctor(System.Windows.Point)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearPointKeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearPointKeyFrame.#ctor(System.Windows.Point,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearPointKeyFrame"></see> class with the specified ending value and key time. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearPointKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.LinearQuaternionKeyFrame">
			<summary>Animates from the <see cref="T:System.Windows.Media.Media3D.Quaternion"></see> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.QuaternionKeyFrame.Value"></see> using GTMT#linear interpolation.</summary>
		</member>
		<member name="T:System.Windows.Media.Animation.LinearRectKeyFrame">
			<summary> Animates from the Rect value of the previous key frame to its own Value using GTMT#linear interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearRectKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearRectKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearRectKeyFrame.#ctor(System.Windows.Rect)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearRectKeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearRectKeyFrame.#ctor(System.Windows.Rect,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearRectKeyFrame"></see> class with the specified ending value and key time. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearRectKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.LinearRotation3DKeyFrame">
			<summary> Animates from the Rotation3D value of the previous key frame to its own Value using GTMT#linear interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearRotation3DKeyFrame.#ctor">
			<summary> Creates a new LinearRotation3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearRotation3DKeyFrame.#ctor(System.Windows.Media.Media3D.Rotation3D)">
			<summary> Creates a new LinearRotation3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearRotation3DKeyFrame.#ctor(System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Animation.KeyTime)">
			<summary> Creates a new LinearRotation3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearRotation3DKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.LinearSingleKeyFrame">
			<summary> Animates from the Single value of the previous key frame to its own Value using GTMT#linear interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearSingleKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearSingleKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearSingleKeyFrame.#ctor(System.Single)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearSingleKeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearSingleKeyFrame.#ctor(System.Single,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearSingleKeyFrame"></see> class with the specified ending value and key time. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearSingleKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.LinearSizeKeyFrame">
			<summary> Animates from the Size value of the previous key frame to its own Value using GTMT#linear interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearSizeKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearSizeKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearSizeKeyFrame.#ctor(System.Windows.Size)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearSizeKeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearSizeKeyFrame.#ctor(System.Windows.Size,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearSizeKeyFrame"></see> class with the specified ending value and key time. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearSizeKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.LinearVector3DKeyFrame">
			<summary> Animates from the Vector3D value of the previous key frame to its own Value using GTMT#linear interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearVector3DKeyFrame.#ctor">
			<summary> Creates a new LinearVector3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearVector3DKeyFrame.#ctor(System.Windows.Media.Media3D.Vector3D)">
			<summary> Creates a new LinearVector3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearVector3DKeyFrame.#ctor(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Animation.KeyTime)">
			<summary> Creates a new LinearVector3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearVector3DKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.LinearVectorKeyFrame">
			<summary> Animates from the Vector value of the previous key frame to its own Value using GTMT#linear interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearVectorKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearVectorKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearVectorKeyFrame.#ctor(System.Windows.Vector)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearVectorKeyFrame"></see> class with the specified ending value.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearVectorKeyFrame.#ctor(System.Windows.Vector,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearVectorKeyFrame"></see> class with the specified ending value and key time.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.LinearVectorKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.MatrixAnimationBase">
			<summary> Abstract class that, when implemented, animates a Matrix value. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.MatrixAnimationBase.GetCurrentValue(System.Windows.Media.Matrix,System.Windows.Media.Matrix,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.MatrixAnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.MatrixAnimationBase.GetCurrentValueCore(System.Windows.Media.Matrix,System.Windows.Media.Matrix,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames">
			<summary>Animates the value of a Matrix property along a set of KeyFrames over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
			<summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames"></see> object.</summary>
			<param name="source">The <see cref="T:System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames"></see> object to be cloned.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames.GetCurrentValueCore(System.Windows.Media.Matrix,System.Windows.Media.Matrix,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
			<summary> Provide a custom natural Duration when the Duration property is set to Automatic. </summary>
			<returns>If the last KeyFrame of this animation is a KeyTime, then this will be used as the NaturalDuration; otherwise it will be one second.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames.KeyFrames">
			<summary> Gets or sets the collection of MatrixKeyFrame objects that define the animation. </summary>
			<returns>The collection of MatrixKeyFrame objects that define the animation. The default value is MatrixKeyFrameCollection.Empty.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.MatrixAnimationUsingPath">
			<summary>Animates the value of a <see cref="T:System.Windows.Media.Matrix"></see> property between two or more target values using a <see cref="T:System.Windows.Shapes.Path"></see> to specify those values. This animation can be used to move a visual object along a path. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.MatrixAnimationUsingPath.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.MatrixAnimationUsingPath"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.MatrixAnimationUsingPath.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.MatrixAnimationUsingPath.GetCurrentValueCore(System.Windows.Media.Matrix,System.Windows.Media.Matrix,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.MatrixAnimationUsingPath.DoesRotateWithTangent">
			<summary> Gets or sets a value indicating whether the object rotates along the tangent of the path. </summary>
			<returns>true if the object will rotate along the tangent of the path; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.MatrixAnimationUsingPath.IsOffsetCumulative">
			<summary>   Gets or sets a value indicating whether the offset of the animated matrix will accumulate over repeats of the animation.  For instance if the path is a small arc and the animation is set to repeat, a cumulative offset will cause the object to appear to bounce across the screen.              </summary>
			<returns>true if the object will accumulate over repeats of the animation; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.MatrixAnimationUsingPath.PathGeometry">
			<summary>  Gets or sets the geometry of the <see cref="T:System.Windows.Shapes.Path"></see> used to drive the animation.</summary>
			<returns>The geometry of the <see cref="T:System.Windows.Shapes.Path"></see> used to drive the animation. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.MatrixKeyFrame">
			<summary> Abstract class that, when implemented, defines a segment with its own target value and interpolation method for a MatrixAnimationUsingKeyFrames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.MatrixKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.MatrixKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.MatrixKeyFrame.#ctor(System.Windows.Media.Matrix)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.MatrixKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.MatrixKeyFrame.Value"></see>.  </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.MatrixKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.MatrixKeyFrame"></see> instance.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.MatrixKeyFrame.#ctor(System.Windows.Media.Matrix,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.MatrixKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.MatrixKeyFrame.Value"></see> and <see cref="P:System.Windows.Media.Animation.MatrixKeyFrame.KeyTime"></see>.  </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.MatrixKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.MatrixKeyFrame"></see> instance.</param>
			<param name="keyTime">The <see cref="P:System.Windows.Media.Animation.MatrixKeyFrame.KeyTime"></see>e of the new <see cref="T:System.Windows.Media.Animation.MatrixKeyFrame"></see> instance.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.MatrixKeyFrame.KeyTime">
			<summary> Gets or sets the time at which the key frame's target Value should be reached. </summary>
			<returns>The time at which the key frame's current value should be equal to its Value property. The default value is Uniform.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.MatrixKeyFrame.Value">
			<summary> Gets or sets the key frame's target value. </summary>
			<returns>The key frame's target value, which is the value of this key frame at its specified KeyTime. The default value is Matrix.Identity.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.MatrixKeyFrameCollection">
			<summary>Represents a collection of MatrixKeyFrame objects. This collection is used as part of a MatrixAnimationUsingKeyFrames to animate a Matrix property value along a set of key frames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.MatrixKeyFrameCollection.Add(System.Windows.Media.Animation.MatrixKeyFrame)">
			<summary> Adds a MatrixKeyFrame to the end of the collection. </summary>
			<returns>The index at which the keyFrame was added.</returns>
			<param name="keyFrame">The MatrixKeyFrame to add to the end of the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.MatrixKeyFrameCollection.Clone">
			<summary> Returns a modifiable copy of the collection and its contents. </summary>
			<returns>A modifiable copy of the collection and its contents. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.MatrixKeyFrameCollection.Contains(System.Windows.Media.Animation.MatrixKeyFrame)">
			<summary> Indicates whether the collection contains the specified MatrixKeyFrame. </summary>
			<returns>true if the collection contains keyFrame; otherwise, false.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.MatrixKeyFrameCollection.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.MatrixKeyFrameCollection.GetEnumerator">
			<summary> Returns an enumerator that can iterate through the collection. </summary>
			<returns>An IEnumerator that can iterate through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.MatrixKeyFrameCollection.IndexOf(System.Windows.Media.Animation.MatrixKeyFrame)">
			<summary> Searches for the specified MatrixKeyFrame and returns the zero-based index of the first occurrence within the entire collection. </summary>
			<returns>The zero-based index of the first occurrence of keyFrame within the entire collection, if found; otherwise, -1.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.MatrixKeyFrameCollection.Count">
			<summary> Gets the number of key frames contained in the MatrixKeyFrameCollection.  </summary>
			<returns>The number of key frames contained in the MatrixKeyFrameCollection. </returns>
		</member>
		<member name="P:System.Windows.Media.Animation.MatrixKeyFrameCollection.IsSynchronized">
			<summary> Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
			<returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.MatrixKeyFrameCollection.Item(System.Int32)">
			<summary> Gets or sets the MatrixKeyFrame at the specified index. </summary>
			<returns>The MatrixKeyFrame at the specified index.</returns>
			<param name="index">The zero-based index of the MatrixKeyFrame to get or set.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.ObjectAnimationBase">
			<summary>Abstract class that, when implemented, animates an <see cref="T:System.Object"></see> value.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ObjectAnimationBase.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ObjectAnimationBase"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ObjectAnimationBase.Clone">
			<summary>Returns a modifiable clone of this instance.</summary>
			<returns>A modifiable clone of this instance. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The copy's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.ObjectAnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
			<summary>Calculates this animation's current value.</summary>
			<returns>The animation's current value.</returns>
			<param name="defaultOriginValue">The default starting value of the animation. An animation might use this value if it doesn't have its own starting value. If this animation is the first in a composition chain it will be the current value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The default destination value of the animation. An animation might use this value if it doesn't have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ObjectAnimationBase.GetCurrentValueCore(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
			<summary>When implemented in a derived class, calculates this animation's current value.</summary>
			<returns>The current value of the animation.</returns>
			<param name="defaultOriginValue">The default starting value of the animation. An animation might use this value if it doesn't have its own starting value. If this animation is the first in a composition chain it will be the current value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The default destination value of the animation. An animation might use this value if it doesn't have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.ObjectAnimationBase.TargetPropertyType">
			<summary>Gets the type of property that this animation can animate.</summary>
			<returns>The type of property that this animation can animate. <see cref="T:System.Windows.Media.Animation.ObjectAnimationBase"></see> always returns <see cref="System.Object"></see>. </returns>
		</member>
		<member name="T:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames">
			<summary>Animates the value of an Object property along a set of <see cref="P:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames.KeyFrames"></see> over a specified <see cref="P:System.Windows.Media.Animation.Timeline.Duration"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames.AddChild(System.Object)">
			<summary>This member supports the TLA2#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames.AddText(System.String)">
			<summary>This member supports the TLA2#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA2#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA2#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames.KeyFrames">
			<summary>Gets or sets the collection of <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame"></see> objects that define the animation.</summary>
			<returns>The collection of <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame"></see> objects that define the animation. The default value is <see cref="P:System.Windows.Media.Animation.ObjectKeyFrameCollection.Empty"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.ObjectKeyFrame">
			<summary>Abstract class that, when implemented, defines a segment with its own target value and interpolation method for a <see cref="T:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ObjectKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ObjectKeyFrame.#ctor(System.Object)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.Value"></see>.</summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame"></see> instance.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ObjectKeyFrame.#ctor(System.Object,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.Value"></see> and <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.KeyTime"></see>.</summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame"></see> instance.</param>
			<param name="keyTime">The <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.KeyTime"></see> of the new <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame"></see> instance. </param>
		</member>
		<member name="F:System.Windows.Media.Animation.ObjectKeyFrame.KeyTimeProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.KeyTime"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.KeyTime"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.ObjectKeyFrame.ValueProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.Value"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.Value"></see> GTMT#dependency property.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ObjectKeyFrame.KeyTime">
			<summary>Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.Value"></see> should be reached.</summary>
			<returns>The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.Value"></see> property. The default value is <see cref="P:System.Windows.Media.Animation.KeyTime.Uniform"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ObjectKeyFrame.Value">
			<summary>Gets or sets the key frame's target value.</summary>
			<returns>The key frame's target value, which is the value of this key frame at its specified <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.KeyTime"></see>. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.ObjectKeyFrameCollection">
			<summary>Represents a collection of <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame"></see> objects. This collection is used as part of an <see cref="T:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames"></see> to animate an <see cref="T:System.Object"></see> property value along a set of key frames.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ObjectKeyFrameCollection.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ObjectKeyFrameCollection"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ObjectKeyFrameCollection.Add(System.Windows.Media.Animation.ObjectKeyFrame)">
			<summary>Adds an <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame"></see> to the end of this collection.</summary>
			<returns>The index at which the keyFrame was added.</returns>
			<param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame"></see> to add.</param>
			<exception cref="T:System.InvalidOperationException">The attempt to modify the collection is invalid because the collection is frozen (its <see cref="P:System.Windows.Freezable.IsFrozen"></see> property is true).</exception>
		</member>
		<member name="M:System.Windows.Media.Animation.ObjectKeyFrameCollection.Clear">
			<summary>Removes all key frames from the collection.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ObjectKeyFrameCollection.Clone">
			<summary>Returns a modifiable copy of the collection and its contents.</summary>
			<returns>A modifiable copy of the collection and its contents. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.ObjectKeyFrameCollection.Contains(System.Windows.Media.Animation.ObjectKeyFrame)">
			<summary>Indicates whether the collection contains the specified <see cref="T:System.Windows.Media.Animation.ObjectKeyFrameCollection"></see>.</summary>
			<returns>true if the collection contains keyFrame; otherwise, false.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ObjectKeyFrameCollection.CopyTo(System.Windows.Media.Animation.ObjectKeyFrame[],System.Int32)">
			<summary>Copies the <see cref="T:System.Windows.Media.Animation.ObjectKeyFrameCollection"></see> to the specified one dimensional <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame"></see> array, started at the specified index of the target array.</summary>
			<param name="array">The one-dimensional <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame"></see> array that is the destination of the key frames copied from this <see cref="T:System.Windows.Media.Animation.ObjectKeyFrameCollection"></see>. The array must have zero-based indexing.</param>
			<param name="index">The zero-based index in array at which copying begins.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.ObjectKeyFrameCollection.System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ObjectKeyFrameCollection.System.Collections.IList.Insert(System.Int32,System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ObjectKeyFrameCollection.System.Collections.IList.Remove(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.ObjectKeyFrameCollection.Count">
			<summary>Gets the number of key frames contained in this <see cref="T:System.Windows.Media.Animation.ObjectKeyFrameCollection"></see>.</summary>
			<returns>The number of key frames contained in this <see cref="T:System.Windows.Media.Animation.ObjectKeyFrameCollection"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ObjectKeyFrameCollection.Empty">
			<summary>Gets an empty <see cref="T:System.Windows.Media.Animation.ObjectKeyFrameCollection"></see>.</summary>
			<returns>An empty collection.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ObjectKeyFrameCollection.IsFixedSize">
			<summary>Gets a value that indicates whether this <see cref="T:System.Windows.Media.Animation.ObjectKeyFrameCollection"></see> has a fixed size.</summary>
			<returns>true if this <see cref="T:System.Windows.Media.Animation.ObjectKeyFrameCollection"></see> has a fixed size; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ObjectKeyFrameCollection.IsReadOnly">
			<summary>Gets a value that indicates whether this <see cref="T:System.Windows.Media.Animation.ObjectKeyFrameCollection"></see> is read-only.</summary>
			<returns>true if this collection is read-only; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ObjectKeyFrameCollection.IsSynchronized">
			<summary>Gets a value that indicates whether access to this <see cref="T:System.Windows.Media.Animation.ObjectKeyFrameCollection"></see> is synchronized (thread-safe)</summary>
			<returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.ObjectKeyFrameCollection.Item(System.Int32)">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.Animation.ObjectKeyFrameCollection"></see> at the specified index.</summary>
			<returns>The <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame"></see> at the specified index.</returns>
			<param name="index">The zero-based index of the <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame"></see> to get or set.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.-or-index is equal to or greater than <see cref="P:System.Windows.Media.Animation.ObjectKeyFrameCollection.Count"></see>.</exception>
			<exception cref="T:System.InvalidOperationException">The attempt to modify the collection is invalid because the collection is frozen (its <see cref="P:System.Windows.Freezable.IsFrozen"></see> property is true).</exception>
		</member>
		<member name="P:System.Windows.Media.Animation.ObjectKeyFrameCollection.SyncRoot">
			<summary>Gets an object that can be used to synchronize access to this <see cref="T:System.Windows.Media.Animation.ObjectKeyFrameCollection"></see>.</summary>
			<returns>An object that can be used to synchronize access to the <see cref="T:System.Windows.Media.Animation.ObjectKeyFrameCollection"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.ParallelTimeline">
			<summary>Defines a segment of time that may contain child <see cref="T:System.Windows.Media.Animation.Timeline"></see> objects. These child timelines become active according to their respective <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime"></see> properties. Also, child timelines are able to overlap (run in parallel) with each other.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ParallelTimeline.#ctor">
			<summary> Creates a ParallelTimeline with default properties. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.ParallelTimeline.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.ParallelTimeline.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
			<summary> Return the duration from a specific clock </summary>
			<returns>A Duration quantity representing the natural duration.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior">
			<summary>Gets or sets a value that specifies how this timeline will behave when one or more of its <see cref="T:System.Windows.Media.Animation.Timeline"></see> children slips.</summary>
			<returns>A value that indicates how this timeline will behave when one or more of its <see cref="T:System.Windows.Media.Animation.Timeline"></see> children slips. The default value is <see cref="F:System.Windows.Media.Animation.SlipBehavior.Grow"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.PathAnimationSource">
			<summary>Specifies the output property value of the path that is used to drive the animation. </summary>
		</member>
		<member name="F:System.Windows.Media.Animation.PathAnimationSource.Angle">
			<summary>Specifies the tangent angle of rotation during the progression along an animation sequence path.</summary>
		</member>
		<member name="F:System.Windows.Media.Animation.PathAnimationSource.X">
			<summary>Specifies the X coordinate offset during the progression along an animation sequence path. </summary>
		</member>
		<member name="F:System.Windows.Media.Animation.PathAnimationSource.Y">
			<summary>Specifies the Y coordinate offset during the progression along an animation sequence path. </summary>
		</member>
		<member name="T:System.Windows.Media.Animation.Point3DAnimation">
			<summary>Animates the value of a Point3D property using linear interpolation between two values. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Point3DAnimation.#ctor">
			<summary> Initializes a new instance of the Point3DAnimation class. </summary>
		</member>
		<member name="F:System.Windows.Media.Animation.Point3DAnimation.ByProperty">
			<summary> Identifies the By GTMT#dependency property. </summary>
			<returns>The identifier for the By GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.Point3DAnimation.FromProperty">
			<summary> Identifies the From GTMT#dependency property. </summary>
			<returns>The identifier for the From GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.Point3DAnimation.ToProperty">
			<summary> Identifies the To GTMT#dependency property. </summary>
			<returns>The identifier for the To GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Point3DAnimation.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Point3DAnimation.GetCurrentValueCore(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.Point3DAnimation.By">
			<summary> Gets or sets the total amount by which the animation changes its starting value. </summary>
			<returns>The total amount by which the animation changes its starting value.     The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Point3DAnimation.From">
			<summary> Gets or sets the animation's starting value.  </summary>
			<returns>The starting value of the animation. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Point3DAnimation.IsAdditive">
			<summary> Gets a value that specifies whether the animation's output value is added to the base           value of the property being animated. </summary>
			<returns>true if the animation adds its output value         to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Point3DAnimation.IsCumulative">
			<summary> Gets or sets a value that specifies whether the animation's value accumulates when it repeats. </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Point3DAnimation.To">
			<summary> Gets or sets the animation's ending value. </summary>
			<returns>The ending value of the animation. The default value is null.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Point3DAnimationBase.GetCurrentValue(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Point3DAnimationBase.GetCurrentValueCore(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames">
			<summary> Animates the value of a Point3D property along a set of KeyFrames over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames.GetCurrentValueCore(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
			<summary> Provide a custom natural Duration when the Duration property is set to Automatic. </summary>
			<returns>If the last KeyFrame of this animation is a KeyTime, then this will be used as the NaturalDuration; otherwise it will be one second.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames.IsAdditive">
			<summary> Gets a value that specifies whether the animation's output value is added to the base value of the property being animated.</summary>
			<returns>true if the animation adds its output value         to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames.IsCumulative">
			<summary> Gets or sets a value that specifies whether the animation's value accumulates when it repeats. </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames.KeyFrames">
			<summary> Gets or sets the collection of Point3DKeyFrame objects that define the animation. </summary>
			<returns>The collection of Point3DKeyFrame objects that define the animation. The default value is Point3DKeyFrameCollection.Empty.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.Point3DKeyFrame">
			<summary> Abstract class that, when implemented, defines a segment with its own target value and interpolation method for a Point3DAnimationUsingKeyFrames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Point3DKeyFrame.#ctor">
			<summary> Creates a new Point3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Point3DKeyFrame.#ctor(System.Windows.Media.Media3D.Point3D)">
			<summary> Creates a new Point3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Point3DKeyFrame.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Animation.KeyTime)">
			<summary> Creates a new DiscretePoint3DKeyFrame. </summary>
		</member>
		<member name="P:System.Windows.Media.Animation.Point3DKeyFrame.KeyTime">
			<summary>Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.Point3DKeyFrame.Value"></see> should be reached. </summary>
			<returns>The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.Point3DKeyFrame.Value"></see> property. The default value is Uniform.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Point3DKeyFrame.Value">
			<summary>Gets or sets the key frame's target value. </summary>
			<returns>The key frame's target value, which is the value of this key frame at its specified <see cref="P:System.Windows.Media.Animation.Point3DKeyFrame.KeyTime"></see>. The default value is 0.0.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.Point3DKeyFrameCollection">
			<summary> This collection is used in conjunction with a KeyFramePoint3DAnimation to animate a Point3D property value along a set of key frames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Point3DKeyFrameCollection.Add(System.Windows.Media.Animation.Point3DKeyFrame)">
			<summary> Adds a Point3DKeyFrame to the end of the collection. </summary>
			<returns>The index at which the keyFrame was added.</returns>
			<param name="keyFrame">The Point3DKeyFrame to add to the end of the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Point3DKeyFrameCollection.Contains(System.Windows.Media.Animation.Point3DKeyFrame)">
			<summary> Indicates whether the collection contains the specified Point3DKeyFrame. </summary>
			<returns>true if the collection contains keyFrame; otherwise, false.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Point3DKeyFrameCollection.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Point3DKeyFrameCollection.GetEnumerator">
			<summary> Returns an enumerator that can iterate through the collection. </summary>
			<returns>An IEnumerator that can iterate through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Point3DKeyFrameCollection.IndexOf(System.Windows.Media.Animation.Point3DKeyFrame)">
			<summary> Searches for the specified Point3DKeyFrame and returns the zero-based index of the first occurrence within the entire collection. </summary>
			<returns>The zero-based index of the first occurrence of keyFrame within the entire collection, if found; otherwise, -1.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Point3DKeyFrameCollection.Insert(System.Int32,System.Windows.Media.Animation.Point3DKeyFrame)">
			<summary> Inserts a Point3DKeyFrame into a specific location in the collection. </summary>
			<param name="index">Position in the collection at which to insert the Point3DKeyFrame.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.Point3DKeyFrameCollection.IsSynchronized">
			<summary> Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
			<returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Point3DKeyFrameCollection.Item(System.Int32)">
			<summary> Gets or sets the Point3DKeyFrame at the specified index. </summary>
			<returns>The Point3DKeyFrame at the specified index.</returns>
			<param name="index">The zero-based index of the Point3DKeyFrame to get or set.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.Point3DKeyFrameCollection.SyncRoot">
			<summary> Gets an object that can be used to synchronize access to the collection. </summary>
			<returns>An object that can be used to synchronize access to the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.PointAnimation">
			<summary>Animates the value of a Point property between two target values using      GTMT#linear interpolation over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.PointAnimation.#ctor">
			<summary> Initializes a new instance of the PointAnimation class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.PointAnimation.#ctor(System.Windows.Point,System.Windows.Duration)">
			<summary> Initializes a new instance of the PointAnimation class that animates to the specified value over the specified duration. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.PointAnimation.#ctor(System.Windows.Point,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the PointAnimation class that animates to the specified value over the specified duration and has the specified fill behavior. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.PointAnimation.#ctor(System.Windows.Point,System.Windows.Point,System.Windows.Duration)">
			<summary> Initializes a new instance of the PointAnimation class that animates from the specified starting value to the specified destination value over the specified duration. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.PointAnimation.#ctor(System.Windows.Point,System.Windows.Point,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the PointAnimation class that animates from the specified starting value to the specified destination value over the specified duration and has the specified fill behavior. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="F:System.Windows.Media.Animation.PointAnimation.ByProperty">
			<summary> Identifies the By GTMT#dependency property. </summary>
			<returns>The identifier for the By GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.PointAnimation.FromProperty">
			<summary> Identifies the From GTMT#dependency property. </summary>
			<returns>The identifier for the From GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.PointAnimation.ToProperty">
			<summary> Identifies the To GTMT#dependency property. </summary>
			<returns>The identifier for the To GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.PointAnimation.Clone">
			<summary> Returns a modifiable copy of the animation. </summary>
			<returns>A modifiable copy of the animation. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.PointAnimation.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.PointAnimation.GetCurrentValueCore(System.Windows.Point,System.Windows.Point,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.PointAnimation.By">
			<summary> Gets or sets the total amount by which the animation changes its starting value. </summary>
			<returns>The total amount by which the animation changes its starting value.     The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.PointAnimation.From">
			<summary> Gets or sets the animation's starting value. </summary>
			<returns>The starting value of the animation. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.PointAnimation.IsAdditive">
			<summary> Gets a value that specifies whether the animation's output value is added to the base           value of the property being animated. </summary>
			<returns>true if the animation adds its output value         to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.PointAnimation.IsCumulative">
			<summary> Gets or sets a value that specifies whether the animation's value accumulates when it repeats. </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.PointAnimation.To">
			<summary> Gets or sets the animation's ending value. </summary>
			<returns>The ending value of the animation. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.PointAnimationBase">
			<summary> Abstract class that, when implemented, animates a Point value. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.PointAnimationBase.Clone">
			<summary> Returns a modifiable copy of the animation. </summary>
			<returns>A modifiable copy of the animation. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.PointAnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.PointAnimationBase.GetCurrentValue(System.Windows.Point,System.Windows.Point,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.PointAnimationBase.GetCurrentValueCore(System.Windows.Point,System.Windows.Point,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.PointAnimationUsingKeyFrames">
			<summary>Animates the value of a Point property along a set of KeyFrames over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.PointAnimationUsingKeyFrames.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.PointAnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
			<summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.PointAnimationUsingKeyFrames"></see> object.</summary>
			<param name="source">The <see cref="T:System.Windows.Media.Animation.PointAnimationUsingKeyFrames"></see> object to be cloned.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.PointAnimationUsingKeyFrames.GetCurrentValueCore(System.Windows.Point,System.Windows.Point,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.PointAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
			<summary> Provide a custom natural Duration when the Duration property is set to Automatic. </summary>
			<returns>If the last KeyFrame of this animation is a KeyTime, then this will be used as the NaturalDuration; otherwise it will be one second.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.PointAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.PointAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.PointAnimationUsingKeyFrames.IsAdditive">
			<summary>    Gets a value that specifies whether the animation's output value is added to the base value of the property being animated.   </summary>
			<returns>true if the animation adds its output value to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.PointAnimationUsingKeyFrames.IsCumulative">
			<summary>  Gets or sets a value that specifies whether the animation's value accumulates when it repeats.</summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.PointAnimationUsingKeyFrames.KeyFrames">
			<summary> Gets or sets the collection of PointKeyFrame objects that define the animation. </summary>
			<returns>The collection of PointKeyFrame objects that define the animation. The default value is PointKeyFrameCollection.Empty.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.PointAnimationUsingPath">
			<summary>Animates the value of a <see cref="T:System.Windows.Point"></see> property between two or more target values using a <see cref="T:System.Windows.Shapes.Path"></see> to specify those values. This animation can be used to move a visual object along a path.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.PointAnimationUsingPath.#ctor">
			<summary>Creates a new instance of the <see cref="T:System.Windows.Media.Animation.PointAnimationUsingPath"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.PointAnimationUsingPath.Clone">
			<summary>Returns a modifiable clone of the animation.</summary>
			<returns>A modifiable clone of the animation. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.PointAnimationUsingPath.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns> The new <see cref="T:System.Windows.Freezable"></see> created.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.PointAnimationUsingPath.GetCurrentValueCore(System.Windows.Point,System.Windows.Point,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherwise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.PointAnimationUsingPath.IsAdditive">
			<summary> Gets a value that specifies whether the animation's output value is added to the base value of the property being animated.</summary>
			<returns>true if the animation adds its output value to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.PointAnimationUsingPath.IsCumulative">
			<summary> Gets or sets a value that specifies whether the animation's value accumulates when it repeats.</summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.PointAnimationUsingPath.PathGeometry">
			<summary>Specifies the geometry of the <see cref="T:System.Windows.Shapes.Path"></see> used to drive the animation. </summary>
			<returns>The <see cref="T:System.Windows.Shapes.Path"></see> used to drive the animation. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.PointKeyFrame">
			<summary>Abstract class that, when implemented, defines a segment with its own target value and interpolation method for a PointAnimationUsingKeyFrames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.PointKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.PointKeyFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.PointKeyFrame.#ctor(System.Windows.Point)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.PointKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.PointKeyFrame.Value"></see>. </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.PointKeyFrame.Value"></see>e of the new <see cref="T:System.Windows.Media.Animation.PointKeyFrame"></see> instance.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.PointKeyFrame.#ctor(System.Windows.Point,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.PointKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.PointKeyFrame.Value"></see> and <see cref="P:System.Windows.Media.Animation.PointKeyFrame.KeyTime"></see>. </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.PointKeyFrame.Value"></see>e of the new <see cref="T:System.Windows.Media.Animation.PointKeyFrame"></see> instance.</param>
			<param name="keyTime">The <see cref="P:System.Windows.Media.Animation.PointKeyFrame.KeyTime"></see> of the new <see cref="T:System.Windows.Media.Animation.PointKeyFrame"></see> instance.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.PointKeyFrame.KeyTime">
			<summary> Gets or sets the time at which the key frame's target Value should be reached. </summary>
			<returns>The time at which the key frame's current value should be equal to its Value property. The default value is Uniform.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.PointKeyFrame.Value">
			<summary> Gets or sets the key frame's target value. </summary>
			<returns>The key frame's target value, which is the value of this key frame at its specified KeyTime. The default value is (0,0).</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.PointKeyFrameCollection">
			<summary>Represents a collection of PointKeyFrame objects. This collection is used as part of a PointAnimationUsingKeyFrames to animate a Point property value along a set of key frames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.PointKeyFrameCollection.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.PointKeyFrameCollection"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.PointKeyFrameCollection.Add(System.Windows.Media.Animation.PointKeyFrame)">
			<summary> Adds a PointKeyFrame to the end of the collection. </summary>
			<returns>The index at which the keyFrame was added.</returns>
			<param name="keyFrame">The PointKeyFrame to add to the end of the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.PointKeyFrameCollection.Clone">
			<summary> Returns a modifiable copy of the collection and its contents. </summary>
			<returns>A modifiable copy of the collection and its contents. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.PointKeyFrameCollection.Contains(System.Windows.Media.Animation.PointKeyFrame)">
			<summary> Indicates whether the collection contains the specified PointKeyFrame. </summary>
			<returns>true if the collection contains keyFrame; otherwise, false.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.PointKeyFrameCollection.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.PointKeyFrameCollection.GetEnumerator">
			<summary> Returns an enumerator that can iterate through the collection. </summary>
			<returns>An IEnumerator that can iterate through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.PointKeyFrameCollection.IndexOf(System.Windows.Media.Animation.PointKeyFrame)">
			<summary> Searches for the specified PointKeyFrame and returns the zero-based index of the first occurrence within the entire collection. </summary>
			<returns>The zero-based index of the first occurrence of keyFrame within the entire collection, if found; otherwise, -1.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.PointKeyFrameCollection.Count">
			<summary> Gets the number of key frames contained in the PointKeyFrameCollection.  </summary>
			<returns>The number of key frames contained in the PointKeyFrameCollection. </returns>
		</member>
		<member name="P:System.Windows.Media.Animation.PointKeyFrameCollection.IsSynchronized">
			<summary> Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
			<returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.PointKeyFrameCollection.Item(System.Int32)">
			<summary> Gets or sets the PointKeyFrame at the specified index. </summary>
			<returns>The PointKeyFrame at the specified index.</returns>
			<param name="index">The zero-based index of the PointKeyFrame to get or set.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.PointKeyFrameCollection.SyncRoot">
			<summary> Gets an object that can be used to synchronize access to the collection. </summary>
			<returns>An object that can be used to synchronize access to the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.QuaternionAnimation">
			<summary>Animates the value of a <see cref="T:System.Windows.Media.Media3D.Quaternion"></see> property between two target values using    GTMT#linear interpolation over a specified Duration.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.QuaternionAnimation.By">
			<summary>Gets or sets the total amount by which the animation changes its starting value.</summary>
			<returns>The total amount by which the animation changes its starting value.     The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.QuaternionAnimation.From">
			<summary>Gets or sets the animation's starting value.</summary>
			<returns>The starting value of the animation. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.QuaternionAnimation.IsAdditive">
			<summary>Gets or sets a value that specifies whether the animation's output value is added to the base value of the property being animated.</summary>
			<returns>true if the animation adds its output value         to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.QuaternionAnimation.IsCumulative">
			<summary>Gets or sets a value that specifies whether the animation's value accumulates when it repeats.</summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.QuaternionAnimation.To">
			<summary>  Gets or sets the animation's ending value.  </summary>
			<returns>The ending value of the animation. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames">
			<summary>Animates the value of a <see cref="T:System.Windows.Media.Media3D.Quaternion"></see> property along a set of <see cref="P:System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames.KeyFrames"></see> over a specified Duration.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames.IsAdditive">
			<summary>      Gets a value that specifies whether the animation's output value is added to the base value of the property being animated.  </summary>
			<returns>true if the animation adds its output value to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames.IsCumulative">
			<summary>  Gets or sets a value that specifies whether the animation's value accumulates when it repeats.</summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames.KeyFrames">
			<summary>Gets or sets the collection of <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame"></see> objects that define the animation.</summary>
			<returns>The collection of <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame"></see> objects that define the animation. The default value is <see cref="P:System.Windows.Media.Animation.QuaternionKeyFrameCollection.Empty"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.QuaternionKeyFrame.KeyTime">
			<summary>Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.QuaternionKeyFrame.Value"></see> should be reached.</summary>
			<returns>The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.QuaternionKeyFrame.Value"></see> property. The default value is Uniform.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.QuaternionKeyFrame.Value">
			<summary>Gets or sets the key frame's target value.</summary>
			<returns>The key frame's target value, which is the value of this key frame at its specified <see cref="P:System.Windows.Media.Animation.QuaternionKeyFrame.KeyTime"></see>. The default value is 0.0.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.System.Collections.IList.Insert(System.Int32,System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.System.Collections.IList.Remove(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="T:System.Windows.Media.Animation.RectAnimation">
			<summary>Animates the value of a Rect property between two target values using      GTMT#linear interpolation. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.RectAnimation.#ctor">
			<summary> Initializes a new instance of the RectAnimation class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.RectAnimation.#ctor(System.Windows.Rect,System.Windows.Duration)">
			<summary> Initializes a new instance of the RectAnimation class that animates to the specified value over the specified duration. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.RectAnimation.#ctor(System.Windows.Rect,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the RectAnimation class that animates to the specified value over the specified duration and has the specified fill behavior. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.RectAnimation.#ctor(System.Windows.Rect,System.Windows.Rect,System.Windows.Duration)">
			<summary> Initializes a new instance of the RectAnimation class that animates from the specified starting value to the specified destination value over the specified duration. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.RectAnimation.#ctor(System.Windows.Rect,System.Windows.Rect,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the RectAnimation class that animates from the specified starting value to the specified destination value over the specified duration and has the specified fill behavior. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="F:System.Windows.Media.Animation.RectAnimation.ByProperty">
			<summary> Identifies the By GTMT#dependency property. </summary>
			<returns>The identifier for the By GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.RectAnimation.FromProperty">
			<summary> Identifies the From GTMT#dependency property. </summary>
			<returns>The identifier for the From GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.RectAnimation.ToProperty">
			<summary> Identifies the To GTMT#dependency property. </summary>
			<returns>The identifier for the To GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.RectAnimation.Clone">
			<summary>Returns a modifiable copy of the animation. </summary>
			<returns>A modifiable copy of the animation. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.RectAnimation.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.RectAnimation.GetCurrentValueCore(System.Windows.Rect,System.Windows.Rect,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.RectAnimation.By">
			<summary> Gets or sets the total amount by which the animation changes its starting value. </summary>
			<returns>The total amount by which the animation changes its starting value.     The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.RectAnimation.From">
			<summary> Gets or sets the animation's starting value. </summary>
			<returns>The starting value of the animation. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.RectAnimation.IsAdditive">
			<summary> Gets a value that specifies whether the animation's output value is added to the base           value of the property being animated. </summary>
			<returns>true if the animation adds its output value         to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.RectAnimation.IsCumulative">
			<summary> Gets or sets a value that specifies whether the animation's value accumulates when it repeats. </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.RectAnimation.To">
			<summary> Gets or sets the animation's ending value. </summary>
			<returns>The ending value of the animation. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.RectAnimationBase">
			<summary> Abstract class that, when implemented, animates a Rect value. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.RectAnimationBase.Clone">
			<summary>Returns a modifiable copy of the animation. </summary>
			<returns>A modifiable copy of the animation. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.RectAnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.RectAnimationBase.GetCurrentValue(System.Windows.Rect,System.Windows.Rect,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.RectAnimationBase.GetCurrentValueCore(System.Windows.Rect,System.Windows.Rect,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames">
			<summary> Animates the value of a Rect property along a set of KeyFrames over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.Clone">
			<summary> Creates a copy of this KeyFrameRectAnimation. </summary>
			<returns>The copy</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
			<summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames"></see> object.</summary>
			<param name="source">The <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames"></see> object to be cloned.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.GetCurrentValueCore(System.Windows.Rect,System.Windows.Rect,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
			<summary> Provide a custom natural Duration when the Duration property is set to Automatic. </summary>
			<returns>If the last KeyFrame of this animation is a KeyTime, then this will be used as the NaturalDuration; otherwise it will be one second.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.IsAdditive">
			<summary>     Gets a value that specifies whether the animation's output value is added to the base value of the property being animated.   </summary>
			<returns>true if the animation adds its output value to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.IsCumulative">
			<summary>  Gets or sets a value that specifies whether the animation's value accumulates when it repeats.</summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.KeyFrames">
			<summary> Gets or sets the collection of RectKeyFrame objects that define the animation. </summary>
			<returns>The collection of RectKeyFrame objects that define the animation. The default value is RectKeyFrameCollection.Empty.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.RectKeyFrame">
			<summary> Abstract class that, when implemented, defines an animation segment with its own target value and interpolation method for a RectAnimationUsingKeyFrames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.RectKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.RectKeyFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.RectKeyFrame.#ctor(System.Windows.Rect)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.RectKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.RectKeyFrame.Value"></see>. </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.RectKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.RectKeyFrame"></see> instance.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.RectKeyFrame.#ctor(System.Windows.Rect,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.RectKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.RectKeyFrame.Value"></see> and <see cref="P:System.Windows.Media.Animation.RectKeyFrame.KeyTime"></see>. </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.RectKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.RectKeyFrame"></see> instance.</param>
			<param name="keyTime">The <see cref="P:System.Windows.Media.Animation.RectKeyFrame.KeyTime"></see> of the new <see cref="T:System.Windows.Media.Animation.RectKeyFrame"></see> instance.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.RectKeyFrame.KeyTime">
			<summary> Gets or sets the time at which the key frame's target Value should be reached. </summary>
			<returns>The time at which the key frame's current value should be equal to its Value property. The default value is Uniform.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.RectKeyFrame.Value">
			<summary> Gets or sets the key frame's target value. </summary>
			<returns>The key frame's target value, which is the value of this key frame at its specified KeyTime. The default value is a rectangle positioned at 0,0 with a height and width of 0.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.RectKeyFrameCollection">
			<summary> Represents a collection of RectKeyFrame objects. This collection is used as part of a RectAnimationUsingKeyFrames to animate a Rect property value along a set of key frames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.Add(System.Windows.Media.Animation.RectKeyFrame)">
			<summary> Adds a RectKeyFrame to the end of the collection. </summary>
			<returns>The index at which the keyFrame was added.</returns>
			<param name="keyFrame">The RectKeyFrame to add to the end of the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.Clone">
			<summary> Returns a modifiable copy of the collection and its contents. </summary>
			<returns>A modifiable copy of the collection and its contents. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.Contains(System.Windows.Media.Animation.RectKeyFrame)">
			<summary> Indicates whether the collection contains the specified RectKeyFrame. </summary>
			<returns>true if the collection contains keyFrame; otherwise, false.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.GetEnumerator">
			<summary> Returns an enumerator that can iterate through the collection. </summary>
			<returns>An IEnumerator that can iterate through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.IndexOf(System.Windows.Media.Animation.RectKeyFrame)">
			<summary> Searches for the specified RectKeyFrame and returns the zero-based index of the first occurrence within the entire collection. </summary>
			<returns>The zero-based index of the first occurrence of keyFrame within the entire collection, if found; otherwise, -1.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.RectKeyFrameCollection.Count">
			<summary> Gets the number of key frames contained in the RectKeyFrameCollection.  </summary>
			<returns>The number of key frames contained in the RectKeyFrameCollection. </returns>
		</member>
		<member name="P:System.Windows.Media.Animation.RectKeyFrameCollection.IsSynchronized">
			<summary> Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
			<returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.RectKeyFrameCollection.Item(System.Int32)">
			<summary> Gets or sets the RectKeyFrame at the specified index. </summary>
			<returns>The RectKeyFrame at the specified index.</returns>
			<param name="index">The zero-based index of the RectKeyFrame to get or set.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.RectKeyFrameCollection.SyncRoot">
			<summary> Gets an object that can be used to synchronize access to the collection. </summary>
			<returns>An object that can be used to synchronize access to the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.RepeatBehavior">
			<summary>Dictates methods by which a <see cref="T:System.Windows.Media.Animation.Timeline"></see> object repeats its simple duration.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.RepeatBehavior.#ctor(System.Double)">
			<summary>Initializes a new instance of the <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior"></see> structure with the supplied iteration count. </summary>
			<param name="count">The number of iterations to make. </param>
			<exception cref="T:System.ArgumentOutOfRangeException">count evaluates to infinity, a value that is not a number, or is negative.</exception>
		</member>
		<member name="M:System.Windows.Media.Animation.RepeatBehavior.#ctor(System.TimeSpan)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.RepeatBehavior"></see> structure with the supplied repeat duration. </summary>
			<param name="duration">The value representing the repeat duration behavior.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">duration evaluates to a negative number.</exception>
		</member>
		<member name="M:System.Windows.Media.Animation.RepeatBehavior.Equals(System.Object)">
			<summary>Indicates whether this instance is equal to the specified object. </summary>
			<returns>true if value is a <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior"></see> that represents the same repeat behavioral type as this instance; otherwise, false.</returns>
			<param name="value">The object to compare with this instance.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.RepeatBehavior.Equals(System.Windows.Media.Animation.RepeatBehavior)">
			<summary>Returns a value that indicates whether this instance is equal to the specified <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior"></see>. </summary>
			<returns>true if both the type and repeat behavior of repeatBehavior are equal to this instance; otherwise, false.</returns>
			<param name="repeatBehavior">The value to compare to this instance.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.RepeatBehavior.Equals(System.Windows.Media.Animation.RepeatBehavior,System.Windows.Media.Animation.RepeatBehavior)">
			<summary>Indicates whether the two specified <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior"></see> structures are equal. </summary>
			<returns>true if both the type and repeat behavior of repeatBehavior1 is equal to that of repeatBehavior2; otherwise, false.</returns>
			<param name="repeatBehavior1">The first value to compare.</param>
			<param name="repeatBehavior2">The second value to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.RepeatBehavior.GetHashCode">
			<summary> Returns a 32-bit signed integer representing this instance.</summary>
			<returns>A 32-bit signed integer.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.RepeatBehavior.op_Equality(System.Windows.Media.Animation.RepeatBehavior,System.Windows.Media.Animation.RepeatBehavior)">
			<summary>Indicates whether the two specified <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior"></see> instances are equal. </summary>
			<returns>true if both the type and repeat behavior of repeatBehavior1 is equal to that of repeatBehavior2; otherwise, false.</returns>
			<param name="repeatBehavior1">The first value to compare.</param>
			<param name="repeatBehavior2">The second value to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.RepeatBehavior.op_Inequality(System.Windows.Media.Animation.RepeatBehavior,System.Windows.Media.Animation.RepeatBehavior)">
			<summary>Indicates whether the two <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior"></see> instances are not equal. </summary>
			<returns>true if repeatBehavior1 and repeatBehavior2 are different types or the repeat behavior properties are not equal; otherwise false.</returns>
			<param name="repeatBehavior1">The first value to compare.</param>
			<param name="repeatBehavior2">The second value to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.RepeatBehavior.ToString">
			<summary>Returns a string representation of this <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior"></see> instance. </summary>
			<returns>A string representation of this instance.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.RepeatBehavior.ToString(System.IFormatProvider)">
			<summary>Returns a string representation of this <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior"></see> instance. </summary>
			<returns>A string representation of this instance.</returns>
			<param name="formatProvider">The format to construct the return value.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.RepeatBehavior.Count">
			<summary> Gets the number of times a <see cref="T:System.Windows.Media.Animation.Timeline"></see> should repeat. </summary>
			<returns>The numeric value representing the number of iterations to repeat.</returns>
			<exception cref="T:System.InvalidOperationException">This <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior"></see> describes a repeat duration, not an iteration count..</exception>
		</member>
		<member name="P:System.Windows.Media.Animation.RepeatBehavior.Duration">
			<summary> Gets the total length of time a <see cref="T:System.Windows.Media.Animation.Timeline"></see> should play. </summary>
			<returns>The total length of time a timeline should play. </returns>
			<exception cref="T:System.InvalidOperationException">This <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior"></see> does not describe a repeat duration; it describes an iteration count.</exception>
		</member>
		<member name="P:System.Windows.Media.Animation.RepeatBehavior.Forever">
			<summary>Gets a <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior"></see> that specifies an infinite number of repetitions.  </summary>
			<returns>A <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior"></see> that specifies an infinite number of repetitions.   </returns>
		</member>
		<member name="P:System.Windows.Media.Animation.RepeatBehavior.HasCount">
			<summary>Gets a value that indicates whether the repeat behavior is specified by an iteration count.    </summary>
			<returns>true if the specified type refers to an iteration count; otherwise, false. </returns>
		</member>
		<member name="P:System.Windows.Media.Animation.RepeatBehavior.HasDuration">
			<summary>Gets a value that indicates whether it has a specified repeat duration. </summary>
			<returns>true if the specified type refers to a repeat duration; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.RepeatBehaviorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> TypeConverter method override. </summary>
			<returns>true if conversion is possible</returns>
			<param name="context">ITypeDescriptorContext</param>
			<param name="destinationType">Type to convert to</param>
		</member>
		<member name="M:System.Windows.Media.Animation.RepeatBehaviorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> TypeConverter method implementation. </summary>
			<returns>converted value</returns>
			<param name="context">ITypeDescriptorContext</param>
			<param name="destinationType">Type to convert to</param>
			<param name="cultureInfo">current culture (see CLR specs)</param>
			<param name="value">value to convert from</param>
		</member>
		<member name="T:System.Windows.Media.Animation.Rotation3DAnimation">
			<summary>Animates the value of a <see cref="T:System.Windows.Media.Media3D.Rotation3D"></see> property using linear interpolation between two values determined by the combination of <see cref="P:System.Windows.Media.Animation.Rotation3DAnimation.From"></see>, <see cref="P:System.Windows.Media.Animation.Rotation3DAnimation.To"></see>, or <see cref="P:System.Windows.Media.Animation.Rotation3DAnimation.By"></see> properties that are set for the animation. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Rotation3DAnimation.#ctor">
			<summary> Creates a new <see cref="T:System.Windows.Media.Animation.Rotation3DAnimation"></see>. </summary>
		</member>
		<member name="F:System.Windows.Media.Animation.Rotation3DAnimation.ByProperty">
			<summary> Identifies the By GTMT#dependency property. </summary>
			<returns>The identifier for the By GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.Rotation3DAnimation.FromProperty">
			<summary> Identifies the From GTMT#dependency property. </summary>
			<returns>The identifier for the From GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.Rotation3DAnimation.ToProperty">
			<summary> Identifies the To GTMT#dependency property. </summary>
			<returns>The identifier for the To GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Rotation3DAnimation.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable instance.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Rotation3DAnimation.GetCurrentValueCore(System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.Rotation3DAnimation.By">
			<summary> Gets or sets the total amount by which the animation changes its starting value. </summary>
			<returns>The total amount by which the animation changes its starting value.     The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Rotation3DAnimation.From">
			<summary> Gets or sets the animation's starting value. </summary>
			<returns>The starting value of the animation. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Rotation3DAnimation.IsAdditive">
			<summary>Gets or sets a value that specifies whether the animation's output value is added to the base value of the property being animated. </summary>
			<returns>true if the animation adds its output value         to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Rotation3DAnimation.IsCumulative">
			<summary>Gets or sets a value that specifies whether the animation's value accumulates when it repeats </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Rotation3DAnimationBase.GetCurrentValueCore(System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames">
			<summary> Animates the value of a Rotation3D property along a set of KeyFrames over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.GetCurrentValueCore(System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
			<summary> Provide a custom natural Duration when the Duration property is set to Automatic. </summary>
			<returns>If the last KeyFrame of this animation is a KeyTime, then this will be used as the NaturalDuration; otherwise it will be one second.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.IsAdditive">
			<summary>      Gets a value that specifies whether the animation's output value is added to the base value of the property being animated.   </summary>
			<returns>true if the animation adds its output value to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.IsCumulative">
			<summary>  Gets or sets a value that specifies whether the animation's value accumulates when it repeats.</summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.KeyFrames">
			<summary> Gets or sets the collection of Rotation3DKeyFrame objects that define the animation. </summary>
			<returns>The collection of Rotation3DKeyFrame objects that define the animation. The default value is Rotation3DKeyFrameCollection.Empty.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.Rotation3DKeyFrame">
			<summary> This class is used as part of a Rotation3DKeyFrameCollection in conjunction with a KeyFrameRotation3DAnimation to animate a Rotation3D property value along a set of key frames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Rotation3DKeyFrame.#ctor">
			<summary> Creates a new Rotation3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Rotation3DKeyFrame.#ctor(System.Windows.Media.Media3D.Rotation3D)">
			<summary> Creates a new Rotation3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Rotation3DKeyFrame.#ctor(System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Animation.KeyTime)">
			<summary> Creates a new DiscreteRotation3DKeyFrame. </summary>
		</member>
		<member name="P:System.Windows.Media.Animation.Rotation3DKeyFrame.KeyTime">
			<summary>Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.Rotation3DKeyFrame.Value"></see> should be reached. </summary>
			<returns>The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.Rotation3DKeyFrame.Value"></see> property. The default value is Uniform.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Rotation3DKeyFrame.Value">
			<summary>Gets or sets the key frame's target value. </summary>
			<returns>The key frame's target value, which is the value of this key frame at its specified <see cref="P:System.Windows.Media.Animation.Rotation3DKeyFrame.KeyTime"></see>. The default value is 0.0.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.Rotation3DKeyFrameCollection">
			<summary>This collection is used in conjunction with a KeyFrameRotation3DAnimation to animate a Rotation3D property value along a set of key frames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SingleAnimation">
			<summary> Animates the value of a  Single property between two target values using      GTMT#linear interpolation over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleAnimation.#ctor">
			<summary> Initializes a new instance of the SingleAnimation class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleAnimation.#ctor(System.Single,System.Windows.Duration)">
			<summary> Initializes a new instance of the SingleAnimation class that animates to the specified value over the specified duration. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleAnimation.#ctor(System.Single,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the SingleAnimation class that animates to the specified value over the specified duration and has the specified fill behavior. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleAnimation.#ctor(System.Single,System.Single,System.Windows.Duration)">
			<summary> Initializes a new instance of the SingleAnimation class that animates from the specified starting value to the specified destination value over the specified duration. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleAnimation.#ctor(System.Single,System.Single,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the SingleAnimation class that animates from the specified starting value to the specified destination value over the specified duration and has the specified fill behavior. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="F:System.Windows.Media.Animation.SingleAnimation.ByProperty">
			<summary> Identifies the By GTMT#dependency property. </summary>
			<returns>The identifier for the By GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.SingleAnimation.FromProperty">
			<summary> Identifies the From GTMT#dependency property. </summary>
			<returns>The identifier for the From GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.SingleAnimation.ToProperty">
			<summary> Identifies the To GTMT#dependency property. </summary>
			<returns>The identifier for the To GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleAnimation.Clone">
			<summary> Returns a modifiable clone of the animation. </summary>
			<returns>A modifiable clone of the animation. The returned clone is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleAnimation.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleAnimation.GetCurrentValueCore(System.Single,System.Single,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.SingleAnimation.By">
			<summary> Gets or sets the total amount by which the animation changes its starting value. </summary>
			<returns>The total amount by which the animation changes its starting value.     The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SingleAnimation.From">
			<summary> Gets or sets the animation's starting value.</summary>
			<returns>The starting value of the animation. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SingleAnimation.IsAdditive">
			<summary> Gets a value that specifies whether the animation's output value is added to the base           value of the property being animated. </summary>
			<returns>true if the animation adds its output value         to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SingleAnimation.IsCumulative">
			<summary> Gets or sets a value that specifies whether the animation's value accumulates when it repeats. </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SingleAnimation.To">
			<summary> Gets or sets the animation's ending value. </summary>
			<returns>The ending value of the animation. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SingleAnimationBase">
			<summary> Abstract class that, when implemented, animates a Single value. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleAnimationBase.Clone">
			<summary> Returns a modifiable copy of the animation. </summary>
			<returns>A modifiable copy of the animation. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleAnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleAnimationBase.GetCurrentValue(System.Single,System.Single,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleAnimationBase.GetCurrentValueCore(System.Single,System.Single,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames">
			<summary> Animates the value of a Single property along a set of KeyFrames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.Clone">
			<summary> Creates a copy of this KeyFrameSingleAnimation. </summary>
			<returns>The copy</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
			<summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames"></see> object.</summary>
			<param name="source">The <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames"></see> object to be cloned.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.GetCurrentValueCore(System.Single,System.Single,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
			<summary> Provide a custom natural Duration when the Duration property is set to Automatic. </summary>
			<returns>If the last KeyFrame of this animation is a KeyTime, then this will be used as the NaturalDuration; otherwise it will be one second.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.IsAdditive">
			<summary>      Gets a value that specifies whether the animation's output value is added to the base value of the property being animated.   </summary>
			<returns>true if the animation adds its output value to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.IsCumulative">
			<summary>  Gets or sets a value that specifies whether the animation's value accumulates when it repeats. </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.KeyFrames">
			<summary> Gets or sets the collection of SingleKeyFrame objects that define the animation. </summary>
			<returns>The collection of SingleKeyFrame objects that define the animation. The default value is SingleKeyFrameCollection.Empty.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SingleKeyFrame">
			<summary> Abstract class that, when implemented, defines an animation segment with its own target value and interpolation method for a SingleAnimationUsingKeyFrames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleKeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SingleKeyFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleKeyFrame.#ctor(System.Single)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SingleKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.SingleKeyFrame.Value"></see>. </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.SingleKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.SingleKeyFrame"></see> instance.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleKeyFrame.#ctor(System.Single,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SingleKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.SingleKeyFrame.Value"></see> and <see cref="P:System.Windows.Media.Animation.SingleKeyFrame.KeyTime"></see>. </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.SingleKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.SingleKeyFrame"></see> instance.</param>
			<param name="keyTime">The <see cref="P:System.Windows.Media.Animation.SingleKeyFrame.KeyTime"></see> of the new <see cref="T:System.Windows.Media.Animation.SingleKeyFrame"></see> instance.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.SingleKeyFrame.KeyTime">
			<summary> Gets or sets the time at which the key frame's target Value should be reached. </summary>
			<returns>The time at which the key frame's current value should be equal to its Value property. The default value is Uniform.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SingleKeyFrame.Value">
			<summary> Gets or sets the key frame's target value. </summary>
			<returns>The key frame's target value, which is the value of this key frame at its specified KeyTime. The default value is 0.0f.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SingleKeyFrameCollection">
			<summary>Represents a collection of SingleKeyFrame objects. This collection is used as part of a SingleAnimationUsingKeyFrames to animate a Single property value along a set of key frames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SingleKeyFrameCollection"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.Add(System.Windows.Media.Animation.SingleKeyFrame)">
			<summary> Adds a SingleKeyFrame to the end of the collection. </summary>
			<returns>The index at which the keyFrame was added.</returns>
			<param name="keyFrame">The SingleKeyFrame to add to the end of the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.Clone">
			<summary> Returns a modifiable copy of the collection and its contents. </summary>
			<returns>A modifiable copy of the collection and its contents. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.Contains(System.Windows.Media.Animation.SingleKeyFrame)">
			<summary> Indicates whether the collection contains the specified SingleKeyFrame. </summary>
			<returns>true if the collection contains keyFrame; otherwise, false.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.GetEnumerator">
			<summary> Returns an enumerator that can iterate through the collection. </summary>
			<returns>An IEnumerator that can iterate through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.IndexOf(System.Windows.Media.Animation.SingleKeyFrame)">
			<summary> Searches for the specified SingleKeyFrame and returns the zero-based index of the first occurrence within the entire collection. </summary>
			<returns>The zero-based index of the first occurrence of keyFrame within the entire collection, if found; otherwise, -1.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.SingleKeyFrameCollection.Count">
			<summary> Gets the number of key frames contained in the SingleKeyFrameCollection.  </summary>
			<returns>The number of key frames contained in the SingleKeyFrameCollection. </returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SingleKeyFrameCollection.IsSynchronized">
			<summary> Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
			<returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SingleKeyFrameCollection.Item(System.Int32)">
			<summary> Gets or sets the SingleKeyFrame at the specified index. </summary>
			<returns>The SingleKeyFrame at the specified index.</returns>
			<param name="index">The zero-based index of the SingleKeyFrame to get or set.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.SingleKeyFrameCollection.SyncRoot">
			<summary> Gets an object that can be used to synchronize access to the collection. </summary>
			<returns>An object that can be used to synchronize access to the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SizeAnimation">
			<summary> Animates the value of a  Size property between two target values using      GTMT#linear interpolation over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeAnimation.#ctor">
			<summary> Initializes a new instance of the SizeAnimation class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeAnimation.#ctor(System.Windows.Size,System.Windows.Duration)">
			<summary> Initializes a new instance of the SizeAnimation class that animates to the specified value over the specified duration. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeAnimation.#ctor(System.Windows.Size,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the SizeAnimation class that animates to the specified value over the specified duration and has the specified fill behavior. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeAnimation.#ctor(System.Windows.Size,System.Windows.Size,System.Windows.Duration)">
			<summary> Initializes a new instance of the SizeAnimation class that animates from the specified starting value to the specified destination value over the specified duration. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeAnimation.#ctor(System.Windows.Size,System.Windows.Size,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the SizeAnimation class that animates from the specified starting value to the specified destination value over the specified duration and has the specified fill behavior. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="F:System.Windows.Media.Animation.SizeAnimation.ByProperty">
			<summary> Identifies the By GTMT#dependency property. </summary>
			<returns>The identifier for the By GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.SizeAnimation.FromProperty">
			<summary> Identifies the From GTMT#dependency property. </summary>
			<returns>The identifier for the From GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.SizeAnimation.ToProperty">
			<summary> Identifies the To GTMT#dependency property. </summary>
			<returns>The identifier for the To GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeAnimation.Clone">
			<summary> Returns a modifiable clone of the animation. </summary>
			<returns>A modifiable clone of the animation. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeAnimation.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeAnimation.GetCurrentValueCore(System.Windows.Size,System.Windows.Size,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.SizeAnimation.By">
			<summary> Gets or sets the total amount by which the animation changes its starting value. </summary>
			<returns>The total amount by which the animation changes its starting value.     The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SizeAnimation.From">
			<summary> Gets or sets the animation's starting value. </summary>
			<returns>The starting value of the animation. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SizeAnimation.IsAdditive">
			<summary> Gets a value that specifies whether the animation's output value is added to the base           value of the property being animated. </summary>
			<returns>true if the animation adds its output value         to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SizeAnimation.IsCumulative">
			<summary> Gets or sets a value that specifies whether the animation's value accumulates when it repeats. </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SizeAnimation.To">
			<summary> Gets or sets the animation's ending value. </summary>
			<returns>The ending value of the animation. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SizeAnimationBase">
			<summary> Abstract class that, when implemented, animates a Size value. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeAnimationBase.Clone">
			<summary> Returns a modifiable copy of the animation. </summary>
			<returns>Returns a modifiable copy of the animation. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeAnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeAnimationBase.GetCurrentValue(System.Windows.Size,System.Windows.Size,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeAnimationBase.GetCurrentValueCore(System.Windows.Size,System.Windows.Size,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames">
			<summary> Animates the value of a Size property along a set of KeyFrames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.Clone">
			<summary> Creates a copy of this KeyFrameSizeAnimation. </summary>
			<returns>The copy</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
			<summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames"></see> object.</summary>
			<param name="source">The <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames"></see> object to be cloned.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.GetCurrentValueCore(System.Windows.Size,System.Windows.Size,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
			<summary> Provide a custom natural Duration when the Duration property is set to Automatic. </summary>
			<returns>If the last KeyFrame of this animation is a KeyTime, then this will be used as the NaturalDuration; otherwise it will be one second.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.IsAdditive">
			<summary>     Gets a value that specifies whether the animation's output value is added to the base value of the property being animated.    </summary>
			<returns>true if the animation adds its output value to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.IsCumulative">
			<summary>  Gets or sets a value that specifies whether the animation's value accumulates when it repeats. </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.KeyFrames">
			<summary> Gets or sets the collection of SizeKeyFrame objects that define the animation. </summary>
			<returns>The collection of SizeKeyFrame objects that define the animation. The default value is SizeKeyFrameCollection.Empty.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SizeKeyFrame">
			<summary> Abstract class that, when implemented, defines a segment with its own target value and interpolation method for a SizeAnimationUsingKeyFrames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SizeKeyFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeKeyFrame.#ctor(System.Windows.Size)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SizeKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.SizeKeyFrame.Value"></see>. </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.SizeKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.SizeKeyFrame"></see> instance.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeKeyFrame.#ctor(System.Windows.Size,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SizeKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.SizeKeyFrame.Value"></see> and <see cref="P:System.Windows.Media.Animation.SizeKeyFrame.KeyTime"></see>. </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.SizeKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.SizeKeyFrame"></see> instance.</param>
			<param name="keyTime">The <see cref="P:System.Windows.Media.Animation.SizeKeyFrame.KeyTime"></see> of the new <see cref="T:System.Windows.Media.Animation.SizeKeyFrame"></see> instance.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.SizeKeyFrame.KeyTime">
			<summary> Gets or sets the time at which the key frame's target Value should be reached. </summary>
			<returns>The time at which the key frame's current value should be equal to its Value property. The default value is Uniform.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SizeKeyFrame.Value">
			<summary> Gets or sets the key frame's target value. </summary>
			<returns>The key frame's target value, which is the value of this key frame at its specified KeyTime. The default value is a Size with a height and width of 0.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SizeKeyFrameCollection">
			<summary> Represents a collection of SizeKeyFrame objects. This collection is used as part of a SizeAnimationUsingKeyFrames to animate a Size property value along a set of key frames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.Add(System.Windows.Media.Animation.SizeKeyFrame)">
			<summary> Adds a SizeKeyFrame to the end of the collection. </summary>
			<returns>The index at which the keyFrame was added.</returns>
			<param name="keyFrame">The SizeKeyFrame to add to the end of the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.Clone">
			<summary> Returns a modifiable copy of the collection and its contents. </summary>
			<returns>A modifiable copy of the collection and its contents. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.Contains(System.Windows.Media.Animation.SizeKeyFrame)">
			<summary> Indicates whether the collection contains the specified SizeKeyFrame. </summary>
			<returns>true if the collection contains keyFrame; otherwise, false.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.GetEnumerator">
			<summary> Returns an enumerator that can iterate through the collection. </summary>
			<returns>An IEnumerator that can iterate through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.IndexOf(System.Windows.Media.Animation.SizeKeyFrame)">
			<summary> Searches for the specified SizeKeyFrame and returns the zero-based index of the first occurrence within the entire collection. </summary>
			<returns>The zero-based index of the first occurrence of keyFrame within the entire collection, if found; otherwise, -1.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.SizeKeyFrameCollection.Count">
			<summary> Gets the number of key frames contained in the SizeKeyFrameCollection.  </summary>
			<returns>The number of key frames contained in the SizeKeyFrameCollection. </returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SizeKeyFrameCollection.IsSynchronized">
			<summary> Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
			<returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SizeKeyFrameCollection.Item(System.Int32)">
			<summary> Gets or sets the SizeKeyFrame at the specified index. </summary>
			<returns>The SizeKeyFrame at the specified index.</returns>
			<param name="index">The zero-based index of the SizeKeyFrame to get or set.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.SizeKeyFrameCollection.SyncRoot">
			<summary> Gets an object that can be used to synchronize access to the collection. </summary>
			<returns>An object that can be used to synchronize access to the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SlipBehavior">
			<summary>Indicates how a <see cref="T:System.Windows.Media.Animation.ParallelTimeline"></see> will behave when one or more of its <see cref="T:System.Windows.Media.Animation.Timeline"></see> children slips.</summary>
		</member>
		<member name="F:System.Windows.Media.Animation.SlipBehavior.Grow">
			<summary>Indicates that a <see cref="T:System.Windows.Media.Animation.ParallelTimeline"></see> will not slip with the child <see cref="T:System.Windows.Media.Animation.Timeline"></see>, but will expand to fit all slipping <see cref="T:System.Windows.Media.Animation.Timeline"></see> children. NOTE: This is only effective when the <see cref="P:System.Windows.Media.Animation.Timeline.Duration"></see> of the <see cref="T:System.Windows.Media.Animation.ParallelTimeline"></see> is not explicitly specified.</summary>
		</member>
		<member name="F:System.Windows.Media.Animation.SlipBehavior.Slip">
			<summary>Indicates that a <see cref="T:System.Windows.Media.Animation.ParallelTimeline"></see> will slip along with any child <see cref="T:System.Windows.Media.Animation.Timeline"></see> that is delayed.</summary>
		</member>
		<member name="T:System.Windows.Media.Animation.SplineByteKeyFrame">
			<summary> Animates from the Byte value of the previous key frame to its own Value using GTMT#splined interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineByteKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineByteKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineByteKeyFrame.#ctor(System.Byte)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineByteKeyFrame"></see> class with the specified ending value.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineByteKeyFrame.#ctor(System.Byte,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineByteKeyFrame"></see> class with the specified ending value and key time. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineByteKeyFrame.#ctor(System.Byte,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineByteKeyFrame"></see> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline"></see>. </summary>
			<param name="keySpline"><see cref="T:System.Windows.Media.Animation.KeySpline"></see> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline"></see> represents a Bezier curve which defines animation progress of the key frame.</param>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineByteKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SplineByteKeyFrame.KeySpline">
			<summary>   Gets or sets the two control points that define animation progress for this key frame.   </summary>
			<returns>The two control points that specify the quadratic Bezier curve which defines the progress of the key frame.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SplineColorKeyFrame">
			<summary> Animates from the Color value of the previous key frame to its own Value using GTMT#splined interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineColorKeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineColorKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineColorKeyFrame.#ctor(System.Windows.Media.Color)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineColorKeyFrame"></see> class with the specified ending value.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineColorKeyFrame.#ctor(System.Windows.Media.Color,System.Windows.Media.Animation.KeyTime)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineColorKeyFrame"></see> class with the specified ending value and key time.</summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineColorKeyFrame.#ctor(System.Windows.Media.Color,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineColorKeyFrame"></see> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline"></see>.  </summary>
			<param name="keySpline"><see cref="T:System.Windows.Media.Animation.KeySpline"></see> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline"></see> represents a Bezier curve which defines animation progress of the key frame.</param>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineColorKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SplineColorKeyFrame.KeySpline">
			<summary> Gets or sets the two control points that define animation progress for this key frame. </summary>
			<returns>The two control points that specify the quadratic Bezier curve which defines the progress of the key frame.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SplineDecimalKeyFrame">
			<summary> Animates from the Decimal value of the previous key frame to its own Value using GTMT#splined interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineDecimalKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineDecimalKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineDecimalKeyFrame.#ctor(System.Decimal)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineDecimalKeyFrame"></see> class with the specified ending value.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineDecimalKeyFrame.#ctor(System.Decimal,System.Windows.Media.Animation.KeyTime)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineDecimalKeyFrame"></see> class with the specified ending value and key time.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineDecimalKeyFrame.#ctor(System.Decimal,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineDecimalKeyFrame"></see> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline"></see>.  </summary>
			<param name="keySpline"><see cref="T:System.Windows.Media.Animation.KeySpline"></see> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline"></see> represents a Bezier curve which defines animation progress of the key frame.</param>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineDecimalKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SplineDecimalKeyFrame.KeySpline">
			<summary>    Gets or sets the two control points that define animation progress for this key frame.    </summary>
			<returns>The two control points that specify the quadratic Bezier curve which defines the progress of the key frame.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SplineDoubleKeyFrame">
			<summary> Animates from the Double value of the previous key frame to its own Value using GTMT#splined interpolation.   </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineDoubleKeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineDoubleKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineDoubleKeyFrame.#ctor(System.Double)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineDoubleKeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineDoubleKeyFrame.#ctor(System.Double,System.Windows.Media.Animation.KeyTime)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineDoubleKeyFrame"></see> class with the specified ending value and key time.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineDoubleKeyFrame.#ctor(System.Double,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineDoubleKeyFrame"></see> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline"></see>.  </summary>
			<param name="keySpline"><see cref="T:System.Windows.Media.Animation.KeySpline"></see> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline"></see> represents a Bezier curve which defines animation progress of the key frame.</param>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineDoubleKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SplineDoubleKeyFrame.KeySpline">
			<summary>Gets or sets the two control points that define animation progress for this key frame.  </summary>
			<returns>The two control points that specify the quadratic Bezier curve which defines the progress of the key frame.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SplineInt16KeyFrame">
			<summary> Animates from the Int16 value of the previous key frame to its own Value using GTMT#splined interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineInt16KeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt16KeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineInt16KeyFrame.#ctor(System.Int16)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt16KeyFrame"></see> class with the specified ending value.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineInt16KeyFrame.#ctor(System.Int16,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt16KeyFrame"></see> class with the specified ending value and key time.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineInt16KeyFrame.#ctor(System.Int16,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt16KeyFrame"></see> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline"></see>.  </summary>
			<param name="keySpline"><see cref="T:System.Windows.Media.Animation.KeySpline"></see> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline"></see> represents a Bezier curve which defines animation progress of the key frame.</param>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineInt16KeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SplineInt16KeyFrame.KeySpline">
			<summary>   Gets or sets the two control points that define animation progress for this key frame.    </summary>
			<returns>The two control points that specify the quadratic Bezier curve which defines the progress of the key frame.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SplineInt32KeyFrame">
			<summary> Animates from the Int32 value of the previous key frame to its own Value using GTMT#splined interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineInt32KeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt32KeyFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineInt32KeyFrame.#ctor(System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt32KeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineInt32KeyFrame.#ctor(System.Int32,System.Windows.Media.Animation.KeyTime)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt32KeyFrame"></see> class with the specified ending value and key time.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineInt32KeyFrame.#ctor(System.Int32,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt32KeyFrame"></see> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline"></see>.</summary>
			<param name="keySpline"><see cref="T:System.Windows.Media.Animation.KeySpline"></see> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline"></see> represents a Bezier curve which defines animation progress of the key frame.</param>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineInt32KeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SplineInt32KeyFrame.KeySpline">
			<summary>   Gets or sets the two control points that define animation progress for this key frame.   </summary>
			<returns>The two control points that specify the quadratic Bezier curve which defines the progress of the key frame.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SplineInt64KeyFrame">
			<summary> Animates from the Int64 value of the previous key frame to its own Value using GTMT#splined interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineInt64KeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt64KeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineInt64KeyFrame.#ctor(System.Int64)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt64KeyFrame"></see> class with the specified ending value.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineInt64KeyFrame.#ctor(System.Int64,System.Windows.Media.Animation.KeyTime)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt64KeyFrame"></see> class with the specified ending value and key time.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineInt64KeyFrame.#ctor(System.Int64,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt64KeyFrame"></see> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline"></see>.  </summary>
			<param name="keySpline"><see cref="T:System.Windows.Media.Animation.KeySpline"></see> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline"></see> represents a Bezier curve which defines animation progress of the key frame.</param>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineInt64KeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SplineInt64KeyFrame.KeySpline">
			<summary>    Gets or sets the two control points that define animation progress for this key frame.    </summary>
			<returns>The two control points that specify the quadratic Bezier curve which defines the progress of the key frame.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SplinePoint3DKeyFrame">
			<summary> Animates from the Point3D value of the previous key frame to its own Value using GTMT#splined interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplinePoint3DKeyFrame.#ctor">
			<summary>Creates a new LinearPoint3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplinePoint3DKeyFrame.#ctor(System.Windows.Media.Media3D.Point3D)">
			<summary>Creates a new LinearPoint3DkeyFrame using the specified Point3D. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplinePoint3DKeyFrame.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Animation.KeyTime)">
			<summary> Creates a new LinearPoint3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplinePoint3DKeyFrame.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
			<summary> Creates a new LinearPoint3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplinePoint3DKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SplinePoint3DKeyFrame.KeySpline">
			<summary>Gets or sets the two control points that define animation progress for this key frame. </summary>
			<returns>The two control points that specify the quadratic Bezier curve which defines the progress of the key frame.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SplinePointKeyFrame">
			<summary> Animates from the Point value of the previous key frame to its own Value using GTMT#splined interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplinePointKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplinePointKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplinePointKeyFrame.#ctor(System.Windows.Point)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplinePointKeyFrame"></see> class with the specified ending value.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplinePointKeyFrame.#ctor(System.Windows.Point,System.Windows.Media.Animation.KeyTime)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplinePointKeyFrame"></see> class with the specified ending value and key time.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplinePointKeyFrame.#ctor(System.Windows.Point,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplinePointKeyFrame"></see> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline"></see>.  </summary>
			<param name="keySpline"><see cref="T:System.Windows.Media.Animation.KeySpline"></see> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline"></see> represents a Bezier curve which defines animation progress of the key frame.</param>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplinePointKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SplinePointKeyFrame.KeySpline">
			<summary>  Gets or sets the two control points that define animation progress for this key frame.  </summary>
			<returns>The two control points that specify the quadratic Bezier curve which defines the progress of the key frame.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SplineQuaternionKeyFrame">
			<summary>Animates from the <see cref="T:System.Windows.Media.Media3D.Quaternion"></see> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.QuaternionKeyFrame.Value"></see> using GTMT#splined interpolation.  </summary>
		</member>
		<member name="P:System.Windows.Media.Animation.SplineQuaternionKeyFrame.KeySpline">
			<summary>Gets or sets the two control points that define animation progress for this key frame.</summary>
			<returns>The two control points that specify the quadratic Bezier curve which defines the progress of the key frame.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SplineRectKeyFrame">
			<summary> Animates from the Rect value of the previous key frame to its own Value using GTMT#splined interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineRectKeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineRectKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineRectKeyFrame.#ctor(System.Windows.Rect)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineRectKeyFrame"></see> class with the specified ending value.</summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineRectKeyFrame.#ctor(System.Windows.Rect,System.Windows.Media.Animation.KeyTime)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineRectKeyFrame"></see> class with the specified ending value and key time.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineRectKeyFrame.#ctor(System.Windows.Rect,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineRectKeyFrame"></see> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline"></see>.  </summary>
			<param name="keySpline"><see cref="T:System.Windows.Media.Animation.KeySpline"></see> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline"></see> represents a Bezier curve which defines animation progress of the key frame.</param>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineRectKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SplineRectKeyFrame.KeySpline">
			<summary> Gets or sets the two control points that define animation progress for this key frame. </summary>
			<returns>The two control points that specify the quadratic Bezier curve which defines the progress of the key frame.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SplineRotation3DKeyFrame">
			<summary> Animates from the Rotation3D value of the previous key frame to its own Value using GTMT#splined interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineRotation3DKeyFrame.#ctor">
			<summary> Creates a new LinearRotation3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineRotation3DKeyFrame.#ctor(System.Windows.Media.Media3D.Rotation3D)">
			<summary> Creates a new LinearRotation3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineRotation3DKeyFrame.#ctor(System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Animation.KeyTime)">
			<summary> Creates a new LinearRotation3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineRotation3DKeyFrame.#ctor(System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
			<summary> Creates a new LinearRotation3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineRotation3DKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SplineRotation3DKeyFrame.KeySpline">
			<summary>Gets or sets the two control points that define animation progress for this key frame.</summary>
			<returns>The two control points that specify the quadratic Bezier curve which defines the progress of the key frame.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SplineSingleKeyFrame">
			<summary> Animates from the Single value of the previous key frame to its own Value using GTMT#splined interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineSingleKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineSingleKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineSingleKeyFrame.#ctor(System.Single)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineSingleKeyFrame"></see> class with the specified ending value. </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineSingleKeyFrame.#ctor(System.Single,System.Windows.Media.Animation.KeyTime)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineSingleKeyFrame"></see> class with the specified ending value and key time.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineSingleKeyFrame.#ctor(System.Single,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineSingleKeyFrame"></see> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline"></see>. </summary>
			<param name="keySpline"><see cref="T:System.Windows.Media.Animation.KeySpline"></see> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline"></see> represents a Bezier curve which defines animation progress of the key frame.</param>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineSingleKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SplineSingleKeyFrame.KeySpline">
			<summary>   Gets or sets the two control points that define animation progress for this key frame.    </summary>
			<returns>The two control points that specify the quadratic Bezier curve which defines the progress of the key frame.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SplineSizeKeyFrame">
			<summary> Animates from the Size value of the previous key frame to its own Value using GTMT#splined interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineSizeKeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineSizeKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineSizeKeyFrame.#ctor(System.Windows.Size)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineSizeKeyFrame"></see> class with the specified ending value.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineSizeKeyFrame.#ctor(System.Windows.Size,System.Windows.Media.Animation.KeyTime)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineSizeKeyFrame"></see> class with the specified ending value and key time.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineSizeKeyFrame.#ctor(System.Windows.Size,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineSizeKeyFrame"></see> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline"></see>.  </summary>
			<param name="keySpline"><see cref="T:System.Windows.Media.Animation.KeySpline"></see> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline"></see> represents a Bezier curve which defines animation progress of the key frame.</param>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineSizeKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SplineSizeKeyFrame.KeySpline">
			<summary>    Gets or sets the two control points that define animation progress for this key frame.   </summary>
			<returns>The two control points that specify the quadratic Bezier curve which defines the progress of the key frame.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SplineVector3DKeyFrame">
			<summary> Animates from the Vector3D value of the previous key frame to its own Value using GTMT#splined interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineVector3DKeyFrame.#ctor">
			<summary> Creates a new LinearVector3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineVector3DKeyFrame.#ctor(System.Windows.Media.Media3D.Vector3D)">
			<summary> Creates a new LinearVector3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineVector3DKeyFrame.#ctor(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Animation.KeyTime)">
			<summary> Creates a new LinearVector3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineVector3DKeyFrame.#ctor(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
			<summary> Creates a new LinearVector3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineVector3DKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SplineVector3DKeyFrame.KeySpline">
			<summary>Gets or sets the two control points that define animation progress for this key frame. </summary>
			<returns>The two control points that specify the quadratic Bezier curve which defines the progress of the key frame.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.SplineVectorKeyFrame">
			<summary> Animates from the Vector value of the previous key frame to its own Value using GTMT#splined interpolation.  </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineVectorKeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineVectorKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineVectorKeyFrame.#ctor(System.Windows.Vector)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineVectorKeyFrame"></see> class with the specified ending value.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineVectorKeyFrame.#ctor(System.Windows.Vector,System.Windows.Media.Animation.KeyTime)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineVectorKeyFrame"></see> class with the specified ending value and key time.  </summary>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineVectorKeyFrame.#ctor(System.Windows.Vector,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineVectorKeyFrame"></see> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline"></see>.  </summary>
			<param name="keySpline"><see cref="T:System.Windows.Media.Animation.KeySpline"></see> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline"></see> represents a Bezier curve which defines animation progress of the key frame.</param>
			<param name="value">Ending value (also known as "target value") for the key frame.</param>
			<param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.SplineVectorKeyFrame.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.SplineVectorKeyFrame.KeySpline">
			<summary> Gets or sets the two control points that define animation progress for this key frame.</summary>
			<returns>The two control points that specify the quadratic Bezier curve which defines the progress of the key frame.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.StringAnimationBase">
			<summary> Abstract class that, when implemented, animates a String value. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.StringAnimationBase.Clone">
			<summary>Creates modifiable clone of the animation.</summary>
			<returns>A modifiable clone of the animation. The clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The copy's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.StringAnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.StringAnimationBase.GetCurrentValue(System.String,System.String,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.StringAnimationBase.GetCurrentValueCore(System.String,System.String,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames">
			<summary>Animates the value of a String property along a set of KeyFrames over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.Clone">
			<summary> Creates a copy of this KeyFrameStringAnimation. </summary>
			<returns>The copy</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
			<summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames"></see> object.</summary>
			<param name="source">The <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames"></see> object to be cloned.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.GetCurrentValueCore(System.String,System.String,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
			<summary> Provide a custom natural Duration when the Duration property is set to Automatic. </summary>
			<returns>If the last KeyFrame of this animation is a KeyTime, then this will be used as the NaturalDuration; otherwise it will be one second.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.KeyFrames">
			<summary> Gets or sets the collection of StringKeyFrame objects that define the animation. </summary>
			<returns>The collection of StringKeyFrame objects that define the animation. The default value is StringKeyFrameCollection.Empty.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.StringKeyFrame">
			<summary>Abstract class that, when implemented, defines an animation segment with its own target value and interpolation method for a StringAnimationUsingKeyFrames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.StringKeyFrame.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.StringKeyFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.StringKeyFrame.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.StringKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.StringKeyFrame.Value"></see>. </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.StringKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.StringKeyFrame"></see> instance.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.StringKeyFrame.#ctor(System.String,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.StringKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.StringKeyFrame.Value"></see> and <see cref="P:System.Windows.Media.Animation.StringKeyFrame.KeyTime"></see>. </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.StringKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.StringKeyFrame"></see> instance.</param>
			<param name="keyTime">The <see cref="P:System.Windows.Media.Animation.StringKeyFrame.KeyTime"></see> of the new <see cref="T:System.Windows.Media.Animation.StringKeyFrame"></see> instance.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.StringKeyFrame.KeyTime">
			<summary> Gets or sets the time at which the key frame's target Value should be reached. </summary>
			<returns>The time at which the key frame's current value should be equal to its Value property. The default value is Uniform.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.StringKeyFrame.Value">
			<summary> Gets or sets the key frame's target value. </summary>
			<returns>The key frame's target value, which is the value of this key frame at its specified KeyTime. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.StringKeyFrameCollection">
			<summary> Represents a collection of StringKeyFrame objects. This collection is used as part of a StringAnimationUsingKeyFrames to animate a String property value along a set of key frames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.Add(System.Windows.Media.Animation.StringKeyFrame)">
			<summary> Adds a StringKeyFrame to the end of the collection. </summary>
			<returns>The index at which the keyFrame was added.</returns>
			<param name="keyFrame">The StringKeyFrame to add to the end of the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.Clone">
			<summary> Returns a modifiable copy of the collection and its contents. </summary>
			<returns>A modifiable copy of the collection and its contents. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.Contains(System.Windows.Media.Animation.StringKeyFrame)">
			<summary> Indicates whether the collection contains the specified StringKeyFrame. </summary>
			<returns>true if the collection contains keyFrame; otherwise, false.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.GetEnumerator">
			<summary> Returns an enumerator that can iterate through the collection. </summary>
			<returns>An IEnumerator that can iterate through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.IndexOf(System.Windows.Media.Animation.StringKeyFrame)">
			<summary> Searches for the specified StringKeyFrame and returns the zero-based index of the first occurrence within the entire collection. </summary>
			<returns>The zero-based index of the first occurrence of keyFrame within the entire collection, if found; otherwise, -1.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.StringKeyFrameCollection.Count">
			<summary> Gets the number of key frames contained in the StringKeyFrameCollection.  </summary>
			<returns>The number of key frames contained in the StringKeyFrameCollection. </returns>
		</member>
		<member name="P:System.Windows.Media.Animation.StringKeyFrameCollection.IsSynchronized">
			<summary> Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
			<returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.StringKeyFrameCollection.Item(System.Int32)">
			<summary> Gets or sets the StringKeyFrame at the specified index. </summary>
			<returns>The StringKeyFrame at the specified index.</returns>
			<param name="index">The zero-based index of the StringKeyFrame to get or set.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.StringKeyFrameCollection.SyncRoot">
			<summary> Gets an object that can be used to synchronize access to the collection. </summary>
			<returns>An object that can be used to synchronize access to the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.Timeline">
			<summary>Defines a segment of time. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Timeline.#ctor">
			<summary> Creates a Timeline with default properties. </summary>
		</member>
		<member name="E:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated">
			<summary>Occurs when the rate at which time progresses for the timeline's clock changes.</summary>
		</member>
		<member name="E:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated">
			<summary>Occurs when the <see cref="P:System.Windows.Media.Animation.Clock.CurrentState"></see> property of the timeline's <see cref="T:System.Windows.Media.Animation.Clock"></see> is updated.</summary>
		</member>
		<member name="E:System.Windows.Media.Animation.Timeline.CurrentTimeInvalidated">
			<summary>Occurs when the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> property of the timeline's <see cref="T:System.Windows.Media.Animation.Clock"></see> is updated.</summary>
		</member>
		<member name="F:System.Windows.Media.Animation.Timeline.AccelerationRatioProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.AccelerationRatio"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.AccelerationRatio"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.Timeline.AutoReverseProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.AutoReverse"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.AutoReverse"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.Timeline.BeginTimeProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.Timeline.DecelerationRatioProperty">
			<summary>Identifies for the <see cref="P:System.Windows.Media.Animation.Timeline.DecelerationRatio"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.DecelerationRatio"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.Timeline.DurationProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.Duration"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.Duration"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.Timeline.FillBehaviorProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.Timeline.NameProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.Name"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.Name"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.Timeline.RepeatBehaviorProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.Timeline.SpeedRatioProperty">
			<summary>Identifies for the <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio"></see> GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Timeline.AllocateClock">
			<summary>Creates a <see cref="T:System.Windows.Media.Animation.Clock"></see> for this <see cref="T:System.Windows.Media.Animation.Timeline"></see>.              </summary>
			<returns>A clock for this <see cref="T:System.Windows.Media.Animation.Timeline"></see>.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Timeline.Clone">
			<returns>Returns a modifiable copy of the timeline. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Timeline.CreateClock">
			<summary>Creates a new, controllable <see cref="T:System.Windows.Media.Animation.Clock"></see> from this <see cref="T:System.Windows.Media.Animation.Timeline"></see>. If this <see cref="T:System.Windows.Media.Animation.Timeline"></see> has children, a tree of clocks is created with this <see cref="T:System.Windows.Media.Animation.Timeline"></see> as the root. </summary>
			<returns>A new, controllable <see cref="T:System.Windows.Media.Animation.Clock"></see> constructed from this <see cref="T:System.Windows.Media.Animation.Timeline"></see>. If this <see cref="T:System.Windows.Media.Animation.Timeline"></see> is a <see cref="T:System.Windows.Media.Animation.TimelineGroup"></see> that contains child timelines, a tree of <see cref="T:System.Windows.Media.Animation.Clock"></see> objects is created with a controllable <see cref="T:System.Windows.Media.Animation.Clock"></see> created from this <see cref="T:System.Windows.Media.Animation.Timeline"></see> as the root.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Timeline.CreateClock(System.Boolean)">
			<summary>Creates a new <see cref="T:System.Windows.Media.Animation.Clock"></see> from this <see cref="T:System.Windows.Media.Animation.Timeline"></see> and specifies whether the new <see cref="T:System.Windows.Media.Animation.Clock"></see> is controllable. If this <see cref="T:System.Windows.Media.Animation.Timeline"></see> has children, a tree of clocks is created with this <see cref="T:System.Windows.Media.Animation.Timeline"></see> as the root. </summary>
			<returns>A new <see cref="T:System.Windows.Media.Animation.Clock"></see> constructed from this <see cref="T:System.Windows.Media.Animation.Timeline"></see>. If this <see cref="T:System.Windows.Media.Animation.Timeline"></see> is a <see cref="T:System.Windows.Media.Animation.TimelineGroup"></see> that contains child timelines, a tree of <see cref="T:System.Windows.Media.Animation.Clock"></see> objects is created with a controllable <see cref="T:System.Windows.Media.Animation.Clock"></see> created from this <see cref="T:System.Windows.Media.Animation.Timeline"></see> as the root.</returns>
			<param name="hasControllableRoot">true if the root <see cref="T:System.Windows.Media.Animation.Clock"></see> returned should return a <see cref="T:System.Windows.Media.Animation.ClockController"></see> from its <see cref="P:System.Windows.Media.Animation.Clock.Controller"></see> property so that the <see cref="T:System.Windows.Media.Animation.Clock"></see> tree can be interactively controlled; otherwise, false.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Timeline.GetNaturalDuration(System.Windows.Media.Animation.Clock)">
			<summary> Returns the period of a single iteration. This will only be called when the Duration property is set to Automatic. If Duration is Automatic, the natural duration is determined by the nature of the specific timeline class, as determined by its author. If GetNaturalDuration returns Automatic, it means that the natural duration is unknown, which temporarily implies Forever. Streaming media would fit this case. </summary>
			<returns>A Duration quantity representing the natural duration.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Timeline.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
			<summary> Implemented by the class author to provide a custom natural Duration in the case that the Duration property is set to Automatic. If the author cannot determine the Duration, this method should return Automatic. </summary>
			<returns>A Duration quantity representing the natural duration.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.Timeline.AccelerationRatio">
			<summary>Gets or sets a value specifying the percentage of the timeline's <see cref="P:System.Windows.Media.Animation.Timeline.Duration"></see> spent accelerating the passage of time from zero to its maximum rate. </summary>
			<returns>A value between 0 and 1, inclusive, that specifies the percentage of the timeline's <see cref="P:System.Windows.Media.Animation.Timeline.Duration"></see> spent accelerating the passage of time from zero to its maximum rate. If the timeline's <see cref="P:System.Windows.Media.Animation.Timeline.DecelerationRatio"></see>  property is also set, the sum of <see cref="P:System.Windows.Media.Animation.Timeline.AccelerationRatio"></see> and <see cref="P:System.Windows.Media.Animation.Timeline.DecelerationRatio"></see> must be less than or equal to 1. The default value is 0.</returns>
			<exception cref="T:System.ArgumentException"><see cref="P:System.Windows.Media.Animation.Timeline.AccelerationRatio"></see> is less than 0 or greater than 1.</exception>
			<exception cref="T:System.InvalidOperationException">The sum of <see cref="P:System.Windows.Media.Animation.Timeline.AccelerationRatio"></see> and <see cref="P:System.Windows.Media.Animation.Timeline.DecelerationRatio"></see> exceed 1.</exception>
		</member>
		<member name="P:System.Windows.Media.Animation.Timeline.AutoReverse">
			<summary>Gets or sets a value that indicates whether the timeline plays in reverse after it completes a forward iteration.  </summary>
			<returns>true if the timeline plays in reverse at the end of each iteration; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Timeline.BeginTime">
			<summary>Gets or sets the time at which this <see cref="T:System.Windows.Media.Animation.Timeline"></see> should begin. </summary>
			<returns>The time at which this <see cref="T:System.Windows.Media.Animation.Timeline"></see> should begin, relative to its parent's <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime"></see>. If this timeline is a root timeline, the time is relative to its interactive begin time (the moment at which the timeline was triggered). This value may be positive, negative, or null; a null value means the timeline never plays. The default value is zero.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Timeline.DecelerationRatio">
			<summary>Gets or sets a value specifying the percentage of the timeline's <see cref="P:System.Windows.Media.Animation.Timeline.Duration"></see> spent decelerating the passage of time from its maximum rate to zero.</summary>
			<returns>A value between 0 and 1, inclusive, that specifies the percentage of the timeline's <see cref="P:System.Windows.Media.Animation.Timeline.Duration"></see> spent decelerating the passage of time from its maximum rate to zero. If the timeline's <see cref="P:System.Windows.Media.Animation.Timeline.AccelerationRatio"></see> property is also set, the sum of <see cref="P:System.Windows.Media.Animation.Timeline.DecelerationRatio"></see> and <see cref="P:System.Windows.Media.Animation.Timeline.AccelerationRatio"></see> must be less than or equal to 1. The default value is 0.</returns>
			<exception cref="T:System.ArgumentException"><see cref="P:System.Windows.Media.Animation.Timeline.DecelerationRatio"></see> is less than 0 or greater than 1.</exception>
			<exception cref="T:System.InvalidOperationException">The sum of <see cref="P:System.Windows.Media.Animation.Timeline.AccelerationRatio"></see> and <see cref="P:System.Windows.Media.Animation.Timeline.DecelerationRatio"></see> exceed 1.</exception>
		</member>
		<member name="P:System.Windows.Media.Animation.Timeline.Duration">
			<summary>Gets or sets the length of time for which this timeline plays, not counting repetitions. </summary>
			<returns>The timeline's simple duration: the amount of time this timeline takes to complete a single forward iteration. The default value is <see cref="P:System.Windows.Duration.Automatic"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Timeline.FillBehavior">
			<summary>Gets or sets a value that specifies how the <see cref="T:System.Windows.Media.Animation.Timeline"></see> behaves after it reaches the end of its active period. </summary>
			<returns>A value that specifies how the timeline behaves after it reaches the end of its active period but its parent is inside its active or hold period. The default value is <see cref="F:System.Windows.Media.Animation.FillBehavior.HoldEnd"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Timeline.RepeatBehavior">
			<summary>Gets or sets the repeating behavior of this timeline, either as an iteration <see cref="P:System.Windows.Media.Animation.RepeatBehavior.Count"></see> or a repeat <see cref="P:System.Windows.Media.Animation.RepeatBehavior.Duration"></see>. </summary>
			<returns>A value that describes either the number of times the timeline should repeat or the total length of all iterations of this timeline. The default value is a <see cref="T:System.Windows.Media.Animation.RepeatBehavior"></see> with a <see cref="P:System.Windows.Media.Animation.RepeatBehavior.Count"></see> of 1.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Timeline.SpeedRatio">
			<summary>Gets or sets the speed at which time progresses for this <see cref="T:System.Windows.Media.Animation.Timeline"></see>. </summary>
			<returns>A finite value greater than 0 that describes the speed at which time progresses for this timeline. This value is relative to the speed of the timeline's parent or, if this is a root timeline, the default timeline speed. The default value is 1.</returns>
			<exception cref="T:System.ArgumentException"><see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio"></see> is less than 0 or is not a finite value.</exception>
		</member>
		<member name="P:System.Windows.Media.Animation.Timeline.DesiredFrameRate">
			<summary>Gets or sets the desired frame rate for this timeline and its child timelines. </summary>
			<returns>A value greater than zero that is the desired frame rate for this timeline and its child timelines, or null if the system should automatically determine the frame rate. The default value is null. </returns>
		</member>
		<member name="T:System.Windows.Media.Animation.TimelineCollection">
			<summary>Represents a collection of <see cref="T:System.Windows.Media.Animation.Timeline"></see> objects. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.TimelineCollection.Add(System.Windows.Media.Animation.Timeline)">
			<summary>Inserts a new <see cref="T:System.Windows.Media.Animation.Timeline"></see> object into the <see cref="T:System.Windows.Media.Animation.TimelineCollection"></see>. </summary>
			<returns>The index position at which value was added.</returns>
			<param name="value">The object to add.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.TimelineCollection.Clear">
			<summary>Removes all items from the <see cref="T:System.Windows.Media.Animation.TimelineCollection"></see>. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.TimelineCollection.Contains(System.Windows.Media.Animation.Timeline)">
			<summary>Determines whether the <see cref="T:System.Windows.Media.Animation.TimelineCollection"></see> contains the specified <see cref="T:System.Windows.Media.Animation.Timeline"></see> object. </summary>
			<returns>true if value is found; otherwise, false.</returns>
			<param name="value">The object to locate.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.TimelineCollection.CopyTo(System.Windows.Media.Animation.Timeline[],System.Int32)">
			<summary>Copies the items of the <see cref="T:System.Windows.Media.Animation.TimelineCollection"></see> to the passed Timeline array, starting at the specified index position. </summary>
			<param name="array">The destination array.</param>
			<param name="index">The zero-based index position where copying begins.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.TimelineCollection.IndexOf(System.Windows.Media.Animation.Timeline)">
			<summary>Gets the zero-based index position of a Timeline object in the <see cref="T:System.Windows.Media.Animation.TimelineCollection"></see>. </summary>
			<returns>The index position of value within this list.  If not found, -1 is returned.</returns>
			<param name="value">The object to locate.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.TimelineCollection.Insert(System.Int32,System.Windows.Media.Animation.Timeline)">
			<summary> Inserts the specified Timeline object into this <see cref="T:System.Windows.Media.Animation.TimelineCollection"></see> at the specified index position. </summary>
			<param name="value">The object to insert.</param>
			<param name="index">The zero-based index position into which value is inserted.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.TimelineCollection.Remove(System.Windows.Media.Animation.Timeline)">
			<summary> Removes the first occurrence of a specified <see cref="T:System.Windows.Media.Animation.Timeline"></see> from this <see cref="T:System.Windows.Media.Animation.TimelineCollection"></see>. </summary>
			<param name="value">The object to remove.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.TimelineCollection.RemoveAt(System.Int32)">
			<summary> Removes the <see cref="T:System.Windows.Media.Animation.Timeline"></see> at the specified index position from this <see cref="T:System.Windows.Media.Animation.TimelineCollection"></see>. </summary>
			<param name="index">The zero-based index position of the item to remove.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.TimelineCollection.System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.TimelineCollection.System.Collections.IList.Insert(System.Int32,System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.TimelineCollection.System.Collections.IList.Remove(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code. </summary>
		</member>
		<member name="P:System.Windows.Media.Animation.TimelineCollection.Count">
			<summary> Gets the number of items contained in this <see cref="T:System.Windows.Media.Animation.TimelineCollection"></see>.  </summary>
			<returns>The number of items contained in this instance. </returns>
		</member>
		<member name="P:System.Windows.Media.Animation.TimelineCollection.Item(System.Int32)">
			<summary> Gets or sets an item at the specified index position within this <see cref="T:System.Windows.Media.Animation.TimelineCollection"></see>. </summary>
			<returns>The Timeline object at the index position.</returns>
			<param name="index">The index position to access.</param>
			<exception cref="ArgumentOutOfRangeException">index is less than zero or greater than or equal to the size of the <see cref="T:System.Windows.Media.Animation.TimelineCollection"></see>.</exception>
		</member>
		<member name="M:System.Windows.Media.Animation.TimelineCollection.Enumerator.System.IDisposable.Dispose">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="T:System.Windows.Media.Animation.TimelineGroup">
			<summary>Abstract class that, when implemented represents a <see cref="T:System.Windows.Media.Animation.Timeline"></see> that may contain a collection of child <see cref="T:System.Windows.Media.Animation.Timeline"></see> objects.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.TimelineGroup.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.TimelineGroup"></see> class, with default properties. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.TimelineGroup.CreateClock">
			<summary>Instantiates a new ClockGroup object, using this instance. </summary>
			<returns>A <see cref="T:System.Windows.Media.Animation.ClockGroup"></see> object.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.TimelineGroup.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.TimelineGroup.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.TimelineGroup.Children">
			<summary>Gets or sets the collection of direct child <see cref="T:System.Windows.Media.Animation.Timeline"></see> objects of the <see cref="T:System.Windows.Media.Animation.TimelineGroup"></see>.</summary>
			<returns>Child <see cref="T:System.Windows.Media.Animation.Timeline"></see> objects of the <see cref="T:System.Windows.Media.Animation.TimelineGroup"></see>. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.TimeSeekOrigin">
			<summary> Indicates a timeline position; used to specify the origin of a Seek  operation.  </summary>
		</member>
		<member name="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime">
			<summary> The offset is relative to the beginning of the timeline's activation period. This is equivalent to setting the absolute current time of a timeline.
    </summary>
		</member>
		<member name="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration">
			<summary> The offset is relative to the end of the timeline's simple duration. This has no effect if the duration of the timeline is not resolved. </summary>
		</member>
		<member name="T:System.Windows.Media.Animation.Vector3DAnimation">
			<summary>Animates the value of a Vector3D property using linear interpolation between two values. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Vector3DAnimation.#ctor">
			<summary> Initializes a new instance of the Vector3DAnimation class. </summary>
		</member>
		<member name="F:System.Windows.Media.Animation.Vector3DAnimation.ByProperty">
			<summary> Identifies the By GTMT#dependency property. </summary>
			<returns>The identifier for the By GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.Vector3DAnimation.FromProperty">
			<summary> Identifies the From GTMT#dependency property. </summary>
			<returns>The identifier for the From GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.Vector3DAnimation.ToProperty">
			<summary> Identifies the To GTMT#dependency property. </summary>
			<returns>The identifier for the To GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Vector3DAnimation.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Vector3DAnimation.GetCurrentValueCore(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.Vector3DAnimation.By">
			<summary> Gets or sets the total amount by which the animation changes its starting value. </summary>
			<returns>The total amount by which the animation changes its starting value.     The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Vector3DAnimation.From">
			<summary> Gets or sets the animation's starting value. </summary>
			<returns>The starting value of the animation. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Vector3DAnimation.IsAdditive">
			<summary> Gets a value that specifies whether the animation's output value is added to the base           value of the property being animated. </summary>
			<returns>true if the animation adds its output value         to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Vector3DAnimation.IsCumulative">
			<summary> Gets or sets a value that specifies whether the animation's value accumulates when it repeats. </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Vector3DAnimation.To">
			<summary> Gets or sets the animation's ending value. </summary>
			<returns>The ending value of the animation. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.Vector3DAnimationBase">
			<summary> Abstract class that represents an animated Vector3D value. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Vector3DAnimationBase.GetCurrentValueCore(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames">
			<summary> Animates the value of a Vector3D property along a set of KeyFrames over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.GetCurrentValueCore(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
			<summary> Provide a custom natural Duration when the Duration property is set to Automatic. </summary>
			<returns>If the last KeyFrame of this animation is a KeyTime, then this will be used as the NaturalDuration; otherwise it will be one second.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.IsAdditive">
			<summary>Gets a value that specifies whether the animation's output value is added to the base value of the property being animated.</summary>
			<returns>true if the animation adds its output value         to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.IsCumulative">
			<summary>Gets or sets a value that specifies whether the animation's value accumulates when it repeats. </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.KeyFrames">
			<summary> Gets or sets the collection of Vector3DKeyFrame objects that define the animation. </summary>
			<returns>The collection of Vector3DKeyFrame objects that define the animation. The default value is Vector3DKeyFrameCollection.Empty.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.Vector3DKeyFrame">
			<summary> Abstract class that, when implemented, defines a segment with its own target value and interpolation method for a Vector3DAnimationUsingKeyFrames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Vector3DKeyFrame.#ctor">
			<summary> Creates a new Vector3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Vector3DKeyFrame.#ctor(System.Windows.Media.Media3D.Vector3D)">
			<summary> Creates a new Vector3DKeyFrame. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Vector3DKeyFrame.#ctor(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Animation.KeyTime)">
			<summary> Creates a new DiscreteVector3DKeyFrame. </summary>
		</member>
		<member name="P:System.Windows.Media.Animation.Vector3DKeyFrame.KeyTime">
			<summary>Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.Vector3DKeyFrame.Value"></see> should be reached.  </summary>
			<returns>The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.Point3DKeyFrame.Value"></see> property. The default value is Uniform.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Vector3DKeyFrame.Value">
			<summary>Gets or sets the key frame's target value.  </summary>
			<returns>The key frame's target value, which is the value of this key frame at its specified <see cref="P:System.Windows.Media.Animation.Vector3DKeyFrame.KeyTime"></see>. The default value is 0.0.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.Vector3DKeyFrameCollection">
			<summary> This collection is used in conjunction with a KeyFrameVector3DAnimation to animate a Vector3D property value along a set of key frames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.Add(System.Windows.Media.Animation.Vector3DKeyFrame)">
			<summary> Adds a Vector3DKeyFrame to the end of the collection. </summary>
			<returns>The index at which the keyFrame was added.</returns>
			<param name="keyFrame">The Vector3DKeyFrame to add to the end of the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.Contains(System.Windows.Media.Animation.Vector3DKeyFrame)">
			<summary> Indicates whether the collection contains the specified Vector3DKeyFrame. </summary>
			<returns>true if the collection contains keyFrame; otherwise, false.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.GetEnumerator">
			<summary> Returns an enumerator that can iterate through the collection. </summary>
			<returns>An IEnumerator that can iterate through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.IndexOf(System.Windows.Media.Animation.Vector3DKeyFrame)">
			<summary> Searches for the specified Vector3DKeyFrame and returns the zero-based index of the first occurrence within the entire collection. </summary>
			<returns>The zero-based index of the first occurrence of keyFrame within the entire collection, if found; otherwise, -1.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.Insert(System.Int32,System.Windows.Media.Animation.Vector3DKeyFrame)">
			<summary> Inserts a Vector3DKeyFrame into a specific location in the collection. </summary>
			<param name="index">Position in the collection at which to insert the Vector3DKeyFrame.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.Vector3DKeyFrameCollection.IsSynchronized">
			<summary> Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
			<returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.Vector3DKeyFrameCollection.Item(System.Int32)">
			<summary> Gets or sets the Vector3DKeyFrame at the specified index. </summary>
			<returns>The Vector3DKeyFrame at the specified index.</returns>
			<param name="index">The zero-based index of the Vector3DKeyFrame to get or set.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.Vector3DKeyFrameCollection.SyncRoot">
			<summary> Gets an object that can be used to synchronize access to the collection. </summary>
			<returns>An object that can be used to synchronize access to the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.VectorAnimation">
			<summary> Animates the value of a Vector property between two target values using GTMT#linear interpolation over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorAnimation.#ctor">
			<summary> Initializes a new instance of the VectorAnimation class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorAnimation.#ctor(System.Windows.Vector,System.Windows.Duration)">
			<summary> Initializes a new instance of the VectorAnimation class that animates to the specified value over the specified duration. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorAnimation.#ctor(System.Windows.Vector,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the VectorAnimation class that animates to the specified value over the specified duration and has the specified fill behavior. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorAnimation.#ctor(System.Windows.Vector,System.Windows.Vector,System.Windows.Duration)">
			<summary> Initializes a new instance of the VectorAnimation class that animates from the specified starting value to the specified destination value over the specified duration. </summary>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorAnimation.#ctor(System.Windows.Vector,System.Windows.Vector,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
			<summary> Initializes a new instance of the VectorAnimation class that animates from the specified starting value to the specified destination value over the specified duration and has the specified fill behavior. </summary>
			<param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
			<param name="toValue">The destination value of the animation. </param>
			<param name="duration">The length of time the animation takes to play from start to finish, once. See the Duration property for more information.</param>
			<param name="fromValue">The starting value of the animation.</param>
		</member>
		<member name="F:System.Windows.Media.Animation.VectorAnimation.ByProperty">
			<summary> Identifies the By GTMT#dependency property. </summary>
			<returns>The identifier for the By GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.VectorAnimation.FromProperty">
			<summary> Identifies the From GTMT#dependency property. </summary>
			<returns>The identifier for the From GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Animation.VectorAnimation.ToProperty">
			<summary> Identifies the To GTMT#dependency property. </summary>
			<returns>The identifier for the To GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorAnimation.Clone">
			<summary> Returns a modifiable clone of the animation. </summary>
			<returns>A modifiable clone of the animation. The returned copy is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorAnimation.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorAnimation.GetCurrentValueCore(System.Windows.Vector,System.Windows.Vector,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.VectorAnimation.By">
			<summary> Gets or sets the total amount by which the animation changes its starting value. </summary>
			<returns>The total amount by which the animation changes its starting value.     The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.VectorAnimation.From">
			<summary> Gets or sets the animation's starting value. </summary>
			<returns>The starting value of the animation. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.VectorAnimation.IsAdditive">
			<summary> Gets a value that specifies whether the animation's output value is added to the base           value of the property being animated. </summary>
			<returns>true if the animation adds its output value         to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.VectorAnimation.IsCumulative">
			<summary> Gets or sets a value that specifies whether the animation's value accumulates when it repeats. </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.VectorAnimation.To">
			<summary> Gets or sets the animation's ending value. </summary>
			<returns>The ending value of the animation. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.VectorAnimationBase">
			<summary> Abstract class that, when implemented, animates a Thickness value. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorAnimationBase.Clone">
			<summary> Returns a modifiable copy of the animation. </summary>
			<returns>A modifiable copy of the animation. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorAnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorAnimationBase.GetCurrentValue(System.Windows.Vector,System.Windows.Vector,System.Windows.Media.Animation.AnimationClock)">
			<summary>Gets the current value of the animation.</summary>
			<param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
			<param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
			<param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock"></see> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime"></see> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress"></see> value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorAnimationBase.GetCurrentValueCore(System.Windows.Vector,System.Windows.Vector,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
		</member>
		<member name="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames">
			<summary> Animates the value of a Vector property along a set of KeyFrames over a specified Duration. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.Clone">
			<summary> Creates a copy of this KeyFrameVectorAnimation. </summary>
			<returns>The copy</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
			<summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames"></see> object.</summary>
			<param name="source">The <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames"></see> object to be cloned.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.GetCurrentValueCore(System.Windows.Vector,System.Windows.Vector,System.Windows.Media.Animation.AnimationClock)">
			<summary> Calculates the value this animation believes should be the current value for the property. </summary>
			<returns>The value this animation believes should be the current value for the property.</returns>
			<param name="defaultOriginValue">This value is the suggested origin value provided to the animation to be used if the animation does not have its own concept of a start value. If this animation is the first in a composition chain this value will be the snapshot value if one is available or the base property value if it is not; otherise this value will be the value returned by the previous animation in the chain with an animationClock that is not Stopped.</param>
			<param name="defaultDestinationValue">This value is the suggested destination value provided to the animation to be used if the animation does not have its own concept of an end value. This value will be the base value if the animation is in the first composition layer of animations on a property; otherwise this value will be the output value from the previous composition layer of animations for the property.</param>
			<param name="animationClock">This is the animationClock which can generate the CurrentTime or CurrentProgress value to be used by the animation to generate its output value.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
			<summary> Provide a custom natural Duration when the Duration property is set to Automatic. </summary>
			<returns>If the last KeyFrame of this animation is a KeyTime, then this will be used as the NaturalDuration; otherwise it will be one second.</returns>
			<param name="clock">The Clock whose natural duration is desired.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.IsAdditive">
			<summary>      Gets a value that specifies whether the animation's output value is added to the base value of the property being animated.      </summary>
			<returns>true if the animation adds its output value to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.IsCumulative">
			<summary>  Gets or sets a value that specifies whether the animation's value accumulates when it repeats. </summary>
			<returns>true if the animation accumulates its values when its RepeatBehavior property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.KeyFrames">
			<summary> Gets or sets the collection of VectorKeyFrame objects that define the animation. </summary>
			<returns>The collection of VectorKeyFrame objects that define the animation. The default value is VectorKeyFrameCollection.Empty.</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.VectorKeyFrame">
			<summary> Abstract class that, when implemented, defines a segment with its own target value and interpolation method for a VectorAnimationUsingKeyFrames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorKeyFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.VectorKeyFrame"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorKeyFrame.#ctor(System.Windows.Vector)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.VectorKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.VectorKeyFrame.Value"></see>. </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.VectorKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.VectorKeyFrame"></see> instance.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorKeyFrame.#ctor(System.Windows.Vector,System.Windows.Media.Animation.KeyTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.VectorKeyFrame"></see> class that has the specified target <see cref="P:System.Windows.Media.Animation.VectorKeyFrame.Value"></see> and <see cref="P:System.Windows.Media.Animation.VectorKeyFrame.KeyTime"></see>. </summary>
			<param name="value">The <see cref="P:System.Windows.Media.Animation.VectorKeyFrame.Value"></see> of the new <see cref="T:System.Windows.Media.Animation.VectorKeyFrame"></see> instance.</param>
			<param name="keyTime">The <see cref="P:System.Windows.Media.Animation.VectorKeyFrame.KeyTime"></see> of the new <see cref="T:System.Windows.Media.Animation.VectorKeyFrame"></see> instance.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.VectorKeyFrame.KeyTime">
			<summary> Gets or sets the time at which the key frame's target Value should be reached. </summary>
			<returns>The time at which the key frame's current value should be equal to its Value property. The default value is Uniform.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.VectorKeyFrame.Value">
			<summary> Gets or sets the key frame's target value. </summary>
			<returns>The key frame's target value, which is the value of this key frame at its specified KeyTime. The default value is (0,0).</returns>
		</member>
		<member name="T:System.Windows.Media.Animation.VectorKeyFrameCollection">
			<summary> Represents a collection of VectorKeyFrame objects. This collection is used as part of a VectorAnimationUsingKeyFrames to animate a Vector property value along a set of key frames. </summary>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.VectorKeyFrameCollection"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.Add(System.Windows.Media.Animation.VectorKeyFrame)">
			<summary> Adds a VectorKeyFrame to the end of the collection. </summary>
			<returns>The index at which the keyFrame was added.</returns>
			<param name="keyFrame">The VectorKeyFrame to add to the end of the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.Clone">
			<summary> Returns a modifiable copy of the collection and its contents. </summary>
			<returns>A modifiable copy of the collection and its contents. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.Contains(System.Windows.Media.Animation.VectorKeyFrame)">
			<summary> Indicates whether the collection contains the specified VectorKeyFrame. </summary>
			<returns>true if the collection contains keyFrame; otherwise, false.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.CreateInstanceCore">
			<summary>              Implementation of CreateInstanceCore.              </summary>
			<returns>The new Freezable.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.GetEnumerator">
			<summary> Returns an enumerator that can iterate through the collection. </summary>
			<returns>An IEnumerator that can iterate through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.IndexOf(System.Windows.Media.Animation.VectorKeyFrame)">
			<summary> Searches for the specified VectorKeyFrame and returns the zero-based index of the first occurrence within the entire collection. </summary>
			<returns>The zero-based index of the first occurrence of keyFrame within the entire collection, if found; otherwise, -1.</returns>
			<param name="keyFrame">The key frame to locate in the collection.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.VectorKeyFrameCollection.Count">
			<summary> Gets the number of key frames contained in the VectorKeyFrameCollection.  </summary>
			<returns>The number of key frames contained in the VectorKeyFrameCollection. </returns>
		</member>
		<member name="P:System.Windows.Media.Animation.VectorKeyFrameCollection.IsSynchronized">
			<summary> Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
			<returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Animation.VectorKeyFrameCollection.Item(System.Int32)">
			<summary> Gets or sets the VectorKeyFrame at the specified index. </summary>
			<returns>The VectorKeyFrame at the specified index.</returns>
			<param name="index">The zero-based index of the VectorKeyFrame to get or set.</param>
		</member>
		<member name="P:System.Windows.Media.Animation.VectorKeyFrameCollection.SyncRoot">
			<summary> Gets an object that can be used to synchronize access to the collection. </summary>
			<returns>An object that can be used to synchronize access to the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Converters.PointCollectionValueSerializer.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.PointCollectionValueSerializer"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Converters.TransformValueSerializer.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.TransformValueSerializer"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Converters.VectorCollectionValueSerializer.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.VectorCollectionValueSerializer"></see> class.</summary>
		</member>
		<member name="T:System.Windows.Media.Effects.BevelBitmapEffect">
			<summary>Creates a bevel which raises the surface of the image according to a specified curve.</summary>
		</member>
		<member name="M:System.Windows.Media.Effects.BevelBitmapEffect.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.BevelBitmapEffect"></see> class.</summary>
		</member>
		<member name="F:System.Windows.Media.Effects.BevelBitmapEffect.BevelWidthProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Effects.BevelBitmapEffect.BevelWidth"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Effects.BevelBitmapEffect.BevelWidth"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Effects.BevelBitmapEffect.EdgeProfileProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Effects.BevelBitmapEffect.EdgeProfile"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Effects.BevelBitmapEffect.EdgeProfile"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Effects.BevelBitmapEffect.LightAngleProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Effects.BevelBitmapEffect.LightAngle"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Effects.BevelBitmapEffect.LightAngle"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Effects.BevelBitmapEffect.ReliefProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Effects.BevelBitmapEffect.Relief"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Effects.BevelBitmapEffect.Relief"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Effects.BevelBitmapEffect.SmoothnessProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Effects.BevelBitmapEffect.Smoothness"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Effects.BevelBitmapEffect.Smoothness"></see> GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.Effects.BevelBitmapEffect.Clone">
			<summary>Shadows inherited Clone() with a strongly typed version for convenience.</summary>
			<returns>A value of type <see cref="T:System.Windows.Media.Effects.BevelBitmapEffect"></see>.</returns>
		</member>
		<member name="M:System.Windows.Media.Effects.BevelBitmapEffect.CloneCurrentValue">
			<summary>Shadows inherited CloneCurrentValue() with a strongly typed version for convenience.</summary>
			<returns>A value of type <see cref="T:System.Windows.Media.Effects.BevelBitmapEffect"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Effects.BevelBitmapEffect.BevelWidth">
			<summary>Gets or sets the width of the bevel.</summary>
			<returns>The width of the bevel. The default value is 5.</returns>
		</member>
		<member name="P:System.Windows.Media.Effects.BevelBitmapEffect.EdgeProfile">
			<summary>Gets or sets the curve of the bevel.</summary>
			<returns>The curve of the bevel. The default value is <see cref="F:System.Windows.Media.Effects.EdgeProfile.Linear"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Effects.BevelBitmapEffect.LightAngle">
			<summary>Gets or sets the direction the "virtual light" is coming from that creates the shadows of the bevel.</summary>
			<returns>The direction of the virtual light source. The valid range is from 0-360 (degrees) with 0 specifying the right-hand side of the object and successive values moving counter-clockwise around the object. The shadows of the bevel are on the opposite side of where the light is cast. The default value is 135.</returns>
		</member>
		<member name="P:System.Windows.Media.Effects.BevelBitmapEffect.Relief">
			<summary>Gets or sets the height of the relief of the bevel. </summary>
			<returns>The height of the relief of the bevel. The valid range is between 0 and 1 with 1 having the most relief (darkest shadows). The default value is 0.3.</returns>
		</member>
		<member name="P:System.Windows.Media.Effects.BevelBitmapEffect.Smoothness">
			<summary>Gets or sets how smooth the shadows of the bevel are. </summary>
			<returns>Value indicating how smooth the bevel shadows are. The valid range is between 0 and 1 with 1 being the smoothest. The default value is 0.2.</returns>
		</member>
		<member name="T:System.Windows.Media.Effects.BitmapEffect">
			<summary>Abstract class that defines a bitmap effect. Derived classes define effects that can be applied to a <see cref="T:System.Windows.Media.Visual"></see> such as a <see cref="T:System.Windows.Controls.Button"></see> or an <see cref="T:System.Windows.Controls.Image"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffect.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.BitmapEffect"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffect.Clone">
			<summary>Returns a modifiable clone of the bitmap effect.</summary>
			<returns>A modifiable clone of the bitmap effect. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The clone's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffect.CloneCurrentValue">
			<summary>Returns a non-animated version of the bitmap effect. The returned effect represents the current object's state at the time this method was called.</summary>
			<returns>A non-animated copy of this instance that represents its current value. The returned <see cref="T:System.Windows.Media.Effects.BitmapEffect"></see> has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffect.CreateUnmanagedEffect">
			<summary>When overridden in a derived class, creates a clone of the unmanaged effect.</summary>
			<returns>A handle to the unmanaged effect clone.</returns>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffect.GetOutput(System.Windows.Media.Effects.BitmapEffectInput)">
			<summary>Returns the <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> with the effect applied to the <see cref="T:System.Windows.Media.Effects.BitmapEffectInput"></see>.</summary>
			<returns>The <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> with the effect applied to the input.</returns>
			<param name="input">The input to apply the effect to.</param>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffect.SetValue(System.Runtime.InteropServices.SafeHandle,System.String,System.Object)">
			<summary>Sets the specified property to the given value.</summary>
			<param name="effect">The handle to the effect that contains the property to change.</param>
			<param name="value">The value to use to set the property.</param>
			<param name="propertyName">The name of the property to change.</param>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle)">
			<summary>When overridden in a derived class, updates the property states of the unmanaged properties.</summary>
			<param name="unmanagedEffect">The effect in which to update the properties.</param>
		</member>
		<member name="T:System.Windows.Media.Effects.BitmapEffectCollection">
			<summary>Represents a collection of <see cref="T:System.Windows.Media.Effects.BitmapEffect"></see> objects. This collection is used as part of a <see cref="T:System.Windows.Media.Effects.BitmapEffectGroup"></see> to apply multiple bitmap effects to visual content.</summary>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffectCollection.#ctor">
			<summary>Initializes a new instance of the BitmapEffectCollection class.</summary>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffectCollection.Add(System.Windows.Media.Effects.BitmapEffect)">
			<summary>Adds a <see cref="T:System.Windows.Media.Effects.BitmapEffect"></see> at the end of the collection.</summary>
			<param name="value">The <see cref="T:System.Windows.Media.Effects.BitmapEffect"></see> to add to the end of the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffectCollection.Clear">
			<summary>Removes all effects from the collection.</summary>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffectCollection.Clone">
			<summary>Returns a modifiable clone of this instance.</summary>
			<returns>A modifiable clone of this instance. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The copy's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffectCollection.Contains(System.Windows.Media.Effects.BitmapEffect)">
			<summary>Indicates whether the collection contains the specified <see cref="T:System.Windows.Media.Effects.BitmapEffect"></see>.</summary>
			<returns>true if the collection contains value; otherwise, false.</returns>
			<param name="value">The bitmap effect to locate in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffectCollection.CopyTo(System.Windows.Media.Effects.BitmapEffect[],System.Int32)">
			<summary>Copies all of the BitmapEffects in the collection to an array of BitmapEffects.</summary>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffectCollection.GetEnumerator">
			<summary>Returns an enumerator that can iterate through the collection.</summary>
			<returns>An <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection.Enumerator"></see> that can iterate through the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffectCollection.System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
			<summary>This type or member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffectCollection.System.Collections.IList.Insert(System.Int32,System.Object)">
			<summary>This type or member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffectCollection.System.Collections.IList.Remove(System.Object)">
			<summary>This type or member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Effects.BitmapEffectCollection.Count">
			<summary>Gets the number of effects contained in the <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection"></see>.</summary>
			<returns>The number of effects contained in the <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Effects.BitmapEffectCollection.Item(System.Int32)">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.Effects.BitmapEffect"></see> at the specified index.</summary>
			<returns>The <see cref="T:System.Windows.Media.Effects.BitmapEffect"></see> at the specified index.</returns>
			<param name="index">The zero-based index of the <see cref="T:System.Windows.Media.Effects.BitmapEffect"></see> to get or set.</param>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffectCollection.Enumerator.System.IDisposable.Dispose">
			<summary>This type or member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="T:System.Windows.Media.Effects.BitmapEffectGroup">
			<summary>Represents a group of <see cref="T:System.Windows.Media.Effects.BitmapEffect"></see> objects which is used to apply multiple effects to a visible object.</summary>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffectGroup.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.BitmapEffectGroup"></see> class.</summary>
		</member>
		<member name="T:System.Windows.Media.Effects.BitmapEffectInput">
			<summary>Applies the <see cref="T:System.Windows.Media.Effects.BitmapEffect"></see> given in the <see cref="P:System.Windows.UIElement.BitmapEffect"></see> property to a specified region of the visual object.</summary>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffectInput.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.BitmapEffectInput"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffectInput.#ctor(System.Windows.Media.Imaging.BitmapSource)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.BitmapEffectInput"></see> class using the <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> as the source for this input.</summary>
			<param name="input">The bitmap source to be used by this input object.</param>
		</member>
		<member name="F:System.Windows.Media.Effects.BitmapEffectInput.AreaToApplyEffectProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Effects.BitmapEffectInput.AreaToApplyEffect"></see> GTMT#dependency property.</summary>
		</member>
		<member name="F:System.Windows.Media.Effects.BitmapEffectInput.AreaToApplyEffectUnitsProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Effects.BitmapEffectInput.AreaToApplyEffectUnits"></see> GTMT#dependency property.</summary>
		</member>
		<member name="F:System.Windows.Media.Effects.BitmapEffectInput.InputProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Effects.BitmapEffectInput.Input"></see> GTMT#dependency property.</summary>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffectInput.Clone">
			<summary>Returns a modifiable clone of the bitmap effect input.</summary>
			<returns>A modifiable clone of the bitmap effect input.</returns>
		</member>
		<member name="M:System.Windows.Media.Effects.BitmapEffectInput.CloneCurrentValue">
			<summary>Returns a non-animated version of the bitmap effect input. The returned input represents the current object's state at the time this method was called.</summary>
			<returns>A non-animated copy of this instance that represents its current value. The returned <see cref="T:System.Windows.Media.Effects.BitmapEffectInput"></see> has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="P:System.Windows.Media.Effects.BitmapEffectInput.AreaToApplyEffect">
			<summary>Gets or sets a rectangular region on the visual to which the <see cref="T:System.Windows.Media.Effects.BitmapEffect"></see> is applied.</summary>
			<returns>The rectangular region of the visual to which the effect is applied. The default value is <see cref="P:System.Windows.Rect.Empty"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Effects.BitmapEffectInput.AreaToApplyEffectUnits">
			<summary>Gets or sets the method in which to interpret the rectangle provided by <see cref="P:System.Windows.Media.Effects.BitmapEffectInput.AreaToApplyEffect"></see>.</summary>
			<returns>The method in which to interpret the rectangle provided by the <see cref="P:System.Windows.Media.Effects.BitmapEffectInput.AreaToApplyEffectUnits"></see> property. The default value is <see cref="F:System.Windows.Media.BrushMappingMode.RelativeToBoundingBox"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Effects.BitmapEffectInput.ContextInputSource">
			<summary>Gets a value representing the <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> that is derived from the context.</summary>
			<returns>The <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> that is derived from the context.</returns>
		</member>
		<member name="P:System.Windows.Media.Effects.BitmapEffectInput.Input">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> that is used for the input for the object.</summary>
			<returns>The <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> that is used as the input for the object. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.Effects.BlurBitmapEffect">
			<summary>Simulates looking at an object through an out-of-focus lens.</summary>
		</member>
		<member name="M:System.Windows.Media.Effects.BlurBitmapEffect.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.BlurBitmapEffect"></see> class.</summary>
		</member>
		<member name="F:System.Windows.Media.Effects.BlurBitmapEffect.KernelTypeProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Effects.BlurBitmapEffect.KernelType"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Effects.BlurBitmapEffect.KernelType"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Effects.BlurBitmapEffect.RadiusProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Effects.BlurBitmapEffect.Radius"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Effects.BlurBitmapEffect.KernelType"></see> GTMT#dependency property.</returns>
		</member>
		<member name="P:System.Windows.Media.Effects.BlurBitmapEffect.KernelType">
			<summary>Gets or sets the type of blur kernel to use for the <see cref="T:System.Windows.Media.Effects.BlurBitmapEffect"></see>.</summary>
			<returns>The type of blur kernel. The default value is <see cref="F:System.Windows.Media.Effects.KernelType.Gaussian"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Effects.BlurBitmapEffect.Radius">
			<summary>Gets or sets the radius used in the blur kernel. A larger radius implies more blurring.</summary>
			<returns>The radius used in the blur kernel, in DIU (1/96 of an inch). The default value is 5.</returns>
		</member>
		<member name="T:System.Windows.Media.Effects.DropShadowBitmapEffect">
			<summary>Applies a shadow behind a visual object at a slight offset. The offset is determined by mimicking a casting shadow from an imaginary light source.</summary>
		</member>
		<member name="M:System.Windows.Media.Effects.DropShadowBitmapEffect.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.DropShadowBitmapEffect"></see> class.</summary>
		</member>
		<member name="F:System.Windows.Media.Effects.DropShadowBitmapEffect.ColorProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Color"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Color"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Effects.DropShadowBitmapEffect.DirectionProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Direction"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Direction"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Effects.DropShadowBitmapEffect.NoiseProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Noise"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Noise"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Effects.DropShadowBitmapEffect.OpacityProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Opacity"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Opacity"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Effects.DropShadowBitmapEffect.ShadowDepthProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.ShadowDepth"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.ShadowDepth"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Effects.DropShadowBitmapEffect.SoftnessProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Softness"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Softness"></see> GTMT#dependency property.</returns>
		</member>
		<member name="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Color">
			<summary>Gets or sets the color of the shadow.</summary>
			<returns>The color of the shadow. Note that the alpha value of the <see cref="T:System.Windows.Media.Color"></see> structure is ignored by this property. The default value is FF000000 (black). </returns>
		</member>
		<member name="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Direction">
			<summary>Get or set angle the shadow is cast.</summary>
			<returns>The angle the shadow is cast. The valid range of values is 0-360. The value 0 puts the direction immediately to the right of the object. Subsequent values move the direction around the object in a counter-clockwise direction. For example, a value of 90 indicates the shadow is cast directly upward from the object; a value of 180 is cast directly to the left of the object, etc. The default value is 315.</returns>
		</member>
		<member name="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Noise">
			<summary>Gets or sets the noise level (how grainy) the shadow  is.</summary>
			<returns>The noise level of the shadow. The valid range of values is 0-1 with 0 specifying no noise and a value of 1 specifying maximum noise. A value of 0.5 indicates 50% noise, a value of 0.75 indicates 75% noise, etc. The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Opacity">
			<summary>Gets or sets the degree of opacity of the shadow.</summary>
			<returns>The value of the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Opacity"></see> property is expressed as a value between 0 and 1. A value of 0 indicates that the halo glow is completely transparent, while a value of 1 indicates that the glow is completely opaque. A value of 0.5 indicates the glow is 50% opaque, a value of 0.725 indicates the glow is 72.5% opaque, and so on. Values less than 0 are treated as 0, while values greater than 1 are treated as 1. The default value is 1.</returns>
		</member>
		<member name="P:System.Windows.Media.Effects.DropShadowBitmapEffect.ShadowDepth">
			<summary>Gets or sets the distance between the plane of the object casting the shadow and the shadow plane.</summary>
			<returns>The distance between the plane of the object casting the shadow and the shadow plane measured in DIU (1/96 of an inch). The valid range of values is 0-300. The default value is 5.</returns>
		</member>
		<member name="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Softness">
			<summary>Gets or sets how soft the shadow is. A higher value indicate </summary>
			<returns>How soft the shadow is. The valid range of values is between 0-1 with 0.0 specifying no softness (a sharp shadow) and a value of 1.0 specifying maximum softness. A value of 0.5 indicates 50% softness, a value of 0.75 indicates 75% softness, etc. The default value is 0.5. </returns>
		</member>
		<member name="T:System.Windows.Media.Effects.EdgeProfile">
			<summary>Specifies the type of curve to apply to the edge of a GTMT#bitmap.</summary>
		</member>
		<member name="F:System.Windows.Media.Effects.EdgeProfile.BulgedUp">
			<summary>An edge that curves up and then down, like a ridge. </summary>
		</member>
		<member name="F:System.Windows.Media.Effects.EdgeProfile.CurvedIn">
			<summary>A concave edge that curves in.</summary>
		</member>
		<member name="F:System.Windows.Media.Effects.EdgeProfile.CurvedOut">
			<summary>A convex edge that curves out.</summary>
		</member>
		<member name="F:System.Windows.Media.Effects.EdgeProfile.Linear">
			<summary>An edge that is a straight line. </summary>
		</member>
		<member name="T:System.Windows.Media.Effects.EmbossBitmapEffect">
			<summary>Creates a bump mapping of the visual object to give the impression of depth and texture from an artificial light source.</summary>
		</member>
		<member name="M:System.Windows.Media.Effects.EmbossBitmapEffect.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.EmbossBitmapEffect"></see> class.</summary>
		</member>
		<member name="F:System.Windows.Media.Effects.EmbossBitmapEffect.LightAngleProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Effects.EmbossBitmapEffect.LightAngle"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Effects.EmbossBitmapEffect.LightAngle"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Effects.EmbossBitmapEffect.ReliefProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Effects.EmbossBitmapEffect.Relief"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Effects.EmbossBitmapEffect.Relief"></see> GTMT#dependency property.</returns>
		</member>
		<member name="P:System.Windows.Media.Effects.EmbossBitmapEffect.LightAngle">
			<summary>Gets or sets the direction the artificial light is cast upon the embossed object.</summary>
			<returns>The direction the artificial light is cast upon the embossed object. The valid range is from 0-360 (degrees) with 0 specifying the right-hand side of the object and successive values moving counter-clockwise around the object. The default value is 45.</returns>
		</member>
		<member name="P:System.Windows.Media.Effects.EmbossBitmapEffect.Relief">
			<summary>Gets or sets the amount of relief of the emboss.</summary>
			<returns>The amount of relief of the emboss. The valid range of values is 0-1 with 0 having the least relief and 1 having the most. The default value is 0.44.</returns>
		</member>
		<member name="T:System.Windows.Media.Effects.KernelType">
			<summary>The kernel used to create the effect.</summary>
		</member>
		<member name="F:System.Windows.Media.Effects.KernelType.Box">
			<summary>A simple blur created with a square distribution curve. Although this kernel does not create as smooth a blur as <see cref="F:System.Windows.Media.Effects.KernelType.Gaussian"></see>, it should be used when better performance is desired. This is because <see cref="F:System.Windows.Media.Effects.KernelType.Box"></see> uses fewer calculations then <see cref="F:System.Windows.Media.Effects.KernelType.Gaussian"></see>.</summary>
		</member>
		<member name="F:System.Windows.Media.Effects.KernelType.Gaussian">
			<summary>A distributed curve. This kernel should be used to create a smooth distribution for a blur. However, it requires more calculations then a <see cref="F:System.Windows.Media.Effects.KernelType.Box"></see> kernel and is therefore not as good for performance.</summary>
		</member>
		<member name="T:System.Windows.Media.Effects.OuterGlowBitmapEffect">
			<summary>Creates a halo of color around objects or areas of color.</summary>
		</member>
		<member name="M:System.Windows.Media.Effects.OuterGlowBitmapEffect.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.OuterGlowBitmapEffect"></see> class.</summary>
		</member>
		<member name="F:System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowColorProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowColor"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowColor"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowSizeProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowSize"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowSize"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Effects.OuterGlowBitmapEffect.NoiseProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.Noise"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.Noise"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Effects.OuterGlowBitmapEffect.OpacityProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.Opacity"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.Opacity"></see> GTMT#dependency property.</returns>
		</member>
		<member name="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowColor">
			<summary>Gets or sets the color of the halo glow.</summary>
			<returns>The color of the halo glow. The default value is white. </returns>
		</member>
		<member name="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowSize">
			<summary>Gets or sets the thickness of the halo glow.</summary>
			<returns>The thickness of the halo glow in DIU (1/96 of an inch). The valid range for values is 1-199. The default value is 20.</returns>
		</member>
		<member name="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.Noise">
			<summary>Gets or sets the noise level (how grainy) the halo glow is.</summary>
			<returns>The noise level of the halo glow. The valid range of values is 0.0-1.0 with 0.0 specifying no noise and a value of 1.0 specifying maximum noise. A value of 0.5 indicates 50% noise, a value of 0.75 indicates 75% noise, etc. The default value is 0.0.</returns>
		</member>
		<member name="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.Opacity">
			<summary>Gets or sets the degree of opacity of the halo glow.</summary>
			<returns>The value of the <see cref="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.Opacity"></see> property is expressed as a value between 0 and 1. A value of 0 indicates that the halo glow is completely transparent, while a value of 1 indicates that the glow is completely opaque. A value of 0.5 indicates the glow is 50% opaque, a value of 0.725 indicates the glow is 72.5% opaque, and so on. Values less than 0 are treated as 0, while values greater than 1 are treated as 1. The default value is 1.</returns>
		</member>
		<member name="T:System.Windows.Media.Imaging.BitmapCacheOption">
			<summary>Specifies how a GTMT#bitmap image takes advantage of memory caching.</summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.BitmapCacheOption.Default">
			<summary>Caches the entire image into memory. This is the default value.</summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.BitmapCacheOption.None">
			<summary>Do not create a memory store. All requests for the image are filled directly by the image file.</summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.BitmapCacheOption.OnDemand">
			<summary>Creates a memory store for requested data only. The first request loads the image directly; subsequent requests are filled from the cache.</summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.BitmapCacheOption.OnLoad">
			<summary>Caches the entire image into memory at load time. All requests for image data are filled from the memory store.</summary>
		</member>
		<member name="T:System.Windows.Media.Imaging.BitmapCodecInfo">
			<summary>Provides information about a given GTMT#codec. This is an abstract class.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapCodecInfo.#ctor">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.BitmapCodecInfo"></see>.</summary>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.Author">
			<summary>Gets a value that identifies the author of a GTMT#codec.</summary>
			<returns>The author of the GTMT#codec.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.ContainerFormat">
			<summary>Gets a value that identifies the container format for a GTMT#codec.</summary>
			<returns>The container format of the GTMT#codec.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.DeviceManufacturer">
			<summary>Gets a value that identifies the device manufacturer of a GTMT#codec.</summary>
			<returns>The device manufacturer of the GTMT#codec.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.DeviceModels">
			<summary>Gets a value that identifies the device models of a GTMT#codec.</summary>
			<returns>The device model of the GTMT#codec.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.FileExtensions">
			<summary>Gets a value that identifies the file extensions associated with this GTMT#codec.</summary>
			<returns>The file extensions associated with this GTMT#codec.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.FriendlyName">
			<summary>Gets a value that represents the friendly name of a GTMT#codec.</summary>
			<returns>The friendly name of the GTMT#codec.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.MimeTypes">
			<summary>Gets a value that identifies the TLA#tla_mime associated with this GTMT#codec.</summary>
			<returns>The TLA#tla_mime types associated with this GTMT#codec.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.SpecificationVersion">
			<summary>Gets a value that identifies the specification version of a GTMT#codec.</summary>
			<returns>The specification version of this GTMT#codec.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.SupportsAnimation">
			<summary>Gets a value that indicates whether this GTMT#codec supports animation.</summary>
			<returns>true if this GTMT#codec supports animation; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.SupportsLossless">
			<summary>Gets a value that indicates whether this GTMT#codec supports GTMT#lossless of images.</summary>
			<returns>true if this GTMT#codec supports GTMT#lossless of images; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.SupportsMultipleFrames">
			<summary>Gets a value that identifies whether this GTMT#codec supports multiple frames.</summary>
			<returns>true if this codec supports multiple frames; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.Version">
			<summary>Gets a value that identifies the version of a GTMT#codec.</summary>
			<returns>The version of this GTMT#codec.</returns>
		</member>
		<member name="T:System.Windows.Media.Imaging.BitmapCreateOptions">
			<summary>Specifies initialization options for GTMT#bitmap images.</summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.BitmapCreateOptions.DelayCreation">
			<summary>Causes a <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see> object to delay initialization until it is necessary. This is useful when dealing with collections of images.</summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.BitmapCreateOptions.IgnoreColorProfile">
			<summary>Causes a <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> to ignore an embedded color profile.</summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.BitmapCreateOptions.IgnoreImageCache">
			<summary>Loads images without using an existing image cache. This option should only be selected when images in a cache need to be refreshed.</summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.BitmapCreateOptions.None">
			<summary>No <see cref="T:System.Windows.Media.Imaging.BitmapCreateOptions"></see> are specified. This is the default value.</summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.BitmapCreateOptions.PreservePixelFormat">
			<summary>Ensures that the <see cref="T:System.Windows.Media.PixelFormat"></see> a file is stored in is the same as it is loaded to.</summary>
		</member>
		<member name="T:System.Windows.Media.Imaging.BitmapDecoder">
			<summary>Represents a container for GTMT#bitmap frames, each GTMT#bitmap frame is a <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>. This abstract class provides a base set of functionality for all derived decoder objects.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapDecoder.#ctor">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.BitmapDecoder"></see>.</summary>
		</member>
		<member name="E:System.Windows.Media.Imaging.BitmapDecoder.DownloadCompleted">
			<summary>Occurs when a <see cref="T:System.Windows.Media.Imaging.BitmapDecoder"></see> has finished downloading GTMT#bitmap content.</summary>
		</member>
		<member name="E:System.Windows.Media.Imaging.BitmapDecoder.DownloadProgress">
			<summary>Occurs when a <see cref="T:System.Windows.Media.Imaging.BitmapDecoder"></see> has made progress downloading GTMT#bitmap content.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapDecoder.Create(System.IO.Stream,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
			<summary>Creates a <see cref="T:System.Windows.Media.Imaging.BitmapDecoder"></see> from a <see cref="T:System.IO.Stream"></see> with the specified <see cref="T:System.Windows.Media.Imaging.BitmapCreateOptions"></see> and <see cref="T:System.Windows.Media.Imaging.BitmapCacheOption"></see>.</summary>
			<returns>A new <see cref="T:System.Windows.Media.Imaging.BitmapDecoder"></see>.</returns>
			<param name="createOptions">Identifies the <see cref="T:System.Windows.Media.Imaging.BitmapCreateOptions"></see> for this decoder.</param>
			<param name="bitmapStream">The file stream that identifies the bitmap to decode.</param>
			<param name="cacheOption">Identifies the <see cref="T:System.Windows.Media.Imaging.BitmapCacheOption"></see> for this decoder.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapDecoder.Create(System.Uri,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
			<summary>Creates a <see cref="T:System.Windows.Media.Imaging.BitmapDecoder"></see> from a <see cref="T:System.Uri"></see> with the specified <see cref="T:System.Windows.Media.Imaging.BitmapCreateOptions"></see> and <see cref="T:System.Windows.Media.Imaging.BitmapCacheOption"></see>. </summary>
			<returns>A new <see cref="T:System.Windows.Media.Imaging.BitmapDecoder"></see>.</returns>
			<param name="createOptions">Identifies the <see cref="T:System.Windows.Media.Imaging.BitmapCreateOptions"></see> for this decoder.</param>
			<param name="bitmapUri">The <see cref="T:System.Uri"></see> of the GTMT#bitmap to decode.</param>
			<param name="cacheOption">Identifies the <see cref="T:System.Windows.Media.Imaging.BitmapCacheOption"></see> for this decoder.</param>
			<exception cref="T:System.IO.FileFormatException">Occurs when bitmapUri specifies a class ID of an unsupported format type.</exception>
			<exception cref="T:System.ArgumentNullException">Occurs when bitmapUri is null.</exception>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapDecoder.CreateInPlaceBitmapMetadataWriter">
			<summary>Creates an instance of <see cref="T:System.Windows.Media.Imaging.InplaceBitmapMetadataWriter"></see>, which can be used to update the GTMT#metadata of a GTMT#bitmap.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.InplaceBitmapMetadataWriter"></see>.</returns>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapDecoder.ToString">
			<summary>Converts the current value of a <see cref="T:System.Windows.Media.Imaging.BitmapDecoder"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the <see cref="T:System.Windows.Media.Imaging.BitmapDecoder"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapDecoder.CodecInfo">
			<summary>Gets information that describes this GTMT#codec. </summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapCodecInfo"></see>. This property has no default value.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapDecoder.ColorContexts">
			<summary>Gets a value that represents the color profile associated with a GTMT#bitmap, if one is defined.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.ColorContext"></see> that represents the embedded color profile of the bitmap. If no color profile has been defined, this property returns null. This property has no default value.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapDecoder.Frames">
			<summary>Gets the content of an individual frame within a GTMT#bitmap.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>. This property has no default value.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapDecoder.IsDownloading">
			<summary>Gets a value that indicates if the decoder is currently downloading content.</summary>
			<returns>true if the decoder is downloading content; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapDecoder.Metadata">
			<summary>Gets an instance of <see cref="T:System.Windows.Media.Imaging.BitmapMetadata"></see> that represents the global GTMT#metadata associated with this bitmap, if GTMT#metadata is defined.</summary>
			<returns>An instance of BitmapMetadata that represents global GTMT#metadata associated with a GTMT#bitmap. If no GTMT#metadata is defined, this property returns null. This property has no default value.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapDecoder.Palette">
			<summary>Gets the <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see> associated with this decoder. </summary>
			<returns>The <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see> associated with this decoder. If the GTMT#bitmap has no palette, null is returned. This property has no default value.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapDecoder.Preview">
			<summary>Gets a <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> that represents the global preview of this GTMT#bitmap, if one is defined.</summary>
			<returns>A <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> that represents the global preview of the GTMT#bitmap. If no preview is defined, this property returns null. This property has no default value.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapDecoder.Thumbnail">
			<summary>Gets a <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> that represents the GTMT#thumbnail of the GTMT#bitmap, if one is defined. </summary>
			<returns>A <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> that represents a GTMT#thumbnail of the GTMT#bitmap. If no thumbnail is defined, this property returns null. This property has no default value.</returns>
		</member>
		<member name="T:System.Windows.Media.Imaging.BitmapEncoder">
			<summary>Represents a collection of <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> frames, each potentially having its own GTMT#metadata and GTMT#thumbnail image. This is an abstract class.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapEncoder.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.BitmapEncoder"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapEncoder.Create(System.Guid)">
			<summary>Creates a <see cref="T:System.Windows.Media.Imaging.BitmapEncoder"></see> from a <see cref="T:System.Guid"></see> that identifies the desired GTMT#bitmap format. </summary>
			<returns>A <see cref="T:System.Windows.Media.Imaging.BitmapEncoder"></see> that can encode to the specified containerFormat.</returns>
			<param name="containerFormat">Identifies the desired GTMT#bitmap encoding format.</param>
			<exception cref="T:System.ArgumentException">Occurs when containerFormat is Empty.</exception>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapEncoder.Save(System.IO.Stream)">
			<summary>Encodes a GTMT#bitmap image to a specified <see cref="T:System.IO.Stream"></see>.</summary>
			<param name="stream">Identifies the file stream that this GTMT#bitmap is encoded to.</param>
			<exception cref="T:System.NotSupportedException">Occurs if the <see cref="P:System.Windows.Media.Imaging.BitmapEncoder.Frames"></see> value that is passed to the encoder is null.</exception>
			<exception cref="T:System.InvalidOperationException">Occurs if a GTMT#bitmap has already been encoded.</exception>
			<exception cref="T:System.NotSupportedException">Occurs if the <see cref="P:System.Windows.Media.Imaging.BitmapEncoder.Frames"></see> count is less than or equal to zero.</exception>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapEncoder.CodecInfo">
			<summary>Gets information that describes this GTMT#codec. </summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapCodecInfo"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapEncoder.ColorContexts">
			<summary>Gets or sets a value that represents the color profile that is associated with this encoder.</summary>
			<returns>The <see cref="T:System.Windows.Media.ColorContext"></see> that represents the color profile that this encoder uses.</returns>
			<exception cref="T:System.ArgumentNullException">Occurs if the <see cref="T:System.Windows.Media.ColorContext"></see> value that is passed to the encoder is null.</exception>
			<exception cref="T:System.InvalidOperationException">Occurs if the encoder does not support color profiles.</exception>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapEncoder.Frames">
			<summary>Gets or sets the content of an individual frame within a GTMT#bitmap.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</returns>
			<exception cref="T:System.ArgumentNullException">Occurs if the <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see> value that is passed to the encoder is null.</exception>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapEncoder.Metadata">
			<summary>Gets or sets the GTMT#metadata that will be associated with this GTMT#bitmap during encoding.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapMetadata"></see>.</returns>
			<exception cref="T:System.ArgumentNullException">Occurs if the GTMT#metadata value that is passed to the encoder is null.</exception>
			<exception cref="T:System.ArgumentNullException">Occurs if an attempt is made to write GTMT#metadata in an incompatible format.</exception>
			<exception cref="T:System.InvalidOperationException">Occurs if the encoder does not support global GTMT#metadata.</exception>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapEncoder.Palette">
			<summary>Gets or sets a value that represents the <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see> of an encoded GTMT#bitmap. </summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
			<exception cref="T:System.ArgumentNullException">Occurs if the <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see> value that is passed to the encoder is null.</exception>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapEncoder.Preview">
			<summary>Gets or sets a <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> that represents the global preview of a GTMT#bitmap, if there is one. </summary>
			<returns>A <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> that represents the preview of a GTMT#bitmap.</returns>
			<exception cref="T:System.ArgumentNullException">Occurs if a null value is passed as the <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>.</exception>
			<exception cref="T:System.InvalidOperationException">Occurs if this GTMT#bitmap does not support preview.</exception>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapEncoder.Thumbnail">
			<summary>Gets or sets a <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> that represents the global embedded GTMT#thumbnail.</summary>
			<returns>A <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> that represents the GTMT#thumbnail of the GTMT#bitmap.</returns>
			<exception cref="T:System.ArgumentNullException">Occurs if a null value is passed as the <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>.</exception>
			<exception cref="T:System.InvalidOperationException">Occurs if this GTMT#bitmap does not support thumbnails.</exception>
		</member>
		<member name="T:System.Windows.Media.Imaging.BitmapFrame">
			<summary>Represents image data returned by a decoder and accepted by encoders. This is an abstract class.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapFrame.Create(System.Windows.Media.Imaging.BitmapSource)">
			<summary>Creates a new <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see> from a given <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>.</summary>
			<returns>A new <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</returns>
			<param name="source">The <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> that is used to construct this <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapFrame.Create(System.IO.Stream)">
			<summary>Creates a new <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see> from a given <see cref="T:System.IO.Stream"></see>.</summary>
			<returns>A new <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</returns>
			<param name="bitmapStream">The <see cref="T:System.IO.Stream"></see> that is used to construct the <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapFrame.Create(System.Uri)">
			<summary>Creates a new <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see> from a given <see cref="T:System.Uri"></see>.</summary>
			<returns>A new <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</returns>
			<param name="bitmapUri">The <see cref="T:System.Uri"></see> that identifies the source of the <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapFrame.Create(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapSource)">
			<summary>Creates a new <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see> from a given <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> with the specified thumbnail.</summary>
			<returns>A new <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</returns>
			<param name="source">The source from which the <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see> is constructed.</param>
			<param name="thumbnail">A GTMT#thumbnail image of the resulting <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapFrame.Create(System.IO.Stream,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
			<summary>Creates a new <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see> from a given <see cref="T:System.IO.Stream"></see> with the specified <see cref="T:System.Windows.Media.Imaging.BitmapCreateOptions"></see> and <see cref="T:System.Windows.Media.Imaging.BitmapCacheOption"></see>.</summary>
			<returns>A new <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</returns>
			<param name="createOptions">The options that are used to create this <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</param>
			<param name="bitmapStream">The stream from which this <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see> is constructed.</param>
			<param name="cacheOption">The cache option that is used to create this <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapFrame.Create(System.Uri,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
			<summary>Creates a <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see> from a given <see cref="T:System.Uri"></see> with the specified <see cref="T:System.Windows.Media.Imaging.BitmapCreateOptions"></see> and <see cref="T:System.Windows.Media.Imaging.BitmapCacheOption"></see>.</summary>
			<returns>A new <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</returns>
			<param name="createOptions">The options that are used to create this <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</param>
			<param name="bitmapUri">The location of the GTMT#bitmap from which the <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see> is created.</param>
			<param name="cacheOption">The cache option that is used to create this <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapFrame.Create(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapMetadata,System.Collections.ObjectModel.ReadOnlyCollection{System.Windows.Media.ColorContext})">
			<summary>Creates a new <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see> from a given <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> with the specified GTMT#thumbnail, <see cref="T:System.Windows.Media.Imaging.BitmapMetadata"></see>, and <see cref="T:System.Windows.Media.ColorContext"></see>.</summary>
			<returns>A new <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</returns>
			<param name="source">The <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> that is used to construct this <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</param>
			<param name="metadata">The metadata to associate with this <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</param>
			<param name="colorContexts">The <see cref="T:System.Windows.Media.ColorContext"></see> that is associated with this <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</param>
			<param name="thumbnail">A GTMT#thumbnail image of the resulting <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapFrame.CreateInPlaceBitmapMetadataWriter">
			<summary>Creates an instance of <see cref="T:System.Windows.Media.Imaging.InplaceBitmapMetadataWriter"></see>, which can be used to associate metadata with a <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</summary>
			<returns>An <see cref="T:System.Windows.Media.Imaging.InplaceBitmapMetadataWriter"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapFrame.BaseUri">
			<summary>Gets or sets a value that represents the base <see cref="T:System.Uri"></see> of the current context.</summary>
			<returns>The <see cref="T:System.Uri"></see> of the current context.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapFrame.Decoder">
			<summary>Gets the decoder associated with this instance of <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>. </summary>
			<returns>The <see cref="T:System.Windows.Media.Imaging.BitmapDecoder"></see> that is associated with this <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapFrame.Thumbnail">
			<summary>Gets the GTMT#thumbnail image associated with this <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</summary>
			<returns>The <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> that represents a thumbnail of the current <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.Imaging.BitmapImage">
			<summary>Provides a specialized <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> that is optimized for loading images using TLA#tla_xaml.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapImage.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapImage.#ctor(System.Uri)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see> class by using the supplied <see cref="T:System.Uri"></see>.</summary>
			<param name="uriSource">The <see cref="T:System.Uri"></see> to use as the source of the <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see>.</param>
			<exception cref="T:System.ArgumentNullException">Occurs when uriSource is null.</exception>
		</member>
		<member name="F:System.Windows.Media.Imaging.BitmapImage.CacheOptionProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Imaging.BitmapImage.CacheOption"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.BitmapImage.CacheOption"></see> dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Imaging.BitmapImage.CreateOptionsProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Imaging.BitmapImage.CreateOptions"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.BitmapImage.CreateOptions"></see> dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Imaging.BitmapImage.DecodePixelHeightProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Imaging.BitmapImage.DecodePixelHeight"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.BitmapImage.DecodePixelHeight"></see> dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Imaging.BitmapImage.DecodePixelWidthProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Imaging.BitmapImage.DecodePixelWidth"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.BitmapImage.DecodePixelWidth"></see> dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Imaging.BitmapImage.RotationProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Imaging.BitmapImage.Rotation"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.BitmapImage.Rotation"></see> dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Imaging.BitmapImage.SourceRectProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Imaging.BitmapImage.SourceRect"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.BitmapImage.SourceRect"></see> dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Imaging.BitmapImage.StreamSourceProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Imaging.BitmapImage.StreamSource"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.BitmapImage.StreamSource"></see> dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Imaging.BitmapImage.UriSourceProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Imaging.BitmapImage.UriSource"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.BitmapImage.UriSource"></see> dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapImage.BeginInit">
			<summary>Prepares a <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see> to begin accepting changes in property values.</summary>
			<exception cref="T:System.InvalidOperationException">Occurs when a property value change is attempted prior to calling this method.</exception>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapImage.Clone">
			<summary>Creates a deep copy of the <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see>.</summary>
			<returns>A deep copy of the <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see>.</returns>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapImage.CloneCurrentValue">
			<summary>Creates a copy of the <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see>.</summary>
			<returns>A cloned copy of the <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see>.</returns>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapImage.EndInit">
			<summary>Prevents a <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see> from processing any additional <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see> properties.</summary>
			<exception cref="T:System.InvalidOperationException">Occurs when a property value change is attempted after calling this method.</exception>
			<exception cref="T:System.InvalidOperationException">Occurs when an attempt to end initialization happens without first setting either <see cref="P:System.Windows.Media.Imaging.BitmapImage.UriSource"></see> or <see cref="P:System.Windows.Media.Imaging.BitmapImage.StreamSource"></see>.</exception>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapImage.BaseUri">
			<summary>Gets or sets a value that represents the base <see cref="T:System.Uri"></see> of the current <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see> context.</summary>
			<returns>The base <see cref="T:System.Uri"></see> of the current context.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapImage.CacheOption">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.Imaging.BitmapCacheOption"></see> to use for this instance of <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see>.</summary>
			<returns>The <see cref="T:System.Windows.Media.Imaging.BitmapCacheOption"></see> being used for the <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see>. The default is <see cref="F:System.Windows.Media.Imaging.BitmapCacheOption.Default"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapImage.CreateOptions">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.Imaging.BitmapCreateOptions"></see> for a <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see>.</summary>
			<returns>The <see cref="T:System.Windows.Media.Imaging.BitmapCreateOptions"></see> used for this <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see>. The default is <see cref="F:System.Windows.Media.Imaging.BitmapCreateOptions.None"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapImage.DecodePixelHeight">
			<summary>Gets or sets the height, in pixels, that the image is decoded to.</summary>
			<returns>The height, in pixels, that the image is decoded to. The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapImage.DecodePixelWidth">
			<summary>Gets or sets the width, in pixels, that the image is decoded to.</summary>
			<returns>The width, in pixels, that the image is decoded to. The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapImage.IsDownloading">
			<summary>Gets a value that indicates whether the <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see> is currently downloading content.</summary>
			<returns>true if the <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see> is downloading content; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapImage.Metadata">
			<summary>Do not use. This property is not supported and will always generate a <see cref="T:System.NotSupportedException"></see>.</summary>
			<returns>Do not use.</returns>
			<exception cref="T:System.NotSupportedException">Occurs during any attempt to read this property from a <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see>.</exception>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapImage.Rotation">
			<summary>Gets or sets the angle that this <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see> is rotated to.</summary>
			<returns>The rotation that is used for the <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see>. The default is <see cref="F:System.Windows.Media.Imaging.Rotation.Rotate0"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapImage.SourceRect">
			<summary>Gets or sets the rectangle that is used as the source of the <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see>.</summary>
			<returns>The rectangle that is used as the source of the <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see>. The default is <see cref="P:System.Windows.Int32Rect.Empty"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapImage.StreamSource">
			<summary>Gets or sets the stream source of the <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see>.</summary>
			<returns>The stream source of the <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see>. The default is null.</returns>
			<exception cref="T:System.InvalidOperationException">Occurs when <see cref="P:System.Windows.Media.Imaging.BitmapImage.StreamSource"></see> and <see cref="P:System.Windows.Media.Imaging.BitmapImage.UriSource"></see> are null when <see cref="M:System.Windows.Media.Imaging.BitmapImage.EndInit"></see> is called.</exception>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapImage.UriSource">
			<summary>Gets or sets the <see cref="T:System.Uri"></see> source of the <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see>.</summary>
			<returns>The <see cref="T:System.Uri"></see> source of the <see cref="T:System.Windows.Media.Imaging.BitmapImage"></see>. The default is null.</returns>
			<exception cref="T:System.InvalidOperationException">Occurs when <see cref="P:System.Windows.Media.Imaging.BitmapImage.StreamSource"></see> and <see cref="P:System.Windows.Media.Imaging.BitmapImage.UriSource"></see> are null when <see cref="M:System.Windows.Media.Imaging.BitmapImage.EndInit"></see> is called.</exception>
		</member>
		<member name="T:System.Windows.Media.Imaging.BitmapMetadata">
			<summary>Provides support for reading and writing GTMT#metadata to and from a GTMT#bitmap image.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapMetadata.#ctor(System.String)">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.BitmapMetadata"></see> for use with the specified image format.</summary>
			<param name="containerFormat">The format of the GTMT#bitmap image, specified as "gif", "jpeg", "png", or "tiff".</param>
			<exception cref="T:System.ArgumentNullException">containerFormat is null.</exception>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapMetadata.Clone">
			<summary>Creates a modifiable (deep copy) clone of a <see cref="T:System.Windows.Media.Imaging.BitmapMetadata"></see> object.</summary>
			<returns>A modifiable copy of the current <see cref="T:System.Windows.Media.Imaging.BitmapMetadata"></see> instance.</returns>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapMetadata.CloneCore(System.Windows.Freezable)">
			<summary>Creates a modifiable (deep copy) clone of the current object over the <see cref="T:System.Windows.Freezable"></see> instance that is provided as a parameter.</summary>
			<param name="sourceFreezable">The destination of the modifiable clone of the current object, cast as a <see cref="T:System.Windows.Freezable"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapMetadata.CloneCurrentValueCore(System.Windows.Freezable)">
			<summary>Implementation of <see cref="M:System.Windows.Freezable.CloneCurrentValue"></see>.</summary>
			<param name="sourceFreezable">The <see cref="T:System.Windows.Freezable"></see> object to be cloned.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapMetadata.ContainsQuery(System.String)">
			<summary>Determines whether a given query string exists within a <see cref="T:System.Windows.Media.Imaging.BitmapMetadata"></see> object.</summary>
			<returns>true if the query string is found within the GTMT#metadata store; otherwise, false.</returns>
			<param name="query">Identifies the string that is being queried in the current <see cref="T:System.Windows.Media.Imaging.BitmapMetadata"></see> object.</param>
			<exception cref="T:System.ArgumentNullException">query is null.</exception>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapMetadata.CreateInstanceCore">
			<summary>Implementation of <see cref="M:System.Windows.Freezable.CreateInstance"></see>.</summary>
			<returns>The new instance.</returns>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapMetadata.GetAsFrozenCore(System.Windows.Freezable)">
			<summary>Implementation of <see cref="M:System.Windows.Freezable.GetAsFrozen"></see>.</summary>
			<param name="sourceFreezable">The instance to copy.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapMetadata.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
			<summary>Implementation of <see cref="M:System.Windows.Freezable.GetCurrentValueAsFrozen"></see>.</summary>
			<param name="sourceFreezable">The <see cref="T:System.Windows.Freezable"></see> object to copy and freeze.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapMetadata.GetQuery(System.String)">
			<summary>Provides access to a GTMT#metadata query reader that can extract metadata from a GTMT#bitmap image file.</summary>
			<returns>The GTMT#metadata at the specified query location.</returns>
			<param name="query">Identifies the string that is being queried in the current <see cref="T:System.Windows.Media.Imaging.BitmapMetadata"></see> object.</param>
			<exception cref="T:System.ArgumentNullException">query is null.</exception>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapMetadata.RemoveQuery(System.String)">
			<summary>Removes a GTMT#metadata query from an instance of <see cref="T:System.Windows.Media.Imaging.BitmapMetadata"></see>.</summary>
			<param name="query">The GTMT#metadata query to remove.</param>
			<exception cref="T:System.ArgumentNullException">query is null.</exception>
			<exception cref="T:System.InvalidOperationException">Occurs when image GTMT#metadata is read-only.</exception>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapMetadata.SetQuery(System.String,System.Object)">
			<summary>Provides access to a GTMT#metadata query writer that can write metadata to a GTMT#bitmap image file.</summary>
			<param name="query">Identifies the location of the GTMT#metadata to be written.</param>
			<param name="value">The value of the GTMT#metadata written.</param>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapMetadata.ApplicationName">
			<summary>Gets or sets a value that identifies the name of the application that was used to construct or alter an image file.</summary>
			<returns>The application that was used to construct or alter an image file.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapMetadata.Author">
			<summary>Gets or sets a value that represents the author of an image.</summary>
			<returns>The author of the image.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapMetadata.CameraManufacturer">
			<summary>Gets or sets a value that identifies the camera manufacturer that is associated with an image.</summary>
			<returns>The camera manufacturer that is associated with an image.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapMetadata.CameraModel">
			<summary>Gets or sets a value that identifies the camera model that was used to capture the image.</summary>
			<returns>The camera model that was used to capture the image.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapMetadata.Comment">
			<summary>Gets or sets a value that represents a comment that is associated with the image file.</summary>
			<returns>A comment that is associated with the image file.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapMetadata.Copyright">
			<summary>Gets or sets a value that indicates copyright information that is associated with the image file.</summary>
			<returns>The copyright information that is associated with the image file.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapMetadata.DateTaken">
			<summary>Gets or sets a value that indicates the date that the image was taken.</summary>
			<returns>The date that the image was taken.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapMetadata.Format">
			<summary>Gets a value that identifies the format of the image.</summary>
			<returns>The format of the GTMT#bitmap image.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapMetadata.IsFixedSize">
			<summary>Gets a value that determines whether the <see cref="T:System.Windows.Media.Imaging.BitmapMetadata"></see> object is a fixed size.</summary>
			<returns>true if the <see cref="T:System.Windows.Media.Imaging.BitmapMetadata"></see> is a fixed size; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapMetadata.IsReadOnly">
			<summary>Gets a value that indicates whether the metadata that is associated with an image is read-only.</summary>
			<returns>true if the metadata is read-only; otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapMetadata.Keywords">
			<summary>Gets or sets a collection of keywords that describe the GTMT#bitmap image.</summary>
			<returns>A read-only collection of strings.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapMetadata.Location">
			<summary>Gets a value that identifies the base location of the GTMT#metadata that is associated with an image.</summary>
			<returns>The base location of the image GTMT#metadata.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapMetadata.Subject">
			<summary>Gets or sets a value that indicates the subject matter of the GTMT#bitmap image.</summary>
			<returns>The subject of the GTMT#bitmap image.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapMetadata.Title">
			<summary>Gets or sets a value that identifies the title of an image file.</summary>
			<returns>The title of an image file.</returns>
		</member>
		<member name="T:System.Windows.Media.Imaging.BitmapMetadataBlob">
			<summary>Provides a placeholder for GTMT#metadata items that cannot be converted from TLA#tla_cshrp to an underlying data type that persists GTMT#metadata. The blob is converted into an array of bytes to preserve the content.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapMetadataBlob.#ctor(System.Byte[])">
			<summary>Initializes an instance of <see cref="T:System.Windows.Media.Imaging.BitmapMetadataBlob"></see> and converts the GTMT#metadata it holds into an array of bytes to persist its content.</summary>
			<param name="blob">Placeholder GTMT#metadata.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapMetadataBlob.GetBlobValue">
			<summary>Returns an array of bytes that represents the value of a <see cref="T:System.Windows.Media.Imaging.BitmapMetadataBlob"></see>.</summary>
			<returns>An array of bytes.</returns>
		</member>
		<member name="T:System.Windows.Media.Imaging.BitmapPalette">
			<summary>Defines the available color palette for a supported image type.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapPalette.#ctor(System.Collections.Generic.IList{System.Windows.Media.Color})">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see> with the specified <see cref="T:System.Windows.Media.Colors"></see>.</summary>
			<param name="colors">Defines <see cref="T:System.Windows.Media.Colors"></see> that are added to the custom palette.</param>
			<exception cref="T:System.ArgumentNullException">Occurs when colors is null.</exception>
			<exception cref="T:System.InvalidOperationException">Occurs when colors is less than one or greater than 256.</exception>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapPalette.#ctor(System.Windows.Media.Imaging.BitmapSource,System.Int32)">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see> based on the specified <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>. The new <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see> is limited to a specified maximum color count.</summary>
			<param name="maxColorCount">The maximum number of colors the new <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see> should use.</param>
			<param name="bitmapSource">The source GTMT#bitmap from which the palette is read or constructed.</param>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalette.Colors">
			<summary>Get the colors defined in a palette.</summary>
		</member>
		<member name="T:System.Windows.Media.Imaging.BitmapPalettes">
			<summary>Defines several color palettes that are commonly used by GTMT#bitmap images.</summary>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.BlackAndWhite">
			<summary>Gets a value that represents a black and white color palette. This palette consists of two colors total.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.BlackAndWhiteTransparent">
			<summary>Gets a value that represents a black and white transparent color palette. This palette consists of three colors total.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.Gray16">
			<summary>Gets a value that represents a color palette that is comprised of 16 shades of gray. The palette ranges from black to gray to white. This palette is comprised of 16 total colors.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.Gray16Transparent">
			<summary>Gets a value that represents a color transparent color palette that is comprised of 16 shades of gray. The palette ranges from black to gray to white with an additional transparent color. This palette is comprised of 17 total colors.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.Gray256">
			<summary>Gets a value that represents a color palette that is comprised of 256 shades of gray, ranging from black to gray to white. This palette is comprised of 256 total colors.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.Gray256Transparent">
			<summary>Gets a value that represents a color palette that is comprised of 256 shades of gray, ranging from black to gray to white with an additional transparent color. This palette is comprised of 257 total colors.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.Gray4">
			<summary>Gets a value that represents a color palette that is comprised of four shades of gray, ranging from black to gray to white. This palette is comprised of four total colors.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.Gray4Transparent">
			<summary>Gets a value that represents a color palette that is comprised of four shades of gray, ranging from black to gray to white with an additional transparent color. This palette is comprised of five total colors.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone125">
			<summary>Gets a value that represents a color palette that consists of 125 on-off primary colors and 16 system colors, with duplicate colors removed. There are a total of 133 colors in this palette.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone125Transparent">
			<summary>Gets a value that represents a color palette that consists of 125 on-off primary colors, 16 system colors, and one additional transparent color. Duplicate colors in the palette are removed. There are a total of 134 colors in this palette.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone216">
			<summary>Gets a value that represents a color palette that consists of 216 on-off primary colors and 16 system colors, with duplicate colors removed. There are a total of 224 colors in this palette.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone216Transparent">
			<summary>Gets a value that represents a color palette that consists of 216 on-off primary colors, 16 system colors, and one additional transparent color. Duplicate colors in the palette are removed. There are a total of 225 colors in this palette.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone252">
			<summary>Gets a value that represents a color palette that consists of 252 on-off primary colors and 16 system colors, with duplicate colors removed. There are a total of 256 colors in this palette.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone252Transparent">
			<summary>Gets a value that represents a color palette that consists of 252 on-off primary colors, 16 system colors, and one additional transparent color. Duplicate colors in the palette are removed. There are a total of 256 colors in this palette.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone256">
			<summary>Gets a value that represents a color palette that consists of 256 on-off primary colors and 16 system colors, with duplicate colors removed. There are a total of 256 colors in this palette.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone256Transparent">
			<summary>Gets a value that represents a color palette that consists of 256 on-off primary colors, 16 system colors, and one additional transparent color that replaces the final color in the sequence. Duplicate colors in the palette are removed. There are a total of 256 colors in this palette.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone27">
			<summary>Gets a value that represents a color palette that consists of 27 on-off primary colors and 16 system colors, with duplicate colors removed. There are a total of 35 colors in this palette.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone27Transparent">
			<summary>Gets a value that represents a color palette that consists of 27 on-off primary colors and 16 system colors, with duplicate colors removed and one additional transparent color. There are a total of 36 colors in this palette.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone64">
			<summary>Gets a value that represents a color palette that consists of 64 on-off primary colors and 16 system colors, with duplicate colors removed. There are a total of 72 colors in this palette.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone64Transparent">
			<summary>Gets a value that represents a color palette that consists of 64 on-off primary colors and 16 system colors, with duplicate colors removed and one additional transparent color. There are a total of 73 colors in this palette.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone8">
			<summary>Gets a value that represents a color palette that consists of eight on-off primary colors and 16 system colors, with duplicate colors removed. There are a total of 16 colors in this palette, which are the same as the system palette.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone8Transparent">
			<summary>Gets a value that represents a color palette that consists of eight on-off primary colors and 16 system colors, with duplicate colors removed and one additional transparent color. There are a total of 17 colors in this palette. </summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.WebPalette">
			<summary>Gets a value that represents a color palette that consists of 216 on-off primary colors and 16 system colors, with duplicate colors removed. There are a total of 224 colors in this palette.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapPalettes.WebPaletteTransparent">
			<summary>Gets a value that represents a color palette that consists of 216 on-off primary colors and 16 system colors, with duplicate colors removed and one additional transparent color. There are a total of 225 colors in this palette.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.Imaging.BitmapSizeOptions">
			<summary>Defines size-related attributes of a cached GTMT#bitmap image. A GTMT#bitmap is scaled based on values that are defined by this class.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapSizeOptions.FromEmptyOptions">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.BitmapSizeOptions"></see> with empty sizing properties.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapSizeOptions"></see>.</returns>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapSizeOptions.FromHeight(System.Int32)">
			<summary>Initializes an instance of <see cref="T:System.Windows.Media.Imaging.BitmapSizeOptions"></see> that preserves the aspect ratio of the source GTMT#bitmap and specifies an initial <see cref="P:System.Windows.Media.Imaging.BitmapSizeOptions.PixelHeight"></see>.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapSizeOptions"></see>.</returns>
			<param name="pixelHeight">The height, in pixels, of the resulting GTMT#bitmap.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">Occurs when pixelHeight is less than zero.</exception>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapSizeOptions.FromRotation(System.Windows.Media.Imaging.Rotation)">
			<summary>Initializes an instance of <see cref="T:System.Windows.Media.Imaging.BitmapSizeOptions"></see> that preserves the aspect ratio of the source GTMT#bitmap and specifies an initial <see cref="T:System.Windows.Media.Imaging.Rotation"></see> to apply.</summary>
			<returns>A new instance of <see cref="T:System.Windows.Media.Imaging.BitmapSizeOptions"></see>.</returns>
			<param name="rotation">The initial rotation value to apply. Only 90 degree increments are supported.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapSizeOptions.FromWidth(System.Int32)">
			<summary>Initializes an instance of <see cref="T:System.Windows.Media.Imaging.BitmapSizeOptions"></see> that preserves the aspect ratio of the source GTMT#bitmap and specifies an initial <see cref="P:System.Windows.Media.Imaging.BitmapSizeOptions.PixelWidth"></see>.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapSizeOptions"></see>.</returns>
			<param name="pixelWidth">The width, in pixels, of the resulting GTMT#bitmap.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">Occurs when pixelWidth is less than zero.</exception>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapSizeOptions.FromWidthAndHeight(System.Int32,System.Int32)">
			<summary>Initializes an instance of <see cref="T:System.Windows.Media.Imaging.BitmapSizeOptions"></see> that does not preserve the original GTMT#bitmap aspect ratio.</summary>
			<returns>A new instance of <see cref="T:System.Windows.Media.Imaging.BitmapSizeOptions"></see>.</returns>
			<param name="pixelWidth">The width, in pixels, of the resulting GTMT#bitmap.</param>
			<param name="pixelHeight">The height, in pixels, of the resulting GTMT#bitmap.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">Occurs when pixelHeight is less than zero.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">Occurs when pixelWidth is less than zero.</exception>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapSizeOptions.PixelHeight">
			<summary>The height, in pixels, of the GTMT#bitmap image.</summary>
			<returns>The height of the GTMT#bitmap.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapSizeOptions.PixelWidth">
			<summary>The width, in pixels, of the GTMT#bitmap image.</summary>
			<returns>The width of the GTMT#bitmap.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapSizeOptions.PreservesAspectRatio">
			<summary>Gets a value that determines whether the aspect ratio of the original GTMT#bitmap image is preserved.</summary>
			<returns>true if the original aspect ratio is maintained; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapSizeOptions.Rotation">
			<summary>Gets a value that represents the rotation angle that is applied to a GTMT#bitmap. </summary>
			<returns>The rotation angle that is applied to the image.</returns>
		</member>
		<member name="T:System.Windows.Media.Imaging.BitmapSource">
			<summary>Represents a single, constant set of pixels at a certain size and resolution. This is an abstract class. </summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapSource.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> class. </summary>
		</member>
		<member name="E:System.Windows.Media.Imaging.BitmapSource.DownloadCompleted">
			<summary>Occurs when the GTMT#bitmap content has been completely downloaded.</summary>
		</member>
		<member name="E:System.Windows.Media.Imaging.BitmapSource.DownloadProgress">
			<summary>Occurs when the download progress of the GTMT#bitmap content has changed.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapSource.CheckIfSiteOfOrigin">
			<summary>Checks whether the GTMT#bitmap source content is from a known site of origin. This method is used to ensure that pixel copying operations are safe. </summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapSource.Clone">
			<summary>Creates a copy of the <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>.</summary>
			<returns>The copy of the <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>.</returns>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapSource.CloneCore(System.Windows.Freezable)">
			<summary>Creates a modifiable clone (deep copy) of the current <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> object over the <see cref="T:System.Windows.Freezable"></see> instance that is provided as a parameter.</summary>
			<param name="sourceFreezable">The destination for the modifiable clone of the current object, cast as a <see cref="T:System.Windows.Freezable"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapSource.CloneCurrentValue">
			<summary>Returns a mutable clone of this <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> or derived class, with values at an existing <see cref="T:System.Windows.Freezable"></see> object's current values rather than reverting to metadata defaults.</summary>
			<returns>The returned clone object.</returns>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapSource.CloneCurrentValueCore(System.Windows.Freezable)">
			<summary>Implements <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> specific behavior for the <see cref="M:System.Windows.Media.Imaging.BitmapSource.CloneCurrentValue"></see> method.</summary>
			<param name="sourceFreezable">The <see cref="T:System.Windows.Freezable"></see> to be cloned.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapSource.CopyPixels(System.Array,System.Int32,System.Int32)">
			<summary>Copies the GTMT#bitmap pixel data into an array of pixels with the specified GTMT#stride, starting at the specified offset.</summary>
			<param name="offset">The pixel location where copying begins.</param>
			<param name="stride">The GTMT#stride of the GTMT#bitmap.</param>
			<param name="pixels">The destination array.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapSource.CopyPixels(System.Windows.Int32Rect,System.Array,System.Int32,System.Int32)">
			<summary>Copies the GTMT#bitmap pixel data within the specified rectangle into an array of pixels that has the specified GTMT#stride starting at the specified offset.</summary>
			<param name="offset">The pixel location where copying begins.</param>
			<param name="stride">The GTMT#stride of the GTMT#bitmap.</param>
			<param name="sourceRect">The source rectangle to copy. An <see cref="P:System.Windows.Int32Rect.Empty"></see> value specifies the entire GTMT#bitmap.</param>
			<param name="pixels">The destination array.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapSource.CopyPixels(System.Windows.Int32Rect,System.IntPtr,System.Int32,System.Int32)">
			<summary>Copies the GTMT#bitmap pixel data within the specified rectangle </summary>
			<param name="bufferSize">The size of the GTMT#buffer.</param>
			<param name="stride">The GTMT#stride of the GTMT#bitmap.</param>
			<param name="buffer">A pointer to the GTMT#buffer.</param>
			<param name="sourceRect">The source rectangle to copy. An <see cref="P:System.Windows.Int32Rect.Empty"></see> value specifies the entire GTMT#bitmap.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapSource.Create(System.Int32,System.Int32,System.Double,System.Double,System.Windows.Media.PixelFormat,System.Windows.Media.Imaging.BitmapPalette,System.Array,System.Int32)">
			<summary>Creates a new <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> from an array of pixels.</summary>
			<returns>The <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> that is created from the specified array of pixels.</returns>
			<param name="stride">The GTMT#stride of the GTMT#bitmap.</param>
			<param name="palette">The palette of the GTMT#bitmap.</param>
			<param name="pixelWidth">The width of the GTMT#bitmap.</param>
			<param name="dpiY">The vertical TLA#tla_dpi of the GTMT#bitmap.</param>
			<param name="dpiX">The horizontal TLA#tla_dpi of the GTMT#bitmap.</param>
			<param name="pixelHeight">The height of the GTMT#bitmap.</param>
			<param name="pixels">An array of bytes that represents the content of a GTMT#bitmap image.</param>
			<param name="pixelFormat">The pixel format of the GTMT#bitmap.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapSource.Create(System.Int32,System.Int32,System.Double,System.Double,System.Windows.Media.PixelFormat,System.Windows.Media.Imaging.BitmapPalette,System.IntPtr,System.Int32,System.Int32)">
			<summary>Creates a new <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> from an array of pixels that are stored in unmanaged memory.</summary>
			<returns>A <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> that is created from the array of pixels in unmanaged memory.</returns>
			<param name="bufferSize">The size of the GTMT#buffer.</param>
			<param name="stride">The GTMT#stride of the GTMT#bitmap.</param>
			<param name="buffer">A pointer to the GTMT#buffer that contains the bitmap data in memory.</param>
			<param name="palette">The palette of the GTMT#bitmap.</param>
			<param name="pixelWidth">The width of the GTMT#bitmap.</param>
			<param name="dpiY">The vertical TLA#tla_dpi of the GTMT#bitmap.</param>
			<param name="dpiX">The horizontal TLA#tla_dpi of the GTMT#bitmap.</param>
			<param name="pixelHeight">The height of the GTMT#bitmap.</param>
			<param name="pixelFormat">The pixel format of the GTMT#bitmap.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapSource.FreezeCore(System.Boolean)">
			<summary>Makes an instance of <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> or a derived class immutable.</summary>
			<param name="isChecking">true if this instance should actually freeze itself when this method is called; otherwise, false.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapSource.GetAsFrozenCore(System.Windows.Freezable)">
			<summary>Provides implementation specific to BitmapSource of what occurs when <see cref="M:System.Windows.Freezable.GetAsFrozen"></see> is called.</summary>
			<param name="sourceFreezable">The instance of <see cref="T:System.Windows.Freezable"></see> to copy.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BitmapSource.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
			<summary>Gets the current value of the source <see cref="T:System.Windows.Freezable"></see> object, with all values of the copied object frozen on creation.</summary>
			<param name="sourceFreezable">The <see cref="T:System.Windows.Freezable"></see> to copy and freeze.</param>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapSource.DpiX">
			<summary>Gets the horizontal TLA#tla_dpi of the image. </summary>
			<returns>The horizontal TLA#tla_dpi of the image; that is, the TLA#tla_dpi along the x-axis.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapSource.DpiY">
			<summary>Gets the vertical TLA#tla_dpi of the image. </summary>
			<returns>The vertical TLA#tla_dpi of the image; that is, the TLA#tla_dpi along the y-axis.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapSource.Format">
			<summary>Gets the native <see cref="T:System.Windows.Media.PixelFormat"></see> of the GTMT#bitmap data. </summary>
			<returns>The pixel format of the GTMT#bitmap data.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapSource.Height">
			<summary>Gets the height of the source GTMT#bitmap in TLA#tla_dipixel#plural. </summary>
			<returns>The height of the GTMT#bitmap in TLA#tla_dipixel#plural.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapSource.IsDownloading">
			<summary>Gets a value that indicates whether the <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> content is currently downloading. </summary>
			<returns>true if the GTMT#bitmap source is currently downloading; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapSource.Metadata">
			<summary>Gets the metadata that is associated with this GTMT#bitmap image. </summary>
			<returns>The metadata that is associated with the GTMT#bitmap image.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapSource.Palette">
			<summary>Gets the color palette of the GTMT#bitmap, if one is specified. </summary>
			<returns>The color palette of the GTMT#bitmap.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapSource.PixelHeight">
			<summary>Gets the height of the GTMT#bitmap in pixels. </summary>
			<returns>The height of the GTMT#bitmap in pixels.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapSource.PixelWidth">
			<summary>Gets the width of the GTMT#bitmap in pixels. </summary>
			<returns>The width of the GTMT#bitmap in pixels.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.BitmapSource.Width">
			<summary>Gets the width of the GTMT#bitmap in TLA#tla_dipixel#plural. </summary>
			<returns>The width of the GTMT#bitmap in TLA#tla_dipixel#plural.</returns>
		</member>
		<member name="T:System.Windows.Media.Imaging.BmpBitmapDecoder">
			<summary>Defines a decoder for TLA#tla_bmp encoded images.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.BmpBitmapDecoder.#ctor(System.IO.Stream,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.BmpBitmapDecoder"></see> from the specified file stream with the specified createOptions and cacheOption.</summary>
			<param name="createOptions">Initialization options for the GTMT#bitmap image.</param>
			<param name="bitmapStream">Bitmap stream to decode.</param>
			<param name="cacheOption">Specifies how the GTMT#bitmap is cached to memory.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.BmpBitmapDecoder.#ctor(System.Uri,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.BmpBitmapDecoder"></see> from the specified <see cref="T:System.Uri"></see> with the specified createOptions and cacheOption.</summary>
			<param name="createOptions">Initialization options for the GTMT#bitmap image.</param>
			<param name="bitmapUri"><see cref="T:System.Uri"></see> that identifies the GTMT#bitmap to decode.</param>
			<param name="cacheOption">Specifies how the GTMT#bitmap is cached to memory.</param>
		</member>
		<member name="T:System.Windows.Media.Imaging.BmpBitmapEncoder">
			<summary>Defines an encoder that is used to encode TLA#tla_bmp format images.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.BmpBitmapEncoder.#ctor">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.BmpBitmapEncoder"></see>.</summary>
		</member>
		<member name="T:System.Windows.Media.Imaging.CachedBitmap">
			<summary>Provides caching functionality for a <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.CachedBitmap.#ctor(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.CachedBitmap"></see> that has the specified source, bitmap create options, and bitmap cache option.</summary>
			<param name="source">The source GTMT#bitmap that is being cached.</param>
			<param name="createOptions">Initialization options for the GTMT#bitmap image.</param>
			<param name="cacheOption">Specifies how the GTMT#bitmap is cached to memory.</param>
			<exception cref="T:System.ArgumentNullException">Occurs when source is null.</exception>
		</member>
		<member name="M:System.Windows.Media.Imaging.CachedBitmap.Clone">
			<summary>Creates a modifiable deep copy of the current <see cref="T:System.Windows.Media.Imaging.CachedBitmap"></see> object.</summary>
			<returns>A modifiable copy of the current <see cref="T:System.Windows.Media.Imaging.CachedBitmap"></see>.</returns>
		</member>
		<member name="M:System.Windows.Media.Imaging.CachedBitmap.CloneCurrentValue">
			<summary>Implementation of <see cref="M:System.Windows.Freezable.CloneCurrentValue"></see>.</summary>
			<returns>A copy of the current instance of <see cref="T:System.Windows.Media.Imaging.CachedBitmap"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.Imaging.ColorConvertedBitmap">
			<summary>Converts the color of a <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.ColorConvertedBitmap.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.ColorConvertedBitmap"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.ColorConvertedBitmap.#ctor(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.ColorContext,System.Windows.Media.ColorContext,System.Windows.Media.PixelFormat)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.ColorConvertedBitmap"></see> class that has the specified values.</summary>
			<param name="source">The source GTMT#bitmap that is converted.</param>
			<param name="destinationColorContext">The color profile of the converted GTMT#bitmap.</param>
			<param name="sourceColorContext">The color profile of the source GTMT#bitmap.</param>
			<param name="format">The <see cref="T:System.Windows.Media.PixelFormat"></see> of the converted GTMT#bitmap.</param>
		</member>
		<member name="F:System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationColorContextProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationColorContext"></see> GTMT#dependency property. This field is read-only.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationColorContext"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationFormatProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationFormat"></see> GTMT#dependency property. This field is read-only.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationFormat"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Imaging.ColorConvertedBitmap.SourceColorContextProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Imaging.ColorConvertedBitmap.SourceColorContext"></see>  GTMT#dependency property. This field is read-only.</summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.ColorConvertedBitmap.SourceProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Imaging.ColorConvertedBitmap.Source"></see>  GTMT#dependency property. This field is read-only.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.ColorConvertedBitmap.Source"></see>  GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.Imaging.ColorConvertedBitmap.Clone">
			<summary>Creates a modifiable GTMT#deep copy of an instance of <see cref="T:System.Windows.Media.Imaging.ColorConvertedBitmap"></see>.</summary>
			<returns>A modifiable GTMT#deep copy of the <see cref="T:System.Windows.Media.Imaging.ColorConvertedBitmap"></see> instance.</returns>
		</member>
		<member name="M:System.Windows.Media.Imaging.ColorConvertedBitmap.CloneCurrentValue">
			<summary>Returns a modifiable copy of this <see cref="T:System.Windows.Media.Imaging.ColorConvertedBitmap"></see>. The copy has the current values for an existing <see cref="T:System.Windows.Freezable"></see> object instead of its metadata default values.</summary>
			<returns>The returned modifiable copy.</returns>
		</member>
		<member name="M:System.Windows.Media.Imaging.ColorConvertedBitmap.EndInit">
			<summary>Prevents a <see cref="T:System.Windows.Media.Imaging.ColorConvertedBitmap"></see> from processing any additional properties.</summary>
			<exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationColorContext"></see> property is a null reference (Nothing).</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Media.Imaging.ColorConvertedBitmap.SourceColorContext"></see> property is a null reference (Nothing).</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Media.Imaging.ColorConvertedBitmap.Source"></see> property is null.</exception>
		</member>
		<member name="P:System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationColorContext">
			<summary>Gets or sets a value that identifies the color profile of the converted GTMT#bitmap.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.ColorContext"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationFormat">
			<summary>Gets or sets a value that represents the <see cref="T:System.Windows.Media.PixelFormat"></see> of the converted GTMT#bitmap. </summary>
			<returns>An instance of <see cref="T:System.Windows.Media.PixelFormat"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.ColorConvertedBitmap.Source">
			<summary>Gets or sets a value that identifies the source GTMT#bitmap that is converted.</summary>
			<returns>A <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.ColorConvertedBitmap.SourceColorContext">
			<summary>Gets or sets a value that identifies the color profile of the source GTMT#bitmap.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.ColorContext"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.Imaging.CroppedBitmap">
			<summary>Crops a <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.CroppedBitmap.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.CroppedBitmap"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.CroppedBitmap.#ctor(System.Windows.Media.Imaging.BitmapSource,System.Windows.Int32Rect)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.CroppedBitmap"></see> class that has the specified <see cref="P:System.Windows.Media.Imaging.CroppedBitmap.Source"></see> and <see cref="P:System.Windows.Media.Imaging.CroppedBitmap.SourceRect"></see>.</summary>
			<param name="source">The <see cref="P:System.Windows.Media.Imaging.CroppedBitmap.Source"></see> of the new <see cref="T:System.Windows.Media.Imaging.CroppedBitmap"></see> instance.</param>
			<param name="sourceRect">The <see cref="P:System.Windows.Media.Imaging.CroppedBitmap.SourceRect"></see> of the new <see cref="T:System.Windows.Media.Imaging.CroppedBitmap"></see> instance.</param>
		</member>
		<member name="F:System.Windows.Media.Imaging.CroppedBitmap.SourceProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Imaging.CroppedBitmap.Source"></see> GTMT#dependency property. This field is read-only.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.CroppedBitmap.Source"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Imaging.CroppedBitmap.SourceRectProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Imaging.CroppedBitmap.SourceRect"></see> GTMT#dependency property. This field is read-only.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.CroppedBitmap.SourceRect"></see> GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.Imaging.CroppedBitmap.Clone">
			<summary>Creates a copy of the <see cref="T:System.Windows.Media.Imaging.CroppedBitmap"></see> that can be modified.</summary>
			<returns>A copy of the <see cref="T:System.Windows.Media.Imaging.CroppedBitmap"></see>.</returns>
		</member>
		<member name="M:System.Windows.Media.Imaging.CroppedBitmap.CloneCurrentValue">
			<summary>Returns a mutable clone of the <see cref="T:System.Windows.Media.Imaging.CroppedBitmap"></see> that has values that are from the current values of an existing <see cref="T:System.Windows.Freezable"></see> object rather than from the metadata defaults.</summary>
			<returns>The returned clone object.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.CroppedBitmap.Source">
			<summary>Gets or sets the source for the GTMT#bitmap. </summary>
			<returns>The source for the GTMT#bitmap. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.CroppedBitmap.SourceRect">
			<summary>Gets or sets the rectangular area that the GTMT#bitmap is cropped to.</summary>
			<returns>The rectangular area that the GTMT#bitmap is cropped to. The default value is <see cref="P:System.Windows.Int32Rect.Empty"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.Imaging.DownloadProgressEventArgs">
			<summary>Required arguments for the <see cref="E:System.Windows.Media.Imaging.BitmapSource.DownloadProgress"></see> and <see cref="E:System.Windows.Media.Imaging.BitmapDecoder.DownloadProgress"></see> events.</summary>
		</member>
		<member name="P:System.Windows.Media.Imaging.DownloadProgressEventArgs.Progress">
			<summary>Gets a value that represents the download progress of a GTMT#bitmap, expressed as a percentage. </summary>
			<returns>The progress, expressed as a percentage, to which a GTMT#bitmap has been downloaded. The returned value will be between 1 and 100.</returns>
		</member>
		<member name="T:System.Windows.Media.Imaging.FormatConvertedBitmap">
			<summary>Provides format conversion functionality for a <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.FormatConvertedBitmap.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.FormatConvertedBitmap.#ctor(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.PixelFormat,System.Windows.Media.Imaging.BitmapPalette,System.Double)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap"></see> class that has the specified <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.Source"></see>, <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationFormat"></see>, <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationPalette"></see>, and <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.AlphaThreshold"></see>.</summary>
			<param name="source">The <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.Source"></see> of the new <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap"></see> instance.</param>
			<param name="destinationFormat">The <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationFormat"></see> of the new <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap"></see> instance.</param>
			<param name="alphaThreshold">The <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.AlphaThreshold"></see> of the new <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap"></see> instance.</param>
			<param name="destinationPalette">The <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationPalette"></see> of the new <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap"></see> instance if the GTMT#bitmap is palettized.</param>
		</member>
		<member name="F:System.Windows.Media.Imaging.FormatConvertedBitmap.AlphaThresholdProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.AlphaThreshold"></see> GTMT#dependency property. This field is read-only.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.AlphaThreshold"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationFormatProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationFormat"></see> GTMT#dependency property.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationFormat"></see> GTMT#dependency property. This field is read-only.</returns>
		</member>
		<member name="F:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationPaletteProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationPalette"></see> GTMT#dependency property. This field is read-only.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationPalette"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Imaging.FormatConvertedBitmap.SourceProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.Source"></see> GTMT#dependency property. This field is read-only.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.Source"></see> GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.Imaging.FormatConvertedBitmap.Clone">
			<summary>Creates a modifiable copy of the <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap"></see>.</summary>
			<returns>The copy of the <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap"></see>.</returns>
		</member>
		<member name="M:System.Windows.Media.Imaging.FormatConvertedBitmap.CloneCurrentValue">
			<summary>Returns a modifiable copy of this <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap"></see>. The copy has the current values for an existing <see cref="T:System.Windows.Freezable"></see> object instead of its metadata default values.</summary>
			<returns>The returned modifiable copy.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.FormatConvertedBitmap.AlphaThreshold">
			<summary>Gets or sets a value that represents the GTMT#alpha channel threshold of a GTMT#bitmap.</summary>
			<returns>The GTMT#alpha channel threshold for this <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationFormat">
			<summary>Gets or sets the destination pixel format to apply to the GTMT#bitmap.</summary>
			<returns>The destination pixel format to apply to the GTMT#bitmap. The default value is <see cref="P:System.Windows.Media.PixelFormats.Pbgra32"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationPalette">
			<summary>Gets or sets the destination palette to apply to the GTMT#bitmap if the format is palettized.</summary>
			<returns>The destination palette to apply to the GTMT#bitmap. The default value is null. </returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.FormatConvertedBitmap.Source">
			<summary>Gets or sets the source for the GTMT#bitmap. </summary>
			<returns>The source for the GTMT#bitmap. The default value is null. </returns>
		</member>
		<member name="T:System.Windows.Media.Imaging.GifBitmapDecoder">
			<summary>Defines a decoder for TLA#tla_gif encoded images.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.GifBitmapDecoder.#ctor(System.IO.Stream,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.GifBitmapDecoder"></see> from the specified file stream with the specified createOptions and cacheOption.</summary>
			<param name="createOptions">Initialization options for the GTMT#bitmap image.</param>
			<param name="bitmapStream">Bitmap stream to decode.</param>
			<param name="cacheOption">Specifies how the GTMT#bitmap is cached to memory.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.GifBitmapDecoder.#ctor(System.Uri,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.GifBitmapDecoder"></see> from the specified <see cref="T:System.Uri"></see> with the specified createOptions and cacheOption.</summary>
			<param name="createOptions">Initialization options for the GTMT#bitmap image.</param>
			<param name="bitmapUri"><see cref="T:System.Uri"></see> that identifies the GTMT#bitmap to decode.</param>
			<param name="cacheOption">Specifies how the GTMT#bitmap is cached to memory.</param>
		</member>
		<member name="T:System.Windows.Media.Imaging.GifBitmapEncoder">
			<summary>Defines an encoder that is used to encode TLA#tla_gif images.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.GifBitmapEncoder.#ctor">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.GifBitmapEncoder"></see>.</summary>
		</member>
		<member name="T:System.Windows.Media.Imaging.IconBitmapDecoder">
			<summary>Defines a specialized decoder for icon (.ico) encoded images. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.IconBitmapDecoder.#ctor(System.IO.Stream,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.IconBitmapDecoder"></see> class from the specified file stream, with the specified createOptions and cacheOption.</summary>
			<param name="createOptions">Initialization options for the GTMT#bitmap image.</param>
			<param name="bitmapStream">The bitmap stream to decode.</param>
			<param name="cacheOption">Specifies how the GTMT#bitmap is cached to memory.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.IconBitmapDecoder.#ctor(System.Uri,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.IconBitmapDecoder"></see> class from the specified <see cref="T:System.Uri"></see>, with the specified createOptions and cacheOption.</summary>
			<param name="createOptions">Initialization options for the GTMT#bitmap image.</param>
			<param name="bitmapUri">The <see cref="T:System.Uri"></see> that identifies the GTMT#bitmap to decode.</param>
			<param name="cacheOption">Specifies how the GTMT#bitmap is cached to memory.</param>
		</member>
		<member name="T:System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter">
			<summary>Enables in-place updates to existing blocks of <see cref="T:System.Windows.Media.Imaging.BitmapMetadata"></see>. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter.Clone">
			<summary>Creates a modifiable clone (deep copy) of this instance of <see cref="T:System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter"></see>.</summary>
			<returns>The copy of the <see cref="T:System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter"></see>.</returns>
		</member>
		<member name="M:System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter.TrySave">
			<summary>Gets a value that indicates whether image GTMT#metadata can be saved successfully.</summary>
			<returns>true if GTMT#bitmap GTMT#metadata can be written successfully; otherwise, false.</returns>
		</member>
		<member name="T:System.Windows.Media.Imaging.JpegBitmapDecoder">
			<summary>Defines a decoder for TLA#tla_jpegorg encoded images. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.JpegBitmapDecoder.#ctor(System.IO.Stream,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.JpegBitmapDecoder"></see> class from the specified file stream, with the specified createOptions and cacheOption.</summary>
			<param name="createOptions">Initialization options for the GTMT#bitmap image.</param>
			<param name="bitmapStream">The bitmap stream to decode.</param>
			<param name="cacheOption">Specifies how the GTMT#bitmap is cached to memory.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.JpegBitmapDecoder.#ctor(System.Uri,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.JpegBitmapDecoder"></see> class from the specified <see cref="T:System.Uri"></see>, with the specified createOptions and cacheOption.</summary>
			<param name="createOptions">Initialization options for the GTMT#bitmap image.</param>
			<param name="bitmapUri">The <see cref="T:System.Uri"></see> that identifies the GTMT#bitmap to decode.</param>
			<param name="cacheOption">Specifies how the GTMT#bitmap is cached to memory.</param>
		</member>
		<member name="T:System.Windows.Media.Imaging.JpegBitmapEncoder">
			<summary>Defines an encoder that is used to encode TLA#tla_jpegorg format images. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.JpegBitmapEncoder.#ctor">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.JpegBitmapEncoder"></see>.</summary>
		</member>
		<member name="P:System.Windows.Media.Imaging.JpegBitmapEncoder.FlipHorizontal">
			<summary>Gets or sets a value that indicates whether a TLA#tla_jpegorg image should be flipped horizontally during encoding.</summary>
			<returns>true if the image is flipped horizontally during encoding; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.JpegBitmapEncoder.FlipVertical">
			<summary>Gets or sets a value that indicates whether a TLA#tla_jpegorg image should be flipped vertically during encoding.</summary>
			<returns>true if the image is flipped vertically during encoding; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.JpegBitmapEncoder.QualityLevel">
			<summary>Gets or sets a value that indicates the quality level of the resulting TLA#tla_jpegorg image.</summary>
			<returns>The quality level of the TLA2#tla_jpegorg image. The value is expressed numerically and must be between one and one hundred. One hundred indicates the highest quality level, while one indicates the lowest.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.JpegBitmapEncoder.Rotation">
			<summary>Gets or sets a value that represents the degree to which a TLA#tla_jpegorg image is rotated.</summary>
			<returns>The degree to which the image is rotated.</returns>
		</member>
		<member name="T:System.Windows.Media.Imaging.LateBoundBitmapDecoder">
			<summary>Represents a container for GTMT#bitmap frames. This class cannot be inherited.</summary>
		</member>
		<member name="P:System.Windows.Media.Imaging.LateBoundBitmapDecoder.CodecInfo">
			<summary>Gets information that describes this GTMT#codec.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapCodecInfo"></see>. This property has no default value. If the late bound decoder is still downloading, this property returns null.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.LateBoundBitmapDecoder.ColorContexts">
			<summary>Gets a value that represents the color profile that is associated with a GTMT#bitmap, if one is defined.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.ColorContext"></see> that represents the embedded color profile of the GTMT#bitmap. If no color profile has been defined, or if the <see cref="T:System.Windows.Media.Imaging.LateBoundBitmapDecoder"></see> is still downloading content, this property returns null. This property has no default value.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.LateBoundBitmapDecoder.Decoder">
			<summary>Gets the underlying decoder that is associated with this late-bound decoder.</summary>
			<returns>The underlying <see cref="T:System.Windows.Media.Imaging.BitmapDecoder"></see>. If the <see cref="T:System.Windows.Media.Imaging.LateBoundBitmapDecoder"></see> is still downloading a GTMT#bitmap, the underlying decoder is null. Otherwise, the underlying decoder is created on first access.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.LateBoundBitmapDecoder.Frames">
			<summary>Gets the content of an individual frame within a GTMT#bitmap.</summary>
			<returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>. This property has no default value.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.LateBoundBitmapDecoder.IsDownloading">
			<summary>Gets a value that indicates whether the decoder is currently downloading content.</summary>
			<returns>true if the decoder is downloading content; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.LateBoundBitmapDecoder.Palette">
			<summary>Gets the <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see> that is associated with this decoder.</summary>
			<returns>The <see cref="T:System.Windows.Media.Imaging.BitmapPalette"></see> that is associated with this decoder. If the GTMT#bitmap has no palette, or if the <see cref="T:System.Windows.Media.Imaging.LateBoundBitmapDecoder"></see> is still downloading content, this property returns null. This property has no default value.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.LateBoundBitmapDecoder.Preview">
			<summary>Gets a <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> that represents the global preview of this GTMT#bitmap, if one is defined.</summary>
			<returns>A <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> that represents the global preview of the GTMT#bitmap. If no preview is defined, or if the <see cref="T:System.Windows.Media.Imaging.LateBoundBitmapDecoder"></see> is still downloading content, this property returns null. This property has no default value.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.LateBoundBitmapDecoder.Thumbnail">
			<summary>Gets a <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> that represents the GTMT#thumbnail of the GTMT#bitmap, if one is defined.</summary>
			<returns>A <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see> that represents a GTMT#thumbnail of the bitmap. If no GTMT#thumbnail is defined, or if the <see cref="T:System.Windows.Media.Imaging.LateBoundBitmapDecoder"></see> is still downloading content, this property returns null. This property has no default value.</returns>
		</member>
		<member name="T:System.Windows.Media.Imaging.PngBitmapDecoder">
			<summary>Defines a decoder for TLA#tla_png encoded images.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.PngBitmapDecoder.#ctor(System.IO.Stream,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.PngBitmapDecoder"></see> from the specified file stream with the specified createOptions and cacheOption.</summary>
			<param name="createOptions">Initialization options for the GTMT#bitmap image.</param>
			<param name="bitmapStream">The bitmap stream to decode.</param>
			<param name="cacheOption">Specifies how the GTMT#bitmap is cached to memory.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.PngBitmapDecoder.#ctor(System.Uri,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.PngBitmapDecoder"></see> from the specified <see cref="T:System.Uri"></see> with the specified createOptions and cacheOption.</summary>
			<param name="createOptions">Initialization options for the GTMT#bitmap image.</param>
			<param name="bitmapUri">The <see cref="T:System.Uri"></see> that identifies the GTMT#bitmap to decode.</param>
			<param name="cacheOption">Specifies how the GTMT#bitmap is cached to memory.</param>
		</member>
		<member name="T:System.Windows.Media.Imaging.PngBitmapEncoder">
			<summary>Defines an encoder that is used to encode TLA#tla_png format images. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.PngBitmapEncoder.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.PngBitmapEncoder"></see> class.</summary>
		</member>
		<member name="P:System.Windows.Media.Imaging.PngBitmapEncoder.Interlace">
			<summary>Gets or sets a value that indicates whether the TLA#tla_png bitmap should interlace.</summary>
			<returns>An <see cref="P:System.Windows.Media.Imaging.PngBitmapEncoder.Interlace"></see> value. The default is <see cref="F:System.Windows.Media.Imaging.PngInterlaceOption.Default"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.Imaging.PngInterlaceOption">
			<summary>Specifies whether a TLA#tla_png format image is interlaced during encoding.</summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.PngInterlaceOption.Default">
			<summary>The <see cref="T:System.Windows.Media.Imaging.PngBitmapEncoder"></see> determines whether the image should be interlaced.</summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.PngInterlaceOption.Off">
			<summary>The resulting GTMT#bitmap image is not interlaced.</summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.PngInterlaceOption.On">
			<summary>The resulting GTMT#bitmap image is interlaced.</summary>
		</member>
		<member name="T:System.Windows.Media.Imaging.RenderTargetBitmap">
			<summary>Used to convert a <see cref="T:System.Windows.Media.Visual"></see> object into a GTMT#bitmap. </summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.RenderTargetBitmap.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Windows.Media.PixelFormat)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.RenderTargetBitmap"></see> class that has the specified parameters.  </summary>
			<param name="pixelWidth">The width of the Bitmap.</param>
			<param name="dpiY">Vertical DPI of the Bitmap.</param>
			<param name="dpiX">Horizontal DPI of the Bitmap.</param>
			<param name="pixelHeight">The height of the Bitmap.</param>
			<param name="pixelFormat">Format of the Bitmap.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.RenderTargetBitmap.Render(System.Windows.Media.Visual)">
			<summary>Renders the <see cref="T:System.Windows.Media.Visual"></see> object.</summary>
			<param name="visual">The <see cref="T:System.Windows.Media.Visual"></see> object to be used as a GTMT#bitmap.</param>
		</member>
		<member name="T:System.Windows.Media.Imaging.Rotation">
			<summary>Specifies the rotation to apply to a GTMT#bitmap image. </summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.Rotation.Rotate0">
			<summary>The GTMT#bitmap is not rotated. This is the default value.</summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.Rotation.Rotate180">
			<summary>Rotate the GTMT#bitmap clockwise by 180 degrees.</summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.Rotation.Rotate270">
			<summary>Rotate the GTMT#bitmap clockwise by 270 degrees.</summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.Rotation.Rotate90">
			<summary>Rotate the GTMT#bitmap clockwise by 90 degrees.</summary>
		</member>
		<member name="T:System.Windows.Media.Imaging.TiffBitmapDecoder">
			<summary>Defines a decoder for TLA#tla_tiff encoded images. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.TiffBitmapDecoder.#ctor(System.IO.Stream,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.TiffBitmapDecoder"></see> class from the specified file stream, with the specified createOptions and cacheOption.</summary>
			<param name="createOptions">Initialization options for the GTMT#bitmap image.</param>
			<param name="bitmapStream">The bitmap stream to decode.</param>
			<param name="cacheOption">Specifies how the GTMT#bitmap is cached to memory.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.TiffBitmapDecoder.#ctor(System.Uri,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.TiffBitmapDecoder"></see> class from the specified <see cref="T:System.Uri"></see>, with the specified createOptions and cacheOption.</summary>
			<param name="createOptions">Initialization options for the GTMT#bitmap image.</param>
			<param name="bitmapUri">The <see cref="T:System.Uri"></see> that identifies the GTMT#bitmap to decode.</param>
			<param name="cacheOption">Specifies how the GTMT#bitmap is cached to memory.</param>
		</member>
		<member name="T:System.Windows.Media.Imaging.TiffBitmapEncoder">
			<summary>Defines an encoder that is used to encode TLA#tla_tiff format images.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.TiffBitmapEncoder.#ctor">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.TiffBitmapEncoder"></see>.</summary>
		</member>
		<member name="P:System.Windows.Media.Imaging.TiffBitmapEncoder.Compression">
			<summary>Gets or sets a value that indicates the type of compression that is used by this TLA#tla_tiff image.</summary>
			<returns>A <see cref="T:System.Windows.Media.Imaging.TiffCompressOption"></see> value. The default value is <see cref="F:System.Windows.Media.Imaging.TiffCompressOption.Default"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.Imaging.TiffCompressOption">
			<summary>Specifies the possible compression schemes for TLA#tla_tiff GTMT#bitmap images.</summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.TiffCompressOption.Ccitt3">
			<summary>The CCITT3 compression schema is used.</summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.TiffCompressOption.Ccitt4">
			<summary>The CCIT4 compression schema is used.</summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.TiffCompressOption.Default">
			<summary>The <see cref="T:System.Windows.Media.Imaging.TiffBitmapEncoder"></see> encoder attempts to save the GTMT#bitmap with the best possible compression schema. </summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.TiffCompressOption.Lzw">
			<summary>The LZW compression schema is used. </summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.TiffCompressOption.None">
			<summary>The TLA#tla_tiff image is not compressed.</summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.TiffCompressOption.Rle">
			<summary>The RLE compression schema is used.</summary>
		</member>
		<member name="F:System.Windows.Media.Imaging.TiffCompressOption.Zip">
			<summary>Zip deflate compression is used. </summary>
		</member>
		<member name="T:System.Windows.Media.Imaging.TransformedBitmap">
			<summary>Scales and rotates a <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.TransformedBitmap.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.TransformedBitmap"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.TransformedBitmap.#ctor(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Transform)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.TransformedBitmap"></see> class that has the specified <see cref="P:System.Windows.Media.Imaging.TransformedBitmap.Source"></see> and <see cref="P:System.Windows.Media.Imaging.TransformedBitmap.Transform"></see>. </summary>
			<param name="source">The <see cref="P:System.Windows.Media.Imaging.TransformedBitmap.Source"></see> of the new <see cref="T:System.Windows.Media.Imaging.TransformedBitmap"></see> instance.</param>
			<param name="newTransform">The <see cref="P:System.Windows.Media.Imaging.TransformedBitmap.Transform"></see> of the new <see cref="T:System.Windows.Media.Imaging.TransformedBitmap"></see> instance.</param>
		</member>
		<member name="F:System.Windows.Media.Imaging.TransformedBitmap.SourceProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Imaging.TransformedBitmap.Source"></see> GTMT#dependency property. This field is read-only. </summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.TransformedBitmap.Source"></see> GTMT#dependency property.</returns>
		</member>
		<member name="F:System.Windows.Media.Imaging.TransformedBitmap.TransformProperty">
			<summary>Identifies the <see cref="P:System.Windows.Media.Imaging.TransformedBitmap.Transform"></see> GTMT#dependency property. This field is read-only.</summary>
			<returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.TransformedBitmap.Transform"></see> GTMT#dependency property.</returns>
		</member>
		<member name="M:System.Windows.Media.Imaging.TransformedBitmap.Clone">
			<summary>Creates a modifiable copy of the <see cref="T:System.Windows.Media.Imaging.TransformedBitmap"></see>.</summary>
			<returns>The copy of the <see cref="T:System.Windows.Media.Imaging.TransformedBitmap"></see>.</returns>
		</member>
		<member name="M:System.Windows.Media.Imaging.TransformedBitmap.CloneCurrentValue">
			<summary>Returns a modifiable copy of this <see cref="T:System.Windows.Media.Imaging.TransformedBitmap"></see>. The copy has the current values for an existing <see cref="T:System.Windows.Freezable"></see> object instead of its metadata default values.</summary>
			<returns>The returned modifiable copy.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.TransformedBitmap.Source">
			<summary>Gets or sets the source for the GTMT#bitmap. </summary>
			<returns>The source for the GTMT#bitmap. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Imaging.TransformedBitmap.Transform">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.Transform"></see>, which specifies the scale or rotation of the GTMT#bitmap. </summary>
			<returns>The <see cref="T:System.Windows.Media.Transform"></see>, which specifies the scale or rotation of the GTMT#bitmap. The default value is <see cref="P:System.Windows.Media.Transform.Identity"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.Imaging.WmpBitmapDecoder">
			<summary>Defines a decoder for TLA#tla_wdp encoded images.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.WmpBitmapDecoder.#ctor(System.IO.Stream,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.WmpBitmapDecoder"></see> from the specified file stream with the specified createOptions and cacheOption.</summary>
			<param name="createOptions">Initialization options for the GTMT#bitmap image.</param>
			<param name="bitmapStream">The bitmap stream to decode.</param>
			<param name="cacheOption">Specifies how the GTMT#bitmap is cached to memory.</param>
		</member>
		<member name="M:System.Windows.Media.Imaging.WmpBitmapDecoder.#ctor(System.Uri,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.WmpBitmapDecoder"></see> from the specified <see cref="T:System.Uri"></see> with the specified createOptions and cacheOption.</summary>
			<param name="createOptions">Initialization options for the GTMT#bitmap image.</param>
			<param name="bitmapUri">The <see cref="T:System.Uri"></see> that identifies the GTMT#bitmap to decode.</param>
			<param name="cacheOption">Specifies how the GTMT#bitmap is cached to memory.</param>
		</member>
		<member name="T:System.Windows.Media.Imaging.WmpBitmapEncoder">
			<summary>Defines an encoder that is used to encode TLA#tla_wdp images.</summary>
		</member>
		<member name="M:System.Windows.Media.Imaging.WmpBitmapEncoder.#ctor">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.WmpBitmapEncoder"></see>.</summary>
		</member>
		<member name="T:System.Windows.Media.Media3D.AffineTransform3D">
			<summary> Base class from which all concrete affine TLA#tla_3d transforms—translations, rotations, and scale transformations—derive </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.AffineTransform3D.Clone">
			<summary>Returns a modifiable copy of the transformation. </summary>
			<returns>A modifiable copy of the transformation. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.AffineTransform3D.CloneCurrentValue">
			<summary>Returns a non-animated version of the transformation. The returned transform represents the current object's state at the time this method was called.</summary>
			<returns>Returns the current value of the transformation. The returned transform has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.AffineTransform3D.IsAffine">
			<summary>Gets a value that indicates whether the transformation is affine. </summary>
			<returns>True if the transformation is affine, false otherwise.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.AmbientLight">
			<summary> Light object that applies light to objects uniformly, regardless of their shape. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.AmbientLight.#ctor">
			<summary>Creates a new <see cref="T:System.Windows.Media.Media3D.AmbientLight"></see>. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.AmbientLight.#ctor(System.Windows.Media.Color)">
			<summary>Creates a new <see cref="T:System.Windows.Media.Media3D.AmbientLight"></see> with the specified color.</summary>
			<param name="ambientColor">Color of the new light.</param>
		</member>
		<member name="T:System.Windows.Media.Media3D.AxisAngleRotation3D">
			<summary>Represents a 3-D rotation of a specified angle about a specified axis.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.AxisAngleRotation3D.#ctor">
			<summary>Creates an instance of a 3-D rotation.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.AxisAngleRotation3D.#ctor(System.Windows.Media.Media3D.Vector3D,System.Double)">
			<summary>Creates an instance of a 3-D rotation using the specified axis and angle.</summary>
			<param name="axis"><see cref="T:System.Windows.Media.Media3D.Vector3D"></see> that specifies the axis around which to rotate.</param>
			<param name="angle">Double that specifies the angle of rotation, in degrees.</param>
		</member>
		<member name="F:System.Windows.Media.Media3D.AxisAngleRotation3D.AngleProperty">
			<summary>The DependencyProperty for the AxisAngleRotation3D.Angle property.</summary>
		</member>
		<member name="F:System.Windows.Media.Media3D.AxisAngleRotation3D.AxisProperty">
			<summary>The DependencyProperty for the AxisAngleRotation3D.Axis property.</summary>
		</member>
		<member name="P:System.Windows.Media.Media3D.AxisAngleRotation3D.Angle">
			<summary>Gets or sets the angle of a 3-D rotation, in degrees.</summary>
			<returns>Double that specifies the angle of a 3-D rotation, in degrees.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.AxisAngleRotation3D.Axis">
			<summary>Gets or sets the axis of a 3-D rotation.</summary>
			<returns><see cref="T:System.Windows.Media.Media3D.Vector3D"></see> that specifies the axis of rotation.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.Camera">
			<summary>Represents an imaginary viewing position and direction in TLA#tla_3d coordinate space that describes how a TLA2#tla_3d model is projected onto a TLA#tla_2d visual. </summary>
		</member>
		<member name="F:System.Windows.Media.Media3D.Camera.TransformProperty">
			<summary>The DependencyProperty for the Camera.Transform property.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Camera.System.IFormattable.ToString(System.String,System.IFormatProvider)">
			<summary>Creates a string representation of this object based on the format string and IFormatProvider passed in. </summary>
			<returns>String representation of this object.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Camera.ToString">
			<summary>Creates a string representation of this object based on the current culture settings. </summary>
			<returns>String representation of this object.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Camera.ToString(System.IFormatProvider)">
			<summary>Creates a string representation of this object based on the current culture settings. </summary>
			<returns>String representation of this object.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Camera.Transform">
			<summary>Gets or sets the Transform3D applied to the camera.</summary>
			<returns>Transform3D applied to the camera.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.DiffuseMaterial">
			<summary> Allows the application of a TLA#tla_2d brush, like a SolidColorBrush or TileBrush, to a diffusely-lit TLA#tla_3d model. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.DiffuseMaterial.#ctor">
			<summary> Constructs a DiffuseMaterial. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.DiffuseMaterial.#ctor(System.Windows.Media.Brush)">
			<summary>Constructs a DiffuseMaterial with the specified Brush property. </summary>
			<param name="brush">The new material's brush.</param>
		</member>
		<member name="P:System.Windows.Media.Media3D.DiffuseMaterial.AmbientColor">
			<summary>Gets or sets a color that represents the ambient color emitted by the <see cref="T:System.Windows.Media.Media3D.Material"></see>.</summary>
			<returns>The color of the ambient light emitted by the 3D object. The default value is #FFFFFF.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.DiffuseMaterial.Brush">
			<summary>Brush to be applied as a Material to a TLA#tla_3d model. </summary>
			<returns>Brush to apply.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.DiffuseMaterial.Color">
			<summary>Gets or sets the color allowed to emit from the <see cref="T:System.Windows.Media.Media3D.Material"></see>.</summary>
			<returns>The color allowed to emit from the <see cref="T:System.Windows.Media.Media3D.Material"></see>. The default value is #FFFFFF. Since all colors make up white, all colors are visible by default.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.DirectionalLight">
			<summary>Light object that projects its effect along a direction specified by a Vector3D. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.DirectionalLight.#ctor">
			<summary>Creates an instance of a light that projects its effect in a specified direction. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.DirectionalLight.#ctor(System.Windows.Media.Color,System.Windows.Media.Media3D.Vector3D)">
			<summary>Creates an instance of a light that projects its effect along a specified Vector3D with a specified color.</summary>
			<param name="direction">Direction of the new light.</param>
			<param name="diffuseColor">Diffuse color of the new light.</param>
		</member>
		<member name="F:System.Windows.Media.Media3D.DirectionalLight.DirectionProperty">
			<summary> Identifies the Direction GTMT#dependency property. </summary>
			<returns>The Direction GTMT#dependency property identifier.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.DirectionalLight.Direction">
			<summary> Represents the vector along which the light's effect will be seen on models in a 3-D scene. </summary>
			<returns>Vector3D along which the light projects, and which must have a non-zero magnitude. The default value is (0,0,-1).</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.EmissiveMaterial">
			<summary><see cref="T:System.Windows.Media.Media3D.Material"></see> that applies a <see cref="T:System.Windows.Media.Brush"></see> to a 3-D model so that it participates in lighting calculations as if the <see cref="T:System.Windows.Media.Media3D.Material"></see> were emitting light equal to the color of the <see cref="T:System.Windows.Media.Brush"></see>. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.EmissiveMaterial.#ctor">
			<summary>Creates a new EmissiveMaterial.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.EmissiveMaterial.#ctor(System.Windows.Media.Brush)">
			<summary>Creates a new EmissiveMaterial and specifies the Material's Brush. </summary>
			<param name="brush">The new Material's Brush.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.EmissiveMaterial.Clone">
			<summary>Returns a modifiable clone of the EmissiveMaterial.</summary>
			<returns>Returns a modifiable clone of the EmissiveMaterial. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.EmissiveMaterial.CloneCurrentValue">
			<summary>Returns a non-animated version of the EmissiveMaterial. The returned EmissiveMaterial represents the current object's state at the time this method was called. </summary>
			<returns>Returns the current value of the EmissiveMaterial. The returned EmissiveMaterial has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.EmissiveMaterial.Brush">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.Brush"></see> applied by the <see cref="T:System.Windows.Media.Media3D.EmissiveMaterial"></see>. </summary>
			<returns>Brush applied by the <see cref="T:System.Windows.Media.Media3D.EmissiveMaterial"></see>. The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.Geometry3D">
			<summary>Abstract class that defines the geometry of a 3-D shape.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Geometry3D.Clone">
			<summary>Returns a modifiable clone of the Geometry3D. </summary>
			<returns>Returns a modifiable clone of the Geometry3D. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Geometry3D.CloneCurrentValue">
			<summary>Returns a non-animated version of the tile brush. The returned Geometry3D represents the current object's state at the time this method was called.</summary>
			<returns>Returns the current value of the Geometry3D. The returned Geometry3D has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Geometry3D.Bounds">
			<summary> Gets the bounding Rect3D for this Geometry3D. </summary>
			<returns>Bounding Rect3D for the Geometry3D.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.GeometryModel3D">
			<summary>Creates a 3-D model comprised of a <see cref="T:System.Windows.Media.Media3D.MeshGeometry3D"></see> and a <see cref="T:System.Windows.Media.Media3D.Material"></see>. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.GeometryModel3D.#ctor">
			<summary>Creates a new instance of GeometryModel3D. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.GeometryModel3D.#ctor(System.Windows.Media.Media3D.Geometry3D,System.Windows.Media.Media3D.Material)">
			<summary>Creates a new instance of GeometryModel3D with the specified Geometry3D and Material. </summary>
			<param name="material">Material of the new mesh primitive.</param>
			<param name="geometry">Geometry of the new mesh primitive.</param>
		</member>
		<member name="F:System.Windows.Media.Media3D.GeometryModel3D.BackMaterialProperty">
			<summary>DependencyProperty for the BackMaterial Property.</summary>
		</member>
		<member name="F:System.Windows.Media.Media3D.GeometryModel3D.GeometryProperty">
			<summary> Identifies the Geometry GTMT#dependency property. </summary>
			<returns>The Geometry GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.Media3D.GeometryModel3D.MaterialProperty">
			<summary> Identifies the Material GTMT#dependency property. </summary>
			<returns>The Material GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.GeometryModel3D.Clone">
			<summary>Returns a modifiable clone of the GeometryModel3D.</summary>
			<returns>Returns a modifiable clone of the GeometryModel3D. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.GeometryModel3D.CloneCurrentValue">
			<summary>Returns a non-animated version of the GeometryModel3D. </summary>
			<returns>Returns the current value of the GeometryModel3D. The returned GeometryModel3D has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.GeometryModel3D.BackMaterial">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.Media3D.Material"></see> to be applied to the back of a <see cref="T:System.Windows.Media.Media3D.Model3D"></see>.</summary>
			<returns>The <see cref="T:System.Windows.Media.Media3D.Material"></see> applied to the back of the <see cref="T:System.Windows.Media.Media3D.Model3D"></see>. The default value is null.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.GeometryModel3D.Geometry">
			<summary> Gets or sets the geometry of a <see cref="T:System.Windows.Media.Media3D.GeometryModel3D"></see>.</summary>
			<returns><see cref="T:System.Windows.Media.Media3D.Geometry3D"></see> that comprises the model.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.GeometryModel3D.Material">
			<summary> Gets or sets the <see cref="T:System.Windows.Media.Media3D.Material"></see> of a <see cref="T:System.Windows.Media.Media3D.GeometryModel3D"></see></summary>
			<returns><see cref="T:System.Windows.Media.Media3D.Material"></see> applied to the <see cref="T:System.Windows.Media.Media3D.GeometryModel3D"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.HitTestParameters3D">
			<summary>Abstract class that represents the parameters of a 3D hit test.</summary>
		</member>
		<member name="T:System.Windows.Media.Media3D.Light">
			<summary>Model3D object that represents lighting applied to a TLA#tla_3d scene.  </summary>
		</member>
		<member name="P:System.Windows.Media.Media3D.Light.Color">
			<summary> Gets or sets the color of the light. </summary>
			<returns>Color of the light.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.Material">
			<summary>Abstract base class for materials.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Material.System.IFormattable.ToString(System.String,System.IFormatProvider)">
			<summary> Creates a string representation of this object based on the format string and IFormatProvider passed in. If the provider is null, the CurrentCulture is used. See the documentation for IFormattable for more information. </summary>
			<returns>A string representation of this object.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Material.ToString">
			<summary> Creates a string representation of the object based on the current culture. </summary>
			<returns>String representation of the object.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Material.ToString(System.IFormatProvider)">
			<summary> Creates a string representation of the object based on the current culture. </summary>
			<returns>String representation of the object.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.MaterialCollection">
			<summary>Collection of <see cref="T:System.Windows.Media.Media3D.Material"></see> objects. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.MaterialCollection.System.Collections.IEnumerable.GetEnumerator">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="T:System.Windows.Media.Media3D.MaterialCollection.Enumerator">
			<summary> Enumerates items in an _collection. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.MaterialCollection.Enumerator.MoveNext">
			<summary> Advances the enumerator to the next element of the collection. </summary>
			<returns>true if the enumerator was successfully advanced to the next element, false if the enumerator has passed the end of the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.MaterialGroup">
			<summary>Represents a <see cref="T:System.Windows.Media.Media3D.Material"></see> that is a composite of the Materials in its collection.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.MaterialGroup.#ctor">
			<summary>Creates a new instance of MaterialGroup. </summary>
		</member>
		<member name="P:System.Windows.Media.Media3D.MaterialGroup.Children">
			<summary> Gets or sets a collection of child <see cref="T:System.Windows.Media.Media3D.Material"></see> objects.</summary>
			<returns><see cref="T:System.Windows.Media.Media3D.MaterialCollection"></see> that contains the child <see cref="T:System.Windows.Media.Media3D.Material"></see> objects.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.Matrix3D">
			<summary> Represents a 4 x 4 matrix used for transformations in TLA#tla_3d space. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
			<summary> Constructor that sets matrix's initial values. </summary>
			<param name="m14">Value of the (1,4) field of the new matrix.</param>
			<param name="m44">Value of the (4,4) field of the new matrix.</param>
			<param name="m12">Value of the (1,2) field of the new matrix.</param>
			<param name="m13">Value of the (1,3) field of the new matrix.</param>
			<param name="m11">Value of the (1,1) field of the new matrix.</param>
			<param name="m34">Value of the (3,4) field of the new matrix.</param>
			<param name="m24">Value of the (2,4) field of the new matrix.</param>
			<param name="m32">Value of the (3,2) field of the new matrix.</param>
			<param name="m33">Value of the (3,3) field of the new matrix.</param>
			<param name="m21">Value of the (2,1) field of the new matrix.</param>
			<param name="m31">Value of the (3,1) field of the new matrix.</param>
			<param name="m23">Value of the (2,3) field of the new matrix.</param>
			<param name="m22">Value of the (2,2) field of the new matrix.</param>
			<param name="offsetZ">Value of the Z offset field of the new matrix.</param>
			<param name="offsetY">Value of the Y offset field of the new matrix.</param>
			<param name="offsetX">Value of the X offset field of the new matrix.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.Append(System.Windows.Media.Media3D.Matrix3D)">
			<summary> Appends a specified matrix to the current matrix. </summary>
			<param name="matrix">Matrix to append.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.Equals(System.Windows.Media.Media3D.Matrix3D)">
			<summary>Tests equality between two matrices. </summary>
			<returns>Boolean that indicates whether the matrices are equal.</returns>
			<param name="value">The Matrix3D to which to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.Equals(System.Object)">
			<summary> Tests equality between two matrices. </summary>
			<returns>Boolean that indicates whether the matrices are equal.</returns>
			<param name="o">Object to test for equality.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.Equals(System.Windows.Media.Media3D.Matrix3D,System.Windows.Media.Media3D.Matrix3D)">
			<summary> Tests equality between two matrices. </summary>
			<returns>Boolean that indicates whether the matrices are equal.</returns>
			<param name="matrix1">The first Matrix3D to compare.</param>
			<param name="matrix2">The second Matrix3D to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.GetHashCode">
			<summary>Returns the hash code for this matrix </summary>
			<returns>Integer that specifies the hash code for this matrix.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.Invert">
			<exception cref="T:System.InvalidOperationException">Throws InvalidOperationException if the matrix is not invertible.</exception>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.Multiply(System.Windows.Media.Media3D.Matrix3D,System.Windows.Media.Media3D.Matrix3D)">
			<summary>Multiplies the specified matrices. </summary>
			<returns><see cref="T:System.Windows.Media.Media3D.Matrix3D"></see> that is the result of multiplication.</returns>
			<param name="matrix1">Matrix to multiply.</param>
			<param name="matrix2">Matrix by which the first matrix is multiplied.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.op_Equality(System.Windows.Media.Media3D.Matrix3D,System.Windows.Media.Media3D.Matrix3D)">
			<summary> Compares two <see cref="T:System.Windows.Media.Media3D.Matrix3D"></see> instances for exact equality. </summary>
			<returns>Boolean that indicates whether the two matrix instances are equal.</returns>
			<param name="matrix1">The first matrix to compare.</param>
			<param name="matrix2">The second matrix to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.op_Inequality(System.Windows.Media.Media3D.Matrix3D,System.Windows.Media.Media3D.Matrix3D)">
			<summary>Compares two <see cref="T:System.Windows.Media.Media3D.Matrix3D"></see> instances for exact inequality. </summary>
			<returns>Boolean that indicates whether the two matrix instances are inequal.</returns>
			<param name="matrix1">The first matrix to compare.</param>
			<param name="matrix2">The second matrix to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.op_Multiply(System.Windows.Media.Media3D.Matrix3D,System.Windows.Media.Media3D.Matrix3D)">
			<summary> Multiplies the specified matrices. </summary>
			<returns><see cref="T:System.Windows.Media.Media3D.Matrix3D"></see> that is the result of multiplication.</returns>
			<param name="matrix1">Matrix to multiply.</param>
			<param name="matrix2">Matrix by which the first matrix is multiplied.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.Parse(System.String)">
			<summary>              Returns an instance converted from the provided string using the current culture  source</summary>
			<param name="source">String</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.Prepend(System.Windows.Media.Media3D.Matrix3D)">
			<summary> Prepends a specified matrix to the current matrix. </summary>
			<param name="matrix">Matrix to prepend.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.Rotate(System.Windows.Media.Media3D.Quaternion)">
			<summary>Appends a rotation transform to the current matrix. </summary>
			<param name="quaternion">Quaternion that represents the rotation.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.RotateAt(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Point3D)">
			<summary> Appends rotation transform to the current matrix. </summary>
			<param name="quaternion">Quaternion representing rotation.</param>
			<param name="center">Center to rotate around.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.RotateAtPrepend(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Point3D)">
			<summary> Prepends rotation transform to the current matrix. </summary>
			<param name="quaternion">Quaternion representing rotation.</param>
			<param name="center">Center to rotate around.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.RotatePrepend(System.Windows.Media.Media3D.Quaternion)">
			<summary>Prepends a rotation transform to the current matrix. </summary>
			<param name="quaternion">Quaternion representing rotation.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.Scale(System.Windows.Media.Media3D.Vector3D)">
			<summary>Appends a scale transform to the current matrix. </summary>
			<param name="scalingVector">Scaling vector for transformation.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.ScaleAt(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Point3D)">
			<summary>Appends a scale transform to the current matrix. </summary>
			<param name="point">Point3D around which to scale.</param>
			<param name="scalingVector">Scaling Vector3D for transformation.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.ScaleAtPrepend(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Point3D)">
			<summary> Prepends a scale transform to the current matrix. </summary>
			<param name="point">Point3D around which to scale.</param>
			<param name="scalingVector">Scaling Vector3D for transformation.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.ScalePrepend(System.Windows.Media.Media3D.Vector3D)">
			<summary>Prepends a scale transform to the current matrix. </summary>
			<param name="scalingVector">Scaling Vector3D for transformation.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.ToString">
			<summary>Creates a string representation of this object based on the current culture. </summary>
			<returns>String representation of this object.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.ToString(System.IFormatProvider)">
			<summary> Creates a string representation of this object based on the IFormatProvider passed in. If the provider is null, the CurrentCulture is used. </summary>
			<returns>String representation of this object.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.Transform(System.Windows.Media.Media3D.Point3D)">
			<summary> Transforms the given point by the current matrix. </summary>
			<returns>Transformed point.</returns>
			<param name="point">Point to transform.</param>
			<exception cref="T:System.InvalidOperationException">This will throw InvalidOperationException exception if the transform is not affine.</exception>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.Transform(System.Windows.Media.Media3D.Point3D[])">
			<summary> Transforms the given points by the current matrix. </summary>
			<param name="points">Points to transform.</param>
			<exception cref="T:System.InvalidOperationException">This will throw InvalidOperationException exception if the transform is not affine.</exception>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.Transform(System.Windows.Media.Media3D.Point4D)">
			<summary> Transforms the given point by the current matrix. </summary>
			<returns>Transformed point.</returns>
			<param name="point">Point to transform.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.Transform(System.Windows.Media.Media3D.Point4D[])">
			<summary> Transforms the given points by the current matrix. </summary>
			<param name="points">Points to transform.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.Transform(System.Windows.Media.Media3D.Vector3D)">
			<summary> Transforms the given vector by the current matrix. </summary>
			<returns>Transformed vector.</returns>
			<param name="vector">Vector to transform.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.Transform(System.Windows.Media.Media3D.Vector3D[])">
			<summary> Transforms the given vectors by the current matrix. </summary>
			<param name="vectors">Vectors to transform.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.Translate(System.Windows.Media.Media3D.Vector3D)">
			<summary> Appends translation transform to the current matrix. </summary>
			<param name="offset">Offset vector for transformation.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3D.TranslatePrepend(System.Windows.Media.Media3D.Vector3D)">
			<summary> Prepends translation transform to the current matrix. </summary>
			<param name="offset">Offset vector for transformation.</param>
		</member>
		<member name="T:System.Windows.Media.Media3D.Matrix3DConverter">
			<summary>Converter class for converting instances of other types to and from <see cref="T:System.Windows.Media.Media3D.Matrix3D"></see> instances.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3DConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Returns a value that indicates whether this type converter can convert from a specified type. </summary>
			<returns>True if this converter can convert from the specified type; false otherwise.</returns>
			<param name="context">ITypeDescriptorContext for this call.</param>
			<param name="sourceType">Type being queried for support.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3DConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Gets a value that indicates whether this type converter can convert to the given type. </summary>
			<returns>True if this converter can convert to the provided type; false if not.</returns>
			<param name="context">The ITypeDescriptorContext for this call.</param>
			<param name="destinationType">The Type being queried for support.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3DConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary>Attempts to convert to a Matrix3D from the given object. </summary>
			<returns>Matrix3D that was constructed.</returns>
			<param name="culture">The CultureInfo which is respected when converting.</param>
			<param name="context">The ITypeDescriptorContext for this call.</param>
			<param name="value">The object to convert to an instance of Matrix3D.</param>
			<exception cref="T:System.NotSupportedException">A NotSupportedException is thrown if the example object is null or is not a valid type which can be converted to a Matrix3D.</exception>
		</member>
		<member name="M:System.Windows.Media.Media3D.Matrix3DConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary>Attempts to convert an instance of Matrix3D to the given type </summary>
			<returns>Object that was constructed.</returns>
			<param name="culture">The CultureInfo which is respected when converting.</param>
			<param name="context">The ITypeDescriptorContext for this call.</param>
			<param name="destinationType">The type to which the Matrix3D instance will be converted.</param>
			<param name="value">The object to convert to an instance of destinationType.</param>
			<exception cref="T:System.NotSupportedException">A NotSupportedException is thrown if the example object is null or is not a Matrix3D, or if the destinationType isn't one of the valid destination types.</exception>
		</member>
		<member name="T:System.Windows.Media.Media3D.MatrixCamera">
			<summary>Camera that directly specifies a Matrix3D as the projection transformation of a TLA#tla_3d model to a TLA#tla_2d visual surface.   </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.MatrixCamera.#ctor">
			<summary> Creates a new instance of MatrixCamera. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.MatrixCamera.#ctor(System.Windows.Media.Media3D.Matrix3D,System.Windows.Media.Media3D.Matrix3D)">
			<summary> Creates a new MatrixCamera from view and projection matrices. </summary>
			<param name="projectionMatrix">Specifies the camera's projection matrix.</param>
			<param name="viewMatrix">Specifies the camera's view matrix.</param>
		</member>
		<member name="F:System.Windows.Media.Media3D.MatrixCamera.ProjectionMatrixProperty">
			<summary> Identifies the ProjectionMatrix GTMT#dependency property. </summary>
			<returns>The ProjectionMatrix GTMT#dependency property identifier.</returns>
		</member>
		<member name="F:System.Windows.Media.Media3D.MatrixCamera.ViewMatrixProperty">
			<summary>The DependencyProperty for the MatrixCamera.ViewMatrix property.</summary>
			<returns>The ViewMatrix GTMT#dependency property identifier.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.MatrixCamera.Clone">
			<summary>Returns a modifiable copy of the MatrixCamera.</summary>
			<returns>Modifiable copy of the MatrixCamera.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.MatrixCamera.CloneCurrentValue">
			<summary>Returns a non-animated version of the MatrixCamera.</summary>
			<returns>Non-animated version of the MatrixCamera.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.MatrixCamera.ProjectionMatrix">
			<summary> Gets or sets a Matrix3D that transforms a TLA#tla_3d scene from camera space to device space. </summary>
			<returns>Matrix3D that specifies the projection transformation.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.MatrixCamera.ViewMatrix">
			<summary> Gets or sets a Matrix3D that represents the position, look direction and up vector for the camera. </summary>
			<returns>Matrix that represents the position, look direction and up vector for the camera.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.MatrixTransform3D">
			<summary> Creates a transformation specified by a <see cref="T:System.Windows.Media.Media3D.Matrix3D"></see>, used to manipulate objects or coordinate systems in TLA#tla_3d world space. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.MatrixTransform3D.#ctor">
			<summary> Creates a new MatrixTransform3D. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.MatrixTransform3D.#ctor(System.Windows.Media.Media3D.Matrix3D)">
			<summary> Creates a new MatrixTransform3D. </summary>
			<param name="matrix">Matrix3D that specifies the transform.</param>
		</member>
		<member name="F:System.Windows.Media.Media3D.MatrixTransform3D.MatrixProperty">
			<summary> Identifies the Matrix GTMT#dependency property. </summary>
			<returns>The Matrix GTMT#dependency property identifier.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.MatrixTransform3D.IsAffine">
			<summary>Gets a value that indicates whether the transform is affine. </summary>
			<returns>Boolean that indicates whether the transform is affine.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.MatrixTransform3D.Matrix">
			<summary> Gets or sets a matrix that specifies one or more TLA#tla_3d transformations. </summary>
			<returns>Matrix that specifies one or more TLA2#tla_3d transformations.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.MatrixTransform3D.Value">
			<summary> Gets a matrix representation of the TLA#tla_3d transformation. </summary>
			<returns><see cref="T:System.Windows.Media.Matrix"></see> representation of the TLA2#tla_3d transformation.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.MeshGeometry3D">
			<summary> Triangle primitive for building a TLA#tla_3d shape. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.MeshGeometry3D.#ctor">
			<summary>Constructs a MeshGeometry3D.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.MeshGeometry3D.Clone">
			<summary>Returns a modifiable clone of the MeshGeometry3D.</summary>
			<returns>Returns a modifiable clone of the MeshGeometry3D. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's IsFrozen property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.MeshGeometry3D.CloneCurrentValue">
			<summary>Returns a non-animated version of the MeshGeometry3D. The returned MeshGeometry3D represents the current object's state at the time this method was called. </summary>
			<returns>Returns the current value of the MeshGeometry3D. The returned MeshGeometry3D has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.MeshGeometry3D.Bounds">
			<summary> Gets the bounding Rect3D for this Bounds. </summary>
			<returns>Bounding Rect3D for the <see cref="T:System.Windows.Media.Media3D.MeshGeometry3D"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.MeshGeometry3D.Normals">
			<summary>Gets or sets a collection of normal vectors for the MeshGeometry3D.</summary>
			<returns><see cref="T:System.Windows.Media.Media3D.Vector3DCollection"></see> that contains the normal vectors for the MeshGeometry3D.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.MeshGeometry3D.Positions">
			<summary> Gets or sets a collection of vertex positions for a MeshGeometry3D.</summary>
			<returns><see cref="T:System.Windows.Media.Media3D.Point3DCollection"></see> that contains the vertex positions of the MeshGeometry3D.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.MeshGeometry3D.TextureCoordinates">
			<summary>Gets or sets a collection of texture coordinates for the MeshGeometry3D.</summary>
			<returns><see cref="T:System.Windows.Media.PointCollection"></see> that contains the texture coordinates for the MeshGeometry3D.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.MeshGeometry3D.TriangleIndices">
			<summary>Gets or sets a collection of triangle indices for the MeshGeometry3D.</summary>
			<returns>Int32Collection that contains the triangle indices of the MeshGeometry3D.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.Model3D">
			<summary>Abstract class that provides functionality for TLA#tla_3d models. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Model3D.ToString">
			<summary> Creates a string representation of the object based on the current culture. </summary>
			<returns>String representation of the object.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Model3D.ToString(System.IFormatProvider)">
			<summary>Creates a string representation of the object based on the current culture. </summary>
			<returns>String representation of the object.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Model3D.Bounds">
			<summary> Gets the bounding Rect3D for this Model3D. </summary>
			<returns>Bounding <see cref="T:System.Windows.Media.Media3D.Rect3D"></see> for the model.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Model3D.Transform">
			<summary>Gets or sets the <see cref="T:System.Windows.Media.Media3D.Transform3D"></see> set on the model.</summary>
			<returns><see cref="T:System.Windows.Media.Media3D.Transform3D"></see> set on the model. The default value is <see cref="T:System.Windows.Media.Media3D.MatrixTransform3D"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.Model3DCollection">
			<summary> Collection of Model3D objects. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Model3DCollection.Add(System.Windows.Media.Media3D.Model3D)">
			<summary> Adds a Model3D object to the collection. </summary>
			<param name="value">Model3D to be added.</param>
		</member>
		<member name="T:System.Windows.Media.Media3D.Model3DCollection.Enumerator">
			<summary>Enumerates items in a collection. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Model3DCollection.Enumerator.MoveNext">
			<summary>Advances the enumerator to the next element of the collection. </summary>
			<returns>Returns true if the enumerator was successfully advanced to the next element; returns false if the enumerator has passed the end of the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Model3DCollection.Enumerator.System.IDisposable.Dispose">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Media3D.Model3DCollection.Enumerator.Current">
			<summary>Gets the current element in the collection.</summary>
			<returns>Current element in the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.Model3DGroup">
			<summary>Collection of TLA#tla_3d models.  </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Model3DGroup.#ctor">
			<summary> Creates a new Model3DGroup. </summary>
		</member>
		<member name="P:System.Windows.Media.Media3D.Model3DGroup.Children">
			<summary> Gets or sets a collection of Model3D objects. </summary>
			<returns>Collection of Model3D objects.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.ModelVisual3D">
			<summary>Visual that contains 3-D models. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.ModelVisual3D.#ctor">
			<summary>Creates an instance of <see cref="T:System.Windows.Media.Media3D.ModelVisual3D"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.ModelVisual3D.System.Windows.Markup.IAddChild.AddChild(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.ModelVisual3D.System.Windows.Markup.IAddChild.AddText(System.String)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Media3D.ModelVisual3D.Children">
			<summary>Gets a collection of child <see cref="T:System.Windows.Media.Media3D.Visual3D"></see> objects.</summary>
			<returns><see cref="T:System.Windows.Media.Media3D.Visual3DCollection"></see> that contains child <see cref="T:System.Windows.Media.Media3D.Visual3D"></see> objects.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.ModelVisual3D.Content">
			<summary>Gets or sets the model that comprises the content of the <see cref="T:System.Windows.Media.Media3D.ModelVisual3D"></see>.</summary>
			<returns><see cref="T:System.Windows.Media.Media3D.Model3D"></see> that comprises the content of the <see cref="T:System.Windows.Media.Media3D.ModelVisual3D"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.ModelVisual3D.Transform">
			<summary>Gets or sets the transform set on the <see cref="T:System.Windows.Media.Media3D.ModelVisual3D"></see>.</summary>
			<returns><see cref="T:System.Windows.Media.Media3D.Transform3D"></see> set on the <see cref="T:System.Windows.Media.Media3D.ModelVisual3D"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.OrthographicCamera">
			<summary> Represents an orthographic projection camera. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.OrthographicCamera.#ctor">
			<summary>Creates an <see cref="T:System.Windows.Media.Media3D.OrthographicCamera"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.OrthographicCamera.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Double)">
			<summary>Creates an <see cref="T:System.Windows.Media.Media3D.OrthographicCamera"></see>.</summary>
			<param name="position"><see cref="T:System.Windows.Media.Media3D.Point3D"></see> that specifies the camera position.</param>
			<param name="width">Width of the camera's angle of projection, specified in degrees.</param>
			<param name="lookDirection"><see cref="T:System.Windows.Media.Media3D.Vector3D"></see> that specifies the direction of the camera's projection.</param>
			<param name="upDirection"><see cref="T:System.Windows.Media.Media3D.Vector3D"></see> that specifies the upward direction according to the perspective of the onlooker.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.OrthographicCamera.Clone">
			<summary>Returns a modifiable copy of the OrthographicCamera. </summary>
			<returns>Modifiable copy of the OrthographicCamera.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.OrthographicCamera.CloneCurrentValue">
			<summary>Returns a non-animated version of the OrthographicCamera. </summary>
			<returns>Non-animated version of the OrthographicCamera.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.OrthographicCamera.Width">
			<summary> Gets or sets the width of the camera's viewing box, in world units. </summary>
			<returns>Width of the camera's viewing box, in world units.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.PerspectiveCamera">
			<summary> Represents a perspective projection camera. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.PerspectiveCamera.#ctor">
			<summary>Creates a <see cref="T:System.Windows.Media.Media3D.PerspectiveCamera"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.PerspectiveCamera.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Double)">
			<summary>Creates a <see cref="T:System.Windows.Media.Media3D.PerspectiveCamera"></see>.</summary>
			<param name="position">Point3D that specifies the camera's position.</param>
			<param name="lookDirection">Vector3D that specifies the direction of the camera's projection.</param>
			<param name="fieldOfView">Width of the camera's angle of projection, specified in degrees.</param>
			<param name="upDirection">Vector3D that specifies the upward direction according to the perspective of the onlooker.</param>
		</member>
		<member name="P:System.Windows.Media.Media3D.PerspectiveCamera.FieldOfView">
			<summary> Gets or sets a value that represents the camera's horizontal field of view. </summary>
			<returns>The camera's horizontal field of view, in degrees. The default value is 45.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.Point3D">
			<summary>Defines an x-, y-, and z-coordinate in TLA#tla_3d space. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3D.#ctor(System.Double,System.Double,System.Double)">
			<summary>Initializes a new instance of the Point3D structure. </summary>
			<param name="y">The <see cref="P:System.Windows.Media.Media3D.Point3D.Y"></see> value of the new <see cref="T:System.Windows.Media.Media3D.Point3D"></see> structure.</param>
			<param name="z">The <see cref="P:System.Windows.Media.Media3D.Point3D.Z"></see> value of the new <see cref="T:System.Windows.Media.Media3D.Point3D"></see> structure.</param>
			<param name="x">The <see cref="P:System.Windows.Media.Media3D.Point3D.X"></see> value of the new <see cref="T:System.Windows.Media.Media3D.Point3D"></see> structure.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3D.Add(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D)">
			<summary>Adds a Point3D structure to a Vector3D and returns the result as a Point3D structure. </summary>
			<returns>The sum of point and vector.</returns>
			<param name="point">The Point3D structure to add.</param>
			<param name="vector">The Vector3D structure to add. </param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3D.Equals(System.Object)">
			<summary>Determines whether the specified Object is a Point3D structure and if so, whether the <see cref="P:System.Windows.Media.Media3D.Point3D.X"></see>, <see cref="P:System.Windows.Media.Media3D.Point3D.Y"></see>, and <see cref="P:System.Windows.Media.Media3D.Point3D.Z"></see> properties of the specified Object are equal to the <see cref="P:System.Windows.Media.Media3D.Point3D.X"></see>, <see cref="P:System.Windows.Media.Media3D.Point3D.Y"></see>, and <see cref="P:System.Windows.Media.Media3D.Point3D.Z"></see> properties of this Point3D structure. </summary>
			<returns>true if the instances are equal; otherwise, false.true if o (the passed Object) is a Point3D structure and if it is also identical to this Point3D structure; otherwise, false.</returns>
			<param name="o">The Object to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3D.Equals(System.Windows.Media.Media3D.Point3D)">
			<summary>Compares two Point3D structures for equality.  </summary>
			<returns>true if instances are equal; otherwise, false.</returns>
			<param name="value">The instance of <see cref="T:System.Windows.Media.Media3D.Point3D"></see> to compare to this instance.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3D.Equals(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
			<summary>Compares two Point3D structures for equality. </summary>
			<returns>true if the <see cref="P:System.Windows.Media.Media3D.Point3D.X"></see>, <see cref="P:System.Windows.Media.Media3D.Point3D.Y"></see>, and <see cref="P:System.Windows.Media.Media3D.Point3D.Z"></see> values for point1 and point2 are equal; otherwise, false.</returns>
			<param name="point2">The second Point3D structure to compare.</param>
			<param name="point1">The first Point3D structure to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3D.GetHashCode">
			<summary>Gets a hash code for this Point3D structure. </summary>
			<returns>A hash code for this Point3D structure.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3D.Multiply(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Matrix3D)">
			<summary>Transforms the specified Point3D structure by the specified Matrix3D structure. </summary>
			<returns>A transformed <see cref="T:System.Windows.Media.Media3D.Point3D"></see> structure, the result of transforming point and matrix.</returns>
			<param name="matrix">The Matrix3D structure to use for the transformation.</param>
			<param name="point">The Point3D structure to transform.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3D.Offset(System.Double,System.Double,System.Double)">
			<summary>Changes the X, Y, and Z values of this Point3D structure by the specified amounts. </summary>
			<param name="offsetZ">The amount to change the Z coordinate of this Point3D structure.</param>
			<param name="offsetY">The amount to change the Y coordinate of this Point3D structure.</param>
			<param name="offsetX">The amount to change the X coordinate of this Point3D structure.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3D.op_Addition(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D)">
			<summary>Adds a <see cref="T:System.Windows.Media.Media3D.Point3D"></see> structure to a <see cref="T:System.Windows.Media.Media3D.Vector3D"></see> and returns the result as a <see cref="T:System.Windows.Media.Media3D.Point3D"></see> structure. </summary>
			<returns>A <see cref="T:System.Windows.Media.Media3D.Point3D"></see> structure that is the sum of point and vector.</returns>
			<param name="p oint">The point to add.</param>
			<param name="vector">The vector to add.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3D.op_Equality(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
			<summary>Compares two Point3D structures for equality.  </summary>
			<returns>true if the X, Y, and Z coordinates of point1 and point2 are equal; otherwise, false.</returns>
			<param name="point2">The second Point3D structure to compare.</param>
			<param name="point1">The first Point3D structure to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3D.op_Explicit(System.Windows.Media.Media3D.Point3D)~System.Windows.Media.Media3D.Point4D">
			<summary>Converts a Point3D structure into a Point4D structure. </summary>
			<returns>The result of converting point.</returns>
			<param name="point">The point to convert.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3D.op_Explicit(System.Windows.Media.Media3D.Point3D)~System.Windows.Media.Media3D.Vector3D">
			<summary>Converts a Point3D structure into a Vector3D structure. </summary>
			<returns>The result of converting point.</returns>
			<param name="p oint">The point to convert.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3D.op_Inequality(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
			<summary>Compares two Point3D structures for inequality. </summary>
			<returns>true if the X, Y, and Z coordinates of point1 and point2 are different; otherwise, false.</returns>
			<param name="point2">The second Point3D structure to compare.</param>
			<param name="point1">The first Point3D structure to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3D.op_Multiply(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Matrix3D)">
			<summary>Transforms the specified Point3D structure by the specified Matrix3D structure. </summary>
			<returns>The result of transforming point by using matrix.</returns>
			<param name="matrix">The matrix that is used to transform point.</param>
			<param name="point">The point to transform.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3D.op_Subtraction(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
			<summary>Subtracts a Point3D structure from a Point3D structure and returns the result as a Vector3D structure. </summary>
			<returns>A <see cref="T:System.Windows.Media.Media3D.Vector3D"></see> structure that represents the difference between point1 and point2.</returns>
			<param name="point2">The Point3D structure to subtract from point1.</param>
			<param name="point1">The Point3D structure on which to perform subtraction.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3D.op_Subtraction(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D)">
			<summary>Subtracts a Vector3D structure from a Point3D structure and returns the result as a Point3D structure. </summary>
			<returns>The changed <see cref="T:System.Windows.Media.Media3D.Point3D"></see> structure, the result of subtracting vector from point.</returns>
			<param name="p oint">The Point3D structure from which to subtract vector.</param>
			<param name="v ector">The Vector3D structure to subtract from point.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3D.Parse(System.String)">
			<summary>Converts a String representation of a 3-D point into the equivalent Point3D structure. </summary>
			<returns>The equivalent Point3D structure.</returns>
			<param name="source">The String representation of the 3-D point.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3D.Subtract(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
			<summary>Subtracts a Point3D structure from a Point3D structure and returns the result as a Vector3D structure. </summary>
			<returns>A <see cref="T:System.Windows.Media.Media3D.Vector3D"></see> structure that represents the difference between point1 and point2.</returns>
			<param name="point2">The Point3D structure to subtract from point1.</param>
			<param name="point1">The Point3D structure on which to perform subtraction.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3D.Subtract(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D)">
			<summary>Subtracts a Vector3D structure from a Point3D structure and returns the result as a Point3D structure. </summary>
			<returns>A changed Point3D structure, the result of subtracting vector from point.</returns>
			<param name="point">The Point3D structure from which to subtract vector.</param>
			<param name="vector">The Vector3D structure to subtract from point.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3D.ToString">
			<summary>Creates a String representation of this Point3D structure. </summary>
			<returns>A String containing the X, Y, and Z values of this Point3D structure.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3D.ToString(System.IFormatProvider)">
			<summary>Creates a String representation of this Point3D structure. </summary>
			<returns>A String containing the X, Y, and Z values of this Point3D structure.</returns>
			<param name="provider">The culture-specific formatting information.</param>
		</member>
		<member name="P:System.Windows.Media.Media3D.Point3D.X">
			<summary>Gets or sets the x-coordinate of this Point3D structure. </summary>
			<returns>The x-coordinate of this Point3D structure. The default is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Point3D.Y">
			<summary>Gets or sets the y-coordinate of this Point3D structure. </summary>
			<returns>The y-coordinate of this Point3D structure. The default is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Point3D.Z">
			<summary>Gets or sets the z-coordinate of this Point3D structure. </summary>
			<returns>The z-coordinate of this Point3D structure. The default is 0.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.Point3DCollection">
			<summary> A collection of Point3Ds. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3DCollection.System.Collections.IEnumerable.GetEnumerator">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3DCollection.ToString">
			<summary> Creates a string representation of the object based on the current culture. </summary>
			<returns>String representation of the object.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3DCollection.ToString(System.IFormatProvider)">
			<summary> Creates a string representation of the object based on the current culture. </summary>
			<returns>String representation of the object.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.Point3DCollection.Enumerator">
			<summary>Enumerates items in a <see cref="T:System.Windows.Media.Media3D.Point3DCollection"></see>. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3DCollection.Enumerator.MoveNext">
			<summary>Advances the enumerator to the next element of the collection. </summary>
			<returns>True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3DCollection.Enumerator.System.IDisposable.Dispose">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Media.Media3D.Point3DCollection.Enumerator.Current">
			<summary> Gets the current <see cref="T:System.Windows.Media.Media3D.Point3D"></see> in the collection. </summary>
			<returns><see cref="T:System.Windows.Media.Media3D.Point3D"></see> at the current position in the collection.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.Point3DCollectionConverter">
			<summary>Converts instances of other types to and from <see cref="T:System.Windows.Media.Media3D.Point3DCollection"></see> instances. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3DCollectionConverter.#ctor">
			<summary>Creates an instance of <see cref="T:System.Windows.Media.Media3D.Point3DCollectionConverter"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3DCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Returns a value that indicates whether this type converter can convert from a specified type. </summary>
			<returns>True if this converter can convert from the provided type; false otherwise.</returns>
			<param name="context">ITypeDescriptorContext for this call.</param>
			<param name="sourceType">Type being queried for support.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3DCollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Returns a value that indicates whether this type converter can convert to the specified type. </summary>
			<returns>True if this converter can convert to the provided type; false otherwise.</returns>
			<param name="context">ITypeDescriptorContext for this call.</param>
			<param name="destinationType">Type being queried for support.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3DCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary>Attempts to convert to a <see cref="T:System.Windows.Media.Media3D.Point3DCollection"></see> from the given object. </summary>
			<returns>The <see cref="T:System.Windows.Media.Media3D.Point3DCollection"></see> that was constructed.</returns>
			<param name="culture">CultureInfo that is respected when converting.</param>
			<param name="context">ITypeDescriptorContext for this call.</param>
			<param name="value">Object to convert to an instance of <see cref="T:System.Windows.Media.Media3D.Point3DCollection"></see>.</param>
			<exception cref="T:System.NotSupportedException">Thrown if the example object is null or is not a valid type that can be converted to a <see cref="T:System.Windows.Media.Media3D.Point3DCollection"></see>.</exception>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3DCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary>Attempts to convert an instance of <see cref="T:System.Windows.Media.Media3D.Point3DCollection"></see> to the specified type </summary>
			<returns>The object that was constructed.</returns>
			<param name="culture">CultureInfo which is respected when converting.</param>
			<param name="context">ITypeDescriptorContext for this call.</param>
			<param name="destinationType">Type to which this method will convert the <see cref="T:System.Windows.Media.Media3D.Point3DCollection"></see> instance.</param>
			<param name="value">Object to convert to an instance of destinationType.</param>
			<exception cref="T:System.NotSupportedException">Thrown if the example object is null or is not a <see cref="T:System.Windows.Media.Media3D.Point3DCollection"></see>, or if the destinationType isn't one of the valid destination types.</exception>
		</member>
		<member name="T:System.Windows.Media.Media3D.Point3DConverter">
			<summary> Converts instances of other types to and from a Point3D structure. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3DConverter.#ctor">
			<summary> Initializes a new instance of Point3DConverter. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3DConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines whether a class can be converted from a given type to an instance of a Point3D structure.  </summary>
			<returns>Indicates whether the type can be converted to a Point3D structure.ValueMeaningfalseThe converter cannot convert from the provided type.trueThe converter can convert the provided type to a Point3D.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="sourceType">The type of the source that is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3DConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines whether an instance of a Point3D structure can be converted to a different type. </summary>
			<returns>Indicates whether this Point3D structure can be converted to destinationType.ValueMeaningfalseThe converter cannot convert this Point3D structure to the specified type.trueThe converter can convert this Point3D structure to the specified type.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The desired type that this Point3D structure is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3DConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary> Attempts to convert a specified object to a Point3D structure. </summary>
			<returns>The Point3D structure created from the converted value.</returns>
			<param name="culture">Describes the CultureInfo of the type being converted.</param>
			<param name="context">Describes the context information of a type.</param>
			<param name="value">The object being converted.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point3DConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> Attempts to convert a Point3D structure to a specified type. </summary>
			<returns>The object created from converting this Point3D structure.</returns>
			<param name="culture">The CultureInfo which is respected when converting.</param>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The type this Point3D structure is converted to.</param>
			<param name="value">The Point3D structure to convert.</param>
		</member>
		<member name="T:System.Windows.Media.Media3D.Point4D">
			<summary> Represents an x-, y-, z-, and w-coordinate point in world space used in performing transformations with non-affine TLA#tla_3d matrices. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point4D.#ctor(System.Double,System.Double,System.Double,System.Double)">
			<summary> Initializes a new instance of a Point4D structure. </summary>
			<param name="y">The y-coordinate of the new Point4D structure.</param>
			<param name="w">The w-coordinate of the new Point4D structure.</param>
			<param name="z">The z-coordinate of the new Point4D structure.</param>
			<param name="x">The x-coordinate of the new Point4D structure.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point4D.Add(System.Windows.Media.Media3D.Point4D,System.Windows.Media.Media3D.Point4D)">
			<summary> Adds a Point4D structure to a Point4D.    </summary>
			<returns>Returns the sum of point1 and point2.</returns>
			<param name="point2">The second Point4D structure to add. </param>
			<param name="point1">The first Point4D structure to add.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point4D.Equals(System.Object)">
			<summary> Determines whether the specified Object is a Point4D structure and if the X, Y, Z, and W properties of the specified Object are equal to the X, Y, Z, and W  properties of this Point4D structure.           </summary>
			<returns>true if instances are equal; otherwise, false.true if o (the passed Object) is a Point4D structure and is identical with this Point4D structure; false otherwise.</returns>
			<param name="o">The Object to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point4D.Equals(System.Windows.Media.Media3D.Point4D)">
			<summary> Compares two Point4D structures for equality.     </summary>
			<returns>true if instances are equal; otherwise, false.</returns>
			<param name="value">The instance of Point4D to compare to this instance.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point4D.Equals(System.Windows.Media.Media3D.Point4D,System.Windows.Media.Media3D.Point4D)">
			<summary> Compares two Point4D structures for equality.      </summary>
			<returns>true if the X, Y, and Z components of point3D1 and point3D2 are equal; false otherwise.</returns>
			<param name="point2">The second Point4D structure to compare.</param>
			<param name="point1">The first Point4D structure to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point4D.GetHashCode">
			<summary> Returns a hash code for this Point4D structure. </summary>
			<returns>Returns a hash code for this Point4D structure.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point4D.Multiply(System.Windows.Media.Media3D.Point4D,System.Windows.Media.Media3D.Matrix3D)">
			<summary> Transforms the specified Point4D structure by the specified Matrix3D structure. </summary>
			<returns>Returns the result of transforming point and matrix.</returns>
			<param name="matrix">The transformation Matrix3D structure.</param>
			<param name="point">The Point4D structure to transform.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point4D.Offset(System.Double,System.Double,System.Double,System.Double)">
			<summary> Offsets the X,  Y, Z, and W values of this Point4D structure by the specified amounts. </summary>
			<param name="deltaW">The amount to offset the W coordinate of this Point4D structure.</param>
			<param name="deltaZ">The amount to offset the Z coordinate of this Point4D structure.</param>
			<param name="deltaX">The amount to offset the X coordinate of this Point4D structure.</param>
			<param name="deltaY">The amount to offset the Y coordinate of this Point4D structure.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point4D.op_Addition(System.Windows.Media.Media3D.Point4D,System.Windows.Media.Media3D.Point4D)">
			<summary> Adds a Point4D structure to a Point4D.    </summary>
			<returns>Returns the sum of point1 and point2.</returns>
			<param name="point2">The second Point4D structure to add. </param>
			<param name="point1">The first Point4D structure to add.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point4D.op_Equality(System.Windows.Media.Media3D.Point4D,System.Windows.Media.Media3D.Point4D)">
			<summary> Compares two Point4D structures for equality.     </summary>
			<returns>true if the X, Y, and Z coordinates of point4D1 and point4D2 are equal; otherwise, false.</returns>
			<param name="point2">The second Point4D structure to compare.</param>
			<param name="point1">The first Point4D structure to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point4D.op_Inequality(System.Windows.Media.Media3D.Point4D,System.Windows.Media.Media3D.Point4D)">
			<summary> Compares two Point4D structures for inequality.     </summary>
			<returns>true if the X, Y, Z, and W coordinates of point4D1 and point4D2 are different; otherwise, false.</returns>
			<param name="point2">The second Point4D structure to compare.</param>
			<param name="point1">The first Point4D structure to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point4D.op_Multiply(System.Windows.Media.Media3D.Point4D,System.Windows.Media.Media3D.Matrix3D)">
			<summary> Transforms the specified Point4D structure by the specified Matrix3D structure. </summary>
			<returns>Returns the result of transforming point and matrix.</returns>
			<param name="matrix">The transformation Matrix3D structure.</param>
			<param name="point">The Point4D structure to transform.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point4D.op_Subtraction(System.Windows.Media.Media3D.Point4D,System.Windows.Media.Media3D.Point4D)">
			<summary> Subtracts a Point4D structure from a Point4D structure and returns the result as a Point4D structure. </summary>
			<returns>Returns the difference between point1 and point2.</returns>
			<param name="point2">The Point4D structure to subtract from point1.</param>
			<param name="point1">The Point4D structure to be subtracted from.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point4D.Parse(System.String)">
			<summary> Converts a String representation of a point4D structure into the equivalent Point4D structure. </summary>
			<returns>Returns the equivalent Point4D structure.</returns>
			<param name="source">The String representation of the point4D structure.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point4D.Subtract(System.Windows.Media.Media3D.Point4D,System.Windows.Media.Media3D.Point4D)">
			<summary> Subtracts a Point4D structure from a Point4D structure. </summary>
			<returns>Returns the difference between point1 and point2.</returns>
			<param name="point2">The Point4D structure to subtract from point1.</param>
			<param name="point1">The Point4D structure to be subtracted from.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point4D.ToString">
			<summary> Creates a String representation of this Point4D structure. </summary>
			<returns>Returns a String containing the X, Y, Z, and W values of this Point4D structure.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point4D.ToString(System.IFormatProvider)">
			<summary> Creates a String representation of this Point4D structure. </summary>
			<returns>Returns a String containing the X, Y, Z, and W values of this Point4D structure.</returns>
			<param name="provider">Culture-specific formatting information.</param>
		</member>
		<member name="P:System.Windows.Media.Media3D.Point4D.W">
			<summary> Gets or sets the W component of this Point4D structure. </summary>
			<returns>The W component of this Point4D structure.  The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Point4D.X">
			<summary> Gets or sets the X component of this Point4D structure. </summary>
			<returns>The X component of this Point4D structure.  The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Point4D.Y">
			<summary> Gets or sets the Y component of this Point4D structure. </summary>
			<returns>The Y component of this Point4D structure.  The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Point4D.Z">
			<summary> Gets or sets the Z component of this Point4D structure. </summary>
			<returns>The Z component of this Point4D structure.  The default value is 0.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.Point4DConverter">
			<summary> Converts instances of other types to and from a Point4D structure. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point4DConverter.#ctor">
			<summary> Initializes a new instance of Point4DConverter. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point4DConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines whether a class can be converted from a given type to an instance of a Point4D structure.  </summary>
			<returns>Indicates whether the type can be converted to a Point4D structure.ValueMeaningfalseThe converter cannot convert from the provided type.trueThe converter can convert the provided type to a Point4D.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="sourceType">The type of the source that is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point4DConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines whether an instance of a Point4D structure can be converted to a different type. </summary>
			<returns>Indicates whether this Point4D structure can be converted to destinationType.ValueMeaningfalseThe converter cannot convert this Point4D structure to the specified type.trueThe converter can convert this Point4D structure to the specified type.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The desired type that this Point4D structure is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point4DConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary> Attempts to convert a specified object to a Point4D structure. </summary>
			<returns>The Point4D structure created from the converted value.</returns>
			<param name="culture">Describes the CultureInfo of the type being converted.</param>
			<param name="context">Describes the context information of a type.</param>
			<param name="value">The object being converted.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Point4DConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> Attempts to convert a Point4D structure to a specified type. </summary>
			<returns>The object created from converting this Point4D structure.</returns>
			<param name="culture">The CultureInfo which is respected when converting.</param>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The type this Point4D structure is converted to.</param>
			<param name="value">The Point4D structure to convert.</param>
		</member>
		<member name="T:System.Windows.Media.Media3D.PointLight">
			<summary> Light object that has a specified position in space and projects its light in all directions.  </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.PointLight.#ctor">
			<summary> Creates a new PointLight at the origin. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.PointLight.#ctor(System.Windows.Media.Color,System.Windows.Media.Media3D.Point3D)">
			<summary> Creates a new PointLight at the origin. </summary>
			<param name="position">Position of the new PointLight.</param>
			<param name="diffuseColor">Diffuse color of the new PointLight.</param>
		</member>
		<member name="T:System.Windows.Media.Media3D.PointLightBase">
			<summary>Abstract base class. Light object that has a position in space and projects its light in all directions. </summary>
		</member>
		<member name="P:System.Windows.Media.Media3D.PointLightBase.ConstantAttenuation">
			<summary>Gets or sets a constant value by which the intensity of the light diminishes over distance.</summary>
			<returns>Double by which the intensity of the light diminishes over distance.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.PointLightBase.LinearAttenuation">
			<summary>Gets or sets a value that specifies the linear diminution of the light's intensity over distance. </summary>
			<returns>Double that specifies the linear diminution of the light's intensity over distance.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.PointLightBase.Position">
			<summary>Gets or sets a <see cref="T:System.Windows.Media.Media3D.Point3D"></see> that specifies the light's position in world space. </summary>
			<returns><see cref="T:System.Windows.Media.Media3D.Point3D"></see> that specifies the light's position in world space.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.PointLightBase.QuadraticAttenuation">
			<summary>Gets or sets a value that specifies the diminution of the light's effect over distance, calculated by a quadratic operation.</summary>
			<returns>Double that specifies the diminution of the light's effect over distance, calculated by a quadratic operation.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.PointLightBase.Range">
			<summary>Gets or sets the distance beyond which the light has no effect.</summary>
			<returns>Double that specifies the distance beyond which the light has no effect.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.ProjectionCamera">
			<summary>Abstract base class that represents a 3-D projection.</summary>
		</member>
		<member name="F:System.Windows.Media.Media3D.ProjectionCamera.LookDirectionProperty">
			<summary>The DependencyProperty for the ProjectionCamera.LookDirection property.</summary>
		</member>
		<member name="F:System.Windows.Media.Media3D.ProjectionCamera.UpDirectionProperty">
			<summary>The DependencyProperty for the ProjectionCamera.LookDirection property.</summary>
		</member>
		<member name="P:System.Windows.Media.Media3D.ProjectionCamera.FarPlaneDistance">
			<summary>Gets or sets a value that specifies the distance from the camera of the scene's far clip plane. </summary>
			<returns>Double that specifies the distance from the camera of the scene's far clip plane.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.ProjectionCamera.LookDirection">
			<summary>Gets or sets a Vector3D that represents the direction of the camera's field of view.</summary>
			<returns>Vector3D that represents the direction of the camera's field of view.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.ProjectionCamera.NearPlaneDistance">
			<summary>Gets or sets a value that specifies the distance from the camera of the scene's near clip plane.</summary>
			<returns>Double that specifies the distance from the camera of the scene's near clip plane.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.ProjectionCamera.Position">
			<summary> Gets or sets the coordinate position of the camera. </summary>
			<returns><see cref="T:System.Windows.Media.Media3D.Point3D"></see> that specifies the position of the camera.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.ProjectionCamera.UpDirection">
			<summary>Gets or sets a Vector3D that represents the direction to be treated as upward in the scene projection.</summary>
			<returns>Vector3D that represents the upward direction in the scene projection.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.Quaternion">
			<summary>Structure that represents a rotation in three dimensions. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Quaternion.#ctor(System.Windows.Media.Media3D.Vector3D,System.Double)">
			<summary> Creates a new Quaternion. </summary>
			<param name="axisOfRotation"><see cref="T:System.Windows.Media.Media3D.Vector3D"></see> that represents the axis of rotation.</param>
			<param name="angleInDegrees">Angle to rotate around the specified axis, in degrees.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
			<summary> Creates a new Quaternion. </summary>
			<param name="y">Value of the new Quaternion's Y coordinate.</param>
			<param name="w">Value of the new Quaternion's W coordinate.</param>
			<param name="z">Value of the new Quaternion's Z coordinate.</param>
			<param name="x">Value of the new Quaternion's X coordinate.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Quaternion.Add(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Quaternion)">
			<summary>Adds the specified quaternions. </summary>
			<returns>Quaternion that is the result of addition.</returns>
			<param name="right">Second quaternion to add.</param>
			<param name="left">First quaternion to add.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Quaternion.Equals(System.Object)">
			<summary> Compares two Quaternion instances for equality. </summary>
			<returns>True if the two Quaternion instances are exactly equal, false otherwise.</returns>
			<param name="o">Quaternion with which to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Quaternion.Equals(System.Windows.Media.Media3D.Quaternion)">
			<summary> Compares two Quaternion instances for equality. </summary>
			<returns>True if the two Quaternion instances are exactly equal, false otherwise.</returns>
			<param name="value">Quaternion with which to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Quaternion.Equals(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Quaternion)">
			<summary> Compares two Quaternion instances for equality. </summary>
			<returns>True if the two Quaternion instances are exactly equal, false otherwise.</returns>
			<param name="quaternion2">Second Quaternion to compare.</param>
			<param name="quaternion1">First Quaternion to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Quaternion.GetHashCode">
			<summary>Returns the hash code for the Quaternion. </summary>
			<returns>Returns an integer type that represents the hash code for the Quaternion.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Quaternion.Multiply(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Quaternion)">
			<summary>Multiplies the specified Quaternions. </summary>
			<returns>Quaternion that is the result of multiplication.</returns>
			<param name="right">Second quaternion to multiply.</param>
			<param name="left">First quaternion to multiply.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Quaternion.Normalize">
			<summary>Returns a normalized quaternion. </summary>
			<returns>Quaternion that is the normal of the specified quaternion.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Quaternion.op_Addition(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Quaternion)">
			<summary>Adds the specified Quaternions.</summary>
			<returns>Quaternion that is the sum of the two specified Quaternions.</returns>
			<param name="right">Second quaternion to add.</param>
			<param name="left">First quaternion to add.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Quaternion.op_Equality(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Quaternion)">
			<summary>Compares two Quaternion instances for exact equality.</summary>
			<returns>True if the two Quaternion instances are exactly equal, false otherwise.</returns>
			<param name="quaternion2">Second Quaternion to compare.</param>
			<param name="quaternion1">First Quaternion to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Quaternion.op_Inequality(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Quaternion)">
			<summary>Compares two Quaternion instances for exact inequality. </summary>
			<returns>True if the two Quaternion instances are exactly unequal, false otherwise.</returns>
			<param name="quaternion2">Second Quaternion to compare.</param>
			<param name="quaternion1">First Quaternion to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Quaternion.op_Multiply(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Quaternion)">
			<summary>Multiplies the specified quaternion by another.</summary>
			<returns>Quaternion that is the product of multiplication.</returns>
			<param name="right">Second quaternion.</param>
			<param name="left">First quaternion.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Quaternion.op_Subtraction(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Quaternion)">
			<summary>Subtracts a specified quaternion from another.</summary>
			<returns>Quaternion that is the result of subtraction.</returns>
			<param name="right">Quaternion to subtract from the first quaternion.</param>
			<param name="left">Quaternion from which to subtract.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Quaternion.Parse(System.String)">
			<summary> Converts a string representation of a Quaternion into the equivalent Quaternion structure. </summary>
			<returns>Quaternion represented by the string.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Quaternion.Slerp(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Quaternion,System.Double)">
			<summary>Smoothly interpolates between the two given quaternions using spherical linear interpolation (SLERP). </summary>
			<returns>Interpolated quaternion.</returns>
			<param name="t">Interpolation coefficient.</param>
			<param name="to">Second quaternion for interpolation.</param>
			<param name="from">First quaternion for interpolation.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Quaternion.Subtract(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Quaternion)">
			<summary>Subtracts a Quaternion from another. </summary>
			<returns>Quaternion that is the result of subtraction.</returns>
			<param name="right">Quaternion to subtract from the first quaternion.</param>
			<param name="left">Quaternion from which to subtract.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Quaternion.System.IFormattable.ToString(System.String,System.IFormatProvider)">
			<summary>Creates a string representation of this object based on the format string and IFormatProvider passed in. </summary>
			<returns>String representation of this object.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Quaternion.ToString">
			<summary> Creates a string representation of the object. </summary>
			<returns>String representation of the object.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Quaternion.ToString(System.IFormatProvider)">
			<summary> Creates a string representation of the object. </summary>
			<returns>String representation of the object.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Quaternion.Angle">
			<summary>Gets the Quaternion's angle, in degrees. </summary>
			<returns>Double that represents the Quaternion's angle, in degrees.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Quaternion.Axis">
			<summary>Gets the Quaternion's axis.</summary>
			<returns><see cref="T:System.Windows.Media.Media3D.Vector3D"></see> that represents the Quaternion's axis.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Quaternion.Identity">
			<summary>Gets the identity Quaternion </summary>
			<returns>Identity Quaternion.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Quaternion.IsIdentity">
			<summary> Gets a value that indicates whether the specified Quaternion is an identity Quaternion. </summary>
			<returns>True if the Quaternion is the identity Quaternion, false otherwise.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Quaternion.IsNormalized">
			<summary>Gets a value that indicates whether the Quaternion is normalized.</summary>
			<returns>True if the Quaternion is normalized, false otherwise.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.QuaternionConverter">
			<summary> QuaternionConverter - Converter class for converting instances of other types to and from Quaternion instances </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.QuaternionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Gets a value that indicates whether this type converter can convert from a given type. </summary>
			<returns>True if this converter can convert from the provided type, false otherwise.</returns>
			<param name="context">ITypeDescriptorContext for this call.</param>
			<param name="sourceType">Type being queried for support.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.QuaternionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Gets a value that indicates whether this type converter can convert to the given type. </summary>
			<returns>True if this converter can convert to the provided type, false otherwise.</returns>
			<param name="context">ITypeDescriptorContext for this call.</param>
			<param name="destinationType">Type being queried for support.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.QuaternionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary>Converts the specified object to a <see cref="T:System.Windows.Media.Media3D.Quaternion"></see>. </summary>
			<returns>Quaternion that was constructed.</returns>
			<param name="culture">CultureInfo to be respected when converting.</param>
			<param name="context">ITypeDescriptorContext for this call.</param>
			<param name="value">Object to convert to an instance of Quaternion.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.QuaternionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> ConvertTo - Attempt to convert an instance of Quaternion to the given type </summary>
			<returns>The object which was constructoed.</returns>
			<param name="culture">The CultureInfo which is respected when converting.</param>
			<param name="context">The ITypeDescriptorContext for this call.</param>
			<param name="destinationType">The type to which this will convert the Quaternion instance.</param>
			<param name="value">The object to convert to an instance of "destinationType".</param>
		</member>
		<member name="T:System.Windows.Media.Media3D.QuaternionRotation3D">
			<summary>Represents a rotation transformation defined as a quaternion.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.QuaternionRotation3D.#ctor">
			<summary>Creates an instance of QuaternionRotation3D.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.QuaternionRotation3D.#ctor(System.Windows.Media.Media3D.Quaternion)">
			<summary>Creates an instance of QuaternionRotation3D that specifies the quaternion to be used for the rotation.</summary>
			<param name="quaternion">Quaternion that specifies the rotation to which to interpolate.</param>
		</member>
		<member name="F:System.Windows.Media.Media3D.QuaternionRotation3D.QuaternionProperty">
			<summary>DependencyProperty for the <see cref="P:System.Windows.Media.Media3D.QuaternionRotation3D.Quaternion"></see> property.</summary>
		</member>
		<member name="P:System.Windows.Media.Media3D.QuaternionRotation3D.Quaternion">
			<summary>Gets or sets the quaternion that defines the destination rotation.</summary>
			<returns>Quaternion that defines the destination rotation.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.RayHitTestParameters">
			<summary>Specifies the parameters of a hit test along a ray.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.RayHitTestParameters.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D)">
			<summary>Creates an instance of the object that specifies the origin and direction of the ray along which to hit test.</summary>
			<param name="direction">Vector3D that indicates the direction of the ray.</param>
			<param name="origin">Point3D at which the ray originates.</param>
		</member>
		<member name="P:System.Windows.Media.Media3D.RayHitTestParameters.Direction">
			<summary> Gets or sets a Vector3D that indicates the direction (from its origin) of the ray along which to hit test. </summary>
			<returns>Vector3D that indicates the direction of the ray along which to hit test.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.RayHitTestParameters.Origin">
			<summary> Gets the origin of the ray along which to hit test. </summary>
			<returns>Origin of the ray along which to hit test.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.RayHitTestResult">
			<summary>Represents the result of a hit test along a ray.</summary>
		</member>
		<member name="P:System.Windows.Media.Media3D.RayHitTestResult.DistanceToRayOrigin">
			<summary>Gets the distance between the hit intersection and the origin of the ray along which the hit test was performed, in device-independent pixels.</summary>
			<returns>Double that indicates the distance between the hit intersection and the origin of the ray along which the hit test was performed.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.RayHitTestResult.ModelHit">
			<summary>Gets the Model3D intersected by the ray along which the hit test was performed.</summary>
			<returns>Model3D intersected by the ray.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.RayHitTestResult.PointHit">
			<summary>Gets the Point3D at the intersection between the ray along which the hit test was performed and the hit object.</summary>
			<returns>Point3D at which the hit object was intersected by the ray.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.RayHitTestResult.VisualHit">
			<summary>Gets the Visual intersected by the ray along which the hit test was performed.</summary>
			<returns>Visual3D intersected by the ray.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult">
			<summary>Represents a hit test result in a 3D geometry.</summary>
		</member>
		<member name="P:System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult.DistanceToRayOrigin">
			<summary>Gets the distance between the point of intersection with the geometry and the origin of the ray along which the hit test was performed, in device-independent pixels.</summary>
			<returns>Double that indicates the distance between the hit intersection and the origin of the ray.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult.MeshHit">
			<summary>Gets the mesh intersected by the ray along which the hit test was performed.</summary>
			<returns>MeshGeometry3D intersected by the ray.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult.PointHit">
			<summary>Gets the point at which the mesh was intersected by the ray along which the hit test was performed.</summary>
			<returns>Point3D at which the mesh was intersected.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.Rect3D">
			<summary>Represents a 3-D rectangle: for example, a cube. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Size3D)">
			<summary> Creates a new Rect3D. </summary>
			<param name="size">Size of the new Rect3D.</param>
			<param name="location">Location of the new Rect3D.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
			<summary> Creates a new Rect3D. </summary>
			<param name="y">Y-axis coordinate of the new Rect3D.</param>
			<param name="sizeZ">Size of the new Rect3D in the Z dimension.</param>
			<param name="sizeY">Size of the new Rect3D in the Y dimension.</param>
			<param name="sizeX">Size of the new Rect3D in the X dimension.</param>
			<param name="z">Z-axis coordinate of the new Rect3D.</param>
			<param name="x">X-axis coordinate of the new Rect3D.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.Contains(System.Windows.Media.Media3D.Point3D)">
			<summary> Gets a value that indicates whether a specified Point3D is within the Rect3D, including its edges. </summary>
			<returns>True if the specified point or rectangle is within the Rect3D, including its edges; false otherwise.</returns>
			<param name="point">Point to be tested.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.Contains(System.Windows.Media.Media3D.Rect3D)">
			<summary> Gets a value that indicates whether a specified Point3D is within the Rect3D, including its edges. </summary>
			<returns>True if the specified point or rectangle is within the Rect3D, including its edges; false otherwise.</returns>
			<param name="rect">Rect3D to be tested. </param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.Contains(System.Double,System.Double,System.Double)">
			<summary> Gets a value that indicates whether a specified Point3D is within the Rect3D, including its edges. </summary>
			<returns>True if the specified point or rectangle is within the Rect3D, including its edges; false otherwise.</returns>
			<param name="y">Y-axis coordinate of the Point3D to be tested.</param>
			<param name="z">Z-coordinate of the Point3D to be tested.</param>
			<param name="x">X-axis coordinate of the Point3D to be tested.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.Equals(System.Object)">
			<summary> Compares two Rect3D instances for equality. </summary>
			<returns>True if the two specified Rect3D instances are exactly equal; false otherwise.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.Equals(System.Windows.Media.Media3D.Rect3D)">
			<summary> Compares two Rect3D instances for equality. </summary>
			<returns>True if the two specified Rect3D instances are exactly equal; false otherwise.</returns>
			<param name="value">The Rect3D to compare to "this"</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.Equals(System.Windows.Media.Media3D.Rect3D,System.Windows.Media.Media3D.Rect3D)">
			<summary> Compares two Rect3D instances for equality. </summary>
			<returns>True if the two specified Rect3D instances are exactly equal; false otherwise.</returns>
			<param name="rect2">Second Rect3D to compare.</param>
			<param name="rect1">First Rect3D to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.GetHashCode">
			<summary> Returns the HashCode for this Rect3D </summary>
			<returns>int - the HashCode for this Rect3D</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.Intersect(System.Windows.Media.Media3D.Rect3D)">
			<summary> Updates a specified Rect3D to reflect the intersection of that Rect3D and a second specified Rect3D. </summary>
			<param name="rect">The Rect3D to intersect with the current Rect3D.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.Intersect(System.Windows.Media.Media3D.Rect3D,System.Windows.Media.Media3D.Rect3D)">
			<summary> Updates a specified Rect3D to reflect the intersection of that Rect3D and a second specified Rect3D. </summary>
			<returns>Result of the intersection of rect1 and rect2.</returns>
			<param name="rect2">Second Rect3D.</param>
			<param name="rect1">First Rect3D.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.IntersectsWith(System.Windows.Media.Media3D.Rect3D)">
			<summary>Returns a value that indicates whether the specified rectangle intersects with this rectangle. </summary>
			<returns>True if the specified rectangle intersects with this rectangle; false otherwise.</returns>
			<param name="rect">Rectangle to evaluate.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.Offset(System.Windows.Media.Media3D.Vector3D)">
			<summary> Gets or sets an offset value by which the location of a Rect3D is translated. </summary>
			<param name="offsetVector"><see cref="T:System.Windows.Media.Media3D.Vector3D"></see> that specifies the offset translation.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.Offset(System.Windows.Media.Media3D.Rect3D,System.Windows.Media.Media3D.Vector3D)">
			<summary> Gets or sets an offset value by which the location of a Rect3D is translated. </summary>
			<returns>Result of applying the offset value to the Rect3D.</returns>
			<param name="rect">Rect3D to be translated.</param>
			<param name="offsetVector">Vector3D that specifies the offset translation.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.Offset(System.Double,System.Double,System.Double)">
			<summary> Gets or sets an offset value by which the location of a Rect3D is translated. </summary>
			<param name="offsetZ">Offset along the Z axis.</param>
			<param name="offsetY">Offset along the Y axis.</param>
			<param name="offsetX">Offset along the X axis.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.Offset(System.Windows.Media.Media3D.Rect3D,System.Double,System.Double,System.Double)">
			<summary> Gets or sets an offset value by which the location of a Rect3D is translated. </summary>
			<returns>Result of applying the offset value to the Rect3D.</returns>
			<param name="rect">Rect3D to be translated.</param>
			<param name="offsetZ">Offset along the Z axis.</param>
			<param name="offsetY">Offset along the Y axis.</param>
			<param name="offsetX">Offset along the X axis.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.op_Equality(System.Windows.Media.Media3D.Rect3D,System.Windows.Media.Media3D.Rect3D)">
			<summary>Compares two Rect3D instances for exact equality. </summary>
			<returns>True if the two Rect3D instances are exactly equal; false otherwise.</returns>
			<param name="rect2">Second Rect3D to evaluate.</param>
			<param name="rect1">First Rect3D to evaluate.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.op_Inequality(System.Windows.Media.Media3D.Rect3D,System.Windows.Media.Media3D.Rect3D)">
			<summary> Compares two Rect3D instances for exact inequality. Note that double values can acquire error when operated upon, such that an exact comparison between two values which are logically equal may fail. Furthermore, using this equality operator, Double.NaN is not equal to itself. </summary>
			<returns>bool - true if the two Rect3D instances are exactly unequal, false otherwise</returns>
			<param name="rect2">The second Rect3D to compare</param>
			<param name="rect1">The first Rect3D to compare</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.Parse(System.String)">
			<summary> Converts a string representation of a Rect3D into the equivalent Rect3D structure. </summary>
			<returns>Rect3D represented by the string.</returns>
			<param name="source">String that represents a Rect3D.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.ToString">
			<summary> Creates a string representation of the object. </summary>
			<returns>String representation of the object.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.ToString(System.IFormatProvider)">
			<summary> Creates a string representation of the object. </summary>
			<returns>String representation of the object.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.Union(System.Windows.Media.Media3D.Point3D)">
			<summary> Updates a specified Rect3D to reflect the union of that Rect3D and a second specified Rect3D. </summary>
			<param name="point">The Point3D whose union with the specified Rect3D is to be evaluated.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.Union(System.Windows.Media.Media3D.Rect3D)">
			<summary> Updates a specified Rect3D to reflect the union of that Rect3D and a second specified Rect3D. </summary>
			<param name="rect">The Rect3D whose union with the current Rect3D is to be evaluated.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.Union(System.Windows.Media.Media3D.Rect3D,System.Windows.Media.Media3D.Point3D)">
			<summary> Updates a specified Rect3D to reflect the union of that Rect3D and a second specified Rect3D. </summary>
			<returns>Result of the union of rect1 and rect2.</returns>
			<param name="rect">The Rect3D whose union with the current Rect3D is to be evaluated.</param>
			<param name="point">The Point3D whose union with the specified Rect3D is to be evaluated.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3D.Union(System.Windows.Media.Media3D.Rect3D,System.Windows.Media.Media3D.Rect3D)">
			<summary> Updates a specified Rect3D to reflect the union of that Rect3D and a second specified Rect3D. </summary>
			<returns>Result of the union of rect1 and rect2.</returns>
			<param name="rect2">Second Rect3D.</param>
			<param name="rect1">First Rect3D.</param>
		</member>
		<member name="P:System.Windows.Media.Media3D.Rect3D.Empty">
			<summary>Gets an empty Rect3D. </summary>
			<returns>Empty Rect3D.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Rect3D.Location">
			<summary>Gets or sets a <see cref="T:System.Windows.Media.Media3D.Point3D"></see> that represents the origin of the Rect3D. </summary>
			<returns><see cref="T:System.Windows.Media.Media3D.Point3D"></see> that represents the origin of the Rect3D.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Rect3D.Size">
			<summary>Gets or sets the area of the Rect3D. </summary>
			<returns><see cref="T:System.Windows.Media.Media3D.Size3D"></see> that specifies the area of the Rect3D.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Rect3D.SizeX">
			<summary>Gets or sets the size of the Rect3D in the X dimension. </summary>
			<returns>Double that specifies the size of the rectangle in the X dimension.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Rect3D.SizeY">
			<summary>Gets or sets the size of the Rect3D in the Y dimension. </summary>
			<returns>Double that specifies the size of the rectangle in the Y dimension.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Rect3D.SizeZ">
			<summary>Gets or sets the size of the Rect3D in the Z dimension. </summary>
			<returns>Double that specifies the size of the Rect3D in the Z dimension.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.Rect3DConverter">
			<summary> Rect3DConverter - Converter class for converting instances of other types to and from Rect3D instances </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3DConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Returns true if this type converter can convert from a given type. </summary>
			<returns>bool - True if this converter can convert from the provided type, false if not.</returns>
			<param name="context">The ITypeDescriptorContext for this call.</param>
			<param name="sourceType">The Type being queried for support.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3DConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Returns true if this type converter can convert to the given type. </summary>
			<returns>bool - True if this converter can convert to the provided type, false if not.</returns>
			<param name="context">The ITypeDescriptorContext for this call.</param>
			<param name="destinationType">The Type being queried for support.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3DConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary> Attempts to convert to a Rect3D from the given object. </summary>
			<returns>The Rect3D which was constructed.</returns>
			<param name="culture">The CultureInfo which is respected when converting.</param>
			<param name="context">The ITypeDescriptorContext for this call.</param>
			<param name="value">The object to convert to an instance of Rect3D.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rect3DConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> ConvertTo - Attempt to convert an instance of Rect3D to the given type </summary>
			<returns>The object which was constructoed.</returns>
			<param name="culture">The CultureInfo which is respected when converting.</param>
			<param name="context">The ITypeDescriptorContext for this call.</param>
			<param name="destinationType">The type to which this will convert the Rect3D instance.</param>
			<param name="value">The object to convert to an instance of "destinationType".</param>
		</member>
		<member name="T:System.Windows.Media.Media3D.RotateTransform3D">
			<summary> Specifies a rotation transformation. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.RotateTransform3D.#ctor">
			<summary> Creates a new RotateTransform3D. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.RotateTransform3D.#ctor(System.Windows.Media.Media3D.Rotation3D)">
			<summary> Creates a new RotateTransform3D. </summary>
			<param name="rotation">Rotation3D that specifies the rotation.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.RotateTransform3D.#ctor(System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Media3D.Point3D)">
			<summary> Creates a new RotateTransform3D. </summary>
			<param name="rotation">Rotation3D that specifies the rotation.</param>
			<param name="center">Center of the transformation's rotation.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.RotateTransform3D.#ctor(System.Windows.Media.Media3D.Rotation3D,System.Double,System.Double,System.Double)">
			<summary>Creates a new <see cref="T:System.Windows.Media.Media3D.RotateTransform3D"></see>.</summary>
			<param name="rotation">Rotation3D that specifies the rotation.</param>
			<param name="centerY">Double that specifies the Y value about which to rotate.</param>
			<param name="centerX">Double that specifies the X value about which to rotate.</param>
			<param name="centerZ">Double that specifies the Z value about which to rotate.</param>
		</member>
		<member name="F:System.Windows.Media.Media3D.RotateTransform3D.CenterXProperty">
			<summary>The DependencyProperty for the RotateTransform3D.CenterX property.</summary>
		</member>
		<member name="F:System.Windows.Media.Media3D.RotateTransform3D.CenterYProperty">
			<summary>The DependencyProperty for the RotateTransform3D.CenterY property.</summary>
		</member>
		<member name="F:System.Windows.Media.Media3D.RotateTransform3D.CenterZProperty">
			<summary>The DependencyProperty for the RotateTransform3D.CenterZ property.</summary>
		</member>
		<member name="P:System.Windows.Media.Media3D.RotateTransform3D.CenterX">
			<summary>Gets or sets the X coordinate of the <see cref="T:System.Windows.Media.Media3D.Point3D"></see> about which to rotate.</summary>
			<returns>Double that represents the X coordinate of the <see cref="T:System.Windows.Media.Media3D.Point3D"></see> about which to rotate.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.RotateTransform3D.CenterY">
			<summary>Gets or sets the Y coordinate of the <see cref="T:System.Windows.Media.Media3D.Point3D"></see> about which to rotate.</summary>
			<returns>Double that represents the Y coordinate of the <see cref="T:System.Windows.Media.Media3D.Point3D"></see> about which to rotate.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.RotateTransform3D.CenterZ">
			<summary>Gets or sets the Z coordinate of the <see cref="T:System.Windows.Media.Media3D.Point3D"></see> about which to rotate.</summary>
			<returns>Double that represents the Z coordinate of the <see cref="T:System.Windows.Media.Media3D.Point3D"></see> about which to rotate.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.RotateTransform3D.Rotation">
			<summary>Gets or sets a <see cref="T:System.Windows.Media.Media3D.Rotation3D"></see> that specifies the rotation. </summary>
			<returns>Rotation3D that specifies an angle of rotation about an axis.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.RotateTransform3D.Value">
			<summary>Retrieves a matrix that represents the rotation. </summary>
			<returns>Matrix3D that represents the rotation.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.Rotation3D">
			<summary>Specifies the 3-D rotation to be used in a transformation.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rotation3D.System.IFormattable.ToString(System.String,System.IFormatProvider)">
			<summary> Creates a string representation of this object based on the format string and IFormatProvider passed in. </summary>
			<returns>String that represents this object.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rotation3D.ToString">
			<summary>Creates a string representation of this object based on the current culture. </summary>
			<returns>String representation of this object.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Rotation3D.ToString(System.IFormatProvider)">
			<summary>Creates a string representation of this object based on the IFormatProvider passed in. If the provider is null, the CurrentCulture is used. </summary>
			<returns>String representation of this object.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.ScaleTransform3D">
			<summary>Scales an object in the three-dimensional x-y-z plane, starting from a defined center point. Scale factors are defined in x-, y-, and z- directions from this center point. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.ScaleTransform3D.#ctor">
			<summary> Creates a new ScaleTransform3D. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.ScaleTransform3D.#ctor(System.Windows.Media.Media3D.Vector3D)">
			<summary> Creates a new ScaleTransform3D. </summary>
			<param name="scale">Vector3D along which the transformation scales.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.ScaleTransform3D.#ctor(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Point3D)">
			<summary> Creates a new ScaleTransform3D. </summary>
			<param name="scale">Vector3D along which the transformation scales.</param>
			<param name="center">Center around which the transformation scales.</param>
		</member>
		<member name="P:System.Windows.Media.Media3D.ScaleTransform3D.CenterX">
			<summary>Gets or sets the x-coordinate of the transform's center point.</summary>
			<returns>The x-coordinate of the transform's center point. The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.ScaleTransform3D.CenterY">
			<summary>Gets or sets the z-coordinate of the transform's center point.</summary>
			<returns>The y-coordinate of the transform's center point. The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.ScaleTransform3D.CenterZ">
			<summary>Gets or sets the z-coordinate of the transform's center point.</summary>
			<returns>The z-coordinate of the transform's center point. The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.ScaleTransform3D.ScaleX">
			<summary>Gets or sets the scale factor in the x-direction.</summary>
			<returns>Scale factor in the x-direction. The default value is 1.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.ScaleTransform3D.ScaleY">
			<summary>Gets or sets the scale factor in the y-direction.</summary>
			<returns>Scale factor in the y-direction. The default value is 1.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.ScaleTransform3D.ScaleZ">
			<summary>Gets or sets the scale factor in the z-direction.</summary>
			<returns>Scale factor in the z-direction. The default value is 1.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.ScaleTransform3D.Value">
			<summary> Gets a matrix representation of this transformation. </summary>
			<returns>Matrix representation of this transformation.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.Size3D">
			<summary> Data structure used to describe the size of a three-dimensional object. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Size3D.#ctor(System.Double,System.Double,System.Double)">
			<summary> Initializes a new instance of the Size3D structure. </summary>
			<param name="y">The new Size3D structure's Y value.</param>
			<param name="z">The new Size3D structure's Z value.</param>
			<param name="x">The new Size3D structure's X value.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Size3D.Equals(System.Object)">
			<summary> Determines whether the specified Object is a Size3D structure and whether the X, Y and Z properties of the specified Object are equal to the X, Y and Z  properties of this Size3D structure.       Note: Because the value of Doubles can lose precision when arithmetic operations are performed on them, a comparison between two Doubles that are logically equal might fail.     </summary>
			<returns>true if instances are equal; otherwise, false.true if o (the passed Object) is a Size3D structure and is identical with this Size3D structure; otherwise, false.</returns>
			<param name="o">The Object to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Size3D.Equals(System.Windows.Media.Media3D.Size3D)">
			<summary> Compares two Size3D structures for equality.     Note: Because the value of Doubles can lose precision when arithmetic operations are performed on them, a comparison between two Doubles that are logically equal might fail.     </summary>
			<returns>true if instances are equal; otherwise, false..</returns>
			<param name="value">The instance of Size3D to compare to this instance.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Size3D.Equals(System.Windows.Media.Media3D.Size3D,System.Windows.Media.Media3D.Size3D)">
			<summary> Compares two Size3D structures for equality.   Two Size3D structures are equal if the values of their X, Y, and Z properties are the same.       Note: Because the value of Doubles can lose precision when arithmetic operations are performed on them, a comparison between two Doubles that are logically equal might fail.     </summary>
			<returns>true if instances are equal; otherwise, false.true if the X, Y, and Z components of size3D1 and size3D2 are equal; otherwise, false.</returns>
			<param name="size3D1">The first Size3D structure to compare.</param>
			<param name="size3D2">The second Size3D structure to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Size3D.GetHashCode">
			<summary> Returns a hash code for this Size3D structure. </summary>
			<returns>Returns a hash code for this Size3D structure.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Size3D.op_Equality(System.Windows.Media.Media3D.Size3D,System.Windows.Media.Media3D.Size3D)">
			<summary> Compares two Size3D structures for equality.   Two Size3D structures are equal if the values of their X, Y, and Z properties are the same.       Note: Because the value of Doubles can lose precision when arithmetic operations are performed on them, a comparison between two Doubles that are logically equal might fail.     </summary>
			<returns>true if the X, Y, and Z components of size3D1 and size3D2 are equal; otherwise, false.</returns>
			<param name="size2">The second Size3D structure to compare.</param>
			<param name="size1">The first Size3D structure to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Size3D.op_Explicit(System.Windows.Media.Media3D.Size3D)~System.Windows.Media.Media3D.Point3D">
			<summary> Converts this Size3D structure into a Point3D structure. </summary>
			<returns>The result of converting size.</returns>
			<param name="size">The size to convert.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Size3D.op_Explicit(System.Windows.Media.Media3D.Size3D)~System.Windows.Media.Media3D.Vector3D">
			<summary> Converts this Size3D structure into a Vector3D structure. </summary>
			<returns>The result of converting size.</returns>
			<param name="size">The size to convert.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Size3D.op_Inequality(System.Windows.Media.Media3D.Size3D,System.Windows.Media.Media3D.Size3D)">
			<summary> Compares two Size3D structures for inequality.  Two Size3D structures are not equal if the values of their X, Y and Z properties are different.     Note: Because the value of Doubles can lose precision when arithmetic operations are performed on them, a comparison between two Doubles that are logically equal might fail.     </summary>
			<returns>true if the X, Y and Z coordinates of size3D1 and size3D2 are different; otherwise, false.</returns>
			<param name="size2">The second Size3D structure to compare.</param>
			<param name="size1">The first Size3D structure to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Size3D.Parse(System.String)">
			<summary> Converts a String representation of a three-dimensional size structure into the equivalent Size3D structure. </summary>
			<returns>Returns the equivalent Size3D structure.</returns>
			<param name="source">The String representation of the three-dimensional size structure.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Size3D.ToString">
			<summary> Creates a String representation of this Size3D structure. </summary>
			<returns>Returns a String containing the X, Y, and Z values of this Size3D structure.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Size3D.ToString(System.IFormatProvider)">
			<summary> Creates a String representation of this Size3D structure. </summary>
			<returns>Returns a String containing the X, Y, and Z values of this Size3D structure.</returns>
			<param name="provider">Culture-specific formatting information.</param>
		</member>
		<member name="P:System.Windows.Media.Media3D.Size3D.Empty">
			<summary> Gets a value that represents an empty Size3D structure. </summary>
			<returns>An empty instance of a Size3D structure.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Size3D.IsEmpty">
			<summary> Gets a value that indicates whether this Size3D structure is empty. </summary>
			<returns>true if the Size3D structure is empty; otherwise, false.  The default is false.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Size3D.X">
			<summary> Gets or sets the X value of this Size3D structure. </summary>
			<returns>The X value of this Size3D structure.  The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Size3D.Y">
			<summary> Gets or sets the Y value of this Size3D structure. </summary>
			<returns>The Y value of this Size3D structure.  The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Size3D.Z">
			<summary> Gets or sets the Z value of this Size3D structure. </summary>
			<returns>The Z value of this Size3D structure.  The default value is 0.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.Size3DConverter">
			<summary> Converts instances of other types to and from a Size3D structure. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Size3DConverter.#ctor">
			<summary> Initializes a new instance of Size3DConverter. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Size3DConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines whether a class can be converted from a given type to an instance of a Size3D structure.  </summary>
			<returns>Indicates whether the type can be converted to a Size3D structure.ValueMeaningfalseThe converter cannot convert from the provided type.trueThe converter can convert the provided type to a Size3D.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="sourceType">The type of the source that is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Size3DConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines whether an instance of a Size3D structure can be converted to a different type. </summary>
			<returns>Indicates whether this Size3D structure can be converted to destinationType.ValueMeaningfalseThe converter cannot convert this Size3D structure to the specified type.trueThe converter can convert this Size3D structure to the specified type.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The desired type that this Size3D structure is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Size3DConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary> Attempts to convert a specified object to a Size3D structure. </summary>
			<returns>The Size3D structure created from the converted value.</returns>
			<param name="culture">Describes the CultureInfo of the type being converted.</param>
			<param name="context">Describes the context information of a type.</param>
			<param name="value">The object being converted.</param>
			<exception cref="T:System.NotSupportedException">Occurs if the specified object is null or is a type that cannot be converted to to a Size3D structure.</exception>
		</member>
		<member name="M:System.Windows.Media.Media3D.Size3DConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> Attempts to convert a Size3D structure to a specified type. </summary>
			<returns>The object created from converting this Size3D structure.</returns>
			<param name="culture">The CultureInfo which is respected when converting.</param>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The type this Size3D structure is converted to.</param>
			<param name="value">The Size3D structure to convert.</param>
		</member>
		<member name="T:System.Windows.Media.Media3D.SpecularMaterial">
			<summary> Allows a TLA#tla_2d brush, like a SolidColorBrush or TileBrush, to be applied to a specularly-lit TLA#tla_3d model.  </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.SpecularMaterial.#ctor">
			<summary>Creates an instance of SpecularMaterial. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.SpecularMaterial.#ctor(System.Windows.Media.Brush,System.Double)">
			<summary>Creates an instance of SpecularMaterial.</summary>
			<param name="brush">Brush applied by the new Material.</param>
			<param name="specularPower">Specular exponent.</param>
		</member>
		<member name="P:System.Windows.Media.Media3D.SpecularMaterial.Brush">
			<summary> Gets or sets the TLA#tla_2d brush to be applied to a specularly-lit TLA#tla_3d model. </summary>
			<returns>Brush to be applied.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.SpecularMaterial.SpecularPower">
			<summary> Gets or sets a value that indicates the relative contribution, for a material applied as a TLA#tla_2d brush to a TLA#tla_3d model, of the specular component of the lighting model.  </summary>
			<returns>Relative contribution, for a material applied as a TLA2#tla_2d brush to a TLA2#tla_3d model, of the specular component of the lighting model.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.SpotLight">
			<summary>Light object that projects its effect in a cone-shaped area along a specified direction.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.SpotLight.#ctor">
			<summary> Creates a new SpotLight. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.SpotLight.#ctor(System.Windows.Media.Color,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Double,System.Double)">
			<summary> Creates a new SpotLight. </summary>
			<param name="direction">Direction of the new SpotLight.</param>
			<param name="innerConeAngle">Angle that defines a cone within which the light illuminates objects in the scene.</param>
			<param name="position">Position of the new SpotLight.</param>
			<param name="outerConeAngle">Angle that defines a cone outside which the light does not illuminate objects in the scene.</param>
			<param name="diffuseColor">Diffuse color of the new SpotLight.</param>
		</member>
		<member name="P:System.Windows.Media.Media3D.SpotLight.Direction">
			<summary> Gets or sets a Vector3D that specifies the direction in which the <see cref="T:System.Windows.Media.Media3D.SpotLight"></see> projects its light.  </summary>
			<returns>Vector3D that specifies the direction of the Spotlight's projection. The default value is 0,0,-1.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.SpotLight.InnerConeAngle">
			<summary> Gets or sets an angle that specifies the proportion of a SpotLight's cone-shaped projection in which the light fully illuminates objects in the scene. </summary>
			<returns>The angle in degrees that specifies the proportion of a SpotLight's cone-shaped projection in which the light fully illuminates objects in the scene. The default value is 180.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.SpotLight.OuterConeAngle">
			<summary> Gets or sets an angle that specifies the proportion of a SpotLight's cone-shaped projection outside which the light does not illuminate objects in the scene. </summary>
			<returns>The angle in degrees that specifies the proportion of a SpotLight's cone-shaped projection outside which the light does not illuminate objects in the scene. The default value is 90.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.Transform3D">
			<summary>Abstract base class that provides a parent class for all three-dimensional transformations, including translation, rotation, and scale transformations. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Transform3D.Clone">
			<summary>Returns a modifiable copy of the <see cref="T:System.Windows.Media.Media3D.Transform3D"></see>.</summary>
			<returns>A modifiable copy of the Transform3D. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property is false.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Transform3D.CloneCurrentValue">
			<summary>Returns a non-animated version of the <see cref="T:System.Windows.Media.Media3D.Transform3D"></see>. The returned Transform3D represents the current object's state at the time this method was called.</summary>
			<returns>Returns the current value of the Transform3D. The returned Transform3D has the same value as the instantaneous value of the current object, but is not animated.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Transform3D.Transform(System.Windows.Media.Media3D.Point3D)">
			<summary>Transforms the specified <see cref="T:System.Windows.Media.Media3D.Point3D"></see>. </summary>
			<returns>Transformed Point3D.</returns>
			<param name="point">Point3D to transform.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Transform3D.Transform(System.Windows.Media.Media3D.Point3D[])">
			<summary> Transforms the specified array of <see cref="T:System.Windows.Media.Media3D.Point3D"></see> objects. </summary>
			<param name="points">Array of Point3D objects to transform.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Transform3D.Transform(System.Windows.Media.Media3D.Point4D)">
			<summary>Transforms the specified <see cref="T:System.Windows.Media.Media3D.Point4D"></see>. </summary>
			<returns>Transformed Point4D.</returns>
			<param name="point">Point4D to transform.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Transform3D.Transform(System.Windows.Media.Media3D.Point4D[])">
			<summary> Transforms the specified array of <see cref="T:System.Windows.Media.Media3D.Point4D"></see> objects. </summary>
			<param name="points">Array of Point4D objects to transform.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Transform3D.Transform(System.Windows.Media.Media3D.Vector3D)">
			<summary>Transforms the specified <see cref="T:System.Windows.Media.Media3D.Vector3D"></see>. </summary>
			<returns>Transformed Vector3D.</returns>
			<param name="vector">Vector3D to transform.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Transform3D.Transform(System.Windows.Media.Media3D.Vector3D[])">
			<summary> Transforms the specified array of <see cref="T:System.Windows.Media.Media3D.Vector3D"></see> objects. </summary>
			<param name="vectors">Array of Vector3D objects to transform.</param>
		</member>
		<member name="P:System.Windows.Media.Media3D.Transform3D.Identity">
			<summary>Gets the identity transformation. </summary>
			<returns>Identity transformation.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Transform3D.IsAffine">
			<summary>Gets a value that specifies whether the matrix is affine. </summary>
			<returns>True if the matrix is affine; false otherwise.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Transform3D.Value">
			<summary>Gets the <see cref="T:System.Windows.Media.Media3D.Matrix3D"></see> that represents the value of the current transformation. </summary>
			<returns>Matrix3D that represents the value of the current transformation.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.Transform3DCollection">
			<summary>Collection of 3D transformations. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Transform3DCollection.System.Collections.IEnumerable.GetEnumerator">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="T:System.Windows.Media.Media3D.Transform3DCollection.Enumerator">
			<summary>Enumerates items in a Transform3DCollection. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Transform3DCollection.Enumerator.MoveNext">
			<summary> Advances the enumerator to the next element of the collection. </summary>
			<returns>true if the enumerator was successfully advanced to the next element, false if the enumerator has passed the end of the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Transform3DCollection.Enumerator.System.IDisposable.Dispose">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="T:System.Windows.Media.Media3D.Transform3DGroup">
			<summary>Group of 3D transformations. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Transform3DGroup.#ctor">
			<summary>Default constructor. </summary>
		</member>
		<member name="P:System.Windows.Media.Media3D.Transform3DGroup.Children">
			<summary> Gets or sets a collection of <see cref="T:System.Windows.Media.Media3D.Transform3D"></see> objects. </summary>
			<returns>Collection of <see cref="T:System.Windows.Media.Media3D.Transform3D"></see> objects.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Transform3DGroup.IsAffine">
			<summary>Gets a value that indicates whether the transformation is affine. </summary>
			<returns>True if the transformation is affine; false otherwise.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Transform3DGroup.Value">
			<summary>Gets a <see cref="T:System.Windows.Media.Media3D.Matrix3D"></see> that indicates the current transform value. </summary>
			<returns>Matrix3D that indicates the current transform value.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.TranslateTransform3D">
			<summary>Translates an object in the three-dimensional x-y-z plane. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.TranslateTransform3D.#ctor">
			<summary> Creates an instance of TranslateTransform3D. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.TranslateTransform3D.#ctor(System.Windows.Media.Media3D.Vector3D)">
			<summary> Creates an instance of TranslateTransform3D using the specified <see cref="T:System.Windows.Media.Media3D.Vector3D"></see> as the offset. </summary>
			<param name="offset"><see cref="T:System.Windows.Media.Media3D.Vector3D"></see> by which to offset the model.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.TranslateTransform3D.#ctor(System.Double,System.Double,System.Double)">
			<summary>Creates an instance of a TranslateTransform3D.</summary>
			<param name="offsetZ">Double that specifies the Z value of the Vector3D that specifies the translation offset.</param>
			<param name="offsetY">Double that specifies the Y value of the Vector3D that specifies the translation offset.</param>
			<param name="offsetX">Double that specifies the X value of the Vector3D that specifies the translation offset.</param>
		</member>
		<member name="F:System.Windows.Media.Media3D.TranslateTransform3D.OffsetXProperty">
			<summary>The DependencyProperty for the TranslateTransform3D.OffsetX property.</summary>
		</member>
		<member name="F:System.Windows.Media.Media3D.TranslateTransform3D.OffsetYProperty">
			<summary>The DependencyProperty for the TranslateTransform3D.OffsetY property.</summary>
		</member>
		<member name="F:System.Windows.Media.Media3D.TranslateTransform3D.OffsetZProperty">
			<summary>The DependencyProperty for the TranslateTransform3D.OffsetZ property.</summary>
		</member>
		<member name="P:System.Windows.Media.Media3D.TranslateTransform3D.OffsetX">
			<summary>Gets or sets the X-axis value of the translation's offset.</summary>
			<returns>Double that represents the X-axis value of the translation's offset.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.TranslateTransform3D.OffsetY">
			<summary>Gets or sets the Y-axis value of the translation's offset.</summary>
			<returns>Double that represents the Y-axis value of the translation's offset.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.TranslateTransform3D.OffsetZ">
			<summary>Gets or sets the Z-axis value of the translation's offset.</summary>
			<returns>Double that represents the Z-axis value of the translation's offset.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.TranslateTransform3D.Value">
			<summary>Gets a Matrix3D that represents the value of the translation.</summary>
		</member>
		<member name="T:System.Windows.Media.Media3D.Vector3D">
			<summary> Represents a displacement in TLA#tla_3d space. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.#ctor(System.Double,System.Double,System.Double)">
			<summary> Initializes a new instance of a Vector3D structure. </summary>
			<param name="y">The new Vector3D structure's Y value.</param>
			<param name="z">The new Vector3D structure's Z value.</param>
			<param name="x">The new Vector3D structure's X value.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.Add(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Point3D)">
			<summary> Translates the specified Point3D structure by the specified Vector3D structure and returns the result as a Point3D structure. </summary>
			<returns>Returns the result of translating point by vector.</returns>
			<param name="point">The Point3D structure to be translated.</param>
			<param name="vector">The Vector3D structure used to translate the specified Point3D structure.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.Add(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
			<summary> Adds two Vector3D structures and returns the result as a Vector3D structure. </summary>
			<returns>Returns the sum of vector1 and vector2.</returns>
			<param name="vector2">The second Vector3D structure to add.</param>
			<param name="vector1">The first Vector3D structure to add.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.AngleBetween(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
			<summary> Retrieves the angle required to rotate the first specified  Vector3D structure into the second specified  Vector3D structure. </summary>
			<returns>Returns the angle in degrees needed to rotate vector1 into vector2.</returns>
			<param name="vector2">The second Vector3D structure to evaluate.</param>
			<param name="vector1">The first Vector3D structure to evaluate.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.CrossProduct(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
			<summary> Calculates the cross product of two Vector3D structures. </summary>
			<returns>Returns the cross product of vector1 and vector2.</returns>
			<param name="vector2">The second Vector3D structure to evaluate.</param>
			<param name="vector1">The first Vector3D structure to evaluate.  </param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.Divide(System.Windows.Media.Media3D.Vector3D,System.Double)">
			<summary> Divides the specified Vector3D structure by the specified scalar and returns the result as a Vector3D. </summary>
			<returns>Returns the result of dividing vector by scalar.</returns>
			<param name="scalar">The scalar to divide vector by.</param>
			<param name="vector">The Vector3D structure to be divided.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.DotProduct(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
			<summary> Calculates the dot product of two Vector3D structures. </summary>
			<returns>Returns the dot product of vector1 and vector2.</returns>
			<param name="vector2">The second Vector3D structure to evaluate.</param>
			<param name="vector1">The first Vector3D structure to evaluate.  </param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.Equals(System.Object)">
			<summary> Determines whether the specified Object is a Vector3D structure and whether the X, Y, and Z properties of the specified Object are equal to the X, Y, and Z properties of this Vector3D structure.     </summary>
			<returns>True if o (the passed Object) is a Vector3D structure and is identical with this Vector3D structure; false otherwise.</returns>
			<param name="o">The Object to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.Equals(System.Windows.Media.Media3D.Vector3D)">
			<summary>Compares two Vector3D structures for equality. </summary>
			<returns>True if instances are equal; false otherwise.</returns>
			<param name="value">The instance of Vector to compare against this instance.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.Equals(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
			<summary> Compares two Vector3D structures for equality.       </summary>
			<returns>True if the X, Y, and Z components of vector1 and vector2 are equal; false otherwise.</returns>
			<param name="vector3D1">First Vector3D to compare.</param>
			<param name="vector3D2">Second Vector3D to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.GetHashCode">
			<summary> Gets a hash code for this Vector3D structure. </summary>
			<returns>Returns a hash code for this Vector3D structure.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.Multiply(System.Double,System.Windows.Media.Media3D.Vector3D)">
			<summary> Multiplies the specified scalar by the specified Vector3D structure and returns the result as a Vector3D. </summary>
			<returns>Returns the result of multiplying scalar and vector.</returns>
			<param name="scalar">The scalar to multiply.</param>
			<param name="vector">The Vector3D structure to multiply.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.Multiply(System.Windows.Media.Media3D.Vector3D,System.Double)">
			<summary> Multiplies the specified Vector3D structure by the specified scalar and returns the result as a Vector3D. </summary>
			<returns>Returns the result of multiplying vector and scalar.</returns>
			<param name="scalar">The scalar to multiply.</param>
			<param name="vector">The Vector3D structure to multiply.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.Multiply(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Matrix3D)">
			<summary> Transforms the coordinate space of the specified Vector3D structure using the specified Matrix3D structure. </summary>
			<returns>Returns the result of transforming vector by matrix3D.</returns>
			<param name="matrix3D">The transformation to apply to the Vector3D structure.</param>
			<param name="vector">The Vector3D structure to transform.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.op_Addition(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Point3D)">
			<summary> Translates the specified Point3D structure by the specified Vector3D structure and returns the result as a Point3D structure. </summary>
			<returns>Returns the result of translating point by vector.</returns>
			<param name="point">The Point3D structure to be translated.</param>
			<param name="vector">The Vector3D structure used to translate the specified Point3D structure.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.op_Addition(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
			<summary> Adds two Vector3D structures and returns the result as a Vector3D structure. </summary>
			<returns>Returns the sum of vector1 and vector2.</returns>
			<param name="vector2">The second Vector3D structure to add.</param>
			<param name="vector1">The first Vector3D structure to add.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.op_Division(System.Windows.Media.Media3D.Vector3D,System.Double)">
			<summary> Divides the specified Vector3D structure by the specified scalar and returns the result as a Vector3D. </summary>
			<returns>Returns the result of dividing vector by scalar.</returns>
			<param name="scalar">The scalar to divide vector by.</param>
			<param name="vector">The Vector3D structure to be divided.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.op_Equality(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
			<summary> Compares two Vector3D structures for equality.   </summary>
			<returns>True if the X, Y, and Z components of vector3D1 and vector3D2 are equal; false otherwise.</returns>
			<param name="vector2">The second Vector3D structure to compare.</param>
			<param name="vector1">The first Vector3D structure to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.op_Explicit(System.Windows.Media.Media3D.Vector3D)~System.Windows.Media.Media3D.Point3D">
			<summary> Converts a Vector3D structure into a Point3D structure. </summary>
			<returns>The result of converting vector.</returns>
			<param name="vector">The vector to convert.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.op_Explicit(System.Windows.Media.Media3D.Vector3D)~System.Windows.Media.Media3D.Size3D">
			<summary> Converts a Vector3D structure into a Size3D.</summary>
			<returns>The result of converting vector.</returns>
			<param name="vector">The vector to convert.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.op_Inequality(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
			<summary> Compares two Vector3D structures for inequality.     </summary>
			<returns>True if the X, Y, and Z components of vector3D1 and vector3D2 are different; false otherwise.</returns>
			<param name="vector2">The second Vector3D structure to compare.</param>
			<param name="vector1">The first Vector3D structure to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.op_Multiply(System.Double,System.Windows.Media.Media3D.Vector3D)">
			<summary> Multiplies the specified scalar by the specified Vector3D structure and returns the result as a Vector3D. </summary>
			<returns>Returns the result of multiplying scalar and vector.</returns>
			<param name="scalar">The scalar to multiply.</param>
			<param name="vector">The Vector3D structure to multiply.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.op_Multiply(System.Windows.Media.Media3D.Vector3D,System.Double)">
			<summary> Multiplies the specified Vector3D structure by the specified scalar and returns the result as a Vector3D. </summary>
			<returns>Returns the result of multiplying vector and scalar.</returns>
			<param name="scalar">The scalar to multiply.</param>
			<param name="vector">The Vector3D structure to multiply.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.op_Multiply(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Matrix3D)">
			<summary> Transforms the coordinate space of the specified Vector3D structure using the specified Matrix3D structure. </summary>
			<returns>Returns the result of transforming vector by matrix3D.</returns>
			<param name="matrix3D">The transformation to apply to the Vector3D structure.</param>
			<param name="vector">The Vector3D structure to transform.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.op_Subtraction(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Point3D)">
			<summary> Subtracts a Point3D structure from a Vector3D structure. </summary>
			<returns>Returns the result of subtracting point from vector.</returns>
			<param name="point">The Point3D structure to subtract from vector.</param>
			<param name="vector">The Vector3D structure to be subtracted from.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.op_Subtraction(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
			<summary> Subtracts a Vector3D structure from a Vector3D structure. </summary>
			<returns>Returns the result of subtracting vector2 from vector2.</returns>
			<param name="vector2">The Vector3D structure to subtract from vector1.</param>
			<param name="vector1">The Vector3D structure to be subtracted from.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.op_UnaryNegation(System.Windows.Media.Media3D.Vector3D)">
			<summary> Negates a Vector3D structure. </summary>
			<returns>Returns a Vector3D structure with X, Y, and Z values opposite of the X, Y, and Z values of vector.</returns>
			<param name="vector">The Vector3D structure to negate.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.Parse(System.String)">
			<summary> Converts a String representation of a TLA#tla_3d vector into the equivalent Vector3D structure. </summary>
			<returns>Returns the equivalent Vector3D structure.</returns>
			<param name="source">The String representation of the TLA2#tla_3d vector.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.Subtract(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Point3D)">
			<summary> Subtracts a Point3D structure from a Vector3D structure. </summary>
			<returns>Returns the result of subtracting point from vector.</returns>
			<param name="point">The Point3D structure to subtract from vector.</param>
			<param name="vector">The Vector3D structure to be subtracted from.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.Subtract(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
			<summary> Subtracts a Vector3D structure from a Vector3D structure. </summary>
			<returns>Returns the result of subtracting vector2 from vector2.</returns>
			<param name="vector2">The Vector3D structure to subtract from vector1.</param>
			<param name="vector1">The Vector3D structure to be subtracted from.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.System.IFormattable.ToString(System.String,System.IFormatProvider)">
			<summary> Creates a string representation of this object based on the format string and IFormatProvider passed in. If the provider is null, the CurrentCulture is used. See the documentation for IFormattable for more information. </summary>
			<returns>String representation of this object.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.ToString">
			<summary> Creates a String representation of this Vector3D structure. </summary>
			<returns>Returns a String containing the X, Y, and Z values of this Vector3D structure.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3D.ToString(System.IFormatProvider)">
			<summary> Creates a String representation of this Vector3D structure. </summary>
			<returns>Returns a String containing the X, Y, and Z values of this Vector3D structure.</returns>
			<param name="provider">Culture-specific formatting information.</param>
		</member>
		<member name="P:System.Windows.Media.Media3D.Vector3D.Length">
			<summary> Gets the length of this Vector3D structure. </summary>
			<returns>The length of this Vector3D structure. </returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Vector3D.LengthSquared">
			<summary> Gets the square of the length of this Vector3D structure. </summary>
			<returns>The square of the length of this Vector3D structure.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Vector3D.X">
			<summary> Gets or sets the X component of this Vector3D structure. </summary>
			<returns>The X component of this Vector3D structure. The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Vector3D.Y">
			<summary> Gets or sets the Y component of this Vector3D structure. </summary>
			<returns>The Y component of this Vector3D structure. The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.Media3D.Vector3D.Z">
			<summary> Gets or sets the Z component of this Vector3D structure. </summary>
			<returns>The Z component of this Vector3D structure. The default value is 0.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.Vector3DCollection">
			<summary> Collection of <see cref="T:System.Windows.Media.Media3D.Vector3D"></see> objects. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3DCollection.Add(System.Windows.Media.Media3D.Vector3D)">
			<summary>Adds a Vector3D to the collection. </summary>
			<param name="value">Vector3D to be added to the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3DCollection.Contains(System.Windows.Media.Media3D.Vector3D)">
			<summary>Determines whether the collection contains the specified element. </summary>
			<param name="value">Vector3D to be found in the collection.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3DCollection.System.Collections.IEnumerable.GetEnumerator">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3DCollection.ToString">
			<summary> Creates a string representation of this object based on the current culture. </summary>
			<returns>A string representation of this object.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3DCollection.ToString(System.IFormatProvider)">
			<summary> Creates a string representation of this object based on the IFormatProvider passed in. If the provider is null, the CurrentCulture is used. </summary>
			<returns>A string representation of this object.</returns>
		</member>
		<member name="T:System.Windows.Media.Media3D.Vector3DCollection.Enumerator">
			<summary> Enumerates items in an _collection. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3DCollection.Enumerator.MoveNext">
			<summary> Advances the enumerator to the next element of the collection. </summary>
			<returns>true if the enumerator was successfully advanced to the next element, false if the enumerator has passed the end of the collection.</returns>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3DCollection.Enumerator.System.IDisposable.Dispose">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="T:System.Windows.Media.Media3D.Vector3DCollectionConverter">
			<summary> Vector3DCollectionConverter - Converter class for converting instances of other types to and from Vector3DCollection instances </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3DCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Returns true if this type converter can convert from a given type. </summary>
			<returns>bool - True if this converter can convert from the provided type, false if not.</returns>
			<param name="context">The ITypeDescriptorContext for this call.</param>
			<param name="sourceType">The Type being queried for support.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3DCollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Returns true if this type converter can convert to the given type. </summary>
			<returns>bool - True if this converter can convert to the provided type, false if not.</returns>
			<param name="context">The ITypeDescriptorContext for this call.</param>
			<param name="destinationType">The Type being queried for support.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3DCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary> Attempts to convert to a Vector3DCollection from the given object. </summary>
			<returns>The Vector3DCollection which was constructed.</returns>
			<param name="culture">The CultureInfo which is respected when converting.</param>
			<param name="context">The ITypeDescriptorContext for this call.</param>
			<param name="value">The object to convert to an instance of Vector3DCollection.</param>
			<exception cref="T:System.NotSupportedException">A NotSupportedException is thrown if the example object is null or is not a valid type which can be converted to a Vector3DCollection.</exception>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3DCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> ConvertTo - Attempt to convert an instance of Vector3DCollection to the given type </summary>
			<returns>The object which was constructoed.</returns>
			<param name="culture">The CultureInfo which is respected when converting.</param>
			<param name="context">The ITypeDescriptorContext for this call.</param>
			<param name="destinationType">The type to which this will convert the Vector3DCollection instance.</param>
			<param name="value">The object to convert to an instance of "destinationType".</param>
			<exception cref="T:System.NotSupportedException">A NotSupportedException is thrown if the example object is null or is not a Vector3DCollection, or if the destinationType isn't one of the valid destination types.</exception>
		</member>
		<member name="T:System.Windows.Media.Media3D.Vector3DConverter">
			<summary> Converts instances of other types to and from a Vector3D structure. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3DConverter.#ctor">
			<summary> Initializes a new instance of Vector3DConverter. </summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3DConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines whether a class can be converted from a given type to an instance of a Vector3D structure.  </summary>
			<returns>Indicates whether the type can be converted to a Vector3D structure.ValueMeaningfalseThe converter cannot convert from the provided type.trueThe converter can convert the provided type to a Vector3D.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="sourceType">The type of the source that is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3DConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines whether an instance of a Vector3D structure can be converted to a different type. </summary>
			<returns>Indicates whether this Vector3D structure can be converted to destinationType.ValueMeaningfalseThe converter cannot convert this Vector3D structure to the specified type.trueThe converter can convert this Vector3D structure to the specified type.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The desired type that this Vector3D structure is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3DConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary> Attempts to convert a specified object to a Vector3D structure. </summary>
			<returns>The Vector3D structure created from the converted value.</returns>
			<param name="culture">Describes the CultureInfo of the type being converted.</param>
			<param name="context">The ITypeDescriptorContext for this call.</param>
			<param name="value">The object being converted.</param>
			<exception cref="T:System.NotSupportedException">Occurs if the specified object is null or is a type that cannot be converted to to a Vector3D structure.</exception>
		</member>
		<member name="M:System.Windows.Media.Media3D.Vector3DConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> Attempts to convert a Vector3D structure to a specified type. </summary>
			<returns>The object created from converting this Vector3D structure.</returns>
			<param name="culture">The CultureInfo which is respected when converting.</param>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The type this Vector3D structure is converted to.</param>
			<param name="value">The Vector3D structure to convert.</param>
		</member>
		<member name="T:System.Windows.Media.Media3D.Viewport3DVisual">
			<summary>Visual object that contains all child visual objects to be rendered as the contents of a <see cref="T:System.Windows.Controls.Viewport3D"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Viewport3DVisual.#ctor">
			<summary>Creates a Viewport3DVisual instance.</summary>
		</member>
		<member name="F:System.Windows.Media.Media3D.Viewport3DVisual.CameraProperty">
			<summary>The DependencyProperty for the Camera property.</summary>
		</member>
		<member name="F:System.Windows.Media.Media3D.Viewport3DVisual.ViewportProperty">
			<summary>The DependencyProperty for the Viewport property.</summary>
		</member>
		<member name="T:System.Windows.Media.Media3D.Visual3D">
			<summary>Base class for all types derived from the Visual3D class. It provides services and properties common to visual objects, including hit-testing, coordinate transformation, and bounding box calculations.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Visual3D.FindCommonVisualAncestor(System.Windows.DependencyObject)">
			<summary>Returns the common Visual ancestor of the Visual3D and another specified Visual.</summary>
			<returns>Returns the common ancestor of the Visual3D and otherVisual; otherwise null.</returns>
			<param name="otherVisual">Visual with which to find a common ancestor.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Visual3D.IsAncestorOf(System.Windows.DependencyObject)">
			<summary>Determines whether the visual object is an ancestor of the descendant visual object.</summary>
			<returns>True if the visual object is an ancestor of descendant; otherwise, false.</returns>
			<param name="descendant">Visual that is a possible descendant.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Visual3D.IsDescendantOf(System.Windows.DependencyObject)">
			<summary>Determines whether the visual object is a descendant of the ancestor visual object. </summary>
			<returns>True if the visual object is a descendant of ancestor; otherwise, false.</returns>
			<param name="ancestor">Visual that is a possible ancestor.</param>
		</member>
		<member name="M:System.Windows.Media.Media3D.Visual3DCollection.System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Visual3DCollection.System.Collections.IList.Insert(System.Int32,System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Visual3DCollection.System.Collections.IList.Remove(System.Object)">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Media.Media3D.Visual3DCollection.Enumerator.System.IDisposable.Dispose">
			<summary>This member supports the TLA#tla_winclient infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="N:System.Windows.Media.TextFormatting">
			<summary>The <see cref="N:System.Windows.Media.TextFormatting"></see> namespace defines classes that control formatting of text.</summary>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.CharacterBufferRange">
			<summary> A string of characters. </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.CharacterBufferRange.#ctor(System.Char[],System.Int32,System.Int32)">
			<summary> Construct character buffer reference from character array. </summary>
			<param name="offsetToFirstChar">The character buffer offset to the first character.</param>
			<param name="characterArray">The character array.</param>
			<param name="characterLength">The character length.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.CharacterBufferRange.#ctor(System.String,System.Int32,System.Int32)">
			<summary> Construct character buffer reference from string. </summary>
			<param name="offsetToFirstChar">The character buffer offset to the first character.</param>
			<param name="characterString">The character string.</param>
			<param name="characterLength">The character length.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.CharacterBufferRange.Equals(System.Windows.Media.TextFormatting.CharacterBufferRange)">
			<summary> Test equality with the input CharacterBufferRange. </summary>
			<param name="value">The CharacterBufferRange value to test.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.CharacterBufferRange.Equals(System.Object)">
			<summary> Test equality with the input object. </summary>
			<param name="obj">The object to test.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.CharacterBufferRange.op_Equality(System.Windows.Media.TextFormatting.CharacterBufferRange,System.Windows.Media.TextFormatting.CharacterBufferRange)">
			<summary> Compare two CharacterBufferRange strings for equality. </summary>
			<returns>Whether or not two operands are equal.</returns>
			<param name="right">The right operand.</param>
			<param name="left">The left operand.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.CharacterBufferRange.op_Inequality(System.Windows.Media.TextFormatting.CharacterBufferRange,System.Windows.Media.TextFormatting.CharacterBufferRange)">
			<summary> Compare two <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange"></see> strings for inequality. </summary>
			<returns>Whether or not two operands are equal.</returns>
			<param name="right">The right operand.</param>
			<param name="left">The left operand.</param>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.CharacterBufferReference">
			<summary> Text character buffer reference. </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.CharacterBufferReference.#ctor(System.Char[],System.Int32)">
			<summary> Construct character buffer reference from character array. </summary>
			<param name="offsetToFirstChar">character buffer offset to the first character.</param>
			<param name="characterArray">The character array.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.CharacterBufferReference.#ctor(System.String,System.Int32)">
			<summary> Construct character buffer reference from string. </summary>
			<param name="offsetToFirstChar">character buffer offset to the first character.</param>
			<param name="characterString">The character string.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.CharacterBufferReference.Equals(System.Windows.Media.TextFormatting.CharacterBufferReference)">
			<summary> Test equality with the input <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference"></see>. </summary>
			<param name="value">The <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference"></see> value to test.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.CharacterBufferReference.Equals(System.Object)">
			<summary> Test equality with the input object. </summary>
			<param name="obj">The object to test.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.CharacterBufferReference.op_Equality(System.Windows.Media.TextFormatting.CharacterBufferReference,System.Windows.Media.TextFormatting.CharacterBufferReference)">
			<summary> Compare two <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference"></see> instances for equality. </summary>
			<returns>Whether or not two operands are equal.</returns>
			<param name="right">The right operand</param>
			<param name="left">The left operand</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.CharacterBufferReference.op_Inequality(System.Windows.Media.TextFormatting.CharacterBufferReference,System.Windows.Media.TextFormatting.CharacterBufferReference)">
			<summary> Compare two <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference"></see> instances for inequality </summary>
			<returns>whether or not two operands are equal.</returns>
			<param name="right">The right operand</param>
			<param name="left">The left operand</param>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.CharacterHit">
			<summary> The CharacterHit structure represents information about a character hit within a glyph run - the index of the first character that got hit and the information about leading or trailing edge. </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.CharacterHit.#ctor(System.Int32,System.Int32)">
			<summary> Constructs a new CharacterHit structure. </summary>
			<param name="firstCharacterIndex">Index of the first character that got hit.</param>
			<param name="trailingLength">In case of leading edge this value is 0. In case of trailing edge this value is the number of codepoints until the next valid caret position.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.CharacterHit.Equals(System.Windows.Media.TextFormatting.CharacterHit)">
			<summary> Checks whether an object is equal to another character hit object. </summary>
			<returns>Returns true when the object is equal to the input object, and false otherwise.</returns>
			<param name="obj">CharacterHit object to compare with.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.CharacterHit.Equals(System.Object)">
			<summary> Checks whether an object is equal to another character hit object. </summary>
			<returns>Returns true when the object is equal to the input object, and false otherwise.</returns>
			<param name="obj">CharacterHit object to compare with.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.CharacterHit.GetHashCode">
			<summary> Compute hash code for this object. </summary>
			<returns>A 32-bit signed integer hash code.</returns>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.CharacterHit.op_Equality(System.Windows.Media.TextFormatting.CharacterHit,System.Windows.Media.TextFormatting.CharacterHit)">
			<summary> Checks whether two character hit objects are equal. </summary>
			<returns>Returns true when the values of FirstCharacterIndex and TrailingLength are equal for both objects, and false otherwise.</returns>
			<param name="right">Second object to compare.</param>
			<param name="left">First object to compare.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.CharacterHit.op_Inequality(System.Windows.Media.TextFormatting.CharacterHit,System.Windows.Media.TextFormatting.CharacterHit)">
			<summary> Checks whether two character hit objects are not equal. </summary>
			<returns>Returns false when the values of FirstCharacterIndex and TrailingLength are equal for both objects, and true otherwise.</returns>
			<param name="right">Second object to compare.</param>
			<param name="left">First object to compare.</param>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange">
			<summary>Represents a range of characters that are associated with a culture.</summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange.#ctor(System.Globalization.CultureInfo,System.Windows.Media.TextFormatting.CharacterBufferRange)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange"></see> class.</summary>
			<param name="culture">A value of <see cref="T:System.Globalization.CultureInfo"></see> that represents the culture of the containing range of characters.</param>
			<param name="characterBufferRange">A value of <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange"></see> that represents the range of characters.</param>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange.CharacterBufferRange">
			<summary>Gets the <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange"></see> of the <see cref="T:System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange"></see>.</summary>
			<returns>A value of type <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange.CultureInfo">
			<summary>Gets the <see cref="T:System.Globalization.CultureInfo"></see> of the <see cref="T:System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange"></see>.</summary>
			<returns>A value of type <see cref="T:System.Globalization.CultureInfo"></see>.</returns>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.IndexedGlyphRun">
			<summary> GlyphRun indexed with text source character index. It allows clients to map a text source character index to the corresponding GlyphRun. </summary>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.InvertAxes">
			<summary> Indicate the inversion of axes of the drawing surface.</summary>
		</member>
		<member name="F:System.Windows.Media.TextFormatting.InvertAxes.Both">
			<summary> Drawing surface is inverted in both axes. </summary>
		</member>
		<member name="F:System.Windows.Media.TextFormatting.InvertAxes.Horizontal">
			<summary> Drawing surface is inverted in horizontal axis.</summary>
		</member>
		<member name="F:System.Windows.Media.TextFormatting.InvertAxes.None">
			<summary> Drawing surface is not inverted in either axis.</summary>
		</member>
		<member name="F:System.Windows.Media.TextFormatting.InvertAxes.Vertical">
			<summary> Drawing surface is inverted in vertical axis. </summary>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.MinMaxParagraphWidth">
			<summary> Represents two values - the smallest and largest possible paragraph width that can fully contain specified text content.</summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.MinMaxParagraphWidth.Equals(System.Windows.Media.TextFormatting.MinMaxParagraphWidth)">
			<summary> Test equality with the input <see cref="T:System.Windows.Media.TextFormatting.MinMaxParagraphWidth"></see> value. </summary>
			<param name="value">The <see cref="T:System.Windows.Media.TextFormatting.MinMaxParagraphWidth"></see> value to test</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.MinMaxParagraphWidth.Equals(System.Object)">
			<summary> Test equality with the input <see cref="T:System.Windows.Media.TextFormatting.MinMaxParagraphWidth"></see> value. </summary>
			<param name="obj">the object to test.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.MinMaxParagraphWidth.op_Equality(System.Windows.Media.TextFormatting.MinMaxParagraphWidth,System.Windows.Media.TextFormatting.MinMaxParagraphWidth)">
			<summary> Compare two MinMaxParagraphWidth for equality. </summary>
			<returns>Whether or not two operands are equal.</returns>
			<param name="right">The right operand.</param>
			<param name="left">The left operand.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.MinMaxParagraphWidth.op_Inequality(System.Windows.Media.TextFormatting.MinMaxParagraphWidth,System.Windows.Media.TextFormatting.MinMaxParagraphWidth)">
			<summary> Compare two MinMaxParagraphWidth for inequality.</summary>
			<returns>Whether or not two operands are equal.</returns>
			<param name="right">The right operand.</param>
			<param name="left">The left operand.</param>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextBounds">
			<summary> The bounding rectangle of a range of characters. </summary>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextBounds.TextRunBounds">
			<summary> Gets a list of run bounding rectangles. </summary>
			<returns>Array of text run bounds.</returns>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextCharacters">
			<summary> A specialized TextSymbols implemented by TextFormatter to produces a collection of TextCharacterShape – each represents a collection of character glyphs from distinct physical typeface. </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextCharacters.#ctor(System.String,System.Windows.Media.TextFormatting.TextRunProperties)">
			<summary> Construct a run for text content from string. </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextCharacters.#ctor(System.Char[],System.Int32,System.Int32,System.Windows.Media.TextFormatting.TextRunProperties)">
			<summary> Construct a run of text content from character array. </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextCharacters.#ctor(System.String,System.Int32,System.Int32,System.Windows.Media.TextFormatting.TextRunProperties)">
			<summary> Construct a run for text content from string. </summary>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextCollapsedRange">
			<summary>Represents the range of characters and its width measurement for collapsed text within a line.</summary>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextCollapsedRange.Length">
			<summary>Gets the number of characters for the collapsed text.</summary>
			<returns>An <see cref="T:System.Int32"></see> value that represents the number of collapsed text characters.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextCollapsedRange.TextSourceCharacterIndex">
			<summary>Gets the index to the first character in the <see cref="T:System.Windows.Media.TextFormatting.TextSource"></see> that represents collapsed text characters.</summary>
			<returns>An <see cref="T:System.Int32"></see> value that represents the index of the first collapsed text character.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextCollapsedRange.Width">
			<summary>The total width of collapsed text characters.</summary>
			<returns>A <see cref="T:System.Double"></see> value that represents the width of the collapsed text characters.</returns>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextCollapsingProperties">
			<summary> Properties of text collapsing </summary>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextCollapsingStyle">
			<summary> The text collapsing style.</summary>
		</member>
		<member name="F:System.Windows.Media.TextFormatting.TextCollapsingStyle.TrailingCharacter">
			<summary> Collapse trailing characters. </summary>
		</member>
		<member name="F:System.Windows.Media.TextFormatting.TextCollapsingStyle.TrailingWord">
			<summary> Collapse trailing words. </summary>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextEmbeddedObject">
			<summary> Provide definition for a kind of text content in which measuring, hittesting and drawing of the entire content is done in whole. Example of that kind of content is a button in the middle of the line. </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextEmbeddedObject.ComputeBoundingBox(System.Boolean,System.Boolean)">
			<summary> Get computed bounding box of text object </summary>
			<returns>Computed bounding box size of text object</returns>
			<param name="sideways">Run is drawn with its side parallel to baseline</param>
			<param name="rightToLeft">Run is drawn from right to left</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextEmbeddedObject.Draw(System.Windows.Media.DrawingContext,System.Windows.Point,System.Boolean,System.Boolean)">
			<summary> Draw the text object </summary>
			<param name="drawingContext">The drawing context.</param>
			<param name="sideways">The run is drawn with its side parallel to baseline.</param>
			<param name="origin">The origin where the object is drawn.</param>
			<param name="rightToLeft">The run is drawn from right to left.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextEmbeddedObject.Format(System.Double)">
			<summary> Get text object measurement metrics that will fit within the specified remaining width of the paragraph. </summary>
			<returns>The text object metrics.</returns>
			<param name="remainingParagraphWidth">remaining paragraph width</param>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextEmbeddedObjectMetrics">
			<summary> Text object properties. </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextEmbeddedObjectMetrics.#ctor(System.Double,System.Double,System.Double)">
			<summary> Construct a text object size. </summary>
			<param name="width">The object width.</param>
			<param name="height">The object height.</param>
			<param name="baseline">The object baseline in ratio relative to run height.</param>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextEndOfLine">
			<summary> Specialized text run used to mark the end of a line.</summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextEndOfLine.#ctor(System.Int32)">
			<summary> Construct a linebreak run. </summary>
			<param name="length">The number of characters.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextEndOfLine.#ctor(System.Int32,System.Windows.Media.TextFormatting.TextRunProperties)">
			<summary> Construct a linebreak run.</summary>
			<param name="textRunProperties">linebreak text run properties.</param>
			<param name="length">The number of characters.</param>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextEndOfParagraph">
			<summary> Specialized line break control used to mark the end of a paragraph </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextEndOfParagraph.#ctor(System.Int32)">
			<summary> Construct a paragraph break run </summary>
			<param name="length">number of characters</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextEndOfParagraph.#ctor(System.Int32,System.Windows.Media.TextFormatting.TextRunProperties)">
			<summary> Construct a paragraph break run </summary>
			<param name="textRunProperties">linebreak text run properties</param>
			<param name="length">number of characters</param>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextEndOfSegment">
			<summary> Specialized text run used to mark the end of a segment, i.e., to end the scope affected by a preceding TextModifier run. </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextEndOfSegment.#ctor(System.Int32)">
			<summary> Construct an end of segment run. </summary>
			<param name="length">The number of characters.</param>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextFormatter">
			<summary>TextFormatter is the TLA#tla_winclient text engine and provides services for formatting text and breaking text lines. TextFormatter can handle different text character formats and paragraph styles, and includes support for international text layout. </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextFormatter.#ctor">
			<summary> Initializes a new instance of TextFormatter. </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextFormatter.Create">
			<summary> Gets a new instance TextFormatter.  </summary>
			<returns>A new instance of TextFormatter.</returns>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextFormatter.FormatLine(System.Windows.Media.TextFormatting.TextSource,System.Int32,System.Double,System.Windows.Media.TextFormatting.TextParagraphProperties,System.Windows.Media.TextFormatting.TextLineBreak)">
			<summary> Creates a TextLine that is used for formatting and displaying a document. </summary>
			<returns>An object which represents a line of text that the client can interact with.</returns>
			<param name="previousLineBreak">Specifies the text formatter state where the previous line in the paragraph was broken by the text formatting process.</param>
			<param name="paragraphProperties">Object which represents properties that can change from one paragraph to the next, such as flow direction, alignment, or indentation.</param>
			<param name="firstCharIndex">Specifies the character index of the starting character in the line.</param>
			<param name="textSource">Object that represents the source for the TextFormatter.</param>
			<param name="paragraphWidth">Specifies the width of the paragraph the line fills.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextFormatter.FormatLine(System.Windows.Media.TextFormatting.TextSource,System.Int32,System.Double,System.Windows.Media.TextFormatting.TextParagraphProperties,System.Windows.Media.TextFormatting.TextLineBreak,System.Windows.Media.TextFormatting.TextRunCache)">
			<summary> Creates a TextLine that is used for formatting and displaying a document. This method is used to improve performance in applications where the TextRun has significant performance implications. </summary>
			<returns>An object which represents a line of text that the client can interact with.</returns>
			<param name="previousLineBreak">Specifies the text formatter state where the previous line in the paragraph was broken by the text formatting process.</param>
			<param name="paragraphProperties">Object which represents properties that can change from one paragraph to the next, such as flow direction, alignment, or indentation.</param>
			<param name="firstCharIndex">Specifies the character index of the starting character in the line.</param>
			<param name="textRunCache">Object which represents the caching mechanism for text layout.</param>
			<param name="textSource">Object that represents the source for the TextFormatter.</param>
			<param name="paragraphWidth">Specifies the width of the paragraph the line fills.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextFormatter.FormatMinMaxParagraphWidth(System.Windows.Media.TextFormatting.TextSource,System.Int32,System.Windows.Media.TextFormatting.TextParagraphProperties)">
			<summary> Client to ask for the possible smallest and largest paragraph width that can fully contain the passing text content </summary>
			<returns>min max paragraph width</returns>
			<param name="paragraphProperties">properties that can change from one paragraph to the next, such as text flow direction, text alignment, or indentation.</param>
			<param name="firstCharIndex">character index to specify where in the source text the line starts</param>
			<param name="textSource">an object representing text layout clients text source for TextFormatter.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextFormatter.FormatMinMaxParagraphWidth(System.Windows.Media.TextFormatting.TextSource,System.Int32,System.Windows.Media.TextFormatting.TextParagraphProperties,System.Windows.Media.TextFormatting.TextRunCache)">
			<summary> Client to ask for the possible smallest and largest paragraph width that can fully contain the passing text content </summary>
			<returns>The min max paragraph width</returns>
			<param name="paragraphProperties">properties that can change from one paragraph to the next, such as text flow direction, text alignment, or indentation.</param>
			<param name="firstCharIndex">character index to specify where in the source text the line starts</param>
			<param name="textRunCache">an object representing content cache of the client.</param>
			<param name="textSource">an object representing text layout clients text source for TextFormatter.</param>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextHidden">
			<summary> Specialized text run used to mark a range of hidden characters </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextHidden.#ctor(System.Int32)">
			<summary> Construct a hidden text run </summary>
			<param name="length">number of characters</param>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextLine">
			<summary> Provides services to a line of text. Inherit from this class to implement services that manipulate and format a line of text. This is an abstract class. </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextLine.#ctor">
			<summary> Initializes a new instance of TextLine. </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextLine.Collapse(System.Windows.Media.TextFormatting.TextCollapsingProperties[])">
			<summary> Client to collapse the line and get a collapsed line that fits for display </summary>
			<param name="collapsingPropertiesList">A list of collapsing properties</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextLine.Draw(System.Windows.Media.DrawingContext,System.Windows.Point,System.Windows.Media.TextFormatting.InvertAxes)">
			<summary> Client to draw the line </summary>
			<param name="drawingContext">Drawing context</param>
			<param name="origin">Drawing origin</param>
			<param name="inversion">Indicate the inversion of the drawing surface</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextLine.GetBackspaceCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit)">
			<summary> Client to get the previous character hit after backspacing </summary>
			<returns>The character hit after backspacing</returns>
			<param name="characterHit">The current character hit</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextLine.GetCharacterHitFromDistance(System.Double)">
			<summary> Client to get the character hit corresponding to the specified distance from the beginning of the line. </summary>
			<returns>The character hit.</returns>
			<param name="distance">Distance in text flow direction from the beginning of the line.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextLine.GetDistanceFromCharacterHit(System.Windows.Media.TextFormatting.CharacterHit)">
			<summary> Client to get the distance from the beginning of the line from the specified character hit. </summary>
			<returns>The distance in text flow direction from the beginning of the line.</returns>
			<param name="characterHit">Character hit of the character to query the distance.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextLine.GetNextCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit)">
			<summary> Client to get the next character hit for caret navigation </summary>
			<returns> The next character hit</returns>
			<param name="characterHit"> The current character hit</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextLine.GetPreviousCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit)">
			<summary> Client to get the previous character hit for caret navigation </summary>
			<returns> The previous character hit</returns>
			<param name="characterHit"> The current character hit</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextLine.GetTextBounds(System.Int32,System.Int32)">
			<summary> Client to get an array of bounding rectangles of a range of characters within a text line. </summary>
			<param name="firstTextSourceCharacterIndex"> The index of first character of specified range</param>
			<param name="textLength"> The number of characters of the specified range</param>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextLine.Baseline">
			<summary> Gets the distance from the top to the baseline of the current TextLine. </summary>
			<returns>The distance from the top to the baseline of the current TextLine.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextLine.Extent">
			<summary> Gets the distance from the topmost to bottommost black pixel in a line. </summary>
			<returns>The distance from the topmost to bottommost black pixel in a line.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextLine.Height">
			<summary> Gets the height of a line of text. </summary>
			<returns>The height of the line of text.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextLine.IsTruncated">
			<summary>Determines whether the text line is truncated in the middle of a word.</summary>
			<returns>true if the text line is truncated in the middle of a word; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextLine.Length">
			<summary> Gets the total number of TextSource positions of the current line. </summary>
			<returns>The number of TextSource positions of the line.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextLine.MarkerBaseline">
			<summary> Gets the distance from the edge of the line's highest point to the baseline marker of the line. </summary>
			<returns>The distance from the edge of the line's highest point to the baseline marker of the line.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextLine.MarkerHeight">
			<summary> Gets the height of a list item's marker.  </summary>
			<returns>The height of the marker.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextLine.OverhangAfter">
			<summary> Gets the distance that black pixels extend beyond the bottom alignment edge of a line. </summary>
			<returns>The distance that black pixels extend beyond the bottom alignment edge of a line.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextLine.OverhangLeading">
			<summary> Gets the distance that black pixels extend prior to the left leading alignment edge of the line. </summary>
			<returns>The distance that black pixels extend prior to the left leading alignment edge of the line.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextLine.OverhangTrailing">
			<summary> Gets the distance that black pixels extend following the right trailing alignment edge of the line. </summary>
			<returns>The distance that black pixels extend following the right trailing alignment edge of the line.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextLine.Start">
			<summary> Gets the distance from the start of a paragraph to the starting point of a line. </summary>
			<returns>The distance from the start of a paragraph to the starting point of a line.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextLine.TextBaseline">
			<summary>Gets the distance from the top to the baseline of the line of text.</summary>
			<returns>A <see cref="T:System.Double"></see> value.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextLine.TextHeight">
			<summary>Gets the height of the text and any other content in the line.</summary>
			<returns>A <see cref="T:System.Double"></see> value.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextLine.TrailingWhitespaceLength">
			<summary> Gets the number of whitespace code points beyond the last non-blank character in a line. </summary>
			<returns>The number of whitespace code points beyond the last non-blank character in a line.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextLine.Width">
			<summary> Gets the width of a line of text without trailing whitespaces. </summary>
			<returns>The width of a line of text without trailing whitespaces.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextLine.WidthIncludingTrailingWhitespace">
			<summary> Gets the width of a line of text, including trailing whitespaces. </summary>
			<returns>The width of a line of text, including trailing whitespaces.</returns>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextLineBreak">
			<summary> Text properties and state at the point where text is broken by the line breaking process. </summary>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextMarkerProperties">
			<summary>Represents an abstract class for defining text markers.</summary>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextMarkerProperties.Offset">
			<summary>Gets the distance from the start of the line to the end of the marker symbol.</summary>
			<returns>A <see cref="T:System.Double"></see> that represents the offset of the marker symbol from the beginning of the line.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextMarkerProperties.TextSource">
			<summary>Gets the <see cref="T:System.Windows.Media.TextFormatting.TextSource"></see> that represents the source of the text runs for the marker symbol.</summary>
			<returns>The <see cref="T:System.Windows.Media.TextFormatting.TextSource"></see> that represents the text marker.</returns>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextModifier">
			<summary>Represents a specialized text run that can be used to modify properties of text runs within its scope.</summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextModifier.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextModifier"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextModifier.ModifyProperties(System.Windows.Media.TextFormatting.TextRunProperties)">
			<summary>Retrieves the <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"></see> for a text run.</summary>
			<returns>The actual <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"></see> to be used by the <see cref="T:System.Windows.Media.TextFormatting.TextFormatter"></see>, subject to further modification by <see cref="T:System.Windows.Media.TextFormatting.TextModifier"></see> objects at outer scopes.</returns>
			<param name="properties">The <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"></see> for a text run, or the return value of <see cref="M:System.Windows.Media.TextFormatting.TextModifier.ModifyProperties(System.Windows.Media.TextFormatting.TextRunProperties)"></see> for a nested text modifier.</param>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextModifier.CharacterBufferReference">
			<summary>Gets the <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference"></see> for the <see cref="T:System.Windows.Media.TextFormatting.TextModifier"></see>.</summary>
			<returns>A value of type <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextModifier.FlowDirection">
			<summary>Gets the <see cref="T:System.Windows.FlowDirection"></see> for the <see cref="T:System.Windows.Media.TextFormatting.TextModifier"></see>.</summary>
			<returns>A value of type <see cref="T:System.Windows.FlowDirection"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextModifier.HasDirectionalEmbedding">
			<summary>Gets a value that indicates whether the <see cref="T:System.Windows.Media.TextFormatting.TextModifier"></see> supports <see cref="T:System.Windows.FlowDirection"></see> for the current scope of text.</summary>
			<returns>true if <see cref="T:System.Windows.Media.TextFormatting.TextModifier"></see> supports <see cref="T:System.Windows.FlowDirection"></see> for the current scope of text; otherwise, false.</returns>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextParagraphProperties">
			<summary> Represents properties that can change from one paragraph to the next, such as flow direction, alignment, or indentation. </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextParagraphProperties.#ctor">
			<summary> Initializes a new instance of TextParagraphProperties. </summary>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextParagraphProperties.DefaultIncrementalTab">
			<summary> Gets or sets the default incremental tab distance. </summary>
			<returns>The default incremental tab distance.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextParagraphProperties.DefaultTextRunProperties">
			<summary> Gets or sets the default TextRunProperties. </summary>
			<returns>Represents text properties that can change from one run to the next, such as typeface or foreground brush.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextParagraphProperties.Indent">
			<summary> Gets or sets the amount of line indentation. </summary>
			<returns>The amount of line indentation.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextParagraphProperties.LineHeight">
			<summary> Gets or sets the height of a line of text.     </summary>
			<returns>The height of a line of text.</returns>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextRun">
			<summary> Defines a sequence of characters that share a single property set. The formatting client provides TextRun details into this class when the TextFormatter passes it as a parameter to the GetTextRun method. </summary>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRun.Length">
			<summary> Gets or sets the number of TextSource character indices that the TextRun occupies. </summary>
			<returns>The number of TextSource character indices that the TextRun occupies.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRun.Properties">
			<summary> Gets the text properties that are shared within a TextRun, such as typeface or foreground brush. </summary>
			<returns>Represents text properties that are shared within a TextRun, such as typeface or foreground brush.</returns>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextRunBounds">
			<summary> Provides bounding information for a text run. This class cannot be inherited. </summary>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunBounds.Rectangle">
			<summary> Gets the Rect of the bounded text run. </summary>
			<returns>The Rect of the bounded text run.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunBounds.TextSourceCharacterIndex">
			<summary> Gets the character index of the first character in the bounded text run. </summary>
			<returns>The index representing the first character of the bounded text run.</returns>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextRunCache">
			<summary> Provides caching services to the TextFormatter object in order to improve performance.     </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextRunCache.#ctor">
			<summary> Initializes a new instance of TextRunCache. </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextRunCache.Change(System.Int32,System.Int32,System.Int32)">
			<summary> Notifies the client of a change in the cache when text content or text run properties of the TextRun are added, removed, or replaced. </summary>
			<param name="textSourceCharacterIndex">Specifies the TextSource character index position of the start of the change.</param>
			<param name="addition">Indicates the number of TextSource characters to be added.</param>
			<param name="removal">Indicates the number of TextSource characters to be removed.</param>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextRunProperties">
			<summary> Provides properties that can change from one TextRun to another, such as typeface or foreground brush. This is an abstract class. </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextRunProperties.#ctor">
			<summary> Initializes a new instance of TextRunProperties. </summary>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunProperties.FontHintingEmSize">
			<summary> Gets or sets the text size in points, which is then used for purposes of font hinting. </summary>
			<returns>The text size in points. The default is 12 pt.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunProperties.FontRenderingEmSize">
			<summary> Gets or sets the text size in points. </summary>
			<returns>The text size in points. The default is 12 pt.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunProperties.ForegroundBrush">
			<summary> Gets or sets the foreground brush of the TextRun.     </summary>
			<returns>The foregound brush.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunProperties.TextDecorations">
			<summary> Gets or sets the TextDecorationCollection used for the TextRun. </summary>
			<returns>The TextDecorationCollection used for the TextRun.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunProperties.Typeface">
			<summary> Gets or sets the typeface of the TextRun. </summary>
			<returns>The typeface of the TextRun.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunProperties.TypographyProperties">
			<summary> Gets or sets the typography properties of the TextRun. </summary>
			<returns>The typography properties of the TextRun.</returns>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextRunTypographyProperties">
			<summary> Provides typography properties for TextRun. This client set of properties generates a set of features that are processed by the OpenType layout engine. </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextRunTypographyProperties.#ctor">
			<summary> Initializes a new instance of TextRunTypographyProperties. </summary>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.AnnotationAlternates">
			<summary> Gets the value that specifies which alternate notation form is used. These forms include glyphs placed in open or solid circles, squares, parentheses, diamonds or rounded boxes. </summary>
			<returns>Indicates which alternate notation form is used.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.Capitals">
			<summary> Gets or sets a value that indicates the capital form of the selected font. Capital forms include Normal, SmallCaps, AllSmallCaps, PetiteCaps, AllPetiteCaps, Unicase and Titling. </summary>
			<returns>Indicates the desired capital form of the selected font.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.CapitalSpacing">
			<summary> Gets or sets a value that indicates whether inter-glyph spacing for all-capital text is globally adjusted to improve readability. </summary>
			<returns>Specifies whether inter-glyph spacing for all-capital text is globally adjusted to improve readability.ValueMeaningfalseInter-glyph spacing for all-capital text is not adjusted.trueInter-glyph spacing for all-capital text is adjusted.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.ContextualAlternates">
			<summary> Gets or sets a value that indicates whether custom glyph forms can be used based upon the context of the text being rendered. This is valuable for languages that have letters with multiple medial forms that are used depending on the context of the surrounding letters. </summary>
			<returns>Indicates whether custom glyph forms can be used.ValueMeaningfalseCustom glyph forms cannot be used.trueCustom glyph forms can be used.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.ContextualLigatures">
			<summary> Gets or sets a value that indicates whether contextual ligatures are supported. </summary>
			<returns>Indicates whether contextual ligatures are supported.ValueMeaningfalseContextual ligatures are not supported.trueContextual ligatures are supported.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.ContextualSwashes">
			<summary> Gets a value that indicates contextual swashes are enabled. Contextual swashes are typographic forms that are only applied based on the context of the text being rendered. </summary>
			<returns>Indicates if contextual swashes are enabled.ValueMeaning0Contextual swashes are not enabled.1Contextual swashes are enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.DiscretionaryLigatures">
			<summary> Gets or sets a value that indicates whether discretionary ligatures are enabled. Discretionary ligatures are typographic forms that font designers may add to their fonts to assist with readability. </summary>
			<returns>Specifies whether discretionary ligatures are enabled.ValueMeaningfalseDiscretionary ligatures are disabled.trueDiscretionary ligatures are enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.EastAsianExpertForms">
			<summary> Gets or sets a value that indicates whether standard Japanese font forms have been replaced with the corresponding preferred typographic form. </summary>
			<returns>Indicates whether standard Japanese font forms have been replaced with the corresponding preferred typographic form.ValueMeaningfalseStandard Japanese font forms have not been replaced with the corresponding preferred typographic form.trueStandard Japanese font forms have been replaced with the corresponding preferred typographic form.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.EastAsianLanguage">
			<summary> Gets or sets a value that specifies the version of glyphs to be used for a specific writing system or language. </summary>
			<returns>Specifies the East Asian language type.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.EastAsianWidths">
			<summary> Gets or sets a value that indicates the proportional width to be used for Latin characters in an East Asian font. </summary>
			<returns>The proportional width to be used for Latin characters in an East Asian font.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.HistoricalForms">
			<summary> Gets or sets a value that indicates whether historical font forms are available. Historical forms are typographic conventions that were common in the past such as the long form of "s" or the Fraktur "k". </summary>
			<returns>Specifies whether historical font forms are enabled.ValueMeaningfalseHistorical font forms are disabled.trueHistorical font forms are enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.HistoricalLigatures">
			<summary> Gets or sets a value that indicates whether historical ligatures are enabled. Historical ligatures are typographic forms used in historical typography that font designers may add to their fonts. </summary>
			<returns>Specifies whether historical ligatures are enabled.ValueMeaningfalseHistorical ligatures are disabled.trueHistorical ligatures are enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.Kerning">
			<summary> Gets or sets a value that indicates whether kerning is enabled. Kerning is a typographic function that adjusts the spacing between characters to enhance word shape. </summary>
			<returns>Indicates whether kerning is enabled.ValueMeaningfalseKerning is disabled.trueKerning is enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.MathematicalGreek">
			<summary> Gets or sets a value that indicates whether standard typographic font forms of Greek glyphs have been replaced with corresponding font forms commonly used in mathematical notation. </summary>
			<returns>Specifies whether font forms of Greek glyphs have been replaced with corresponding font forms used in mathematical notation.ValueMeaningfalseFont forms of Greek glyphs have not been replaced.trueFont forms of Greek glyphs have been replaced.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.NumeralAlignment">
			<summary> Gets or sets the glyph set to be used for different numeric alignment scenarios. </summary>
			<returns>Specifies Normal, Proportional or Tabular alignment.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.NumeralStyle">
			<summary> Gets or sets a value that selects a set of glyphs that are used to render numeric alternate font forms that better match with their associated text. </summary>
			<returns>Specifies the numerals style of the selected font.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.SlashedZero">
			<summary> Gets or sets a value that indicates whether a nominal zero font form should be replaced with a slashed zero. </summary>
			<returns>Indicates whether a nominal zero font form should be replaced with a slashed zero.ValueMeaningfalseNominal zero font form should not be replaced with a slashed zero.trueNominal zero font form should be replaced with a slashed zero.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StandardLigatures">
			<summary> Gets or sets a value that indicates whether standard ligatures are enabled. Standard ligatures assist with readability. </summary>
			<returns>Indicates whether standard ligatures are enabled.ValueMeaningfalseStandard ligatures are not enabled.trueStandard ligatures are enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StandardSwashes">
			<summary> Gets or sets a value that indicates if standard swashes are enabled. Standard swashes are typographic forms that font designers may add to their fonts that have common usage. </summary>
			<returns>Indicates if standard swashes are enabled.ValueMeaning0Standard swashes are not enabled.1Standard swashes are enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticAlternates">
			<summary> Gets or sets a value that indicates whether stylistic alternates are enabled. Stylistic alternates are glyph designs for a purely aesthetic effect that don't fit into a category such as historical or swash. </summary>
			<returns>Indicates whether stylistic alternates are enabled.ValueMeaning0Stylistic alternates are not enabled.1Stylistic alternates are enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet1">
			<summary> Gets or sets a value that indicates whether a stylistic set of a font form is enabled. Some fonts contain stylistic variant glyphs that correspond to portions of a character set. Glyphs in stylistic sets may be designed to harmonize visually, interact in particular ways, or work together in other ways.     </summary>
			<returns>Indicates whether a stylistic set of a font form is enabled.ValueMeaningfalseStylistic set of a font form is disabled.trueStylistic set of a font form is enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet10">
			<summary> Gets or sets a value that indicates whether a stylistic set of a font form is enabled. Some fonts contain stylistic variant glyphs that correspond to portions of a character set. Glyphs in stylistic sets may be designed to harmonize visually, interact in particular ways, or work together in other ways.     </summary>
			<returns>Indicates whether a stylistic set of a font form is enabled.ValueMeaningfalseStylistic set of a font form is disabled.trueStylistic set of a font form is enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet11">
			<summary> Gets or sets a value that indicates whether a stylistic set of a font form is enabled. Some fonts contain stylistic variant glyphs that correspond to portions of a character set. Glyphs in stylistic sets may be designed to harmonize visually, interact in particular ways, or work together in other ways.     </summary>
			<returns>Indicates whether a stylistic set of a font form is enabled.ValueMeaningfalseStylistic set of a font form is disabled.trueStylistic set of a font form is enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet12">
			<summary> Gets or sets a value that indicates whether a stylistic set of a font form is enabled. Some fonts contain stylistic variant glyphs that correspond to portions of a character set. Glyphs in stylistic sets may be designed to harmonize visually, interact in particular ways, or work together in other ways.     </summary>
			<returns>Indicates whether a stylistic set of a font form is enabled.ValueMeaningfalseStylistic set of a font form is disabled.trueStylistic set of a font form is enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet13">
			<summary> Gets or sets a value that indicates whether a stylistic set of a font form is enabled. Some fonts contain stylistic variant glyphs that correspond to portions of a character set. Glyphs in stylistic sets may be designed to harmonize visually, interact in particular ways, or work together in other ways.     </summary>
			<returns>Indicates whether a stylistic set of a font form is enabled.ValueMeaningfalseStylistic set of a font form is disabled.trueStylistic set of a font form is enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet14">
			<summary> Gets or sets a value that indicates whether a stylistic set of a font form is enabled. Some fonts contain stylistic variant glyphs that correspond to portions of a character set. Glyphs in stylistic sets may be designed to harmonize visually, interact in particular ways, or work together in other ways.     </summary>
			<returns>Indicates whether a stylistic set of a font form is enabled.ValueMeaningfalseStylistic set of a font form is disabled.trueStylistic set of a font form is enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet15">
			<summary> Gets or sets a value that indicates whether a stylistic set of a font form is enabled. Some fonts contain stylistic variant glyphs that correspond to portions of a character set. Glyphs in stylistic sets may be designed to harmonize visually, interact in particular ways, or work together in other ways.     </summary>
			<returns>Indicates whether a stylistic set of a font form is enabled.ValueMeaningfalseStylistic set of a font form is disabled.trueStylistic set of a font form is enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet16">
			<summary> Gets or sets a value that indicates whether a stylistic set of a font form is enabled. Some fonts contain stylistic variant glyphs that correspond to portions of a character set. Glyphs in stylistic sets may be designed to harmonize visually, interact in particular ways, or work together in other ways.     </summary>
			<returns>Indicates whether a stylistic set of a font form is enabled.ValueMeaningfalseStylistic set of a font form is disabled.trueStylistic set of a font form is enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet17">
			<summary> Gets or sets a value that indicates whether a stylistic set of a font form is enabled. Some fonts contain stylistic variant glyphs that correspond to portions of a character set. Glyphs in stylistic sets may be designed to harmonize visually, interact in particular ways, or work together in other ways.     </summary>
			<returns>Indicates whether a stylistic set of a font form is enabled.ValueMeaningfalseStylistic set of a font form is disabled.trueStylistic set of a font form is enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet18">
			<summary> Gets or sets a value that indicates whether a stylistic set of a font form is enabled. Some fonts contain stylistic variant glyphs that correspond to portions of a character set. Glyphs in stylistic sets may be designed to harmonize visually, interact in particular ways, or work together in other ways.     </summary>
			<returns>Indicates whether a stylistic set of a font form is enabled.ValueMeaningfalseStylistic set of a font form is disabled.trueStylistic set of a font form is enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet19">
			<summary> Gets or sets a value that indicates whether a stylistic set of a font form is enabled. Some fonts contain stylistic variant glyphs that correspond to portions of a character set. Glyphs in stylistic sets may be designed to harmonize visually, interact in particular ways, or work together in other ways.     </summary>
			<returns>Indicates whether a stylistic set of a font form is enabled.ValueMeaningfalseStylistic set of a font form is disabled.trueStylistic set of a font form is enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet2">
			<summary> Gets or sets a value that indicates whether a stylistic set of a font form is enabled. Some fonts contain stylistic variant glyphs that correspond to portions of a character set. Glyphs in stylistic sets may be designed to harmonize visually, interact in particular ways, or work together in other ways.     </summary>
			<returns>Indicates whether a stylistic set of a font form is enabled.ValueMeaningfalseStylistic set of a font form is disabled.trueStylistic set of a font form is enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet20">
			<summary> Gets or sets a value that indicates whether a stylistic set of a font form is enabled. Some fonts contain stylistic variant glyphs that correspond to portions of a character set. Glyphs in stylistic sets may be designed to harmonize visually, interact in particular ways, or work together in other ways.     </summary>
			<returns>Indicates whether a stylistic set of a font form is enabled.ValueMeaningfalseStylistic set of a font form is disabled.trueStylistic set of a font form is enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet3">
			<summary> Gets or sets a value that indicates whether a stylistic set of a font form is enabled. Some fonts contain stylistic variant glyphs that correspond to portions of a character set. Glyphs in stylistic sets may be designed to harmonize visually, interact in particular ways, or work together in other ways.     </summary>
			<returns>Indicates whether a stylistic set of a font form is enabled.ValueMeaningfalseStylistic set of a font form is disabled.trueStylistic set of a font form is enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet4">
			<summary> Gets or sets a value that indicates whether a stylistic set of a font form is enabled. Some fonts contain stylistic variant glyphs that correspond to portions of a character set. Glyphs in stylistic sets may be designed to harmonize visually, interact in particular ways, or work together in other ways.     </summary>
			<returns>Indicates whether a stylistic set of a font form is enabled.ValueMeaningfalseStylistic set of a font form is disabled.trueStylistic set of a font form is enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet5">
			<summary> Gets or sets a value that indicates whether a stylistic set of a font form is enabled. Some fonts contain stylistic variant glyphs that correspond to portions of a character set. Glyphs in stylistic sets may be designed to harmonize visually, interact in particular ways, or work together in other ways.     </summary>
			<returns>Indicates whether a stylistic set of a font form is enabled.ValueMeaningfalseStylistic set of a font form is disabled.trueStylistic set of a font form is enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet6">
			<summary> Gets or sets a value that indicates whether a stylistic set of a font form is enabled. Some fonts contain stylistic variant glyphs that correspond to portions of a character set. Glyphs in stylistic sets may be designed to harmonize visually, interact in particular ways, or work together in other ways.     </summary>
			<returns>Indicates whether a stylistic set of a font form is enabled.ValueMeaningfalseStylistic set of a font form is disabled.trueStylistic set of a font form is enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet7">
			<summary> Gets or sets a value that indicates whether a stylistic set of a font form is enabled. Some fonts contain stylistic variant glyphs that correspond to portions of a character set. Glyphs in stylistic sets may be designed to harmonize visually, interact in particular ways, or work together in other ways.     </summary>
			<returns>Indicates whether a stylistic set of a font form is enabled.ValueMeaningfalseStylistic set of a font form is disabled.trueStylistic set of a font form is enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet8">
			<summary> Gets or sets a value that indicates whether a stylistic set of a font form is enabled. Some fonts contain stylistic variant glyphs that correspond to portions of a character set. Glyphs in stylistic sets may be designed to harmonize visually, interact in particular ways, or work together in other ways.     </summary>
			<returns>Indicates whether a stylistic set of a font form is enabled.ValueMeaningfalseStylistic set of a font form is disabled.trueStylistic set of a font form is enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet9">
			<summary> Gets or sets a value that indicates whether a stylistic set of a font form is enabled. Some fonts contain stylistic variant glyphs that correspond to portions of a character set. Glyphs in stylistic sets may be designed to harmonize visually, interact in particular ways, or work together in other ways.     </summary>
			<returns>Indicates whether a stylistic set of a font form is enabled.ValueMeaningfalseStylistic set of a font form is disabled.trueStylistic set of a font form is enabled.</returns>
		</member>
		<member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.Variants">
			<summary> Gets or sets a value that indicates a variation of the standard typographic form should be used. Variants are similar to superscript or subscript font forms. It is possible for a font form to have glyph sets that differ between superscript and ordinal forms, or between subscript and inferior forms. </summary>
			<returns>Specifies the variants of the form.</returns>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextSimpleMarkerProperties">
			<summary> Generic implementation of text marker properties.</summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextSimpleMarkerProperties.#ctor(System.Windows.TextMarkerStyle,System.Double,System.Int32,System.Windows.Media.TextFormatting.TextParagraphProperties)">
			<summary> Construct a text marker object. </summary>
			<param name="offset">distance from line start to the end of the marker symbol.</param>
			<param name="autoNumberingIndex">autonumbering counter of counter-style marker.</param>
			<param name="textParagraphProperties">text paragraph properties.</param>
			<param name="style">marker style.</param>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextSource">
			<summary> Provides character data and formatting properties to the TextFormatter. All access to the text in the TextSource is achieved through the GetTextRun method, which is designed to allow the client to virtualize text in any way it chooses. This is an abstract class. </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextSource.#ctor">
			<summary> Initializes a new instance of TextSource. </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextSource.GetPrecedingText(System.Int32)">
			<summary> Instructs the TextFormatter to get the text span immediately before the specified TextSource position. </summary>
			<returns>The text span immediately before the specified text source character index.</returns>
			<param name="textSourceCharacterIndexLimit">Specifies the character index position where text retrieval stops.</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextSource.GetTextEffectCharacterIndexFromTextSourceCharacterIndex(System.Int32)">
			<summary> TextFormatter to map a text source character index to a text effect character index.</summary>
			<returns>the text effect index corresponding to the text source character index.</returns>
			<param name="textSourceCharacterIndex">text source character index</param>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextSource.GetTextRun(System.Int32)">
			<summary> Instructs TextFormatter to get a TextRun starting at a specified TextSource position. </summary>
			<returns>TextRun to be retrieved.</returns>
			<param name="textSourceCharacterIndex">Specifies the character index position in the TextSource  where the TextRun is retrieved.</param>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextSpan`1">
			<summary> A simple pairing of an object of type T and a run length </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextSpan`1.#ctor(System.Int32,`0)">
			<summary>Constructor for <see cref="T:System.Windows.Media.TextFormatting.TextSpan`1"></see></summary>
			<param name="value">Value associated with span</param>
			<param name="length">Number of characters in span</param>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextTabAlignment">
			<summary> This property determines how text is aligned at tab location. </summary>
		</member>
		<member name="F:System.Windows.Media.TextFormatting.TextTabAlignment.Center">
			<summary> Text is center-aligned at tab location. </summary>
		</member>
		<member name="F:System.Windows.Media.TextFormatting.TextTabAlignment.Character">
			<summary> Text is aligned at tab location at a specified character. </summary>
		</member>
		<member name="F:System.Windows.Media.TextFormatting.TextTabAlignment.Left">
			<summary> Text is left-aligned at tab location. </summary>
		</member>
		<member name="F:System.Windows.Media.TextFormatting.TextTabAlignment.Right">
			<summary> Text is right-aligned at tab location. </summary>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextTabProperties">
			<summary> Properties of user-defined tab. </summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextTabProperties.#ctor(System.Windows.Media.TextFormatting.TextTabAlignment,System.Double,System.Int32,System.Int32)">
			<summary> Construct tab properties. </summary>
			<param name="tabLeader">tab leader.</param>
			<param name="alignment">alignment of text at tab location.</param>
			<param name="location">tab location.</param>
			<param name="aligningChar">specific character in text that is aligned at tab location.</param>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextTrailingCharacterEllipsis">
			<summary> a collapsing properties to collapse whole line toward the end at character granularity and with ellipsis being the collapsing symbol.</summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextTrailingCharacterEllipsis.#ctor(System.Double,System.Windows.Media.TextFormatting.TextRunProperties)">
			<summary> Construct a text trailing character ellipsis collapsing properties. </summary>
			<param name="width">width in which collapsing is constrained to.</param>
			<param name="textRunProperties">text run properties of ellispis symbol.</param>
		</member>
		<member name="T:System.Windows.Media.TextFormatting.TextTrailingWordEllipsis">
			<summary> a collapsing properties to collapse whole line toward the end at word granularity and with ellipsis being the collapsing symbol.</summary>
		</member>
		<member name="M:System.Windows.Media.TextFormatting.TextTrailingWordEllipsis.#ctor(System.Double,System.Windows.Media.TextFormatting.TextRunProperties)">
			<summary> Construct a text trailing word ellipsis collapsing properties. </summary>
			<param name="width">width in which collapsing is constrained to</param>
			<param name="textRunProperties">text run properties of ellispis symbol</param>
		</member>
		<member name="N:System.Windows.Navigation">
			<summary>Provides classes and interfaces used for navigation, including navigating between windows, and navigation journaling.</summary>
		</member>
		<member name="N:System.Windows.Resources">
			<summary>Provides classes that support using resources in applications.</summary>
		</member>
		<member name="T:System.Windows.Resources.AssemblyAssociatedContentFileAttribute">
			<summary>This attribute is interpreted during the TLA#tla_xaml compilation process to associate loose content with a TLA#tla_winclient application.</summary>
		</member>
	</members>
</doc>